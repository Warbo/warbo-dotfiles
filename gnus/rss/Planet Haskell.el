;; -*- coding: utf-8-emacs; -*-
(setq nnrss-group-data '((214 (20954 60216 748062) "http://parenz.wordpress.com/2013/07/08/the-protocol-problem/" "Daniil Frumin: The Protocol Problem" nil "Mon, 08 Jul 2013 16:21:06 +0000" "<p>In the interactive-diagrams project we have a bunch of components (processes) running independently and even under different UIDs. They however need to communicate with each other, and we’ve decided to go full UNIX-way (since already most of our code depend on POSIX-compatibility) and use IPC/UNIX-sockets for communication.</p>
<p>Originally, I’ve implemented the following protocol for sending the<br />
data around:</p>
<p>When sending data:</p>
<ol class=\"org-ol\">
<li>Encode the data using the functions from the <a href=\"http://hackage.haskell.org/package/cereal\">cereal</a> package.</li>
<li>Take the ‘length’ of the resulting bytestring, send it over the<br />
socket.</li>
<li>Send the encoded data on the next line.</li>
</ol>
<p>Upon receiving data:</p>
<ol class=\"org-ol\">
<li>Read the first line, deserialize it to an <code>x :: Int</code></li>
<li>Read the the next <code>x</code> bytes, deserialize the data.</li>
</ol>
<p>A programmer experienced in the area would have probably already<br />
spotted an error in this approach, but for me it took some time to<br />
find a bug, once I’ve realised that I was getting deserialization<br />
errors from time to time.</p>
<p>The problem of course is that I was relying on reading lines from the<br />
socket, not bytes. For example, the number 2623 on my 64bit system has<br />
serialized to something with the newline character in it</p>
<div class=\"figure\">
<p><img src=\"http://orbt.io/Q6I3.png\" alt=\"Q6I3.png\" /></p>
</div>
<p>The solution to this problem is to read the first ’8′ (or ’4′) bytes<br />
to get the length of the upcoming data. To make sure that the number<br />
of bytes representing the length of the data is constant on all the<br />
platforms I’ve switched to using <code>Word32</code>.</p>
<p>This approach too, of course, is not prone to errors. If you are<br />
sending and receiving a lot of data consider using a streaming<br />
library.</p>
<p>PS: We’ve planned originally to release the first public alpha-version yesterday, but it turned out that it is actually taking more time configuring SELinux, chroots and other security measure than expected. I’ve also changed the general structure of the project, I am using a different design model than I had a week ago. The new changes would make the application more salable and the resulting library can (and most likely will) be reused for other stuff. Stay tuned!</p>
<br /> Tagged: <a href=\"http://parenz.wordpress.com/tag/haskell-2/\">haskell</a>, <a href=\"http://parenz.wordpress.com/tag/interactive-diagrams/\">interactive-diagrams</a>, <a href=\"http://parenz.wordpress.com/tag/networking/\">networking</a>, <a href=\"http://parenz.wordpress.com/tag/soc/\">soc</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/parenz.wordpress.com/74/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/parenz.wordpress.com/74/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=parenz.wordpress.com&blog=26722965&post=74&subd=parenz&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "fa0048c045e4d6ed9eced14a3289e8ca") (213 (20954 30960 949205) "http://kenta.blogspot.com/2013/07/kqfwttaf-random-access-to-random.html" "Ken T Takusagawa: [kqfwttaf] Random access to Random" "noreply@blogger.com (Ken)" "Mon, 08 Jul 2013 04:59:00 +0000" "<p dir=\"ltr\">A pseudorandom number generator implemented using a block cipher in Counter mode has the feature that one can fast-forward to any random number in the stream without having to generate the previous ones.  And rewind.  Can we leverage this feature to do interesting things not possible with a traditional RNG which operates by iterating a function on a state?</p><p dir=\"ltr\">Suppose we are modeling a Markov process.  Can we fast forward this process the same way?</p><p dir=\"ltr\">Probably not in general, but there may be interesting special cases.  An arbitrary Fibonacci number can be computed with the number of operations logarithmic in the index (not linear as the naive way of generating Fibonacci.)</p><p dir=\"ltr\">The oblique inspiration was the Haskell RandomGen \"split\" operation which allows random computations to be parallelized, again not possible for a traditional iterative RNG.</p><p dir=\"ltr\">Are there more interesting computational structures to generate randomness with interesting features?</p>" nil nil "3dbb401c1239919f8b11cafc94666675") (212 (20954 30960 948831) "http://joyful.com/blog/2013-07-07-darcsden-db-thoughts.html" "Simon Michael: darcsden db thoughts" nil "Sun, 07 Jul 2013 23:00:00 +0000" "<div style=\"font-style: italic;\">July  7, 2013</div>
<h2>darcsden db thoughts</h2>
<p>
</p><p>Spent about half of yesterday setting up <a href=\"http://hub.darcs.net/Aditya/darcsden-import/changes\">Aditya’s darcsden patches</a> on the dev instance of hub.darcs.net, testing them, and exploring db migration issues.</p>
<p>Following BSRK’s instructions, I got the dev instance authenticating via Google’s OAuth servers. Good progress. The UI flow I saw needs a bit more work - eg logging in with google seemed to want me to register a new account. Or, there may be a problem with my setup at Google (wrong callback urls ?) - will have to review it with BSRK.</p>
<h2 id=\"schema-migrations\">Schema, migrations</h2>
<p>My dev instance has so far been using the same database as the live production instance. This is partly because I don’t yet know how to run a second CouchDB instance, partly to reduce complexity, partly to be able to compare old and new code with the same realistic data set.</p>
<p>This of course can lead to trouble, if old and new code require different schemas. darcsden uses CouchDB, a “schemaless” database, but of course there is an implicit schema required by the application code, even if couch doesn’t enforce one. I got more clarity on this when I noticed my dev instance experiments causing errors on the production app.</p>
<p>New darcsden code may include changes to the (implicit) db schema. In this case, there’s a change to the user’s password field. I need to notice such schema changes, and if I want to exercise them on the dev instance, I should first also install them on the production instance. Or, use a separate couchdb instance. Or, use separate databases in the couchdb instance. Or possibly, use separate views in the couchdb databases ?</p>
<p>Eg, here BSRK made the code nicely read user documents (db records) with the old or new schema. Before testing it on the shared db I should have deployed that patch to production as well as dev.</p>
<p>Looking ahead, is this approach (including code to deal with all old schemas) the best way to handle this ? Maybe. It makes things work and seems convenient, at least for now. But it also reminds me of years working with Zope’s ZODB (a schemaless python object database) and the layers of on-the-fly schema updating that built up, and the uncounted number of runtime bugs hunted down due to schema variations in individual objects.</p>
<h2 id=\"schema-less-or-schema-ful\">Schema-less or schema-ful ?</h2>
<p>While recovering from this, I learned some more about managing couchdb, schema migration, and current couchdb alternatives.</p>
<p>Couch has some really good and unusual qualities, and I feel I’m only scratching the surface of it’s power. Even so, I’m starting to feel a schema-ful, relational database is a better fit for darcsden/darcs hub. Replacing couch has been a topic of discussion on #darcs for some time, for other reasons. Here are some reasons to replace it:</p>
<ul>
<li><p>darcsden (more particularly, the instance running darcs hub, which has a lot of long-lived data) works best when all records have the same shape. It gains nothing from the flexibility of a loose schema, in fact will break, at runtime and unpredictably, unless you have extra code that handles all variations perfectly (a hard thing to test).</p></li>
<li><p>couchdb makes darcsden harder to set up, eg on windows. This makes it less successful in its goal to be an easy single-user ui for local darcs repos. It also reduces the number of darcsden hackers.</p></li>
<li><p>it adds complexity by embedding application code in the db. Instead of all logic being in haskell, the darcsden developer has to also deal with design documents and javascript map/reduce functions, and manage the state of those within the db.</p></li>
<li><p>it adds complexity by being less familiar to most people than rdbms system, and by having less mature tools.</p></li>
<li><p>persistent, the likely alternative, would more easily support both large installations (eg postgres for darcs hub) and single-user ones (sqlite) with less code.</p></li>
</ul>
<p>Some reasons not to:</p>
<ul>
<li><p>Don’t replace working code!</p></li>
<li><p>Replacing it could be wasted effort, better spent fixing end-user bugs on darcs hub.</p></li>
<li><p>The migration issue can easily be worked around. It’s not that big a deal for this instance.</p></li>
<li><p>Don’t disrupt the GSOC in progress!</p></li>
</ul>" nil nil "672a1abec3badeb1ee7b14f83e466ab3") (211 (20954 30960 948013) "http://feedproxy.google.com/~r/FpComplete/~3/FaTU0eHhtDI/beta-activation-update" "FP Complete: FP Haskell Center Beta Sign-Up Still Open. Scheduled Activations Ongoing" nil "Fri, 05 Jul 2013 19:51:00 +0000" "<p>﻿<b>FP Haskell Center Beta Sign-Up Still Open.  Scheduled Activations Ongoing.</b></p><p>We got many enthusiastic beta testers asking “I am all ready to test the product.  When can I get activated?”   Here’s the story: we started activating beta sign ups since last Sunday, based on a schedule of increasing numbers each day.  We have over 1,000 sign-ups to-date, so we expect to activate all by July 15.  If you already signed up and haven’t received notice yet to activate, please wait a few more days, we will get to all of you.  There is NO NEED TO SIGN-UP AGAIN.</p><p>If you haven’t signed up yet, by all means do, here: https://www.fpcomplete.com/business/designer-ide. </p><p>All of us at FP Complete are excited and gratified by the mostly positive comments about the product based on the <a href=\"https://www.fpcomplete.com/blog/2013/06/fp-haskell-center-beta-demo\">video walkthrough</a> of the product.  We are eagerly awaiting the feedback from you as you are testing the product.  Thanks in advance!</p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=FaTU0eHhtDI:sIRcM0MY9xM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=FaTU0eHhtDI:sIRcM0MY9xM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=FaTU0eHhtDI:sIRcM0MY9xM:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=FaTU0eHhtDI:sIRcM0MY9xM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=FaTU0eHhtDI:sIRcM0MY9xM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=FaTU0eHhtDI:sIRcM0MY9xM:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/FaTU0eHhtDI\" height=\"1\" width=\"1\" />" nil nil "115d34f590e73d777135a427f63d89d6") (210 (20954 30960 947381) "http://twanvl.nl/blog/agda/cong-from-refl" "Twan van Laarhoven: cong from refl in univalent OTT" nil "Thu, 04 Jul 2013 16:00:00 +0000" "<p>This is a follow up on <a href=\"http://twanvl.nl/blog/agda/subst-from-cong\">last week's post</a>.
There I showed that in a univalent Observational Type Theory, you can derive <tt><span class=\"varid\">subst</span></tt> from <tt><span class=\"varid\">cong</span></tt>.
Now I am going to go one step further.
</p><p>Suppose we change the definition of paths for functions from
</p><pre class=\"agda\"><span class=\"conid\">Path</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">≡</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">f</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">g</span> <span class=\"varid\">x</span>
</pre><p>to
</p><pre class=\"agda\"><span class=\"conid\">Path</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">≡</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">y</span>} <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">f</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">g</span> <span class=\"varid\">y</span>
</pre><p>Then for a function <tt><span class=\"varid\">f</span></tt>, <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"varid\">f</span></tt> is actually the same thing as <tt class=\"complex\"><span class=\"varid\">cong</span> <span class=\"varid\">f</span></tt>!.
So that's one less primitive to worry about. In fact the only two path related primitives that remain are <tt><span class=\"conid\">Path</span></tt> and <tt><span class=\"varid\">refl</span></tt>. The rest is just in the computation rules.
</p><p>Here are the changes in the agda code compared to last week:
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span> <span class=\"conid\">Path-→</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span>
<span class=\"varop\">≡</span> ((<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">B</span> (<span class=\"varid\">f</span> <span class=\"varid\">x</span>) (<span class=\"varid\">g</span> <span class=\"varid\">y</span>))
<div class=\"empty-line\"></div>
<span class=\"comment\">-- cong = refl</span>
<span class=\"varid\">cong</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">f</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"keyglyph\">→</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">y</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">B</span> (<span class=\"varid\">f</span> <span class=\"varid\">x</span>) (<span class=\"varid\">f</span> <span class=\"varid\">y</span>)
<span class=\"varid\">cong</span> <span class=\"varid\">f</span> <span class=\"varid\">x=y</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">Meta.subst</span> <span class=\"varid\">id</span> (<span class=\"conid\">Path-→</span> <span class=\"varid\">f</span> <span class=\"varid\">f</span>) (<span class=\"varid\">refl</span> <span class=\"keyglyph\">_</span> <span class=\"varid\">f</span>) <span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span> <span class=\"varid\">x=y</span>
<div class=\"empty-line\"></div>
<span class=\"comment\">-- subst is the same as last time</span>
<span class=\"varid\">subst</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} (<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>)
<span class=\"keyglyph\">→</span> {<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">y</span>
<span class=\"varid\">subst</span> <span class=\"conid\">B</span> {<span class=\"varid\">x</span>} {<span class=\"varid\">y</span>} <span class=\"varid\">p</span> <span class=\"varid\">with</span> <span class=\"varid\">Meta.subst</span> <span class=\"varid\">id</span> (<span class=\"conid\">Path-Type</span> (<span class=\"conid\">B</span> <span class=\"varid\">x</span>) (<span class=\"conid\">B</span> <span class=\"varid\">y</span>)) (<span class=\"varid\">cong</span> <span class=\"conid\">B</span> <span class=\"varid\">p</span>)
<span class=\"varop\">...</span> <span class=\"keyglyph\">|</span> <span class=\"varid\">lift</span> (<span class=\"varid\">fw</span> , <span class=\"varid\">bw</span> , <span class=\"keyglyph\">_</span> , <span class=\"keyglyph\">_</span>) <span class=\"keyglyph\">=</span> <span class=\"varid\">fw</span>
<div class=\"empty-line\"></div>
<span class=\"comment\">-- and paths for dependent functions</span>
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Π</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">:</span> <span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span>
<span class=\"varop\">≡</span> ((<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> (<span class=\"varid\">pa</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">B</span> <span class=\"varid\">y</span>) (<span class=\"varid\">subst</span> <span class=\"conid\">B</span> <span class=\"varid\">pa</span> (<span class=\"varid\">f</span> <span class=\"varid\">x</span>)) (<span class=\"varid\">g</span> <span class=\"varid\">y</span>))
</pre><p>Of course this doesn't really change anything, since defining <tt><span class=\"varid\">refl</span></tt> for function types is no easier than defining <tt><span class=\"varid\">cong</span></tt>.
</p><h2><a name=\"representation\"></a>Representation </h2>
<p>You might also notice that for all types <tt><span class=\"conid\">A</span></tt> (except <tt><span class=\"conid\">Set</span></tt>), the structure of <tt class=\"complex\"><span class=\"conid\">Path</span> <span class=\"conid\">A</span></tt> is essentially the same as that of <tt><span class=\"conid\">A</span></tt>. In fact, for a (non-indexed) data type
</p><pre class=\"agda\"><span class=\"keyword\">data</span> <span class=\"conid\">Foo</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"keyword\">where</span>
<span class=\"varid\">foo₀</span> <span class=\"varop\">:</span> <span class=\"conid\">Foo</span>
<span class=\"varid\">foo₁</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Foo</span>
<span class=\"varid\">foo₂</span> <span class=\"varop\">:</span> <span class=\"conid\">Foo</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Foo</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Foo</span>
</pre><p>you can mechanically derive its path type to be
</p><pre class=\"agda\"><span class=\"keyword\">data</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> <span class=\"varop\">:</span> <span class=\"conid\">Foo</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Foo</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"keyword\">where</span>
<span class=\"varid\">refl-foo₀</span>  <span class=\"varop\">:</span> <span class=\"conid\">Path</span> (<span class=\"varid\">foo₀</span> <span class=\"varid\">x</span>) (<span class=\"varid\">foo₀</span> <span class=\"varid\">x</span>)
<span class=\"varid\">cong₁-foo₁</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">x'</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x'</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> (<span class=\"varid\">foo₁</span> <span class=\"varid\">x</span>) (<span class=\"varid\">foo₁</span> <span class=\"varid\">x'</span>)
<span class=\"varid\">cong₂-foo₂</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">x'</span> <span class=\"varid\">y</span> <span class=\"varid\">y'</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> <span class=\"varid\">x</span> <span class=\"varid\">x'</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> <span class=\"varid\">y</span> <span class=\"varid\">y'</span>
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> (<span class=\"varid\">foo₂</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) (<span class=\"varid\">foo₂</span> <span class=\"varid\">x'</span> <span class=\"varid\">y'</span>)
</pre><p>In theory this allows for a nice implementation trick: we can take the representation of <tt><span class=\"varid\">x</span></tt> and <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"varid\">x</span></tt> to be the same. So for example <tt class=\"complex\"><span class=\"num\">5</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">Int</span> <span class=\"num\">5</span> <span class=\"num\">5</span></tt> is a path that asserts that 5 = 5, and it is the only such path.
</p><p>Originally I thought that an implementation would have to pass <tt class=\"complex\"><span class=\"varid\">cong</span> <span class=\"varid\">f</span></tt> along with every parameter <tt><span class=\"varid\">f</span></tt> of a function type (which would suck). But in this way we don't have to, since <tt><span class=\"varid\">f</span></tt> and <tt class=\"complex\"><span class=\"varid\">cong</span> <span class=\"varid\">f</span></tt> are the same function.
</p><p>This also corresponds nicely to the idea that extra path constructors can be added in Higher Inductive Types. But I am not quite sure yet how that works out.
</p><h2><a name=\"food-for-thought\"></a>Food for thought </h2>
<ul><li> What is <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"keyglyph\">_</span><span class=\"keyglyph\">→</span><span class=\"keyglyph\">_</span></tt>?</li>
<li> What is <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"varid\">refl</span></tt>? Does this even make sense?</li>
<li> For the representation of <tt class=\"complex\"><span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span></tt> and <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"varid\">x</span></tt> to be the same, <tt><span class=\"conid\">A</span></tt> and <tt class=\"complex\"><span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x</span></tt> also need to have the same representation. That seems works for functions and inductive types, but what about <tt><span class=\"conid\">Set</span></tt>?</li>
<li> Is <tt><span class=\"conid\">Path</span></tt> an applicative functor in some sense? With <tt><span class=\"varid\">refl</span></tt> as return and <tt><span class=\"varid\">cong</span></tt> as ap?</li>
</ul>" nil nil "f1c38fa920b77fe47ab694ea07524171") (209 (20954 29022 109328) "http://kenta.blogspot.com/2013/07/kqfwttaf-random-access-to-random.html" "Ken T Takusagawa: [kqfwttaf] Random access to Random" "noreply@blogger.com (Ken)" "Mon, 08 Jul 2013 04:59:00 +0000" "<p dir=\"ltr\">A pseudorandom number generator implemented using a block cipher in Counter mode has the feature that one can fast-forward to any random number in the stream without having to generate the previous ones.  And rewind.  Can we leverage this feature to do interesting things not possible with a traditional RNG which operates by iterating a function on a state?</p><p dir=\"ltr\">Suppose we are modeling a Markov process.  Can we fast forward this process the same way?</p><p dir=\"ltr\">Probably not in general, but there may be interesting special cases.  An arbitrary Fibonacci number can be computed with the number of operations logarithmic in the index (not linear as the naive way of generating Fibonacci.)</p><p dir=\"ltr\">The oblique inspiration was the Haskell RandomGen \"split\" operation which allows random computations to be parallelized, again not possible for a traditional iterative RNG.</p><p dir=\"ltr\">Are there more interesting computational structures to generate randomness with interesting features?</p>" nil nil "66182219f0b7b9fedb5456390d592793") (208 (20954 29022 108920) "http://joyful.com/blog/2013-07-07-darcsden-db-thoughts.html" "Simon Michael: darcsden db thoughts" nil "Sun, 07 Jul 2013 23:00:00 +0000" "<div style=\"font-style: italic;\">July  7, 2013</div>
<h2>darcsden db thoughts</h2>
<p>
</p><p>Spent about half of yesterday setting up <a href=\"http://hub.darcs.net/Aditya/darcsden-import/changes\">Aditya’s darcsden patches</a> on the dev instance of hub.darcs.net, testing them, and exploring db migration issues.</p>
<p>Following BSRK’s instructions, I got the dev instance authenticating via Google’s OAuth servers. Good progress. The UI flow I saw needs a bit more work - eg logging in with google seemed to want me to register a new account. Or, there may be a problem with my setup at Google (wrong callback urls ?) - will have to review it with BSRK.</p>
<h2 id=\"schema-migrations\">Schema, migrations</h2>
<p>My dev instance has so far been using the same database as the live production instance. This is partly because I don’t yet know how to run a second CouchDB instance, partly to reduce complexity, partly to be able to compare old and new code with the same realistic data set.</p>
<p>This of course can lead to trouble, if old and new code require different schemas. darcsden uses CouchDB, a “schemaless” database, but of course there is an implicit schema required by the application code, even if couch doesn’t enforce one. I got more clarity on this when I noticed my dev instance experiments causing errors on the production app.</p>
<p>New darcsden code may include changes to the (implicit) db schema. In this case, there’s a change to the user’s password field. I need to notice such schema changes, and if I want to exercise them on the dev instance, I should first also install them on the production instance. Or, use a separate couchdb instance. Or, use separate databases in the couchdb instance. Or possibly, use separate views in the couchdb databases ?</p>
<p>Eg, here BSRK made the code nicely read user documents (db records) with the old or new schema. Before testing it on the shared db I should have deployed that patch to production as well as dev.</p>
<p>Looking ahead, is this approach (including code to deal with all old schemas) the best way to handle this ? Maybe. It makes things work and seems convenient, at least for now. But it also reminds me of years working with Zope’s ZODB (a schemaless python object database) and the layers of on-the-fly schema updating that built up, and the uncounted number of runtime bugs hunted down due to schema variations in individual objects.</p>
<h2 id=\"schema-less-or-schema-ful\">Schema-less or schema-ful ?</h2>
<p>While recovering from this, I learned some more about managing couchdb, schema migration, and current couchdb alternatives.</p>
<p>Couch has some really good and unusual qualities, and I feel I’m only scratching the surface of it’s power. Even so, I’m starting to feel a schema-ful, relational database is a better fit for darcsden/darcs hub. Replacing couch has been a topic of discussion on #darcs for some time, for other reasons. Here are some reasons to replace it:</p>
<ul>
<li><p>darcsden (more particularly, the instance running darcs hub, which has a lot of long-lived data) works best when all records have the same shape. It gains nothing from the flexibility of a loose schema, in fact will break, at runtime and unpredictably, unless you have extra code that handles all variations perfectly (a hard thing to test).</p></li>
<li><p>couchdb makes darcsden harder to set up, eg on windows. This makes it less successful in its goal to be an easy single-user ui for local darcs repos. It also reduces the number of darcsden hackers.</p></li>
<li><p>it adds complexity by embedding application code in the db. Instead of all logic being in haskell, the darcsden developer has to also deal with design documents and javascript map/reduce functions, and manage the state of those within the db.</p></li>
<li><p>it adds complexity by being less familiar to most people than rdbms system, and by having less mature tools.</p></li>
<li><p>persistent, the likely alternative, would more easily support both large installations (eg postgres for darcs hub) and single-user ones (sqlite) with less code.</p></li>
</ul>
<p>Some reasons not to:</p>
<ul>
<li><p>Don’t replace working code!</p></li>
<li><p>Replacing it could be wasted effort, better spent fixing end-user bugs on darcs hub.</p></li>
<li><p>The migration issue can easily be worked around. It’s not that big a deal for this instance.</p></li>
<li><p>Don’t disrupt the GSOC in progress!</p></li>
</ul>" nil nil "2c528a4f608e2f69171a4c2a948d665d") (207 (20954 29022 108053) "http://feedproxy.google.com/~r/FpComplete/~3/FaTU0eHhtDI/beta-activation-update" "FP Complete: FP Haskell Center Beta Sign-Up Still Open. Scheduled Activations Ongoing" nil "Fri, 05 Jul 2013 19:51:00 +0000" "<p>﻿<b>FP Haskell Center Beta Sign-Up Still Open.  Scheduled Activations Ongoing.</b></p><p>We got many enthusiastic beta testers asking “I am all ready to test the product.  When can I get activated?”   Here’s the story: we started activating beta sign ups since last Sunday, based on a schedule of increasing numbers each day.  We have over 1,000 sign-ups to-date, so we expect to activate all by July 15.  If you already signed up and haven’t received notice yet to activate, please wait a few more days, we will get to all of you.  There is NO NEED TO SIGN-UP AGAIN.</p><p>If you haven’t signed up yet, by all means do, here: https://www.fpcomplete.com/business/designer-ide. </p><p>All of us at FP Complete are excited and gratified by the mostly positive comments about the product based on the <a href=\"https://www.fpcomplete.com/blog/2013/06/fp-haskell-center-beta-demo\">video walkthrough</a> of the product.  We are eagerly awaiting the feedback from you as you are testing the product.  Thanks in advance!</p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=FaTU0eHhtDI:sIRcM0MY9xM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=FaTU0eHhtDI:sIRcM0MY9xM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=FaTU0eHhtDI:sIRcM0MY9xM:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=FaTU0eHhtDI:sIRcM0MY9xM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=FaTU0eHhtDI:sIRcM0MY9xM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=FaTU0eHhtDI:sIRcM0MY9xM:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/FaTU0eHhtDI\" height=\"1\" width=\"1\" />" nil nil "2fa5746fe54c4aaf4ead17a44677d79c") (206 (20950 32338 770086) "http://twanvl.nl/blog/agda/cong-from-refl" "Twan van Laarhoven: cong from refl in univalent OTT" nil "Thu, 04 Jul 2013 16:00:00 +0000" "<p>This is a follow up on <a href=\"http://www.twanvl.nl/blog/agda/subst-from-cong\">last week's post</a>.
There I showed that in a univalent Observational Type Theory, you can derive <tt><span class=\"varid\">subst</span></tt> from <tt><span class=\"varid\">cong</span></tt>.
Now I am going to go one step further.
</p><p>Suppose we change the definition of paths for functions from
</p><pre class=\"agda\"><span class=\"conid\">Path</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">≡</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">f</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">g</span> <span class=\"varid\">x</span>
</pre><p>to
</p><pre class=\"agda\"><span class=\"conid\">Path</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">≡</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">y</span>} <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">f</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">g</span> <span class=\"varid\">y</span>
</pre><p>Then for a function <tt><span class=\"varid\">f</span></tt>, <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"varid\">f</span></tt> is actually the same thing as <tt class=\"complex\"><span class=\"varid\">cong</span> <span class=\"varid\">f</span></tt>!.
So that's one less primitive to worry about. In fact the only two path related primitives that remain are <tt><span class=\"conid\">Path</span></tt> and <tt><span class=\"varid\">refl</span></tt>. The rest is just in the computation rules.
</p><p>Here are the changes in the agda code compared to last week:
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span> <span class=\"conid\">Path-→</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span>
<span class=\"varop\">≡</span> ((<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">B</span> (<span class=\"varid\">f</span> <span class=\"varid\">x</span>) (<span class=\"varid\">g</span> <span class=\"varid\">y</span>))
<div class=\"empty-line\"></div>
<span class=\"comment\">-- cong = refl</span>
<span class=\"varid\">cong</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">f</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"keyglyph\">→</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">y</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">B</span> (<span class=\"varid\">f</span> <span class=\"varid\">x</span>) (<span class=\"varid\">f</span> <span class=\"varid\">y</span>)
<span class=\"varid\">cong</span> <span class=\"varid\">f</span> <span class=\"varid\">x=y</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">Meta.subst</span> <span class=\"varid\">id</span> (<span class=\"conid\">Path-→</span> <span class=\"varid\">f</span> <span class=\"varid\">f</span>) (<span class=\"varid\">refl</span> <span class=\"keyglyph\">_</span> <span class=\"varid\">f</span>) <span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span> <span class=\"varid\">x=y</span>
<div class=\"empty-line\"></div>
<span class=\"comment\">-- subst is the same as last time</span>
<span class=\"varid\">subst</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} (<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>)
<span class=\"keyglyph\">→</span> {<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">y</span>
<span class=\"varid\">subst</span> <span class=\"conid\">B</span> {<span class=\"varid\">x</span>} {<span class=\"varid\">y</span>} <span class=\"varid\">p</span> <span class=\"varid\">with</span> <span class=\"varid\">Meta.subst</span> <span class=\"varid\">id</span> (<span class=\"conid\">Path-Type</span> (<span class=\"conid\">B</span> <span class=\"varid\">x</span>) (<span class=\"conid\">B</span> <span class=\"varid\">y</span>)) (<span class=\"varid\">cong</span> <span class=\"conid\">B</span> <span class=\"varid\">p</span>)
<span class=\"varop\">...</span> <span class=\"keyglyph\">|</span> <span class=\"varid\">lift</span> (<span class=\"varid\">fw</span> , <span class=\"varid\">bw</span> , <span class=\"keyglyph\">_</span> , <span class=\"keyglyph\">_</span>) <span class=\"keyglyph\">=</span> <span class=\"varid\">fw</span>
<div class=\"empty-line\"></div>
<span class=\"comment\">-- and paths for dependent functions</span>
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Π</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">:</span> <span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span>
<span class=\"varop\">≡</span> ((<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> (<span class=\"varid\">pa</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">B</span> <span class=\"varid\">y</span>) (<span class=\"varid\">subst</span> <span class=\"conid\">B</span> <span class=\"varid\">pa</span> (<span class=\"varid\">f</span> <span class=\"varid\">x</span>)) (<span class=\"varid\">g</span> <span class=\"varid\">y</span>))
</pre><p>Of course this doesn't really change anything, since defining <tt><span class=\"varid\">refl</span></tt> for function types is no easier than defining <tt><span class=\"varid\">cong</span></tt>.
</p><h2><a name=\"representation\"></a>Representation </h2>
<p>You might also notice that for all types <tt><span class=\"conid\">A</span></tt> (except <tt><span class=\"conid\">Set</span></tt>), the structure of <tt class=\"complex\"><span class=\"conid\">Path</span> <span class=\"conid\">A</span></tt> is essentially the same as that of <tt><span class=\"conid\">A</span></tt>. In fact, for a (non-indexed) data type
</p><pre class=\"agda\"><span class=\"keyword\">data</span> <span class=\"conid\">Foo</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"keyword\">where</span>
<span class=\"varid\">foo₀</span> <span class=\"varop\">:</span> <span class=\"conid\">Foo</span>
<span class=\"varid\">foo₁</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Foo</span>
<span class=\"varid\">foo₂</span> <span class=\"varop\">:</span> <span class=\"conid\">Foo</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Foo</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Foo</span>
</pre><p>you can mechanically derive its path type to be
</p><pre class=\"agda\"><span class=\"keyword\">data</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> <span class=\"varop\">:</span> <span class=\"conid\">Foo</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Foo</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"keyword\">where</span>
<span class=\"varid\">refl-foo₀</span>  <span class=\"varop\">:</span> <span class=\"conid\">Path</span> (<span class=\"varid\">foo₀</span> <span class=\"varid\">x</span>) (<span class=\"varid\">foo₀</span> <span class=\"varid\">x</span>)
<span class=\"varid\">cong₁-foo₁</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">x'</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x'</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> (<span class=\"varid\">foo₁</span> <span class=\"varid\">x</span>) (<span class=\"varid\">foo₁</span> <span class=\"varid\">x'</span>)
<span class=\"varid\">cong₂-foo₂</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">x'</span> <span class=\"varid\">y</span> <span class=\"varid\">y'</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> <span class=\"varid\">x</span> <span class=\"varid\">x'</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> <span class=\"varid\">y</span> <span class=\"varid\">y'</span>
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> (<span class=\"varid\">foo₂</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) (<span class=\"varid\">foo₂</span> <span class=\"varid\">x'</span> <span class=\"varid\">y'</span>)
</pre><p>In theory this allows for a nice implementation trick: we can take the representation of <tt><span class=\"varid\">x</span></tt> and <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"varid\">x</span></tt> to be the same. So for example <tt class=\"complex\"><span class=\"num\">5</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">Int</span> <span class=\"num\">5</span> <span class=\"num\">5</span></tt> is a path that asserts that 5 = 5, and it is the only such path.
</p><p>Originally I thought that an implementation would have to pass <tt class=\"complex\"><span class=\"varid\">cong</span> <span class=\"varid\">f</span></tt> along with every parameter <tt><span class=\"varid\">f</span></tt> of a function type (which would suck). But in this way we don't have to, since <tt><span class=\"varid\">f</span></tt> and <tt class=\"complex\"><span class=\"varid\">cong</span> <span class=\"varid\">f</span></tt> are the same function.
</p><p>This also corresponds nicely to the idea that extra path constructors can be added in Higher Inductive Types. But I am not quite sure yet how that works out.
</p><h2><a name=\"food-for-thought\"></a>Food for thought </h2>
<ul><li> What is <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"keyglyph\">_</span><span class=\"keyglyph\">→</span><span class=\"keyglyph\">_</span></tt>?</li>
<li> What is <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"varid\">refl</span></tt>? Does this even make sense?</li>
<li> For the representation of <tt class=\"complex\"><span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span></tt> and <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"varid\">x</span></tt> to be the same, <tt><span class=\"conid\">A</span></tt> and <tt class=\"complex\"><span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x</span></tt> also need to have the same representation. That seems works for functions and inductive types, but what about <tt><span class=\"conid\">Set</span></tt>?</li>
<li> Is <tt><span class=\"conid\">Path</span></tt> an applicative functor in some sense? With <tt><span class=\"varid\">refl</span></tt> as return and <tt><span class=\"varid\">cong</span></tt> as ap?</li>
</ul>" nil nil "73f979147a49300c4f6c4ee0e38be394") (205 (20949 42001 578573) "http://twanvl.nl/blog/agda/cong-from-refl" "Twan van Laarhoven: cong from refl in univalent OTT" nil "Thu, 04 Jul 2013 16:00:00 +0000" "<p>This is a follow up on <a href=\"http://twanvl.nl/blog/agda/subst-from-cong\">last week's post</a>.
There I showed that in a univalent Observational Type Theory, you can derive <tt><span class=\"varid\">subst</span></tt> from <tt><span class=\"varid\">cong</span></tt>.
Now I am going to go one step further.
</p><p>Suppose we change the definition of paths for functions from
</p><pre class=\"agda\"><span class=\"conid\">Path</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">≡</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">f</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">g</span> <span class=\"varid\">x</span>
</pre><p>to
</p><pre class=\"agda\"><span class=\"conid\">Path</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">≡</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">y</span>} <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">f</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">g</span> <span class=\"varid\">y</span>
</pre><p>Then for a function <tt><span class=\"varid\">f</span></tt>, <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"varid\">f</span></tt> is actually the same thing as <tt class=\"complex\"><span class=\"varid\">cong</span> <span class=\"varid\">f</span></tt>!.
So that's one less primitive to worry about. In fact the only two path related primitives that remain are <tt><span class=\"conid\">Path</span></tt> and <tt><span class=\"varid\">refl</span></tt>. The rest is just in the computation rules.
</p><p>Here are the changes in the agda code compared to last week:
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span> <span class=\"conid\">Path-→</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span>
<span class=\"varop\">≡</span> ((<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">B</span> (<span class=\"varid\">f</span> <span class=\"varid\">x</span>) (<span class=\"varid\">g</span> <span class=\"varid\">y</span>))
<div class=\"empty-line\"></div>
<span class=\"comment\">-- cong = refl</span>
<span class=\"varid\">cong</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">f</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"keyglyph\">→</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">y</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">B</span> (<span class=\"varid\">f</span> <span class=\"varid\">x</span>) (<span class=\"varid\">f</span> <span class=\"varid\">y</span>)
<span class=\"varid\">cong</span> <span class=\"varid\">f</span> <span class=\"varid\">x=y</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">Meta.subst</span> <span class=\"varid\">id</span> (<span class=\"conid\">Path-→</span> <span class=\"varid\">f</span> <span class=\"varid\">f</span>) (<span class=\"varid\">refl</span> <span class=\"keyglyph\">_</span> <span class=\"varid\">f</span>) <span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span> <span class=\"varid\">x=y</span>
<div class=\"empty-line\"></div>
<span class=\"comment\">-- subst is the same as last time</span>
<span class=\"varid\">subst</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} (<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>)
<span class=\"keyglyph\">→</span> {<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">y</span>
<span class=\"varid\">subst</span> <span class=\"conid\">B</span> {<span class=\"varid\">x</span>} {<span class=\"varid\">y</span>} <span class=\"varid\">p</span> <span class=\"varid\">with</span> <span class=\"varid\">Meta.subst</span> <span class=\"varid\">id</span> (<span class=\"conid\">Path-Type</span> (<span class=\"conid\">B</span> <span class=\"varid\">x</span>) (<span class=\"conid\">B</span> <span class=\"varid\">y</span>)) (<span class=\"varid\">cong</span> <span class=\"conid\">B</span> <span class=\"varid\">p</span>)
<span class=\"varop\">...</span> <span class=\"keyglyph\">|</span> <span class=\"varid\">lift</span> (<span class=\"varid\">fw</span> , <span class=\"varid\">bw</span> , <span class=\"keyglyph\">_</span> , <span class=\"keyglyph\">_</span>) <span class=\"keyglyph\">=</span> <span class=\"varid\">fw</span>
<div class=\"empty-line\"></div>
<span class=\"comment\">-- and paths for dependent functions</span>
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Π</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">:</span> <span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span>
<span class=\"varop\">≡</span> ((<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> (<span class=\"varid\">pa</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">B</span> <span class=\"varid\">y</span>) (<span class=\"varid\">subst</span> <span class=\"conid\">B</span> <span class=\"varid\">pa</span> (<span class=\"varid\">f</span> <span class=\"varid\">x</span>)) (<span class=\"varid\">g</span> <span class=\"varid\">y</span>))
</pre><p>Of course this doesn't really change anything, since defining <tt><span class=\"varid\">refl</span></tt> for function types is no easier than defining <tt><span class=\"varid\">cong</span></tt>.
</p><h2><a name=\"representation\"></a>Representation </h2>
<p>You might also notice that for all types <tt><span class=\"conid\">A</span></tt> (except <tt><span class=\"conid\">Set</span></tt>), the structure of <tt class=\"complex\"><span class=\"conid\">Path</span> <span class=\"conid\">A</span></tt> is essentially the same as that of <tt><span class=\"conid\">A</span></tt>. In fact, for a (non-indexed) data type
</p><pre class=\"agda\"><span class=\"keyword\">data</span> <span class=\"conid\">Foo</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"keyword\">where</span>
<span class=\"varid\">foo₀</span> <span class=\"varop\">:</span> <span class=\"conid\">Foo</span>
<span class=\"varid\">foo₁</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Foo</span>
<span class=\"varid\">foo₂</span> <span class=\"varop\">:</span> <span class=\"conid\">Foo</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Foo</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Foo</span>
</pre><p>you can mechanically derive its path type to be
</p><pre class=\"agda\"><span class=\"keyword\">data</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> <span class=\"varop\">:</span> <span class=\"conid\">Foo</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Foo</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"keyword\">where</span>
<span class=\"varid\">refl-foo₀</span>  <span class=\"varop\">:</span> <span class=\"conid\">Path</span> (<span class=\"varid\">foo₀</span> <span class=\"varid\">x</span>) (<span class=\"varid\">foo₀</span> <span class=\"varid\">x</span>)
<span class=\"varid\">cong₁-foo₁</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">x'</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x'</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> (<span class=\"varid\">foo₁</span> <span class=\"varid\">x</span>) (<span class=\"varid\">foo₁</span> <span class=\"varid\">x'</span>)
<span class=\"varid\">cong₂-foo₂</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">x'</span> <span class=\"varid\">y</span> <span class=\"varid\">y'</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> <span class=\"varid\">x</span> <span class=\"varid\">x'</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> <span class=\"varid\">y</span> <span class=\"varid\">y'</span>
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">Foo</span> (<span class=\"varid\">foo₂</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) (<span class=\"varid\">foo₂</span> <span class=\"varid\">x'</span> <span class=\"varid\">y'</span>)
</pre><p>In theory this allows for a nice implementation trick: we can take the representation of <tt><span class=\"varid\">x</span></tt> and <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"varid\">x</span></tt> to be the same. So for example <tt class=\"complex\"><span class=\"num\">5</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">Int</span> <span class=\"num\">5</span> <span class=\"num\">5</span></tt> is a path that asserts that 5 = 5, and it is the only such path.
</p><p>Originally I thought that an implementation would have to pass <tt class=\"complex\"><span class=\"varid\">cong</span> <span class=\"varid\">f</span></tt> along with every parameter <tt><span class=\"varid\">f</span></tt> of a function type (which would suck). But in this way we don't have to, since <tt><span class=\"varid\">f</span></tt> and <tt class=\"complex\"><span class=\"varid\">cong</span> <span class=\"varid\">f</span></tt> are the same function.
</p><p>This also corresponds nicely to the idea that extra path constructors can be added in Higher Inductive Types. But I am not quite sure yet how that works out.
</p><h2><a name=\"food-for-thought\"></a>Food for thought </h2>
<ul><li> What is <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"keyglyph\">_</span><span class=\"keyglyph\">→</span><span class=\"keyglyph\">_</span></tt>?</li>
<li> What is <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"varid\">refl</span></tt>? Does this even make sense?</li>
<li> For the representation of <tt class=\"complex\"><span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span></tt> and <tt class=\"complex\"><span class=\"varid\">refl</span> <span class=\"varid\">x</span></tt> to be the same, <tt><span class=\"conid\">A</span></tt> and <tt class=\"complex\"><span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x</span></tt> also need to have the same representation. That seems works for functions and inductive types, but what about <tt><span class=\"conid\">Set</span></tt>?</li>
<li> Is <tt><span class=\"conid\">Path</span></tt> an applicative functor in some sense? With <tt><span class=\"varid\">refl</span></tt> as return and <tt><span class=\"varid\">cong</span></tt> as ap?</li>
</ul>" nil nil "a9f1581cdc18c9e4646154588be31dc8") (204 (20949 25792 680659) "http://winterkoninkje.dreamwidth.org/84727.html" "wren ng thornton: Bitties" nil "Wed, 03 Jul 2013 03:57:07 +0000" "<p>Just got back from <a href=\"http://www.cs.cornell.edu/Conferences/MFPS29/\">MFPS</a>-<a href=\"http://lii.rwth-aachen.de/lics/lics13/\">LICS</a>-<a href=\"http://csf2013.seas.harvard.edu/index.html\">CSF</a> saturday night. T'was the first LICS I've been to, and my first time in the deep south. I had fun overall. Definitely enjoyed the French Quarter with its narrower streets, delightful architecture, and other non-American features. And I ran into the Pride parade the day after arriving; I seem to have a knack for that ;)  The humidity was killer though.</p>
<p>The slides from my <a href=\"http://www.indiana.edu/~iulg/nlcs.html\">NLCS</a> talk are <a href=\"http://llama.freegeek.org/~wren/pubs/chiastic_nlcs2013.pdf\">available here</a>. I've been having some issues with my bibtex2html script, so they're not linked to on the publications page yet; but they will be once I get that issue fixed.</p>
<p>In less happy news, I got some bloodwork back today. Cholesterol is far far too high, and I'm getting into the pre-diabetic range for bloodsugar levels. So, I'm starting a major diet change in hopes of getting those under control. Apparently lack of protein is a big part of the problem (for me), which is ironic since most americans get far too much. Damn midwestern genes. Went grocery shopping today; it's profoundly difficult to get a 1::1 carbs-to-protein ratio as a vegetarian.</p><br /><br /><img src=\"http://www.dreamwidth.org/tools/commentcount?user=winterkoninkje&ditemid=84727\" alt=\"comment count unavailable\" height=\"12\" style=\"vertical-align: middle;\" width=\"30\" /> comments" nil nil "fa7955fe4b7c2ab25be7ea5b1029f052") (203 (20949 25792 680235) "http://winterkoninkje.dreamwidth.org/83774.html" "wren ng thornton: Upcoming talk" nil "Wed, 03 Jul 2013 03:43:14 +0000" "<p>Next month I'll be giving a talk at the <a href=\"http://www.indiana.edu/~iulg/nlcs.html\">NLCS</a> workshop, on the chiastic lambda-calculi I first presented at NASSLLI 2010 (<a href=\"http://llama.freegeek.org/~wren/pubs/ccgjp_nasslli2010.pdf\">slides</a>[1]). After working out some of the metatheory for one of my quals, I gave more recent talks at our local PL Wonks and CLingDing seminars (<a href=\"http://llama.freegeek.org/~wren/pubs/chiastic_plwonks2013.pdf\">slides</a>). The NASSLLI talk was more about the linguistic motivations and the general idea, whereas the PLWonks/CLingDing talks were more about the formal properties of the calculus itself. For NLCS I hope to combine these threads a bit better— which has always been the challenge with this work.</p>
<p>NLCS is collocated with this year's <a href=\"http://lii.rwth-aachen.de/lics/lics13/\">LICS</a> (and MFPS and CSF). I'll also be around for LICS itself, and in town for MFPS though probably not attending. So if you're around, feel free to stop by and chat.</p>
<p>[1] N.B., the NASSLLI syntax is a bit different than the newer version: square brackets were used instead of angle brackets (the latter were chosen because they typeset better in general); juxtaposition was just juxtaposition rather than being made explicit; and the left- vs right-chiastic distinction was called chi vs ksi (however, it turns out that ksi already has an important meaning in type theory).</p>
<p><i>Edit 2013.07.02:</i> the slides are <a href=\"http://llama.freegeek.org/~wren/pubs/chiastic_nlcs2013.pdf\">available here</a>.</p><br /><br /><img src=\"http://www.dreamwidth.org/tools/commentcount?user=winterkoninkje&ditemid=83774\" alt=\"comment count unavailable\" height=\"12\" style=\"vertical-align: middle;\" width=\"30\" /> comments" nil nil "f90c96a83fe24df84400bfb4f549e8d1") (202 (20949 25792 628873) "http://feedproxy.google.com/~r/ezyang/~3/zSgfaMODNkM/" "Edward Z. Yang: No grammar? No problem!" nil "Wed, 03 Jul 2013 02:17:02 +0000" "<div class=\"document\">
<p>One day, you’re strolling along fields of code, when suddenly you spot a syntax construct that you don’t understand.</p>
<p>Perhaps you’d ask your desk-mate, who’d tell you in an instant what it was.</p>
<p>Perhaps your programming toolchain can tell you. (Perhaps the IDE would you mouse over the construct, or you’re using Coq which let’s you <tt class=\"docutils literal\">Locate</tt> custom notations.)</p>
<p>Perhaps you’d pull up the manual (or, more likely, one of many tutorials) and scan through looking for the syntax construct in question.</p>
<p>But when all this fails, what is one to do?  What if the code in question is written in an internal language for a compiler, whose details have changed since it was last documented, for which the documentation is out of date?</p>
<p><em>No problem.</em> As long as you’re willing to roll up your sleeves and take a look at the source code of the compiler in question, you can frequently resolve your question for less effort than it would have taken to look up the syntax in the manual (and it’s guaranteed to be up-to-date too!)  The key is that  modern compilers all use parser generators, and the input to these are essentially executable specifications.</p>
<hr class=\"docutils\" />
<p>I’ll give two examples from GHC.  The first is from C--, GHC’s high-level assembly language. Consider this function:</p>
<pre class=\"literal-block\">INFO_TABLE_RET(stg_maskUninterruptiblezh_ret, RET_SMALL, W_ info_ptr)
return (P_ ret)
{
StgTSO_flags(CurrentTSO) =
%lobits32(
(TO_W_(StgTSO_flags(CurrentTSO))
| TSO_BLOCKEX)
& ~TSO_INTERRUPTIBLE
);
return (ret);
}
</pre>
<p>Some aspects of this definition are familiar to someone who has written C before, but there are some mysterious bits. For example, what does the <tt class=\"docutils literal\">return (P_ ret)</tt> mean in the preamble?</p>
<p>The first order of business is to find the relevant file.  When the code in question has very distinctive keywords (as this one does), a grep will often do the trick:</p>
<pre class=\"literal-block\">ezyang@javelin:~/Dev/ghc-clean/rts$ grep -R INFO_TABLE_RET ../compiler/
../compiler/cmm/CmmParse.y:INFO_TABLE_RET ( label, FRAME_TYPE, info_ptr, field1, ..., fieldN )
../compiler/cmm/CmmParse.y:        'INFO_TABLE_RET'{ L _ (CmmT_INFO_TABLE_RET) }
../compiler/cmm/CmmParse.y:        | 'INFO_TABLE_RET' '(' NAME ',' INT ')'
../compiler/cmm/CmmParse.y:        | 'INFO_TABLE_RET' '(' NAME ',' INT ',' formals0 ')'
../compiler/cmm/CmmParse.y:-- is.  That is, for an INFO_TABLE_RET we want the return convention,
../compiler/cmm/CmmLex.x:  | CmmT_INFO_TABLE_RET
../compiler/cmm/CmmLex.x:   ( \"INFO_TABLE_RET\",     CmmT_INFO_TABLE_RET ),
</pre>
<p>File extensions can also be dead giveaways; GHC uses a parser generator named Happy, and the file extension of Happy files is <tt class=\"docutils literal\">.y</tt>:</p>
<pre class=\"literal-block\">ezyang@javelin:~/Dev/ghc-clean/rts$ find ../compiler -name *.y
../compiler/cmm/CmmParse.y
../compiler/parser/ParserCore.y
</pre>
<p>From there, we can search the file for keywords or symbols (check for the string token name if a lexer is used; also, make sure to quote alphanumeric literals).  A symbol can show up in multiple places, as it does for return:</p>
<pre class=\"literal-block\">maybe_conv :: { Convention }
: {- empty -}        { NativeNodeCall }
| 'return'           { NativeReturn }
</pre>
<p>and:</p>
<pre class=\"literal-block\">stmt    :: { CmmParse () }
: ';'                                   { return () }
...
| 'goto' NAME ';'
{ do l <- lookupLabel $2; emit (mkBranch l) }
| 'return' '(' exprs0 ')' ';'
{ doReturn $3 }
</pre>
<p>Guessing from the names of the productions and the contexts, it seems more likely that <tt class=\"docutils literal\">maybe_conv</tt> is the relevant production. It is used here:</p>
<pre class=\"literal-block\">cmmproc :: { CmmParse () }
: info maybe_conv maybe_formals maybe_body
{ do ((entry_ret_label, info, stk_formals, formals), agraph) <-
getCodeR $ loopDecls $ do {
(entry_ret_label, info, stk_formals) <- $1;
formals <- sequence (fromMaybe [] $3);
$4;
return (entry_ret_label, info, stk_formals, formals) }
let do_layout = isJust $3
code (emitProcWithStackFrame $2 info
entry_ret_label stk_formals formals agraph
do_layout ) }
</pre>
<p>Now, if you really need to know <em>exactly</em> how it is lade out, you can go and checkout how <tt class=\"docutils literal\">emitProcWithStackFrame</tt> is implemented.  Alternately, you might hope there is a useful comment in the source file which explains what is up:</p>
<pre class=\"literal-block\">A stack frame is written like this:
INFO_TABLE_RET ( label, FRAME_TYPE, info_ptr, field1, ..., fieldN )
return ( arg1, ..., argM )
{
... code ...
}
where field1 ... fieldN are the fields of the stack frame (with types)
arg1...argN are the values returned to the stack frame (with types).
The return values are assumed to be passed according to the
NativeReturn convention.
</pre>
<hr class=\"docutils\" />
<p>The second example is for STG, which you can ask GHC to print out using <tt class=\"docutils literal\"><span class=\"pre\">-ddump-stg</span></tt>. Now, there is no parser for STG, so instead you’ll have to look at the <em>pretty-printer</em>. Not too difficult. Take this simple function:</p>
<pre class=\"literal-block\">Gnam.$WKST =
\\r [tpl_sl4 tpl_sl6]
case tpl_sl4 of tpl_sl8 {
__DEFAULT ->
case tpl_sl6 of tpl_sl9 {
__DEFAULT -> Gnam.KST [tpl_sl8 tpl_sl9];
};
};
</pre>
<p>Some aspects are familiar. But what does the <tt class=\"docutils literal\">\\r</tt> mean?</p>
<p>Once again, we have to find the relevant source file.  Since STG is printed out only when we pass the <tt class=\"docutils literal\"><span class=\"pre\">-ddump-stg</span></tt> flag, a good start is to trace the flag through the source code:</p>
<pre class=\"literal-block\">ezyang@javelin:~/Dev/ghc-clean/compiler$ grep -R ddump-stg .
./main/DynFlags.hs:  , Flag \"ddump-stg\"               (setDumpFlag Opt_D_dump_stg)
ezyang@javelin:~/Dev/ghc-clean/compiler$ grep -R Opt_D_dump_stg .
./main/DynFlags.hs:   | Opt_D_dump_stg
./main/DynFlags.hs:  , Flag \"ddump-stg\"               (setDumpFlag Opt_D_dump_stg)
./simplStg/SimplStg.lhs:        ; dumpIfSet_dyn dflags Opt_D_dump_stg \"STG syntax:\"
</pre>
<p>That’s a good sign! Popping open <tt class=\"docutils literal\">SimpleStg.lhs</tt> gives us:</p>
<pre class=\"literal-block\">; dumpIfSet_dyn dflags Opt_D_dump_stg \"STG syntax:\"
(pprStgBindings un_binds)
</pre>
<p>And the location of <tt class=\"docutils literal\">pprStgBindings</tt> (<tt class=\"docutils literal\">compiler/stgSyn/StgSyn.lhs</tt>) is in fact the ticket.</p>
<p>STG is pretty small, and as it turns out if you just do a quick scan of the file you’re likely to find what you need. But in case you don’t, you can still figure things out deliberately. Suppose we search for a quoted backslash:</p>
<pre class=\"literal-block\">pprStgExpr (StgLam bndrs body)
= sep [ char '\\\\' <+> ppr_list (map (pprBndr LambdaBind) bndrs)
<+> ptext (sLit \"->\"),
pprStgExpr body ]
where ppr_list = brackets . fsep . punctuate comma
...
-- general case
pprStgRhs (StgRhsClosure cc bi free_vars upd_flag srt args body)
= sdocWithDynFlags $ \\dflags ->
hang (hsep [if gopt Opt_SccProfilingOn dflags then ppr cc else empty,
pp_binder_info bi,
ifPprDebug (brackets (interppSP free_vars)),
char '\\\\' <> ppr upd_flag, pprMaybeSRT srt, brackets (interppSP args)])
4 (ppr body)
</pre>
<p>Which is it? As it turns out:</p>
<pre class=\"literal-block\">StgLam is used *only* during CoreToStg's work. Before CoreToStg has
finished it encodes (\\x -> e) as (let f = \\x -> e in f)
</pre>
<p>Since <tt class=\"docutils literal\"><span class=\"pre\">-ddump-stg</span></tt> is post-CoreToSTG, we must be looking at <tt class=\"docutils literal\">StgRhsClosure</tt>, and <tt class=\"docutils literal\">ppr upd_flag</tt> looks like the ticket.  <tt class=\"docutils literal\">r</tt> must be an <tt class=\"docutils literal\">upd_flag</tt>, whatever that is. An <tt class=\"docutils literal\">UpdateFlag</tt>, as it turns out:</p>
<pre class=\"literal-block\">data UpdateFlag = ReEntrant | Updatable | SingleEntry
instance Outputable UpdateFlag where
ppr u = char $ case u of
ReEntrant   -> 'r'
Updatable   -> 'u'
SingleEntry -> 's'
</pre>
<p>The <tt class=\"docutils literal\">r</tt> indicates the function is re-entrant! (Of course, as for what that means, you’ll have to consult other documentation.)</p>
<hr class=\"docutils\" />
<p>Of course, in an ideal world, all of this would be documented. But even if it is not, there is no reason why you can’t help yourself. If your codebase is as nice as GHC’s, there will be plenty of breadcrumbs and comments to help you out. I hope this gives some insight into one possible thought process when you encounter something you don’t know, and don’t know how to learn. (Of course, sometimes it’s just best to ignore it!)</p>
</div>
<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/zSgfaMODNkM\" height=\"1\" width=\"1\" />" nil nil "0081bba4f515deb580f5f66fe805e9b3") (201 (20949 25792 626962) "http://praisecurseandrecurse.blogspot.com/2013/07/the-polar-game-in-haskell-day-5-array-v.html" "Paul Potts: The Polar Game in Haskell, Day 5: Array v. List" "noreply@blogger.com (Paul Potts)" "Tue, 02 Jul 2013 23:25:00 +0000" "<p>So, a little more progress in learning me a Haskell: I've managed to implement the board using an immutable array. There's good news and bad news here. If you're an old hand at functional programming, you probably know all this and more, but I needed to do a little thinking on purely functional data structures. I have not really been satisfied with the amount of code necessary to manage my 2-D board in a list. I spent some time doodling some possible alternative implementation before concluding that purely functional data structures -- in which nodes are never mutated -- are hard. Anything I might be accustomed to doing with double or multiply-linked lists is pretty much a washout, since you can't ever share structure. In fact, I think one data structure I came up with might not be constructible at all without being able to mutate links between nodes. So I'm starting to understand why the tutorials all advise me to stick with lists.</p> <p>Nevertheless, this is a small problem, and efficiency is not my biggest concern, at least not in the learning phase. I wanted to figure out how to use an immutable array. The tutorials have not been very satisfying. They seem to assume that anything this trivial is too trivial to demonstrate. But here's what I did.</p> <p>First, the type of an array in Haskell encodes the number of dimensions and the node type, but not the size. You set that when you call the constructor. Here's a 2-D array type for my board:</p> <pre>type BoardArray = Array ( Int, Int ) Tile</pre> <p>I specified some bounds:</p> <pre>max_row :: Int<br />max_row = 3<br /><br />max_col :: Int<br />max_col = 23</pre> <p>And I should point out one of the fundamental problems with using arrays: it's very easy to kill your program by exceeding the array bounds. There is a similar problem with <b>head</b>, but when writing functions with pattern-matching and guards there are pretty accepted conventions for dealing with empty lists. I suppose one could use guard patterns on all array accesses, but it starts to seem a little silly.</p> <p>The next thing is that a given array works with some auxiliary types. The <b>//</b> operator takes an array and a list of tuples and builds a new array with updated content. The type of that list of tuples is this:</p> <pre>type TileAssocList = [ ( ( Int, Int ), Tile ) ]</pre> <p>For accessing multiple items in an array, the <b>range</b> method builds lists of indexing tuples. The syntax to range requires tuples of tuples, with the parentheses piling up, so I wrapped it up in a function:</p> <pre>make_2d_range :: Int -> Int -> Int -> Int -> [ ( Int, Int ) ]<br />make_2d_range y0 x0 y1 x1 = range ( ( y0, x0 ), ( y1, x1 ) )</pre> <p>So how does that work? It just iterates coordinates, permuting from higher indices to lower, like so:</p> <pre>*Main> make_range 0 0 0 1<br />[(0,0),(0,1)]<br /><br />*Main> make_range 0 0 1 3<br />[(0,0),(0,1),(0,2),(0,3),(1,0),(1,1),(1,2),(1,3)]</pre> <p>For this problem domain, I need to know how reversed ranges work. For example, when the penguin is facing West, I want to build a range and a list of tiles in reverse index order. Can range do that for me?</p> <pre>*Main> make_range 0 23 0 0<br />[]</pre> <p>Ah... no. I guess that would have been too easy. So I'll have to account for those cases specially. Here's a function to get the penguin's view out of a 2-D array of tiles, in the form of a tile association list I can use to create a freshly created \"modified\" array (it's not really modified, but a new one is created with the updates from that list applied):</p> <pre>view_array :: BoardArray -> Pos -> Dir -> TileAssocList<br />view_array board pos dir =<br />    let row = ( posY pos )<br />        col = ( posX pos )<br />        coord_list = case dir of<br />            East  -> if ( col == max_col )<br />                     then []<br />                     else make_2d_range row ( col + 1 ) row max_col<br />            South -> if ( row == max_row )<br />                     then []<br />                     else make_2d_range ( row + 1 ) col max_row col<br />            West ->  if ( col == 0 )<br />                     then []<br />                     else make_2d_range row 0 row ( col - 1 )<br />            North -> if ( row == 0 )<br />                     then []<br />                     else make_2d_range 0 col ( row - 1 ) col<br />        tile_assoc = zip coord_list ( map ( (!) board )<br />                                           coord_list )<br />    in case dir of<br />        East -> tile_assoc<br />        South -> tile_assoc<br />        West -> reverse tile_assoc<br />        North -> reverse tile_assoc</pre> <p>That's not so bad. The key to this function is the <b>!</b> operator -- this gets a tuple and an array and returns an element -- and I zip the elements up with their coordinate tuples. Note that a lot of the bulk of this function is handling the edge cases, because we don't want to apply an out-of-range coordinate tuple to <b>!</b>. There may still be a shorter, clearer implementation possible. By comparison, here's a list-of-lists version factored a bit using currying to make it as self-documenting as I could get it -- note the use of <b>id</b> to let me return a general function as <b>orient</b>. I'm sure it doesn't impress FP whizzes, but I'm kinda proud of it -- I feel like I'm starting to use Haskell a little more idiomatically:</p> <pre>view_list :: BoardList -> Pos -> Dir -> [Tile]<br />view_list board pos dir =<br />    let row = ( posY pos )<br />        col = ( posX pos )<br />        transposed = elem dir [ South, North ]<br />        reversed = elem dir [ West, North ]<br />        orient | reversed = reverse<br />               | otherwise = id<br />        trim = case dir of<br />            East -> drop ( col + 1 )<br />            South -> drop ( row + 1 )<br />            West -> take col<br />            North -> take row<br />        extract | transposed = ( transpose board ) !! col<br />                | otherwise = board !! row  <br />    in orient $ trim $ extract</pre> <p>Testing <b>view_list</b>:</p> <pre>*Main> view_list init_board_list (Pos 0 0) East<br />[Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,<br />Empty,Empty,Tree,Empty,Empty,Empty,Empty,Empty,Ice_Block,Empty,Empty]<br /><br />*Main> view_array init_board_array (Pos 0 0) East<br />[((0,1),Empty),((0,2),Empty),((0,3),Empty),((0,4),Empty),<br />((0,5),Empty),((0,6),Empty),((0,7),Empty),((0,8),Empty),<br />((0,9),Empty),((0,10),Empty),((0,11),Empty),((0,12),Empty),<br />((0,13),Empty),((0,14),Empty),((0,15),Tree),((0,16),Empty),<br />((0,17),Empty),((0,18),Empty),((0,19),Empty),((0,20),Empty),<br />((0,21),Ice_Block),((0,22),Empty),((0,23),Empty)]</pre> <p>Now we can write <b>step</b>. Here's the list version I've presented before:</p> <pre>step_list :: [Tile] -> ( Bool, [Tile] )<br />step_list [] = ( False, [] )<br />step_list ts = if walkable (head ts) then ( True, ts )<br />                                     else ( False, collide ts )</pre> <p>The array version is a little more complicated, because I want to strip the list I pass to <b>collide</b> down to just a list of tiles, in order to retain that clean logic for dealing with just a list of tiles. So I unzip my coordinate tuples from my tiles, get a potentially updated tile list, and zip it back together. That complicates it a bit, like so:</p> <pre>step_array :: TileAssocList -> ( Bool, TileAssocList )<br />step_array [] = ( False, [] )<br />step_array tile_assoc = if ( walkable $ head tile_list )<br />                        then ( True, tile_assoc )<br />                        else ( False, zip coord_list<br />                               ( collide tile_list ) )<br />    where ( coord_list, tile_list ) = unzip tile_assoc</pre> <p>I'm going to have to uglify my nice collide method a bit because I need to return at least one additional value -- indicating whether <b>collide</b> consumed a heart, so that we can keep score of the game.</p> <p>Next up, you can see the array and list solutions start to diverge hugely. It's hard to merge the list-based board back together with the potentially updated tile list to create the next immutable list-based board. My original method was pretty hideous. With Jeff's refactoring it's still a lot of code. (Note: I don't have this completely working yet; I'm getting a run-time error about bad patterns I haven't quite figured out yet):</p> <pre>next_board_list :: BoardList -> Pos -> Dir -> ( Bool, BoardList )<br />next_board_list board pos dir =<br />    let ( penguin_could_move, updated_view_list ) = <br />        step_list $ view_list board pos dir<br />    in ( penguin_could_move, update_board_from_view_list <br />         board pos dir updated_view_list )<br /><br />apply_view_list_to_row :: [Tile] -> Int -> Bool -> [Tile] -> [Tile]<br />apply_view_list_to_row orig pos True update =<br />    take ( pos + 1 ) orig ++ ( init update )<br />apply_view_to_row orig pos False update =<br />    ( reverse ( init update ) ) ++ ( drop pos orig )<br /><br />apply_view_list_to_rows :: BoardList -> Int -> Int -> <br />    Bool -> [Tile] -> BoardList<br />apply_view_list_to_rows orig row pos is_forward update =<br />    take row orig ++<br />    nest ( apply_view_to_row ( orig !! row ) pos is_forward update ) ++<br />    drop ( row + 1 ) orig<br /><br />update_board_from_view_list :: BoardList -> Pos -> Dir -> <br />    [Tile] -> BoardList<br />update_board_from_view_list board pos dir updated_view_list<br />    | is_eastwest = apply_view_list_to_rows board<br />                        ( posY pos ) ( posX pos )<br />                        is_forward updated_view_list<br />    | otherwise = transpose ( apply_view_list_to_rows ( transpose board )<br />                              ( posX pos ) ( posY pos ) <br />                              is_forward updated_view_list )<br />    where is_forward = elem dir [ East, South ]<br />          is_eastwest = elem dir [ East, West ]</pre> <p>By comparison, the array is much more suited to create an updated version of itself, given a list of elements to update. This is handled by the <b>//</b> function, in this simple function to create the next board in array form, called from <b>step_array</b>:</p> <pre>next_board_array :: BoardArray -> Pos -> Dir -> ( Bool, BoardArray )<br />next_board_array board pos dir =<br />    let ( penguin_could_move, updated_view ) =<br />        step_array $ view_array board pos dir<br />    in ( penguin_could_move, board // updated_view )</pre> <p>I like that -- it looks like we're working with the data structure rather than against it, although the overhead to manage the ranges and lists still feels to me more complicated than it should be. That complexity carries over elsewhere: for example, pretty-printing the array requires that range logic again. In fact I wind up just wrapping up and re-using the logic to pretty-print the list, so you can see how much additional code I needed:</p> <pre>pretty_tiles :: [Tile] -> String<br />pretty_tiles [] = \"\\n\"<br />pretty_tiles (t:ts) = case t of<br />                 Empty     -> \"___\"<br />                 Mountain  -> \"mt \"<br />                 House     -> \"ho \"<br />                 Ice_Block -> \"ic \"<br />                 Heart     -> \"he \"<br />                 Bomb      -> \"bo \"<br />                 Tree      -> \"tr \"<br />             ++ pretty_tiles ts<br /><br />pretty_board_list :: BoardList -> String<br />pretty_board_list [] = \"\"<br />pretty_board_list (ts:tss) = pretty_tiles ts ++ pretty_board_list tss<br /><br />split_tile_list :: [ Tile ] -> [ [ Tile ] ]<br />split_tile_list [] = []<br />split_tile_list ts = [ take tiles_in_row ts ] ++<br />                     ( split_tile_list $ ( drop tiles_in_row ) ts )<br />    where tiles_in_row = max_col + 1<br /><br />pretty_board_array :: BoardArray -> String <br />pretty_board_array board = pretty_board_list split_tiles<br />    where full_range = make_2d_range 0 0 max_row max_col<br />          all_tiles = map ( (!) board ) full_range<br />          split_tiles = split_tile_list all_tiles</pre> <p>As an aside, it seems like there ought to be at least one standard list split function, but it looks like folks don't really agree on how it should work</p> <p>So there it is -- the array is kind of a mixed blessing here. I haven't done any large-scale profiling on it, to determine if the need to generate a whole new array each pass is a big loss, compared to the potential structure-sharing in the list implementation. It simplifies some of the code dramatically, while adding a layer of dealing with ranges and lists of tuples everywhere -- as soon as we want to pull items out of the array, or merge them back in to a new array, we're dealing with lists again. Still, given the ugliness of the list merge code, it seems like the more natural choice for this kind of small game board data structure.</p>" nil nil "0bab6d4599888e16712c0067aef1cb5b") (200 (20949 25792 624591) "http://parenz.wordpress.com/2013/06/29/vado/" "Daniil Frumin: Agile development and deployment in the cloud with Haskell and vado" nil "Tue, 02 Jul 2013 13:26:14 +0000" "<p>
In this post I would like to give you an update on vado – a piece of<br />
software for running programs on vagrant VMs (or any other ssh server,<br />
actually), projects I’ve contributed briefly to.
</p>
<div id=\"outline-container-sec-1\" class=\"outline-2\">
<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> New build system</h2>
<div id=\"text-1\" class=\"outline-text-2\">
<p>
The <a href=\"http://parenz.wordpress.com/2013/06/12/ghcjs-build/\">old</a> <a href=\"http://github.com/ghcjs/ghcjs-build\">build system</a> for ghcjs was a little bit messy. Basically, it was<br />
just one Puppet configuration file that contained a hardcoded shell<br />
script as a resource that is supposed to be written to the home<br />
directory and executed. I decided to clean it up a notch and take more<br />
of a Puppet approach to the whole thing.
</p>
<p>
You can find the new set of build script on the GitHub:<br />
<a href=\"https://github.com/ghcjs/ghcjs-build\">https://github.com/ghcjs/ghcjs-build</a>
</p>
<p>
And since the errors are now printed to the screen it’s<br />
easy to see which stage the build is going through and if anything<br />
goes wrong you see an error trace for the current stage.
</p>
<p>
The <a href=\"https://github.com/ghcjs/ghcjs-build/tree/prebuilt\">prebuilt</a> version has also been updated by<br />
<a href=\"http://weblog.luite.com/wordpress/\">Luite Stegeman</a>.
</p>
</div>
</div>
<div id=\"outline-container-sec-2\" class=\"outline-2\">
<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Vado</h2>
<div id=\"text-2\" class=\"outline-text-2\">
</div>
<div id=\"outline-container-sec-2-1\" class=\"outline-3\">
<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> Vado intro</h3>
<div id=\"text-2-1\" class=\"outline-text-3\">
<p>
Hamish Mackenzie and I have been working on <a href=\"https://github.com/hamishmack/vado\">vado</a> – a quick way to run<br />
commands on a remote ssh server. Just mount the directory you want to<br />
run the command in using <a href=\"http://fuse.sourceforge.net/sshfs.html\">sshfs</a>, in that directory (or its<br />
subdirectory) run vado like this:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vado ls -l
</pre>
</div>
<p>
vado will run ‘mount’ to identify the user account, server name and<br />
the remote directory to run the command in. It will then run ssh to<br />
connect to the server and run the command.
</p>
<p>
You can also pass ssh options like this:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vado -t htop
</pre>
</div>
<p>
This tells vado to pass -t to ssh (forces pseudo-tty allocation and<br />
makes programs like vim and htop work nicely).
</p>
<p>
I will explain below how to set up vado for multiple remote<br />
servers/sshfs mount points and how to develop Haskell projects on a<br />
remote server/VM nicely using Emacs and ghc-mod.
</p>
</div>
</div>
<div id=\"outline-container-sec-2-2\" class=\"outline-3\">
<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> .vadosettings</h3>
<div id=\"text-2-2\" class=\"outline-text-3\">
<p>
Vado is not tied to vagrant, but can be used with it and is faster<br />
than <code>vagrant ssh</code>. If the user and host detected in <code>mount</code> are<br />
specified in the <code>~/.vadosettings</code> file, then the specified key and<br />
port will be used.
</p>
<p>
The contents of the <code>~/.vadosettings</code> file is basically a Haskell<br />
list of <code>MountSettings</code> datastructures and we use standard <code>Read</code> and<br />
<code>Show</code> type-classes for serialization.
</p>
<p>
The <code>MountSettings</code> data type is defined as follows:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-haskell\"><span style=\"color: #b5bd68;\">-- | Mount point settings</span>
<span style=\"color: #b294bb;\">data</span> <span style=\"color: #f0c674;\">MountSettings</span> <span style=\"color: #cc6666;\">=</span> <span style=\"color: #f0c674;\">MountSettings</span> {
sshfsUser <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Text</span>
, sshfsHost <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Text</span>
, sshfsPort <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Int</span>
, idFile <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">FilePath</span>
} <span style=\"color: #b294bb;\">deriving</span> (<span style=\"color: #f0c674;\">Show</span>, <span style=\"color: #f0c674;\">Read</span>)
</pre>
</div>
<p>
If the file is not present or incorrectly formatted<br />
then the default settings for vagrant will be used:
</p>
<ul class=\"org-ul\">
<li>User: vagrant
</li>
<li>Host: 127.0.0.1
</li>
<li>Port: 2222
</li>
<li>Key file: <code>~/.vagrant.d/insecure_private_key</code>
</li>
</ul>
</div>
<div id=\"outline-container-sec-2-2-1\" class=\"outline-4\">
<h4 id=\"sec-2-2-1\"><span class=\"section-number-4\">2.2.1</span> Example .vadosettings file</h4>
<div id=\"text-2-2-1\" class=\"outline-text-4\">
<p>
An example settings file might look like this:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-haskell\">[
<span style=\"color: #f0c674;\">MountSettings</span> {
sshfsUser <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"vagrant\"</span>
, sshfsHost <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"localhost\"</span>
, sshfsPort <span style=\"color: #cc6666;\">=</span> 2222
, idFile <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"/Users/dan/.vagrant.d/insecure_private_key\"</span>
},
<span style=\"color: #f0c674;\">MountSettings</span> {
sshfsUser <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"admin\"</span>
, sshfsHost <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"server.local\"</span>
, sshfsPort <span style=\"color: #cc6666;\">=</span> 2233
, idFile <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"/Users/dan/keys/local_server_key\"</span>
}
]
</pre>
</div>
</div>
</div>
</div>
<div id=\"outline-container-sec-2-3\" class=\"outline-3\">
<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> Vamount</h3>
<div id=\"text-2-3\" class=\"outline-text-3\">
<p>
Of course, using <code>vado</code> requires mounting the sshfs beforehand. But<br />
it gets tedious typing out
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">sshfs vagrant@localhost:/home/vagrant ../vm/ -p2222
-reconnect,defer_permissions,negative_vncache,<span style=\"color: #cc6666;\">volname</span>=ghcjs,<span style=\"color: #cc6666;\">IdentityFile</span>=~/.vagrant.d/insecure_private_key
</pre>
</div>
<p>
every time. A tool called <code>vamount</code> which is bundled together<br />
with <code>vado</code> can be used for mounting remote filesystems based on<br />
<code>~/.vadosettings</code> file.
</p>
<p>
You can use it like this:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vamount [ssh options] remote_path [profile <span style=\"color: #969896;\">#</span><span style=\"color: #969896;\">]</span>
</pre>
</div>
<p>
The <code>remote_path</code> from the remote server specified in the<br />
~/.vadosettings file under number [profile #] will be mounted in the<br />
current directory using sshfs.
</p>
<p>
The profile number count starts from 1. If the [profile #] is absent<br />
or is 0 then the default (vagrant) configuration will be used.
</p>
</div>
</div>
<div id=\"outline-container-sec-2-4\" class=\"outline-3\">
<h3 id=\"sec-2-4\"><span class=\"section-number-3\">2.4</span> Vado and ghc-mod</h3>
<div id=\"text-2-4\" class=\"outline-text-3\">
<p>
<a href=\"http://www.mew.org/~kazu/proj/ghc-mod/en/\">ghc-mod</a> is a backend designed command to enrich Haskell programming on<br />
editors like Emacs and Vim and it also features a front-end for Emacs<br />
as a set of elisp scripts. It’s a really cool piece of software and if<br />
you have not tried it yet I highly recommend you to invest into<br />
installing and using it.
</p>
<p>
What we would like, however, is to edit files on the mounted<br />
filesystem using Emacs on the host machine, but run ghc-mod inside the<br />
VM. In order to do that we need to install ghc-mod both on our host<br />
machine and on the VM.
</p>
<p>
While installing ghc-mod on the host machine running the latest<br />
haskell-platform is pretty straightforward it is harder to do so on<br />
the VM running GHC 7.7 due to the fact that many libraries are not<br />
ready for GHC 7.7 and base 4.7 yet. We have to resort to installing<br />
most of the things from source.
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\"><span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">run this on the guest machine</span>
mkdir ghcmod && <span style=\"color: #D0D0FF;\">cd</span> ghcmod
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">patching installing convertible</span>
cabal unpack convertible
<span style=\"color: #D0D0FF;\">cd</span> convertible*
wget http://co-dan.github.io/patched/convertible.patch
patch -p1 Data/Convertible/Utils.hs convertible.patch
cabal install
<span style=\"color: #D0D0FF;\">cd</span> ..
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">installing ghc-syb-utils</span>
git clone https://github.com/co-dan/ghc-syb.git
<span style=\"color: #D0D0FF;\">cd</span> ghc-syb/utils/
cabal install
<span style=\"color: #D0D0FF;\">cd</span> ../..
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">finally getting and installing ghc-mod</span>
git clone https://github.com/co-dan/ghc-mod.git
<span style=\"color: #D0D0FF;\">cd</span> ghc-mod
cabal install
</pre>
</div>
<p>
Ghc-mod itself uses the GHC API extensively so it’s no surprise we<br />
have to change at least some code. Now that we have installed ghc-mod<br />
on the guest VM we need to set up our host’s Emacs configuration to<br />
communicate properly with the VM. First of all put this in your Emacs<br />
config:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-elisp\"><span style=\"color: #7f7f7f;\">(</span>setq load-path <span style=\"color: #7f7f7f;\">(</span>cons <span style=\"color: #b5bd68;\">\"~/Library/Haskell/ghc-7.6.3/lib/ghc-mod-2.0.3/share\"</span> load-path<span style=\"color: #7f7f7f;\">))</span>
<span style=\"color: #7f7f7f;\">(</span>autoload 'ghc-init <span style=\"color: #b5bd68;\">\"ghc\"</span> nil t<span style=\"color: #7f7f7f;\">)</span>
<span style=\"color: #7f7f7f;\">(</span>add-hook 'haskell-mode-hook <span style=\"color: #7f7f7f;\">(</span><span style=\"color: #b294bb;\">lambda</span> <span style=\"color: #7f7f7f;\">()</span> <span style=\"color: #7f7f7f;\">(</span>ghc-init<span style=\"color: #7f7f7f;\">)))</span>
<span style=\"color: #969896;\">;; </span><span style=\"color: #969896;\">(setq ghc-module-command \"ghc-mod\")</span>
<span style=\"color: #7f7f7f;\">(</span>setq ghc-module-command <span style=\"color: #b5bd68;\">\"~/vado-ghc-mod.sh\"</span><span style=\"color: #7f7f7f;\">)</span>
</pre>
</div>
<p>
<code>~/vado-ghc-mod.sh</code> should contain the following:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\"><span style=\"color: #969896;\">#</span><span style=\"color: #969896;\">!/bin/</span><span style=\"color: #b294bb;\">bash</span>
<span style=\"color: #cc6666;\">VADO</span>=/Users/dan/Library/Haskell/bin/vado
<span style=\"color: #cc6666;\">LOCAL_PATH</span>=/Users/dan/projects/ghcjs/mnt/
<span style=\"color: #cc6666;\">REMOTE_PATH</span>=/home/vagrant/
$<span style=\"color: #cc6666;\">VADO</span> -t ghc-mod ${<span style=\"color: #cc6666;\">@</span>//$<span style=\"color: #cc6666;\">LOCAL_PATH</span>/$<span style=\"color: #cc6666;\">REMOTE_PATH</span>} | sed <span style=\"color: #b5bd68;\">\"s,$REMOTE_PATH,$LOCAL_PATH,g\"</span>
</pre>
</div>
<p>
I know that it’s a hack, but it does work and I guess that’s what<br />
shell scripts are for ;)
</p>
<p>
Now go to <code>~/.bashrc</code> on the <i>guest machine</i> and make sure that the<br />
<code>PATH</code> variable is <a href=\"http://stackoverflow.com/questions/820517/bashrc-at-ssh-login\">set correctly</a>:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\"><span style=\"color: #cc6666;\">PATH</span>=/home/vagrant/ghcjs/bin:/home/vagrant/.cabal/bin:/home/vagrant/ghc/bin:/home/vagrant/jsshell:/home/vagrant/node-v0.10.10-linux-x86/bin:$<span style=\"color: #cc6666;\">PATH</span>
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">PATH is set *before* this line:</span>
[ -z <span style=\"color: #b5bd68;\">\"$PS1\"</span> ] && <span style=\"color: #b294bb;\">return</span>
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\"><snip></span>
</pre>
</div>
<p>
And that’s it, you should be done!
</p>
<p>Before (ghc-mod running on the host machine):<br />
<a href=\"http://parenz.files.wordpress.com/2013/06/ghcmod-before.png\"><img src=\"http://parenz.files.wordpress.com/2013/06/ghcmod-before.png?w=600&h=306\" alt=\"ghcmod-before\" height=\"306\" class=\"alignnone size-medium wp-image-66\" width=\"600\" /></a></p>
<p>After (ghc-mod running inside <a href=\"https://github.com/ghcjs/ghcjs-build\">ghcjs-build</a> VM):<br />
<a href=\"http://parenz.files.wordpress.com/2013/06/ghcmod-after.png\"><img src=\"http://parenz.files.wordpress.com/2013/06/ghcmod-after.png?w=600&h=306\" alt=\"ghcmod-after\" height=\"306\" class=\"alignnone size-medium wp-image-65\" width=\"600\" /></a></p>
</div>
</div>
</div>
<div id=\"outline-container-sec-3\" class=\"outline-2\">
<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> Conclusion and future work</h2>
<div id=\"text-3\" class=\"outline-text-2\">
<p>
We’ve seen how a small but useful tool <code>vado</code> can make our life easier if<br />
we want to develop Haskell projects on a remote server or on a<br />
virtual machine. You can get Vado from GitHub: <a href=\"https://github.com/hamishmack/vado\">https://github.com/hamishmack/vado</a>
</p>
<p>
Next week we are planning on releasing our first version of<br />
interactive-diagrams pastesite (not going to be very interactive<br />
though) and writing out its security model.
</p>
<p>
Meanwhile check Luite’s <a href=\"http://weblog.luite.com/wordpress/?p=127\">post</a> on using Sodium FRP library for creating<br />
Functional Reactive Web interfaces. It’s astonishing how easily you<br />
can just get a FRP library, compile to JavaScript and make nifty web<br />
apps with it.
</p>
</div>
</div>
<br /> Tagged: <a href=\"http://parenz.wordpress.com/tag/ghcjs/\">ghcjs</a>, <a href=\"http://parenz.wordpress.com/tag/haskell-2/\">haskell</a>, <a href=\"http://parenz.wordpress.com/tag/soc/\">soc</a>, <a href=\"http://parenz.wordpress.com/tag/vm/\">vm</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/parenz.wordpress.com/64/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/parenz.wordpress.com/64/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=parenz.wordpress.com&blog=26722965&post=64&subd=parenz&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "e15d9e41f915e9682be23b1611e93c88") (199 (20949 25792 622480) "http://joyful.com/blog/2013-07-01-june-review.html" "Simon Michael: June review" nil "Mon, 01 Jul 2013 23:00:00 +0000" "<div style=\"font-style: italic;\">July  1, 2013</div>
<h2>June review</h2>
<p>
</p><p>The beginning of a new month. Here’s a quick update.</p>
<p>No hledger release today as there isn’t much new to ship, following a month with several <a href=\"http://hledger.org/NEWS.html\">bugfix releases</a> and otherwise mostly infrastructural work (build and dev tool fixes, wiki styling, site update hook). 8/1 is the likely next release date. Oh, <a href=\"http://newartisans.com/\">John</a> and I also had a nice voice chat - nice to escape the IRC window isn’t it - reviewing our glorious *ledger plans, and I happily accepted his <a href=\"https://github.com/simonmichael/hledger/commit/a05e7a5a671af25b220eb4f152ad935687faef1a\">first hledger patch</a> - thanks John! :)</p>
<p>My free hacking time in recent weeks went more towards <a href=\"http://darcs.net\">darcs</a>:</p>
<ul>
<li><p>Unix shell helpers to get one-line-per-patch output from darcs (awesome!)</p>
<pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span class=\"co\"># show darcs changes, push, pull etc. output with one patch per line</span>
<span class=\"co\"># Eg:</span>
<span class=\"co\"># dch --last 3</span>
<span class=\"co\"># darcs pull --dry | d1</span>
<span class=\"kw\">alias</span> darcsoneline=<span class=\"st\">\"egrep '^\\w' -A1 | egrep -v '^(--|The remote repository has|Would pu)' | sed '</span><span class=\"ot\">$!</span><span class=\"st\">N;s/\\n/ /'\"</span>
<span class=\"kw\">alias</span> d1=darcsoneline
<span class=\"kw\">function</span><span class=\"fu\"> dch()</span> <span class=\"kw\">{</span>
<span class=\"kw\">darcs</span> changes <span class=\"ot\">$*</span> <span class=\"kw\">|</span> <span class=\"kw\">darcsoneline</span>
<span class=\"kw\">}</span></code></pre></li>
<li><p>Support for BSRK Aditya’s <a href=\"http://hub.darcs.net/Aditya/darcsden-gsoc/changes\">GSOC work</a>. Together with Ganesh Sittampalam we did several rounds of code review and BSRK’s nice enhancements should be appearing on darcs hub soon.</p></li>
<li><p>Also driven by the above, updated <a href=\"http://hub.darcs.net/simon/darcsden/changes\">darcsden</a> and HSP for current GHC and libraries, and made it easy for me to build and deploy again. Also merged <a href=\"http://hub.darcs.net/ganesh/darcsden-service/changes\">Ganesh’s improvements</a> for MS Windows compatibility. This will be released as darcsden 1.1 shortly.</p></li>
<li><p>Ongoing <a href=\"http://hub.darcs.net\">darcs hub</a> ops/maintenance, including a fix for <a href=\"http://hub.darcs.net/simon/darcsden/issue/59\">this interesting segfault</a>, and a server upgrade from ubuntu 12.04 to 13.04. This last caused about <s>45m</s><a href=\"http://stats.pingdom.com/olo874j6ixzj/632910/2013/06\">1h20m of downtime >:(</a> late last night as I wrestled with the unfamiliar couchdb migration process and erlang stack traces. (For reference: just copy /var/lib/couchdb/1.0.1/* to 1.2.0/, but <em>don’t forget to preserve file ownership</em>.) At least it got resolved it before month-end at pingdom, so there’s a chance to get uptime back up where it should be - 3 or 4 nines - in July!</p></li>
</ul>" nil nil "a74a44b51c8e44fffeed4d9cab07fb55") (198 (20949 25792 621750) "http://feedproxy.google.com/~r/ezyang/~3/tSmwYHznwqQ/" "Edward Z. Yang: HoTT exercises in Coq (in progress)" nil "Mon, 01 Jul 2013 20:21:18 +0000" "<div class=\"document\">
<p>I spent some of my plane ride yesterday working on Coq versions of the exercises in <a href=\"http://homotopytypetheory.org/book/\" class=\"reference external\">The HoTT book</a>. I got as far as 1.6 (yeah, not very far, perhaps I should make a GitHub repo if other folks are interested in contributing skeletons. Don't know what to do about the solutions though).  All of these have been test solved.</p>
<p>You will need HoTT/coq in order to run this development; instructions on <a href=\"https://github.com/HoTT/HoTT/blob/master/INSTALL.txt\" class=\"reference external\">how to install it are here.</a></p>
<pre class=\"literal-block\">Require Import HoTT.
Definition admit {T: Type} : T. Admitted.
(* Exercise 1.1 *)
Definition mycompose {A B C : Type} (g : B -> C) (f : A -> B) : A -> C := admit.
Goal forall (A B C D : Type) (f : A -> B) (g : B -> C) (h : C -> D),
mycompose h (mycompose g f) = mycompose (mycompose h g) f.
Admitted.
(* Exercise 1.2 *)
Section ex_1_2_prod.
Variable A B : Type.
Check @fst.
Check @snd.
Definition my_prod_rec (C : Type) (g : A -> B -> C) (p : A * B) : C := admit.
Goal fst = my_prod_rec A (fun a => fun b => a). Admitted.
Goal snd = my_prod_rec B (fun a => fun b => b). Admitted.
End ex_1_2_prod.
Section ex_1_2_sig.
Variable A : Type.
Variable B : A -> Type.
Check @projT1.
Check @projT2.
Definition my_sig_rec (C : Type) (g : forall (x : A), B x -> C) (p : exists (x : A), B x) : C := admit.
Goal @projT1 A B = my_sig_rec A (fun a => fun b => a). Admitted.
(* What goes wrong when you try to prove this for projT2? *)
End ex_1_2_sig.
(* Exercise 1.3 *)
Definition refl {A : Type} (x : A) : x = x := 1%path.
Section ex_1_3_prod.
Variable A B : Type.
(* Given by the book *)
Definition uppt : forall (x : A * B), ((fst x, snd x) = x) :=
fun p => match p with (a,b) => refl (a,b) end.
Definition my_prod_ind (C : A * B -> Type) (g : forall (x : A) (y : B), C (x, y)) (x : A * B) : C x := admit.
Goal forall C g a b, my_prod_ind C g (a, b) = g a b. Admitted.
End ex_1_3_prod.
Section ex_1_3_sig.
Variable A : Type.
Variable B : A -> Type.
Definition sig_uppt : forall (x : exists (a : A), B a), ((projT1 x; projT2 x) = x) := admit.
Definition mysig_ind (C : (exists (a : A), B a) -> Type) (g : forall (a : A) (b : B a), C (a; b)) (x : exists (a : A), B a) : C x := admit.
Goal forall C g a b, mysig_ind C g (a; b) = g a b. Admitted.
End ex_1_3_sig.
(* Exercise 1.4 *)
Fixpoint iter (C : Type) (c0 : C) (cs : C -> C) (n : nat) : C :=
match n with
| 0 => c0
| S n' => cs (iter C c0 cs n')
end.
Definition mynat_rec (C : Type) : C -> (nat -> C -> C) -> nat -> C := admit.
Eval compute in mynat_rec (list nat) nil (@cons nat) 2.
Eval compute in nat_rect (fun _ => list nat) nil (@cons nat) 2.
(* Exercise 1.5 *)
Definition mycoprod (A B : Type) := exists (x : Bool), Bool_rect (fun _ => Type) A B x.
Section ex_1_5.
Variable A B : Type.
Definition inl := existT (Bool_rect (fun _ => Type) A B) true.
Definition inr := existT (Bool_rect (fun _ => Type) A B) false.
Definition mycoprod_ind (C : mycoprod A B -> Type)
(l : forall (a : A), C (inl a))
(r : forall (b : B), C (inr b))
(x : mycoprod A B) : C x := admit.
Goal forall C l r x, mycoprod_ind C l r (inl x) = l x. Admitted.
Goal forall C l r x, mycoprod_ind C l r (inr x) = r x. Admitted.
End ex_1_5.
(* Exercise 1.6 *)
Definition myprod (A B : Type) := forall (x : Bool), Bool_rect (fun _ => Type) A B x.
Section ex_1_6.
Context `{Funext}.
Variable A B : Type.
Definition mypr1 (p : myprod A B) := p true.
Definition mypr2 (p : myprod A B) := p false.
Definition mymkprod (a : A) (b : B) : myprod A B := Bool_rect (Bool_rect (fun _ => Type) A B) a b.
Definition myprod_ind (C : myprod A B -> Type)
(g : forall (x : A) (y : B), C (mymkprod x y)) (x : myprod A B) : C x := admit.
Goal forall C g a b, myprod_ind C g (mymkprod a b) = g a b. Admitted.
End ex_1_6.
</pre>
<p>Actually, I lied. I haven't proved the last goal in exercise 1.6; my trouble is I don't know how to get function extensionality to compute, but I’m sure it’s something simple...</p>
</div>
<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/tSmwYHznwqQ\" height=\"1\" width=\"1\" />" nil nil "3988b25978269ce76c412cb4f230d628") (197 (20949 25792 620840) "http://www.yesodweb.com/blog/2013/07/runtime-lucius-mixins" "Yesod Web Framework: Runtime Lucius: now with mixins!" nil "Mon, 01 Jul 2013 13:00:00 +0000" "<p>About two months ago, <a href=\"http://www.yesodweb.com/blog/2013/04/mixin-support-in-lucius\">I announced that Lucius now had mixin
support</a>.
Unfortunately, it was missing something important: support in runtime Lucius.
Many of you have probably never used runtime Lucius, but it's the component
underlying Lucius's ability to do live code reloading during development. So
without this feature, it's impossible to use mixins when using <code>yesod devel</code>.</p><p>As of <code>shakespeare-css</code> 1.0.6.1, this is no longer a problem: mixins should now
work perfectly with <code>yesod devel</code>. In order to take advantage of this, just add
a minimum bound on your shakespeare-css constraint in your cabal file. (The
next release of yesod-platform will include this change.)</p><p>If anyone finds any problems, let me know.</p>" nil nil "026039983c8de2699655d62bd127a161") (196 (20949 25792 620508) "http://lambda.jstolarek.com/2013/06/msr-internship-and-some-retrospection/" "Jan Stolarek: MSR internship and some retrospection" nil "Sun, 30 Jun 2013 20:00:38 +0000" "<p style=\"text-align: justify;\">I feel I can finally write about: I got accepted for a three-month internship at Microsoft Research Cambridge! This means I will be developing GHC and, hopefully, doing some serious research on the subject of functional programming and compiler implementation. My internship starts tomorrow, on 1st July. I’m not yet 100% certain about the exact topic of my research, so I’ll refrain from going into any kind of technical details for now and I will focus on my personal experience with functional programming. I feel this is really a good moment to summarize the past 1,5 year. I learned about functional programming at the very beginning of 2012 and since then I progressed from knowing completely nothing to being in Cambridge – something I would have not imagined 18 months ago.</p>
<p style=\"text-align: justify;\">Somewhere around July 2011 I finished writing my PhD. I had yet to deal with many formalities – which in the end took 8 months – but the most important part of my work was done and I only continued research on a few minor subjects that I ran into while writing a PhD. Somewhere in October I decided I need a break from all my current research topic – I finally wanted some time to pursue topics that interested me all along and for which I never had time. Compiler construction and theory of automata were two main topics I had in mind. That was the plan, but it wasn’t meant to work out, at least not yet. Somewhere around December 2012 I stumbled upon a book <a href=\"http://lambda.jstolarek.com/2012/04/7-languages-in-7-weeks-book-review/\">“Seven languages in seven weeks”</a>, which was my first contact with functional programming. I didn’t follow the book exactly. I read chapters about Ruby, Io, Prolog (so much fun!), Scala and Erlang, but instead of reading chapter about Clojure I went for Scheme. I read <a href=\"http://www.schemers.org/Documents/Standards/R5RS/\">R5RS</a> language specification and <a href=\"http://lambda.jstolarek.com/2013/01/the-little-schemer-book-review/\">The Little Schemer</a> and when I reached the chapter about Haskell I decided to read <a href=\"http://learnyouahaskell.com/chapters\">Learn You A Haskell</a> instead. At that point I already knew that Haskell is <em>the</em> functional programming language and I think that this was the moment I started having some serious plans about functional programming. But at the same time I was figuring out how to learn about compilers. It was April when <a href=\"http://lambda.jstolarek.com/2012/04/stanford-opens-new-online-courses-about-compilers-and-automata/\">Stanford University announced their two online courses on Compilers and Automata</a> – these were really godsend. The Compilers course ended in late June. This concludes my first six months of contact with FP and I think that these months were extremely intense. I learned theoretical and practical foundations of compilers, a new programming paradigm and some new languages designed in that paradigm. I also started reading research papers on functional programming, with a focus on implementation of GHC. At that point I didn’t even try to work on the source code, but I was trying to understand how the compiler is designed.</p>
<p style=\"text-align: justify;\">The next six months, from July to December, were not as fruitful. I picked up interest in doing data-parallel computations in Haskell, as this seemed to be an active topic of research and also related to my PhD work. I made a failed attempt of an efficient parallel implementation of a wavelet transform. Although I wasn’t successful, my time was not wasted: I learned how to write, test and benchmark libraries in Haskell and also read a lot of papers on FP. I also got in touch with <a href=\"http://www.cse.unsw.edu.au/~benl/\">Ben Lippmeier</a>, who pointed me to one problem with GHC he needed fixed. This was somewhere in January 2013. I already started reading the source code of GHC in December, but now I finally had a particular problem to solve. It was the time to start working on GHC. That is mostly what I did during the last six months, although I also managed to spend some time on theory (more papers and <a href=\"http://lambda.jstolarek.com/2013/02/to-mock-a-mockingbird-or-how-i-learned-to-stop-worrying-and-learned-combinatory-logic/\">a book on combinatory logic</a>).</p>
<p style=\"text-align: justify;\">As for the internship, I decided to apply for it in February. I polished my CV and cover letter (many thanks go to my friend <a href=\"http://www.mareklab.org/\">Marek</a> for his help) and sent my application at the beginning of March. After an interview with Geoffrey Mainland and Simon Peyton Jones I got acceptance notification at the beginning of April. And here I am in Cambridge, over 1300km from home, waiting for my first day at Microsoft Research.</p>" nil nil "f7ce656d3416b1e9d315b4c8784dfc2c") (195 (20949 25792 619668) "http://feedproxy.google.com/~r/FpComplete/~3/WtRkqbxIn5Q/fp-haskell-center-beta-announcement" "FP Complete: FP Haskell Center Beta Released, and Beta Accounts Activated" nil "Sun, 30 Jun 2013 19:51:00 +0000" "<h3>Beta Release Blog</h3><p>It’s here! After months of hard work by our engineers, and only 9 months since we announced our plans in ICFP last September, I am pleased to announce that we’ve released the <a href=\"https://www.fpcomplete.com/business/designer-ide\">beta of FP Haskell Center</a>, the world's first commercial Haskell IDE and deployment platform.  We’ve received great response with nearly 1,000 sign-ups already.  Since we want to have a smooth beta process and a good user experience, we are going to activate beta accounts selectively, in ever increasing numbers, in the next few weeks as we test new features and load factors.  We will notify users via email that their account is ready to be activated; some of you who are reading this may already have received the message.  We expect to have “open enrollment” for all before the end of July.  </p><p><a href=\"https://www.fpcomplete.com/blog/2013/06/fp-haskell-center-beta-demo\">Watch a video</a> walkthrough of the highlighted features.  There’s still time to <a href=\"https://www.fpcomplete.com/business/designer-ide\">sign-up</a>.</p><p>As an appreciation and reward for being in the beta program, we will offer a special discount only to beta customers who buy an annual subscription to the GA product before the official release date in early September.  We are working on our pricing and offering plans, and expect to have them completed by early August, so stay tuned.</p><p>FP Haskell Center has two integrated components that allow you to develop and deploy Haskell applications in the cloud from a single platform.  The FP Haskell Development Environment is an IDE that includes a Haskell compiler and a continually updated set of vetted, tested and supported libraries and code templates. There is no need to run Cabal or other installers. The FP Haskell Application Server is used to deploy and run Haskell applications directly in the cloud with no additional effort. A free shared instance is included with every account. Larger and dedicated instances are available for active project deployments at a reasonable monthly charge.</p><p>For further information and sign up, <a href=\"https://www.fpcomplete.com/business/designer-ide\">please go here</a>.</p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=WtRkqbxIn5Q:EMKkzrydVc4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=WtRkqbxIn5Q:EMKkzrydVc4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=WtRkqbxIn5Q:EMKkzrydVc4:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=WtRkqbxIn5Q:EMKkzrydVc4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=WtRkqbxIn5Q:EMKkzrydVc4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=WtRkqbxIn5Q:EMKkzrydVc4:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/WtRkqbxIn5Q\" height=\"1\" width=\"1\" />" nil nil "9a8e471c1a89046962de5a17e0d8c4fb") (194 (20949 25792 619117) "http://jpmoresmau.blogspot.com/2013/06/eclipsefp-253-released.html" "JP Moresmau: EclipseFP 2.5.3 released" "noreply@blogger.com (JP Moresmau)" "Sun, 30 Jun 2013 18:20:49 +0000" "Hello, I've just released a new version of EclipseFP, 2.5.3. This is a minor release for bug fixes, general stability and hopefully better performance.<br /><br />You can find the release notes here: <a href=\"https://raw.github.com/JPMoresmau/eclipsefp/master/docs/releasenotes/net.sf.eclipsefp.haskell_2.5.3.txt\">https://raw.github.com/JPMoresmau/eclipsefp/master/docs/releasenotes/net.sf.eclipsefp.haskell_2.5.3.txt</a>.<br /><br />I don't have a lot of time for EclipseFP at the moment, being busy on other projects, but I'm well aware that there are a few enhancements that people have asked for in the queue. I'll try to address these later on, and of course I'll happily accept pull request on <a href=\"https://github.com/JPMoresmau/eclipsefp\">https://github.com/JPMoresmau/eclipsefp</a>.<br /><br />As usual install or update by pointing your Eclipse to <span style=\"background-color: white; font-family: monospace; font-size: 12px; line-height: 19px;\">http://eclipsefp.sf.net/updates.</span><br /><span style=\"background-color: white; font-family: monospace; font-size: 12px; line-height: 19px;\"><br /></span>Happy Haskell Hacking!" nil nil "8a281eee8f73b1a48f77c35429a45690") (193 (20949 25792 618721) "http://blog.darcs.net/2013/06/darcs-news-104.html" "Darcs: darcs news #104" "noreply@blogger.com (guillaume)" "Sun, 30 Jun 2013 11:29:10 +0000" "<h3 id=\"news-and-discussions\">News and discussions</h3><ol style=\"\"><li>Google Summer of Code 2013 has begun! BSRK and José will post updates on their blogs:<br /> <ul><li><a href=\"http://bsrkaditya.blogspot.com/search/label/darcs\"><code class=\"url\">http://bsrkaditya.blogspot.com/search/label/darcs</code></a></li><li><a href=\"http://blog.jlneder.com.ar/search/label/darcs\"><code class=\"url\">http://blog.jlneder.com.ar/search/label/darcs</code></a></li></ul></li></ol><h3 id=\"issues-resolved-8\">Issues resolved (8)</h3><dl><dt>issue2163 Radoslav Dorcik</dt><dd><ul><li>new option for amend, select author for patch stealing.</li><li><a href=\"http://bugs.darcs.net/issue2163\"><code class=\"url\">http://bugs.darcs.net/issue2163</code></a></li></ul></dd><dt>issue2227 Ganesh Sittampalam</dt><dd><ul><li>move the rebase patch to the end before an amend-record</li><li><a href=\"http://bugs.darcs.net/issue2227\"><code class=\"url\">http://bugs.darcs.net/issue2227</code></a></li></ul></dd><dt>issue2248 Ganesh Sittampalam</dt><dd><ul><li>always clean up rebase-in-progress state</li><li><a href=\"http://bugs.darcs.net/issue2248\"><code class=\"url\">http://bugs.darcs.net/issue2248</code></a></li></ul></dd><dt>issue2250 BSRK Aditya</dt><dd><ul><li>tabbing in usageHelper - pad by max length of command name</li><li><a href=\"http://bugs.darcs.net/issue2250\"><code class=\"url\">http://bugs.darcs.net/issue2250</code></a></li></ul></dd><dt>issue2311 Sebastian Fischer</dt><dd><ul><li>posthook for 'get' should run in created repo</li><li><a href=\"http://bugs.darcs.net/issue2311\"><code class=\"url\">http://bugs.darcs.net/issue2311</code></a></li></ul></dd><dt>issue2312 Sebastian Fischer</dt><dd><ul><li>posthooks for 'record' and 'amend-record' should receive DARCS_PATCHES</li><li><a href=\"http://bugs.darcs.net/issue2312\"><code class=\"url\">http://bugs.darcs.net/issue2312</code></a></li></ul></dd><dt>issue2320 Jose Luis Neder</dt><dd><ul><li>save prompted author name in ~/.darcs/author instead of ./_darcs/prefs/author</li><li><a href=\"http://bugs.darcs.net/issue2320\"><code class=\"url\">http://bugs.darcs.net/issue2320</code></a></li></ul></dd><dt>issue2321 Jose Luis Neder</dt><dd><ul><li>when no patch name given, directly invoke text editor</li><li><a href=\"http://bugs.darcs.net/issue2321\"><code class=\"url\">http://bugs.darcs.net/issue2321</code></a></li></ul></dd></dl><h3 id=\"patches-applied-20\">Patches applied (20)</h3><dl><dt>2013-06-09 Guillaume Hoffmann</dt><dd><ul><li>make nano the default text editor instead of vi</li></ul></dd><dt>2013-06-20 BSRK Aditya</dt><dd><ul><li>Resolve issue2250: tabbing in usageHelper - pad by max length of command name</li></ul></dd><dt>2013-06-16 Guillaume Hoffmann</dt><dd><ul><li>remove word repetition in fileHelpAuthor string</li></ul></dd><dt>2013-06-16 Jose Luis Neder</dt><dd><ul><li>resolve issue2320: save prompted author name in ~/.darcs/author instead of ./_darcs/prefs/author</li><li>resolve issue2321: when no patch name given, directly invoke text editor</li></ul></dd><dt>2013-04-30 Guillaume Hoffmann</dt><dd><ul><li>remove repository flag DryRun parameter when not used or always NoDryRun</li></ul></dd><dt>2013-04-05 Ganesh Sittampalam</dt><dd><ul><li>fix test for Windows</li></ul></dd><dt>2013-03-10 Sebastian Fischer</dt><dd><ul><li>Follow-up on patch1066 resolving issue2312.</li><li>resolve issue2312: posthooks for 'record' and 'amend-record' should receive DARCS_PATCHES</li><li>Added tests for issue2312: posthooks for 'record' and 'amend-record' should receive DARCS_PATCHES</li></ul></dd><dt>2013-02-16 Ganesh Sittampalam</dt><dd><ul><li>resolve issue2227: move the rebase patch to the end before an amend-record</li><li>tidy command definitions in Darcs.UI.Commands.Rebase</li><li>resolve issue2248: always clean up rebase-in-progress state</li><li>add --ignore-times option to rebase commands that read the working dir</li></ul></dd><dt>2013-03-08 Sebastian Fischer</dt><dd><ul><li>resolve issue2311: posthook for 'get' should run in created repo</li><li>Added tests for Issue 2311.</li></ul></dd><dt>2013-06-03 Guillaume Hoffmann</dt><dd><ul><li>haddocks for functions that look for user e-mail</li></ul></dd><dt>2013-03-02 Radoslav Dorcik</dt><dd><ul><li>Resolve issue2163: new option for amend, select author for patch stealing.</li></ul></dd><dt>2013-05-29 BSRK Aditya</dt><dd><ul><li>Export doOptimizeHTTP from Optimize module</li><li>Increase efficiency of patch index update by more efficient extraction</li></ul></dd></dl>See <a href=\"http://wiki.darcs.net/DarcsWeeklyNews/2013-06-30\">darcs wiki entry</a> for details." nil nil "56ea395ce4cd3bedb7fbf7289242b5bb") (192 (20949 25792 617926) "http://wadler.blogspot.com/2013/06/knowledge-economy.html" "Philip Wadler: Knowledge Economy" "noreply@blogger.com (Philip Wadler)" "Sun, 30 Jun 2013 11:20:54 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-5FG3qlbvISc/UdATLL5FduI/AAAAAAAACdk/5DgXlPXknxY/s242/ke-logo.gif\"><img src=\"http://2.bp.blogspot.com/-5FG3qlbvISc/UdATLL5FduI/AAAAAAAACdk/5DgXlPXknxY/s400/ke-logo.gif\" height=\"208\" border=\"0\" width=\"400\" /></a></div><div style=\"clear: both; text-align: justify;\" class=\"separator\">UCU writes:</div><blockquote class=\"tr_bq\"><span style=\"background-color: white; color: #222222; text-align: start;\"><span style=\"font-family: inherit;\">Wednesday’s spending review was bad news for universities, colleges and students. Student visa charges will go up, student grants will be frozen and funding aimed at encouraging the poorest students to apply to university will be axed. On Thursday, Danny Alexander announced plans to sell off student loans. All this in the same week that the OECD research showed the UK falling behind in investment in higher education at a time when demand for highly skilled graduates is still rising faster than supply.</span></span></blockquote>Sign up to the <a href=\"http://www.knowledgeeconomy.org.uk/\">Knowledge Economy campaign</a>.<br /><div style=\"clear: both; text-align: center;\" class=\"separator\"><br /></div><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/-PWs4Y4eMJZg/UdASqk29BeI/AAAAAAAACdg/6iOJK4FXLTE/s1600/ke1.tiff\"><img src=\"http://3.bp.blogspot.com/-PWs4Y4eMJZg/UdASqk29BeI/AAAAAAAACdg/6iOJK4FXLTE/s640/ke1.tiff\" height=\"188\" border=\"0\" width=\"640\" /></a></div><div style=\"clear: both; text-align: center;\" class=\"separator\"><br /></div><br /><div style=\"clear: both; text-align: center;\" class=\"separator\"></div><br />" nil nil "34884c5760602ac45a7f0cd270449f8d") (191 (20949 25792 617400) "http://praisecurseandrecurse.blogspot.com/2013/06/the-polar-game-in-haskell-day-4-12.html" "Paul Potts: The Polar Game in Haskell, Day 4 1/2: Folding a Penguin" "noreply@blogger.com (Paul Potts)" "Sat, 29 Jun 2013 19:03:00 +0000" "<p>So, just a quick update today. While I was cooking bacon this morning I looked at comments and tried to implement an idea I had last night. Roland suggested I could get rid of <b>Edge</b>. I had already been asking myself this. Using a special flag value for the edge-of-board case came from the Objective-C version where I wanted to avoid reading tiles outside the bounds of the board array. When using lists there is a built-in termination condition, so Edge is gone completely.</p> <p>Roland also suggested a simplified next_ppos, like so:</p> <pre>next_ppos :: Pos -> Dir -> Pos<br />next_ppos pos dir = Pos ( posY pos + fst step ) ( posX pos + snd step )<br />    where step = delta dir<br />          delta East = ( 0, 1 )<br />          delta South = ( 1, 0 )<br />          delta West = ( 0, -1 )<br />          delta North = ( -1, 0 )</pre> <p>So that's in there now. Thanks, Roland!</p> <p>The next thing I wanted to do is get rid of that ugly test code with all the nested calls to next_world. I was re-reading <i>Learn You a Haskell</i> and it occurred to me that this sort of thing -- distilling a list -- is what <i>folds</i> are for. And then, a minute later, that I don't actually want to <i>fold</i> the worlds down to one final world -- I want to capture all the intermediate worlds as we process a list of moves. And that's what a <i>scan</i> is for. So we're conducting surveillance on the penguin as he goes about his business. GHCI tells me that the type of <b>scanl</b> is <b>(a -> b -> a) -> a -> [b] -> [a]</b>. So I'm calling it with a function that takes a <b>World</b> and a <b>Dir</b> and returns a <b>World</b>. That's the <b>(a -> b -> a)</b> part. Then it gets an initial <b>World</b>, that's the <b>a</b>, and a list of elements of type <b>Dir</b>, that's the <b>[b]</b>, and returns a list of elements of type <b>World</b>, that's <b>[a]</b>.</p> <pre>moves_to_dirs :: [(Dir, Int)] -> [Dir]<br />moves_to_dirs [] = []<br />moves_to_dirs (m:ms) = replicate ( snd m ) ( fst m ) ++ moves_to_dirs ms<br /><br />moves_board_1 = [(East,21),(South,2), (East,3),(North,2),(West,2)]<br /><br />move_sequence :: [(Dir,Int)] -> [World]<br />move_sequence repeats = scanl next_world init_world steps<br />    where steps = moves_to_dirs repeats<br /><br />main :: IO ()<br />main = do<br />    mapM_ putStrLn pretty_worlds<br />    where worlds = move_sequence moves_board_1</pre> <p>And that gives me the whole shebang, ending in:</p> <pre>penguin @: Pos {posY = 0, posX = 22}, facing: West, hearts: 3<br />tr __________________________________________tr _______________ic ______<br />tr ___bo ___mt ___he ic he ___________________________tr ______tr ______<br />tr _____________________________________________he _________mt ho ______<br />tr tr ____________tr ___________________________________________________<br /><br />penguin @: Pos {posY = 0, posX = 21}, facing: West, hearts: 3<br />tr __________________________________________tr ic _____________________<br />tr ___bo ___mt ___he ic he ___________________________tr ______tr ______<br />tr _____________________________________________he _________mt ho ______<br />tr tr ____________tr ___________________________________________________</pre> <p>Oh, if you just want to see the final result, foldl will work here. Their types are identical, except that foldl returns a single <b>a</b> (in this case, a <b>World</b>) instead of a list of elements of type <b>World</b>. So a function to make use of that just returns a single <b>World</b>, but everything else is the same. Like so:</p> <pre>move_sequence' :: [(Dir,Int)] -> World<br />move_sequence' repeats = foldl next_world init_world steps<br />    where steps = moves_to_dirs repeats</pre> <p>And then I can display both:</p> <pre>main :: IO ()<br />main = do<br />    mapM_ putStrLn pretty_worlds <br />    putStrLn pretty_final_world<br />    where worlds = move_sequence moves_board_1<br />          final_world = move_sequence' moves_board_1<br />          pretty_worlds = map pretty_world worlds</pre> <p>I like it -- examples of fold and scan that are a little more complex than the usual textbook examples. Personally I'd rather read more of those and less about how we can implement some simple math operation that can be trivially implemented in a dozen other, more readable ways.</p> <p>Oh, and it's not thoroughly tested or finished by any means, but if you'd like to play with this code, it's on github now: <a href=\"https://github.com/paulrpotts/arctic-slide-haskell\">https://github.com/paulrpotts/arctic-slide-haskell</a>. Comments are welcome as always.</p>" nil nil "e644f992ffc62cdd15429eb6c34796e3") (190 (20949 25792 616596) "http://lpuppet.banquise.net/blog/2013/06/28/full-rewrite-in-progress/" "language-puppet: Full rewrite in progress" nil "Fri, 28 Jun 2013 20:24:00 +0000" "<p>In the process of writing the language-puppet library, I learned quite a lot about Haskell and its libraries. The first part of language-puppet that was written was the parser. At that time I did not understand monads, brute-forced the do-notation until it seemed to do what I wanted, and generally made all kind of blunders. The other problem was that I was learning Puppet too, at a time when it was changing a lot and nothing was really documented. This led to unfortunate decisions that I already <a href=\"http://lpuppet.banquise.net/blog/2012/10/08/types-used-in-the-interpretation-stage/\">documented</a>.</p>
<p>I dediced to rewrite everything from scratch, by directly implementing all I could find in the
<a href=\"http://docs.puppetlabs.com/puppet/3/reference/\">reference</a>. I started a new parser during the weekend, encoding as many verifications as possible in
it, and then tried it on real manifests. Boy, was I naïve ! It did not work at all. The specification is good for learning the language or dissipating
some common misconceptions, but is of moderate use for my purpose. I relaxed most of the checks and it seems to work now.</p>
<p><img src=\"http://lpuppet.banquise.net/images/lpuppet-parser-color.png\" alt=\"Alt text\" /></p>
<p>On the technical side, I am now using the <a href=\"http://hackage.haskell.org/package/parsers\">parsers</a> package, which has a very nice interface. I considered
using <a href=\"http://hackage.haskell.org/package/trifecta\">trifecta</a> as the underlying parser. Its error messages are gorgeous, but it turns out it is not trivial to get my own <em>lexeme</em>
system in place with it. I went with <a href=\"http://hackage.haskell.org/package/parsec\">parsec</a>, and, instead of using the
<a href=\"http://hackage.haskell.org/package/parsec-parsers\">parsec-parsers</a> package, wrote my own instances (to be honest I copy-pasted those of the package
and added a non-default definition for <em>token</em>). Edward Kmett was nice enough to give me pointers on how to do this with trifecta, but this did look quite
clumsy. He hinted that he might work on a monad-transformer approach to this problem, so I am just waiting for this to happen. The nice thing about
the parsers approach is that switching now is trivial.</p>
<p>As can be seen on the previous screenshot, I am using a <a href=\"http://hackage.haskell.org/package/ansi-wl-pprint\">nice pretty printing library</a> that let me
(ab)use color.</p>
<p>Another huge difference is that I now use strict type whenever possible. The previous version seemed to be able to support an arbitrary number of worker threads with
300mb of storage for my catalogs, whereas the Puppet version could go up to 800mb for a single thread. I would like to at least halve this figure for
the next version.</p>
<p>The next step is to write the new <em>daemon</em> infrastructure. I already have a generic <a href=\"https://github.com/bartavelle/filecache\">file-cache</a> module that
let you cache things related to files. When a file is modified, the cached value is automagically invalidated (using inotify). I hope this will work
well in practice and will not be blocking all the other threads.</p>" nil nil "5f0d3e3d368b716a5a2100c34568da42") (189 (20949 25792 615804) "http://praisecurseandrecurse.blogspot.com/2013/06/the-polar-game-in-haskell-day-4.html" "Paul Potts: The Polar Game in Haskell, Day 4" "noreply@blogger.com (Paul Potts)" "Fri, 28 Jun 2013 20:07:00 +0000" "<p>OK, things are getting meaty: I've made some minor modifications to <b>World</b>:</p> <pre>data World = World { wBoard :: Board, wPenguinPos :: Pos,<br />                     wPenguinDir :: Dir, wHeartCount :: Int }<br />                     deriving (Show)</pre> <p>This extracts the sequence of tiles in front of the penguin, for various directions, from a nested list representation of the board:</p> <pre>view :: Board -> Pos -> Dir -> [Tile]<br />view board pos East = ( drop ( posX pos + 1 ) $<br />    board !! ( posY pos ) ) ++ [Edge]<br />view board pos South = ( drop ( posY pos + 1 ) $<br />    ( transpose board ) !! ( posX pos ) ) ++ [Edge]<br />view board pos West = ( reverse $ take ( posX pos ) $<br />    board !! ( posY pos ) ) ++ [Edge]<br />view board pos North = ( reverse $ take ( posY pos ) $<br />    ( transpose board ) !! ( posX pos ) ) ++ [Edge]</pre> <p>I have fleshed out slide and collide after some testing; I haven't tested all my known cases yet. Maybe tomorrow. Here is how I create the initial world:</p> <pre>init_world :: World<br />init_world = ( World init_board ( Pos 0 0 ) South 3 )</pre> <p>South because in the south-facing representation, the penguin's face is visible (although of course I don't have a GUI yet).</p> <p>A little utility function for clarity:</p> <pre>nest :: [a] -> [[a]]<br />nest xs = [xs]</pre> <p>And now, deep breath, the logic to build the next board out of the current board combined with a replaced list of tiles that may have been changed due to object interaction. It gets pretty ugly here when we're undoing the appending of Edge with init, and undoing the reversing that view has done when looking North and West, and working with the transposed board for North and South. There are some extra line breaks in there that are not in the working code. I have an issue with my <b>let</b> clauses not compiling correctly if I break the lines. I'm sure there's a prettier workaround, and I will look that up, but after going down a rabbit hole of Haskell syntax, I have timed out for today and right now I'm just happy it runs:</p> <pre>next_board :: Board -> Pos -> Dir -> ( Bool, Board )<br />next_board board pos East =<br />    let ( penguin_could_move, updated_view ) =<br />        step $ view board pos East<br />    in (<br />        penguin_could_move,<br />        take ( posY pos ) board ++<br />        nest (<br />            ( take ( posX pos + 1 )<br />                ( board !! ( posY pos ) ) ) ++<br />            ( init updated_view ) ) ++<br />        drop ( posY pos + 1 ) board )<br />next_board board pos South =<br />    let ( penguin_could_move, updated_view ) =<br />        step $ view board pos South<br />    in (<br />        penguin_could_move,<br />        transpose (<br />            take ( posX pos ) ( transpose board ) ++<br />            nest (<br />                ( take ( posY pos + 1 )<br />                    ( ( transpose board ) !! ( posX pos ) ) ) ++<br />                ( init updated_view ) ) ++<br />        drop ( posX pos + 1 ) ( transpose board ) ) )<br />next_board board pos West =<br />    let ( penguin_could_move, updated_view ) =<br />        step $ view board pos West<br />    in (<br />        penguin_could_move,<br />        take ( posY pos ) board ++<br />        nest (<br />            ( reverse ( init updated_view ) ) ++<br />            ( drop ( posX pos )<br />                ( board !! ( posY pos ) ) ) ) ++<br />        drop ( posY pos + 1 ) board )<br />next_board board pos North =<br />    let ( penguin_could_move, updated_view ) =<br />        step $ view board pos North<br />    in (<br />        penguin_could_move,<br />            transpose (<br />            take ( posX pos ) ( transpose board ) ++<br />            nest (<br />                ( reverse ( init updated_view ) ) ++<br />                ( drop ( posY pos )<br />                    ( ( transpose board ) !! ( posX pos ) ) ) ) ++<br />            drop ( posX pos + 1 ) ( transpose board ) ) )</pre> <p>That... seems like way too much code, and I would like to kill it in favor of using a real array type -- soon. The tutorials were pretty insistent that I try to use lists. I'm pretty sure this is not what they meant. I will say that I was really impressed, writing this, how much of it worked the first time, as soon as I got it past the compiler. But that doesn't necessarily mean this is the best possible design for this code.</p> <p>Anyway, updating penguin pos:</p> <pre>next_ppos :: Pos -> Dir -> Pos<br />next_ppos pos East = ( Pos ( posY pos ) ( posX pos + 1 ) )<br />next_ppos pos South = ( Pos ( posY pos + 1 ) ( posX pos ) )<br />next_ppos pos West = ( Pos ( posY pos ) ( posX pos - 1 ) )<br />next_ppos pos North = ( Pos ( posY pos - 1 ) ( posX pos ) )</pre> <p>And, updating the world. I had a similar problem with the line-broken <b>let</b> clause here:</p> <pre>next_world :: World -> Dir-> World<br />next_world old_world move_dir =<br />    let ( can_move, board ) = next_board ( wBoard old_world )<br />        ( wPenguinPos old_world ) ( wPenguinDir old_world )<br />    in<br />        if ( move_dir /= wPenguinDir old_world )<br />        then ( World ( wBoard old_world ) ( wPenguinPos old_world )<br />                   move_dir ( wHeartCount old_world ) )<br />        else ( World board<br />                   ( next_ppos ( wPenguinPos old_world )<br />                               ( wPenguinDir old_world ) )<br />                   ( wPenguinDir old_world )<br />                   ( wHeartCount old_world ) )</pre> <p>Now, some pretty-printing, since it gets pretty tedious to visualize the board from reading the dumped-out list in GHCI:</p> <pre>pretty_tiles :: [Tile] -> String<br />pretty_tiles [] = \"\\n\"<br />pretty_tiles (t:ts) = case t of<br />                 Empty     -> \"___ \"<br />                 Mountain  -> \"mtn \"<br />                 House     -> \"hou \"<br />                 Ice_Block -> \"ice \"<br />                 Heart     -> \"hea \"<br />                 Bomb      -> \"bom \"<br />                 Tree      -> \"tre \"<br />                 Edge      -> \"### \"<br />             ++ pretty_tiles ts<br /><br />pretty_board :: Board -> String<br />pretty_board [] = \"\"<br />pretty_board (ts:tss) = pretty_tiles ts ++ pretty_board tss<br /><br />pretty_world :: World -> String<br />pretty_world world =<br />    \"penguin @: \" ++ show ( wPenguinPos world ) ++<br />    \", facing: \"  ++ show ( wPenguinDir world ) ++<br />    \", hearts: \"  ++ show ( wHeartCount world ) ++<br />    \"\\n\" ++ pretty_board ( wBoard world )</pre> <p>And here's where the rubber meets the road -- or, rather, fails to. I need state, at least simulated state. I messed with state monads for a while but I'm not quite ready. I will tackle that another day. I messed with trying to capture a list in a closure and append a series of successive worlds to it but while that would work fine in Scheme, Lisp, or Dylan I realized that in Haskell I was just fighting the entire language design. So I gave in and did this stupid thing for now, just so I could see my world updating and start to validate that all the tile interactions on the board work:</p> <pre>main :: IO ()<br />main = do<br />    putStrLn \"ArcticSlide start\"<br />    let world0 = init_world<br />    putStrLn $ pretty_world world0<br /><br />    -- 21 East<br />    let world5  = next_world ( next_world ( next_world ( next_world (<br />        next_world world0  East ) East ) East ) East ) East<br />    let world10 = next_world ( next_world ( next_world ( next_world (<br />        next_world world5  East ) East ) East ) East ) East<br />    let world15 = next_world ( next_world ( next_world ( next_world (<br />        next_world world10 East ) East ) East ) East ) East<br />    let world20 = next_world ( next_world ( next_world ( next_world (<br />        next_world world15 East ) East ) East ) East ) East<br />    let world21 = next_world world20 East<br />    putStrLn $ pretty_world world21<br />    -- 2 South<br />    let world23 = next_world ( next_world world21 South ) South<br />    putStrLn $ pretty_world world23<br />    -- 3 East<br />    let world26 = next_world ( next_world (<br />        next_world world23 East ) East ) East<br />    putStrLn $ pretty_world world26<br />    -- 2 North<br />    let world28 = next_world ( next_world world26 North ) North<br />    putStrLn $ pretty_world world28<br />    -- 2 West<br />    let world30 = next_world ( next_world world28 West ) West<br />    putStrLn $ pretty_world world30</pre> <p>That is far from what I'd like to be doing eventually with managing game moves, and I still haven't put in any handling for the heart count, but it works:</p> <pre>ArcticSlide start<br />penguin @: Pos {posY = 0, posX = 0}, facing: South, hearts: 3<br />tr __________________________________________tr _______________ic ______<br />tr ___bo ___mt ___he ic he ___________________________tr ______tr ______<br />tr _____________________________________________he _________mt ho ______<br />tr tr ____________tr ___________________________________________________<br /><br />...<br /><br />penguin @: Pos {posY = 0, posX = 22}, facing: North, hearts: 3<br />tr __________________________________________tr _______________ic ______<br />tr ___bo ___mt ___he ic he ___________________________tr ______tr ______<br />tr _____________________________________________he _________mt ho ______<br />tr tr ____________tr ___________________________________________________<br /><br />penguin @: Pos {posY = 0, posX = 21}, facing: West, hearts: 3<br />tr __________________________________________tr ic _____________________<br />tr ___bo ___mt ___he ic he ___________________________tr ______tr ______<br />tr _____________________________________________he _________mt ho ______<br />tr tr ____________tr ___________________________________________________<br /></pre> <p>Aaaand... the penguin has pushed the ice block in the upper right to the west, and it has slid west and become blocked by the tree. That's... good, right? My brain is a little fried. All that to update a game board. I need a break, and maybe a stiff drink. I'm going to have to fortify myself before I successfully tackle the state monad. But I am determined!</p>" nil nil "73a798ed492ba1b9458e4eef40bcfa9e") (188 (20949 25792 614068) "http://wadler.blogspot.com/2013/06/parallel-prefix-scan-and-mapreduce.html" "Philip Wadler: Parallel prefix scan and MapReduce" "noreply@blogger.com (Philip Wadler)" "Fri, 28 Jun 2013 12:25:45 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-xZnXzPFujn8/Uc1_cVu63CI/AAAAAAAACdA/zp4IE1PRG54/s445/MapReduce.png\"><img src=\"http://2.bp.blogspot.com/-xZnXzPFujn8/Uc1_cVu63CI/AAAAAAAACdA/zp4IE1PRG54/s400/MapReduce.png\" height=\"341\" border=\"0\" width=\"400\" /></a></div>The <a href=\"http://dl.acm.org/citation.cfm?id=1327492\">MapReduce</a> paper begins its discussion of related work as follows:<br /><blockquote class=\"tr_bq\">Many systems have provided restricted programming<br />models and used the restrictions to parallelize the computation<br />automatically. For example, an associative function<br />can be computed over all prefixes of an <i>N</i> element<br />array in log <i>N</i> time on <i>N</i> processors using parallel prefix<br />computations.</blockquote>Has anyone implemented parallel prefix scan as an extension to MapReduce or a similar framework such as Hadoop, and did it prove useful?" nil nil "d5f695d9be3979005be79c7d456a701f") (187 (20949 25792 613643) "http://praisecurseandrecurse.blogspot.com/2013/06/the-polar-game-in-haskell-day-3.html" "Paul Potts: The Polar Game in Haskell, Day 3" "noreply@blogger.com (Paul Potts)" "Fri, 28 Jun 2013 01:12:00 +0000" "<p>More phone interviews, more coding. On my laptop, amidst a gaggle of fighting children, during a thunderstorm, with our basement flooding, with the kind assistance of some friendly commentors, a little more progress. Let's change <b>Pos</b></p> <pre>data Pos = Pos { posY :: Int, posX :: Int }<br />    deriving (Show, Eq)</pre> <p>And define a game world:</p> <pre>data World = World { board :: Board, penguinPos :: Pos,<br />                          penguinDir :: Dir,<br />                          heartCount :: Int } deriving (Show)</pre> <p>It was painful, took an embarrassingly long time, and this can't possibly be how I want to keep it indefinitely, but I finished <b>slice</b> which treats a list of lists of tiles like a 2-dimensional array and gives us what the penguin sees before him, looking in a given direction:</p> <pre>slice :: Board -> Pos -> Dir -> [Tile]<br />slice board pos East = ( drop ( posX pos ) $ <br />    board !! ( posY pos ) ) ++ [Edge]<br />slice board pos South = ( drop ( posY pos ) $ <br />    ( transpose board ) !! ( posX pos ) ) ++ [Edge]<br />slice board pos West = ( reverse $ take ( posX pos + 1 ) $ <br />    board !! ( posY pos ) ) ++ [Edge]<br />slice board pos North = ( reverse $ take ( posY pos + 1 ) $ <br />    ( transpose board ) !! ( posX pos ) ) ++ [Edge]</pre> <p>Let's just leave that as it is for now and use it, with the intent of replacing it with a real array of some sort later on. I still have to figure out how to merge a modified penguin track with an unmodified board to create the next state of the entire board... that's not going to be pretty, but it's doable.</p> <p>So, one of the things I really love about Haskell is that once you get these pieces, they really do start come together nicely. Let's go ahead and define the first board. I could make it from the strings or a run-length encoding or something, but for now let's just bite the bullet and build the list the hard way:</p> <pre>get_initial_board :: [[Tile]]<br />get_initial_board = [[Tree,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Tree,Empty,Empty,<br />                      Empty,Empty,Empty,Ice_Block,Empty,Empty],<br />                     [Tree,Empty,Bomb,Empty,Mountain,Empty,<br />                      Heart,Ice_Block,Heart,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty,<br />                      Tree,Empty,Empty,Tree,Empty,Empty],<br />                     [Tree,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Heart,Empty,<br />                      Empty,Empty,Mountain,House,Empty,Empty],<br />                     [Tree,Tree,Empty,Empty,Empty,Empty,<br />                      Tree,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty]]<br /><br />penguin_view :: Board -> Pos -> Dir -> [Tile]<br />penguin_view board pos dir = drop 1 $ slice board pos dir</pre> <p>So now we can actually start doing stuff with this. Here's what's in front of the penguin when he looks at the board from different points, in different directions:</p> <a href=\"http://4.bp.blogspot.com/-7lLSOnNaHd8/Ua4uWuQMFmI/AAAAAAAADBs/8ByFzRW9Ccs/s1600/level_1_blown_up.tiff\"><img src=\"http://4.bp.blogspot.com/-7lLSOnNaHd8/Ua4uWuQMFmI/AAAAAAAADBs/8ByFzRW9Ccs/s640/level_1_blown_up.tiff\" height=\"120\" border=\"0\" width=\"512\" /></a> <pre>*Main> penguin_view get_initial_board (Pos 0 0) East<br />[Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,<br />Empty,Empty,Empty,Empty,Empty,Tree,Empty,Empty,Empty,Empty,<br />Empty,Ice_Block,Empty,Empty,Edge]<br /><br />*Main> penguin_view get_initial_board (Pos 0 0) South<br />[Tree,Tree,Tree,Edge]<br /><br />*Main> penguin_view get_initial_board (Pos 0 0) West<br />[Edge]<br /><br />*Main> penguin_view get_initial_board (Pos 0 0) North<br />[Edge]<br /><br />*Main> penguin_view get_initial_board (Pos 3 21) North<br />[House,Tree,Ice_Block,Edge]</pre> <p>Fun! Tomorrow, if I can manage it... an updated world.</p>" nil nil "d534ae397d50fec22f33bf8801abbb99") (186 (20949 25792 612797) "http://feedproxy.google.com/~r/FpComplete/~3/LJ7ZmluBNOk/fp-haskell-center-beta-demo" "FP Complete: FP Haskell Center Beta Demo" nil "Thu, 27 Jun 2013 19:51:00 +0000" "<p>Thanks to the roughly 1000 people who have already
<a href=\"https://www.fpcomplete.com/business/haskell-center\">requested beta accounts</a> to try FP Haskell Center.
We are about to start admitting beta users in small groups,
and in the meantime I thought you all might enjoy a detailed demo. Enjoy!</p><p><a href=\"http://www.youtube.com/watch?v=cyyDmQKcHMs\">FP Haskell Center Beta Demo</a> on YouTube.</p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=LJ7ZmluBNOk:MzhjMDnd8lU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=LJ7ZmluBNOk:MzhjMDnd8lU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=LJ7ZmluBNOk:MzhjMDnd8lU:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=LJ7ZmluBNOk:MzhjMDnd8lU:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=LJ7ZmluBNOk:MzhjMDnd8lU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=LJ7ZmluBNOk:MzhjMDnd8lU:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/LJ7ZmluBNOk\" height=\"1\" width=\"1\" />" nil nil "561d6a0962b18a3fbdc4b80a616e2bbf") (185 (20949 25792 612418) "http://theorylunch.wordpress.com/2013/06/27/having-lunch-in-a-garden-of-eden/" "Theory Lunch (Institute of Cybernetics, Tallinn): Having lunch in a Garden of Eden" nil "Thu, 27 Jun 2013 13:30:53 +0000" "<p>Today I talked about the Garden-of-Eden theorem, the first rigorous result in cellular automata theory.</p>
<p>I wrote a post about it in my new blog, dedicated to cellular automata, which I launched this week. The post contains extended proofs and examples, and most important, fixes several errors I had made during the talk. I might update it later, by adding figures—which are well known to take their time.</p>
<p>Link: <a href=\"http://anotherblogonca.wordpress.com/2013/06/27/in-a-garden-of-eden/\" target=\"_blank\">http://anotherblogonca.wordpress.com/2013/06/27/in-a-garden-of-eden/</a></p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/theorylunch.wordpress.com/1017/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/theorylunch.wordpress.com/1017/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=theorylunch.wordpress.com&blog=43735749&post=1017&subd=theorylunch&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "6f5680cd76bebaa814eb07f5b0e21d98") (184 (20949 25792 611900) "http://praisecurseandrecurse.blogspot.com/2013/06/the-polar-game-in-haskell-day-2.html" "Paul Potts: The Polar Game in Haskell, Day 2" "noreply@blogger.com (Paul Potts)" "Wed, 26 Jun 2013 20:59:00 +0000" "<p>Another short day since I had several phone interviews. Thanks to the folks who left comments!</p> <p>I got a little further today; I feel like I'm starting to understand Haskell's data handling a little bit better. It's a cliché but I think the hard part is un-learning, and understanding what something like this <i>doesn't</i> do. So here's where it stands now -- not finished by any means, but coming along, with painful slowness as I continue to learn:</p> <pre>data Dir = North | East | South | West<br />    deriving (Show, Eq)<br /><br />data Pos y x = Pos Int Int<br />    deriving (Show, Eq)<br /><br />-- N.B.: capitalization of initial letters in posY, posX is<br />-- semantically important!<br />posY ( Pos y x ) = y<br />posX ( Pos y x ) = x<br /><br />data Tile = Empty | Tree | Mountain | House | Ice_Block |<br />    Bomb | Heart | Edge deriving (Show, Eq)<br /><br />-- Different types of tiles have different properties in<br />-- different interaction contexts: <br /><br />-- The penguin can walk through empty tiles or trees (forest)<br />walkable :: Tile -> Bool<br />walkable t = ( t == Empty ) || ( t == Tree )<br /><br />-- But everything except empty tiles will block sliding objects<br />blocking :: Tile -> Bool<br />blocking t = ( t /= Empty )<br /><br />-- A subset of tiles are movable (and will slide until blocked)<br />movable :: Tile -> Bool<br />movable t = ( t == Bomb ) || ( t == Heart ) || ( t == Ice_Block )<br /><br />-- A subset of tiles aren't movable; note that this set<br />-- overlaps blocking and that Tree is both walkable and fixed<br />fixed :: Tile -> Bool<br />fixed t = ( t == House ) || ( t == Mountain ) || ( t == Edge )</pre> <p>That all should be fairly non-controversial, I think. The predicate approach to classifying tiles in different contexts may actually make more sense in Haskell, given that I can then use these predicates as guards. The replacement for a simple struct, <b>Pos</b>, still feels awkward -- I haven't really dug into whether it could be improved with record syntax, or some other technique. For now it's there because it works.</p> <p>All the beginner tutorials say \"don't use arrays, don't use arrays, don't use arrays!\" At least not until I reach the stage where I need to optimize the implementation. So I'll try that. Let's try a list, and I'll extract \"slices\" from it, lists starting at a given <b>Pos</b> going in one of four different directions. Eventually I want the slice function to terminate the slices with <b>Edge</b> tiles that aren't actually stored in the list. So... I have to think about this some more, but here's a single case, sort of taken care of:</p> <pre>type Board = [[Tile]]<br /><br />slice :: Board -> Pos y x -> Dir -> [Tile]<br />slice board pos East = drop ( posX pos )<br />    $ head $ drop ( posY pos ) board<br />slice _ _ _ = error \"slice: not handled yet!\"</pre> <p>I don't have <b>slide</b> finished, but here's a version of collide that works, at least a little:</p> <pre>collide :: [Tile] -> [Tile]<br />collide (t:(Empty:ts)) | movable t =<br />    [Empty] ++ collide (t:ts)<br />collide (Bomb:(Mountain:ts)) = [Empty, Empty] ++ ts<br />collide (Heart:House:ts) = [Empty, House] ++ ts<br />collide (_) = error \"collide: unexpected case!\"</pre> <p>The nested pattern <b>(Bomb:(Mountain:ts))</b> was sort of a flash of inspiration -- but it appears that maybe both this version and the <b>(Heart:House:ts)</b> version work the same -- I think -- so perhaps it's kind of pointless. It seemed to go along with the \"destructure it the way you would structure it\" idea, although I would normally not build a list out of cons cells unless it was irregular in some way.</p> <p>Here's the penguin step function, returning True if the penguin can move onto the tile at the head of the list:</p> <pre>step :: [Tile] -> ( Bool, [Tile] )<br />step [] = error \"step: empty list!\"<br />step ts = if walkable (head ts) then ( True, ts )<br />                                else ( False, collide ts )</pre> <p>And there's a move, which \"absorbs\" the case where the penguin is turned to face a different direction. It's not really done; the idea is that it will give back the board, basically generating a new world. For now we kind of punt on the question of how to rebuild the board out of the existing board and the modified \"slice\" -- and so the I just return a list as the first element of the tuple. In the first case where the penguin hasn't moved, that doesn't actually make sense, but it satisfies GHC for now (wow, she's kind of a harsh mistress, but you've got to love those thigh-high black leather boots!)</p> <pre>move :: Board -> Pos y x -> Dir -> Dir -><br />    ( [Tile], Pos y x, Dir, Dir )<br />move board pos move_dir penguin_dir =<br />    if move_dir /= penguin_dir<br />    then ( head board, pos, move_dir, move_dir )<br />    else ( collide $ slice board (Pos 1 0) penguin_dir,<br />        pos, penguin_dir, penguin_dir )<br /></pre> <p>Boy, that's tuple-icious... not sure I like it, but it's a start. So:</p> <pre>*Main> walkable Tree<br />True<br />*Main> :t Pos<br />Pos :: Int -> Int -> Pos y x<br />*Main> let slice = [Heart, House]<br />*Main> collide slice<br />[Empty,House]<br />*Main> let slice = [Bomb, Empty, Mountain]<br />*Main> collide slice<br />[Empty,House]<br />*Main> let board = [[Empty, Tree, Empty, Edge],<br />    [Bomb, Empty, Mountain, Edge]]<br />*Main> move board (Pos 1 0) West East<br />([Empty,Tree,Empty,Edge],Pos 1 0,West,West)<br />*Main> move board (Pos 1 0) East East<br />([Empty,Empty,Empty,Edge],Pos 1 0,East,East)</pre> <p>More tomorrow if I can manage it! Oh, and it's here, such as it is: <a href=\"https://github.com/paulrpotts/arctic-slide-haskell\">https://github.com/paulrpotts/arctic-slide-haskell</a></p>" nil nil "fb64711f3be5863556b3e0ccf567a2c9") (183 (20949 25792 610843) "http://blog.plover.com/prog/git-vacillation.html" "Mark Jason Dominus: Rewriting published history in Git" "mjd@plover.com (Mark Dominus)" "Wed, 26 Jun 2013 18:19:00 +0000" "<a href=\"http://blog.plover.com/prog/git-habits.html\">My earlier article about my
habits using Git</a> attracted some comment, most of which was
favorable. But one recurring comment was puzzlement about my seeming
willingness to rewrite published history.  In practice, this was not
at all a problem, I think for three reasons:<p>
</p><ol>
<li>Rewriting published history is not nearly as confusing as
people seem to think it will be.
</li><li>I worked in a very small shop with very talented developers, so
the necessary communication was easy.
</li><li>Our repository setup and workflow were very well-designed and
unusually effective, and made a lot of things easier, including this one.
</li></ol>
This article is about item 3.  Here's what they do at my previous
workplace to avoid most of the annoyances of people rewriting
published history.<p>
If there are <i>N</i> developers, there are <i>N</i>+1 repositories.</p><p>
There is a master repository to which only a few very responsible
persons can push. It is understood that history in this repository
should almost never be rewritten, only in the most exceptional
circumstances.  We usually call this master repository
<tt>gitbox</tt>.  It has only a couple of branches, typically
<tt>master</tt> and <tt>deployed</tt>.
You had better not push incomplete work to <tt>master</tt>, because
if you do someone is likely to deploy it.
When you deploy a new version
from <tt>master</tt>, you advance <tt>deployed</tt> up to
<tt>master</tt> to match.</p><p>
In addition, each developer has their own semi-public repository,
named after them, which everyone can read, but which nobody but them
can write.  Mine is <tt>mjd</tt>, and that's what we call it when
discussing it, but my personal git configuration calls it
<tt>origin</tt>. When I <tt>git push origin master</tt> I am pushing
to this semi-public repo.</p><p>
It is understood that this semi-public repository is my sandbox and I
am free to rewrite whatever history I want in it.  People building
atop my branches in this repo, therefore, know that they should be
prepared for me to rewrite the history they see there, or to contact
me if they want me to desist for some reason.</p><p></p><p>
When I get the changes in my own semi-public repository the way I want
them, <i>then</i> I push the changes up to gitbox.  Nothing is
considered truly \"published\" until it is on the master repo.</p><p>
When a junior programmer is ready to deploy to the master repository,
they can't do it themselves, because they only have read access on the
master.  Instead, they publish to their own semi-private repository,
and then notify a senior programmer to review the changes.  The senior
programmer will then push those changes to the master repository and
deploy them.</p><p>
</p><p align=\"center\"><img src=\"http://pic.blog.plover.com/prog/git-vacillation/git%20repos.png\" /></p>
The semi-public <tt>mjd</tt> repo has lots of benefits.  I can rewrite
my branches 53 times a day (and I do!) but nobody will
care. Conversely, I don't need to know or care how much my co-workers
vacillate.<p>
If I do work from three or four different machines, I can use the
<tt>mjd</tt> repo to exchange commits between them.  At the end of the
day I will push my work-in-progress up to the <tt>mjd</tt> repo, and
then if I want to look at it later that evening, I can fetch the
work-in-progress to my laptop or another home computer.</p><p></p><p>
I can create and abandon many topic branches without cluttering up the
master repository's history.  If I want to send a change or a new test
file to a co-worker, I can push it to <tt>mjd</tt> and then point them
at the branch there.</p><p>
A related note: There is a lot of FUD around the rewriting of
published history.  For example, the \"gitinfo\" robot on the #git IRC
channel has a canned message:</p><p>
</p><blockquote>
Rewriting public history is a very bad idea.  Anyone else who
may have pulled the old history will have to <tt>git pull
--rebase</tt> and even worse things if they have tagged or
branched, so you must publish your humiliation so they know
what to do.  You will need to <tt>git push -f</tt> to force the push.
The server may not allow this.  <tt>See receive.denyNonFastForwards</tt>
(git-config)<p>
</p></blockquote>
I think this grossly exaggerates the problems.  Very bad!
Humiliation!  The server may deny you!  But dealing with a rebased
upstream branch is not very hard. It is at worst annoying: you have to
rebase your subsequent work onto the rewritten branch and move any
refs that pointed to that branch.  If you don't have any subsequent
work, you might still have to move refs, if you have any that point to
it, but you might not have any.<p>
[ Thanks to Rik Signes for helping me put this together. ]</p><p></p>" nil nil "1cf5f93b5240d1f03072f2aca64f4664") (182 (20949 25792 609704) "http://blog.plover.com/prog/git-habits.html" "Mark Jason Dominus: My Git Habits" "mjd@plover.com (Mark Dominus)" "Wed, 26 Jun 2013 18:19:00 +0000" "Miles Gould asked his Twitter followers whether they used <tt>git-add
-p</tt> or <tt>git-commit -a</tt> and how often.  My reply was too
long for Twitter, so here it is.<p>
First the short version: I use <tt>git-add -p</tt> frequently, and
<tt>git-commit -a</tt> almost never. The exception is when I'm working
on the repo that holds my blog, where I rarely commit changes to more
than one or two files at a time.  Then I'll usually just
<tt>git-commit -a -m ...</tt>.</p><p>
But I use <tt>git-add -p</tt> all the time. Typically what will happen
is that I will be developing some fairly complicated feature.  It will
necessitate a bunch of changes and reshuffling elsewhere in the
system.  I'll make commits on the topic branch as I go along without
worrying too much about whether the commits are neatly packaged.</p><p>
Often I'll be in the middle of something, with a dirty work tree, when
it's time to leave for the day.  Then I'll just commit everything with
the subject <tt>WIP</tt> (\"work-in-progress\").  First thing the next
morning I'll <tt>git-reset HEAD^</tt> and continue where I left
off.</p><p>
So the model is that the current head is usually a terrible mess,
accumulating changes as it moves forward in time.  When I'm done, I
will merge the topic into master and run the tests. </p><p>
If they pass, I am not finished.  The merge I just created is only a
draft merge.  The topic branch is often full of all sorts of garbage,
commits where I tried one approach, found it didn't work later on, and
then tried a different approach, places where I committed debugging
code, and so on. So it is now time to clean up the topic branch.  Only
the cleaned-up topic branch gets published.</p><p>
</p><h3>Cleaning up messy topic branches</h3>
The core of the cleanup procedure is to reset the head back to the
last place that look good, possibly all the way back to the merge-base
if that is not too long ago.  This brings all the topic changes into
the working directory. Then:<p>
</p><ol>
<li>Compose the commits: Repeat until the working tree is clean:<br />
<ol>
<li>Eyeball the output of <tt>git-diff</tt>
</li><li>Think of an idea for an intelligible commit
</li><li>Use <tt>git-add -p</tt> to stage the planned commit
</li><li>Use <tt>git diff --cached</tt> to make sure it makes sense
</li><li>Commit it
</li></ol>
</li><li>Order the commits: Use <tt>git-rebase --interactive</tt>
</li></ol>
Notice that this separates the work of composing the commits from the
work of ordering them.  This is more important than it might appear.
It would be extremely difficult to try to do these at the same time.
I can't know the sensible order for the commits until I know what the
commits are!  But it's very hard to know what the commits are without
actually making them.<p>
By separating these tasks, I can proceed something like this: I
eyeball the diff, and the first thing I see is something about the
penguin feature.  I can immediately say \"Great, I'll make up a commit
of all the stuff related to the penguin feature\", and proceed to the
<tt>git-add -p</tt> step without worrying that there might be other
stuff that should precede the penguin feature in the commit sequence.
I can focus on just getting the penguin commit right without needing
to think about any of the other changes.</p><p>
When the time comes to put the commits in order, I can do it well
because by then I have abstracted away all the details, and reduced
each group of changes to a single atomic unit with a one-line
description.</p><p>
For the most complicated cases, I will print out the diffs, read them
over, and mark them up in six colors of highlighter: code to throw
away gets marked in orange; code that I suspect is erroneous is pink.
I make many notes in pen to remind me how I want to divide up the
changes into commits.  When a commit occurs to me I'll jot a numbered
commit message, and then mark all the related parts of the diff with
that number.  Once I have the commits planned, I'll reset the topic
ref and then run through the procedure above, using <tt>git-add
-p</tt> repeatedly to construct the commits I planned on paper. Since
I know ahead of time what they are I might do them in the right order,
but more likely I'll just do them in the order I thought of them and
then reorder them at the end, as usual.</p><p>
For simple cases I'll just do a series of <tt>git-rebase
--interactive</tt> passes, pausing at any leftover <tt>WIP</tt>
commits to run the loop above, reordering the commits to squash
related commits together, and so on.</p><p>
The very simplest cases of all require no cleanup, of course.</p><p>
For example, here's my current topic branch, called <tt>c-domain</tt>,
with the oldest commits at the top:</p><p>
</p><pre>        055a2f7 correction to bulk consumer template
d9630bd DomainActivator half of Pobox Domain consumer
ebebb4a Add HasDomain role to provide ->domain reader for domain consumers
ade6ac6 stubbed domain test
e170e77 start templates for Pobox domain consumers
067ca81 stubbed Domain::ThumbTwiddler
685a3ee cost calculations for DomainActivator
ec8b1cc test fixes; trivial domain test passes now
845b1f2 rename InvoiceCharge::CreateDomain to ..::RegisterDomain
(e)     6083a97 add durations to Domain consumers and charges
c64fda0 tests for Domain::Activator consumer
41e4292 repeat activator tests for 1-year and 3-year durations
7d68065 tests for activator's replacement
(d)     87f3b09 move days_in_year to Moonpig::Util
3cd9f3b WIP
e5063d4 add test for sent invoice in domain.t
c8dbf41 WIP
9e6ffa4 add missing MakesReplacement stuff
fc13059 bring in Net::OpenSRS module
(c)     52c18fb OpenSRS interface
893f16f notes about why domain queries might fail
(b)     f64361f rename \"croak\" method to \"fail\" to avoid conflicts
4e500ec Domain::Activator initial_invoice_charge_pairs
(a)     3c5cdd4 WIP
</pre>
3c5cdd4 (a) was the end-of-day state for yesterday; I made it and
pushed it just before I dashed out the door to go home.  Such commits
rarely survive beyond the following morning, but if I didn't make them,
I wouldn't be able to continue work from home if the mood took me to
do that.<p>
f64361f (b) is a prime candidate for later squashing.  5c218fb (c)
introduced a module with a \"croak\" method.  This turned out to be a
stupid idea, because this conflicted with the <tt>croak</tt> function
from Perl's <tt>Carp</tt> module, which we use everywhere.  I needed
to rename it.  By then, the intervening commit already existed.  I
probably should have squashed these right away, but I didn't think of
it at the time.  No problem!  Git means never having to say \"If only
I'd realized sooner.\"</p><p>
Similarly, 6083a97 (e) added a days_in_year function that I later
decided at 87f3b09 (d) should be in a utility module  in a
different repository.  87f3b09 will eventually be squashed into
6083a97 so that days_in_year never appears in this code at all.</p><p>
I don't know what is in the WIP commits c8dbf41 or 3cd9f3b, for which
I didn't invent commit messages. I don't know why those are left in
the tree, but I can figure it out later.</p><p>
</p><h3>An example cleanup</h3>
Now I'm going to clean up this branch.  First I <tt>git-checkout -b
cleanup c-domain</tt> so that if something goes awry I can start over
completely fresh by doing <tt>git-reset --hard c-domain</tt>.  That's
probably superfluous in this case because <tt>origin/c-domain</tt> is
also pointing to the same place, and <tt>origin</tt> is my private
repo, but hey, branches are cheap.<p>
The first order of business is to get rid of those <tt>WIP</tt>
commits.  I'll <tt>git-reset HEAD^</tt> to bring 3c5cdd4 into the
working directory, then use <tt>git-status</tt> to see how many
changes there are:</p><p>
</p><pre>         M lib/Pobox/Moonpig/Consumer/Domain/Activator.pm
M lib/Pobox/Moonpig/Role/HasDomain.pm
M lib/Pobox/Moonpig/TemplateSet.pm
?? bin/register_domains
M t/consumer/domain.t
?? t/lib/MockOpenSRS.pm
</pre>
(This is the output from <tt>git-status --short</tt>, for which I have
an alias, <tt>git s</tt>.  I use this probably 99 times as often as
plain <tt>git-status</tt>.)<p>
Not too bad, probably no need for a printout.  The new
<tt>bin/register-domains</tt> program can go in right away by itself:</p><p>
</p><pre>        % <b>git add bin</b>
% <b>git commit -m 'new register_domains utility program'</b>
</pre>
Next I'll deal with that new mock object class in
<tt>t/lib/MockOpenSRS.pm</tt>.  I'll add that, then use <tt>git-add
-p</tt> to add the related changes from the other files:<p>
</p><pre>        % <b>git add t/lib</b>
% <b>git add -p</b>
...
% <b>git s</b>
MM lib/Pobox/Moonpig/Consumer/Domain/Activator.pm
M lib/Pobox/Moonpig/Role/HasDomain.pm
M lib/Pobox/Moonpig/TemplateSet.pm
A  t/lib/MockOpenSRS.pm
MM t/consumer/domain.t
% <b>git ix</b>
...
</pre>
The <tt>git ix</tt> command at the end there is an alias for <tt>git diff
--cached</tt>: it displays what's staged in the index.  The output
looks good, so I'll commit it:<p>
</p><pre>        % <b>git commit -m 'mock OpenSRS object; add tests'</b>
</pre>
Now I want to see if those tests actually pass.  Maybe I forgot
something!
<pre>        % <b>git stash</b>
% <b>make test</b>
...
OK
% <b>git stash pop</b>
</pre>
The <tt>git-stash</tt> command hides the unrelated changes from the
test suite so that I can see if the tests I just put into
<tt>t/consumer/domain.t</tt> work properly.  They do, so I bring back
the stashed changes and continue.  If they didn't, I'd probably amend
the last commit with <tt>git commit --amend</tt> and try again.<p>
Continuing:</p><p>
</p><pre>        % <b>git diff</b>
...
% <b>git add -p lib/Pobox/Moonpig/Role/HasDomain.pm</b>
...
% <b>git commit -m 'Domains do not have explicit start dates'</b>
% <b>git diff</b>
...
% <b>git add -p</b>
...
% <b>git commit --fixup :/mock</b>
</pre>
That last bit should have been part of the \"mock OpenSRS object\"
commit, but I forgot it. So I make a fixup commit, which I'll merge
into the main commit later on.  A fixup commit is one whose subject
begins with <tt>fixup!</tt>. Did you know that you can name a commit
by writing <tt>:/<i>text</i></tt>, and it names the most recent commit
whose message contains that text?<p>
It goes on like that for a while:</p><p>
</p><pre>        % <b>git diff</b>
...
% <b>git add -p ...</b>
...
% <b>git commit -m 'Activator consumer can generate special charges'</b>
% <b>git diff</b>
...
% <b>git checkout lib/Pobox/Moonpig/Role/HasDomain.pm</b>
</pre>
The only uncommitted change left in <tt>HasDomain.pm</tt> was a
superfluous line, so I just threw it away.<p>
</p><pre>        % <b>git diff</b>
...
% <b>git add -u</b>
% <b>git commit -m 'separate templates for domain-registering and domain-renewing consumers'</b>
</pre>
By this time all the remaining changes belong in the same commit, so I
use <tt>git-add -u</tt> to add them all at once.  The working tree is
now clean.  The history is as I showed above, except that in place of
the final <tt>WIP</tt> commit, I have:<p>
</p><pre>        a3c0b92 new register_domains utility program
53d704d mock OpenSRS object; add tests
a24acd8 Domains do not have explicit start dates
17a915d fixup! mock OpenSRS object; add tests
86e472b Activator consumer can generate special charges
5b2ad2b separate templates for domain-registering and domain-renewing consumers
</pre>
(Again the oldest commit is first.)  Now I'll get rid of that
<tt>fixup!</tt>:<p>
</p><pre>        % <b>git rebase -i --autosquash HEAD~6</b>
</pre>
Because of <tt>--autosquash</tt>, the <tt>git-rebase</tt> menu is
reordered so that the fixup commit is put just after
the commit it fixes up, and its default action is 'fixup' instead of
'pick'.  So I don't need to edit the rebase instructions at all.  But
I might as well take the opportunity to put the commits in the right
order.  The result is:<p>
</p><pre>        a3c0b92 new register_domains utility program
ea8dacd Domains do not have explicit start dates
297366a separate templates for domain-registering and domain-renewing consumers
4ef0e28 mock OpenSRS object; add tests
c3ab1eb Activator consumer can generate special charges
</pre>
I have two tools for dealing with cleaned-up
branches like this one.  One is <a href=\"https://github.com/mjdominus/git-util/blob/master/git-vee\"><tt>git-vee</tt></a>, which compares two branches. It's
just a wrapper around the command <tt>git log --decorate --cherry-mark
--oneline --graph --boundary <i>A</i>\"...\"<i>B</i></tt>.  <p>
Here's a
comparison the original <tt>c-domain</tt> branch and my new
<tt>cleanup</tt> version:</p><p>
</p><pre>        % <b>git vee c-domain</b>
* c3ab1eb (HEAD, cleanup) Activator consumer can generate special charges
* 4ef0e28 mock OpenSRS object; add tests
* 297366a separate templates for domain-registering and domain-renewing consumer
* ea8dacd Domains do not have explicit start dates
* a3c0b92 new register_domains utility program
| * 3c5cdd4 (origin/c-domain, c-domain) WIP
|/
o 4e500ec Domain::Activator initial_invoice_charge_pairs
</pre>
This clearly shows where the original and cleaned up branches diverge,
and what the differences are.  I also use <tt>git-vee</tt> to compare
pre- and post-rebase versions of branches (with <tt>git-vee
ORIG_HEAD</tt>) and local branches with their remote tracking branches
after fetching (with <tt>git-vee remote</tt> or just plain
<tt>git-vee</tt>).<p>
A cleaned-up branch should usually have the same final tree as the
tree at the end of the original branch.  I have another tool, <a href=\"https://github.com/mjdominus/git-util/blob/master/git-treehash\"><tt>git-treehash</tt></a>,
which compares trees.  By default it compares <tt>HEAD</tt> with
<tt>ORIG_HEAD</tt>, so after I use git-rebase to squash or to split
commits, I sometimes run \"git treehash\" to make sure that the tree
hasn't changed.  In this example, I do:</p><p>
</p><pre>        % <b>git treehash c-domain HEAD</b>
d360408d1afa90e0176aaa73bf8d3cae641a0850 HEAD
f0fd6ea0de7dbe60520e2a69fbec210260370d78 c-domain
</pre>
which tells me that they are <i>not</i> the same.  Most often this
happens because I threw away all the debugging code that I put in
earlier, but this time it was because of that line of superfluous code
I eliminated from <tt>HasDomain.pm</tt>.  When the treehashes differ, I'll use
<tt>git-diff</tt> to make sure that the difference is innocuous:<p>
</p><pre>        % <b>git diff c-domain</b>
diff --git a/lib/Pobox/Moonpig/Role/HasDomain.pm b/lib/Pobox/Moonpig/Role/HasDomain.pm
index 3d8bb8c..21cb752 100644
--- a/lib/Pobox/Moonpig/Role/HasDomain.pm
+++ b/lib/Pobox/Moonpig/Role/HasDomain.pm
@@ -5,7 +5,6 @@ use Carp qw(croak confess);
use ICG::Handy qw(is_domain);
use Moonpig::Types qw(Factory Time);
use Moose::Util::TypeConstraints qw(duck_type enum subtype);
-use MooseX::SetOnce;
with (
'Moonpig::Role::StubBuild',
</pre>
Okay then.<p>
The next task is probably to deal with the older WIP commits.  This
time I'll omit all the details.  But the enclosing procedure looks
like this:</p><p>
</p><pre>        % <b>git checkout -b wip-cleanup c8dbf41</b>
% <b>git reset HEAD^</b>
% ... (a lot of git-add -p as above) ...
...
% <b>git vee c8dbf41</b>
* 4c6ff45 (wip-cleanup) get rid of unused twiddler test
* b328de5 test full payment cycle
* 201a4f2 abstract out pay_invoice operation
* 55ae45e add upper limit (default 30d) to wait_until utility
| * c8dbf41 WIP
|/
o e5063d4 add test for sent invoice in domain.t
% <b>git treehash c8dbf41 HEAD</b>
7f52ba68923e2ede8fda407ffa9c06c5c48338ae
% <b>git checkout cleanup</b>
% <b>git rebase wip-cleanup</b>
</pre>
The output of <tt>git-treehash</tt> says that the tree at the end of
the <tt>wip-cleanup</tt> branch is identical to the one in the WIP
commit it is supposed to replace, so it's perfectly safe to rebase the
rest of the <tt>cleanup</tt> branch onto it, replacing the one WIP
commit with the four new commits in <tt>wip-cleanup</tt>.  Now the
cleaned up branch looks like this:<p>
</p><pre>        % <b>git vee c-domain</b>
* a425aa1 (HEAD, cleanup) Activator consumer can generate special charges
* 2bb0932 mock OpenSRS object; add tests
* a77bfcb separate templates for domain-registering and domain-renewing consumer
* 4c44db2 Domains do not have explicit start dates
* fab500f new register_domains utility program
= 38018b6 Domain::Activator initial_invoice_charge_pairs
= aebbae6 rename \"croak\" method to \"fail\" to avoid conflicts
= 45a224d notes about why domain queries might fail
= 80e4a90 OpenSRS interface
= 27f4562 bring in Net::OpenSRS module
= f5cb624 add missing MakesReplacement stuff
* 4c6ff45 (wip-cleanup) get rid of unused twiddler test
* b328de5 test full payment cycle
* 201a4f2 abstract out pay_invoice operation
* 55ae45e add upper limit (default 30d) to wait_until utility
| * 3c5cdd4 (origin/c-domain, c-domain) WIP
| = 4e500ec Domain::Activator initial_invoice_charge_pairs
| = f64361f rename \"croak\" method to \"fail\" to avoid conflicts
| = 893f16f notes about why domain queries might fail
| = 52c18fb OpenSRS interface
| = fc13059 bring in Net::OpenSRS module
| = 9e6ffa4 add missing MakesReplacement stuff
| * c8dbf41 WIP
|/
o e5063d4 add test for sent invoice in domain.t
</pre>
<tt>git-vee</tt> marks a commit with an equal sign instead of a star
if it's equivalent to a commit in the other branch.  The commits in
the middle marked with equals signs are the ones that weren't changed.
The upper WIP was replaced with five commits, and the lower one with
four.<p>
I've been planning for a long time to write a tool to help me with
breaking up WIP commits like this, and with branch cleanup in general:
It will write each changed hunk into a file, and then let me separate
the hunk files into several subdirectories, each of which represents
one commit, and then it will create the commits automatically from the
directory contents.  This is still only partly finished, but I think
when it's done it will eliminate the six-color diff printouts.</p><p>
[ Addendum 20120404: Further observation has revealed that I almost
never use <tt>git-commit -a</tt>, even when it would be quicker to do
so.  Instead, I almost always use <tt>git-add -u</tt> and then
<tt>git-commit</tt> the resulting index. This is just an observation,
and not a claim that my practice is either better or worse than using
<tt>git-commit -a</tt>. ]</p><p>
[ Addendum 20120825: There is now <a href=\"http://blog.plover.com/prog/git-vacillation.html\">a followup article about how
to manage rewriting of published history</a>. ]</p><p></p>" nil nil "b937508520079d61312314cb40b9c241") (181 (20949 25792 606284) "http://blog.plover.com/prog/git-commit-hook.html" "Mark Jason Dominus: How I got four errors into a one-line program" "mjd@plover.com (Mark Dominus)" "Wed, 26 Jun 2013 18:19:00 +0000" "At my current job, each task is assigned a ticket number of the form
<tt>e12345</tt>. The git history is extremely convoluted, and it's
been observed that it's easier to find things if you include the
ticket number at the front of the commit message.  I got tired of
inserting it manually, and thought I would write a <tt>prepare-commit-message</tt> hook to insert
it automatically.<p>
A <tt>prepare-commit-message</tt> hook is a program that you stick in the file
<tt>.git/hooks/prepare-commit-hook</tt>. When you run <tt>git-commit</tt>, git first
writes the commit message to a file, then invokes the <tt>prepare-commit-message</tt> program on
file; the program can modify the contents of the message, or abort the
commit if it wants to. Then git runs the editor on the message, if it
was going to do that, and creates the commit with the edited
message.</p><p>
The hook I wrote was basically a one-liner, and the reason I am
posting this note is because I found three significant programming
errors in it in the first day of use. </p><p>
Here's the first cut:</p><p>
</p><pre>case $2 in
message)
perl -i -lpe \"s/^(e\\d+:\\s+)?/$(cs -): /\" $1
;;
esac
</pre>
This is a shell script, but the main purpose is to run the perl
one-liner. The shell script gets two arguments: <tt>$1</tt> is the
path to the file that contains the proposed commit message.
The <tt>$2</tt> argument is a tag which describes the commit's
context; it's <tt>merge</tt> if the commit is a merge commit, for
example; it's <tt>template</tt> if the commit message is supplied from
a template via <tt>-t</tt> on the command line or the
<tt>commit.template</tt> configuration option.  The default is the
empty string, and <tt>message</tt>, which I have here, means that the
message was supplied with the <tt>-m</tt> command-line option.<p>
The Perl script edits the commit message file, named in <tt>$1</tt>,
in-place, looking for something like <tt>e12345: </tt> at the
beginning of a line, and replacing it with the output of the
<tt>cs -</tt> command, which is a little program I wrote to print
the current ticket number.</p><p> (<tt>cs</tt> is run by the shell, and
its output is inserted into the Perl script before <tt>perl</tt> is
run, so that the program that Perl sees is something like
<tt>s/^(e\\d+:\\s+)?/e12345: /</tt>.)  Simple enough.</p><p>
There is already an error here, although it's a design error, not an
implementation error: the Perl one-liner is only invoked when
<tt>$2</tt> is <tt>message</tt>.  For some reason I decided that I
would want it only when I supplied <tt>git-commit</tt> with the
<tt>-m message</tt> option. This belief lasted exactly until the
first time I ran <tt>git-commit</tt> in default mode it popped up the editor to
edit the commit message, and I had to insert the ticket number
manually.</p><p>
So the first change was to let the hook run in the default case as well
as the <tt>message</tt> case:</p><p>
</p><pre>case $2 in
<span class=\"emph\">\"\"|</span>message)
perl -i -lpe \"s/^(e\\d+:\\s+)?/$(cs -): /\" $1
;;
esac
</pre>
This was wrong because it inserts the ticket number at the start of
each line; I wanted it only at the start of the first line. So that
was programming error number 1:<p>
</p><pre>case $2 in
\"\"|message)
perl -i -lpe \"<span class=\"emph\">$. == 1 && </span>s/^(e\\d+:\\s+)?/$(cs -): /\" $1
;;
esac
</pre>
So far, so good.<p>
Bug #2 appeared the first time I tried a rebase. The <tt>cs</tt>
command infers the ticket number from the name of the current branch.
If it fails, it issues a warning and emits the string <tt>eXXXXX</tt>
instead.  During a rebase, the head is detached and there is no
current branch.  So the four commits I rebased all had their
formerly-correct ticket numbers replaced with the string
<tt>eXXXXX</tt>.</p><p>
There are several ways to fix this. The best way would be to make sure
that the current ticket number was stashed somewhere that <tt>cs</tt>
could always get it.  Instead, I changed the Perl script to recognize
when the commit message already began with a ticket number, and to
leave it alone if so:</p><p>
</p><pre>case $2 in
\"\"|message)
perl -i -lpe \"\\$. == 1 &&<span class=\"emph\"> !/^e\\d+:\\s+/ && s/^/</span>$(cs -): /\" $1
;;
esac
</pre>
It probably would have been a good idea to leave an escape hatch, and
have <tt>cs</tt> emit the value of <tt>$ENV{TICKET_NUMBER}</tt> if
that is set, to allow invocations like <tt>TICKER_NUMBER=e71828 git
commit -m …</tt>, but I didn't do it, yet.<p>
The third bug appeared when I did <tt>git commit --fixup</tt> for the
first time.  With <tt>--fixup</tt> you tell it which commit you are
trying to fix up, and it writes the commit message in a special form
that tells a subsequent <tt>git-rebase --interactive</tt> that this
new commit should be handled specially. (It should be applied
immediately after that other one, and should be marked as a \"fixup\",
which means that it is squashed into the other one and that its log
message is discarded in favor of the other one.)  If you are fixing up
a commit whose message was <tt>Frobulate the veeblefetzers</tt>, the
fixup commit's message is automatically generated as
<tt>fixup! Frobulate the veeblefetzers</tt>. Or it would have
been, if you were not using my <tt>prepare-commit-message</tt> hook, which would rewrite it to
<tt>e12345: fixup! Frobulate the veeblefetzers</tt>. This is not
in the right form, so it's not recognized by <tt>git-rebase
--interactive</tt> for special handling.</p><p>
So the hook became:</p><p>
</p><pre>case $2 in
\"\"|message)
perl -i -lpe \"\\$. == 1 && <span class=\"emph\">!/^(squash|fixup)! / &&</span> !/^e\\d+:\\s+/ && s/^/$(cs -): /\" $1
;;
esac
</pre>
(The exception for <tt>squash</tt> is similar to the one for
<tt>fixup</tt>. I never use <tt>squash</tt>, but it seemed foolish not
to put it in while I was thinking of it.)<p>
This is starting to look a little gross, but in a program this small I
can tolerate a little grossness.</p><p>
I thought it was remarkable that such a small program broke in so many
different ways.  Much of that is because it must interact with git,
which is very large and complicated, and partly it is that it must
interact with <tt>git</tt>, which is in many places not very well
designed.
The first bug, where the ticket number was appended to each line
instead of just the first, is not git's fault.  It was fallout from my
initial bad design decision to apply the script only to messages
supplied with <tt>-m</tt>, which are typically one-liners, so that's
what I was thinking of when I wrote the Perl script.</p><p>
But the other two errors would have been avoided had the interface to
the hook been more uniform. There seems to be no reason that rebasing
(or cherry-picking) and <tt>git-commit --fixup</tt> contexts couldn't
have been communicated to the hook via the same <tt>$2</tt> argument
that communicates other contexts.  Had this been done in a more
uniform way, my program would have worked more correctly.  But it
wasn't done, and it's probably too late to change it now, since such a
change risks breaking many existing <tt>prepare-commit-message</tt> hooks. (\"The enemy of software
is software.)  A well-written hook will of course have a catchall:</p><p>
</p><pre>case $2 in
\"\"|message)
perl -i -lpe \"\\$. == 1 && !/^(squash|fixup)! / && !/^e\\d+:\\s+/ && s/^/$(cs -): /\" $1
;;
<span class=\"emph\">
merge|template|squash|commit)
# do nothing
;;
*)      # wat
echo \"prepare-message-hook: unknown context '$2'\" 1>&2
exit 1;
;;
</span>
esac
</pre>
But mine doesn't and I bet a lot of others don't either.<p></p>" nil nil "f86e28ea50fab7f0bc4ec652badda3ef") (180 (20949 25792 604862) "http://edwinb.wordpress.com/2013/06/25/sequential-decision-problems-dependently-typed-solutions/" "Edwin Brady: Sequential decision problems, dependently typed solutions" nil "Tue, 25 Jun 2013 19:44:01 +0000" "<p>We’ve just shipped the camera ready version of the following paper to <a href=\"http://www.cicm-conference.org/2013/cicm.php?event=plmms\">PLMMS 2013</a>:</p>
<p>
<a href=\"http://eb.host.cs.st-andrews.ac.uk/writings/plmms13.pdf\">Sequential decision problems, dependently typed solutions</a><br />
<a href=\"http://www.pik-potsdam.de/members/botta\">Nicola Botta</a>, <a href=\"http://www.pik-potsdam.de/members/ionescu\">Cezar Ionescu</a>, <a href=\"http://edwinb.wordpress.com/2013/06/25/sequential-decision-problems-dependently-typed-solutions/edwinb.wordpress.com\">Edwin Brady</a>
</p>
<blockquote><p>
We propose a dependently typed formalization for a simple class of sequential decision problems. For this class of problems, we implement a generic version of Bellman’s backwards induction algorithm and a machine checkable proof that the proposed implementation is correct. The formalization is generic. It is presented in Idris, but it can be easily translated to other dependently-typed programming languages. We conclude with an informal discussion of the problems we have faced in extending the formalization to generic monadic sequential decision problems.
</p></blockquote>
<p>You can find the <a href=\"http://eb.host.cs.st-andrews.ac.uk/writings/plmms13.pdf\">full paper here</a>.</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/edwinb.wordpress.com/237/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/edwinb.wordpress.com/237/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=edwinb.wordpress.com&blog=666773&post=237&subd=edwinb&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "2a021f6c5fac19dfe6401c57ea40c752") (179 (20949 25792 604355) "http://wadler.blogspot.com/2013/06/come-for-performance-stay-for.html" "Philip Wadler: Come for the performance, stay for the correctness" "noreply@blogger.com (Philip Wadler)" "Tue, 25 Jun 2013 18:34:34 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-68rTy8Dc4fM/UcnhdnNkd9I/AAAAAAAACcc/Yj25dAU8tnc/s1600/haskell.jpeg\"><img src=\"http://1.bp.blogspot.com/-68rTy8Dc4fM/UcnhdnNkd9I/AAAAAAAACcc/Yj25dAU8tnc/s400/haskell.jpeg\" height=\"299\" border=\"0\" width=\"400\" /></a></div>An <a href=\"http://www.hpcwire.com/hpcwire/2013-06-24/lustre_founder_spots_haskell_on_hpc_horizon.html?featured=top\">article in HPC Wire</a> lists industrial uses of Haskell, several of which I hadn't heard before. The article profiles Peter Braam, founder of Parallel Scientific. Spotted by Hans Wolfgang Loidl.<br /><br /><blockquote class=\"tr_bq\">Arguably, Google and Facebook have brought more attention to Haskell  in recent years, but there are a number of other notable uses that  highlight Braam’s confidence in the functional language. For instance,  Chicago-based Allston Trading, a high frequency trading company, uses  Haskell in their trading infrastructure. AT&T is using it in their  Network Security group to automate internet abuse complaint processing.  Bank of American is using it in their backend data transformation and  loading system and Credit Suisse’s Global Modeling and Analytics Group  has been using it since 2006 to improve modeler productivity and open  access to those models across the organization.<br /><br />Biotech giant Amgen also uses Haskell for math-heavy models and to  “break developers out of their development rut by giving them a new way  to think about software. According to the company’s David Balaban, “Our  experience is that using functional programming reduces the critical  conceptual distance between thought/algorithms design and code.” But the  real value says Balaban is the level of correctness they’ve been able  to achieve.<br /><br />As Amgen’s Balaban says “we  have been able to develop code quickly and verify--to an applied  mathematician’s satisfaction--the correctness of Haskell code  straightforwardly; we have yet to achieve this with more traditional  mainstream languages.” </blockquote>" nil nil "4e496387ddac165fb0bd11c36cf246d5") (178 (20949 25792 603418) "http://parenz.wordpress.com/2013/06/12/ghcjs-build/" "Daniil Frumin: Building GHCJS" nil "Tue, 25 Jun 2013 15:45:34 +0000" "<div id=\"outline-container-sec-1\" class=\"outline-2\">
<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Intro</h2>
<div id=\"text-1\" class=\"outline-text-2\">
<p>
In this post I would like to talk about my experience with<br />
bootstrapping <a href=\"http://weblog.luite.com/wordpress/?p=14\">GHCJS</a> using the provided facilities <a href=\"https://github.com/ghcjs/ghcjs-build\">ghcjs-build</a>. I<br />
never used tools like Vagrant or Puppet before so all of this was<br />
kinda new to me.
</p>
</div>
</div>
<div id=\"outline-container-sec-2\" class=\"outline-2\">
<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Initial installation</h2>
<div id=\"text-2\" class=\"outline-text-2\">
<p>
GHCJS can’t actually work with vanilla GHC 7.* as it requires to<br />
apply some patches (in order to get JS ffi to work, it adds<br />
<code>JavaScriptFFI</code> language extension among other modifications).
</p>
<p>
<a href=\"https://github.com/ghcjs/ghcjs-build\">ghcjs-build</a> uses <a href=\"http://vagrantup.com\">Vagrant</a> (a tool for automatically building and<br />
running work environments) to mange the work environment, so prior to<br />
running GHCJS you need to install vagrant and <a href=\"http://virtualbox.org\">VirtualBox</a>. It’s actually<br />
a sensible way to tackle a project like that: everyone has similar<br />
work environments, you don’t have to mess with your local GHC<br />
installation. It also make use of <a href=\"http://puppetlabs.com\">Puppet</a> deployment system in<br />
<code>puppetlabs-vcsrepo</code> module for cloning Git repositories.
</p>
<p>
Currently, there are two ways to start up GHCJS using <code>ghcjs-build</code>
</p>
</div>
<div id=\"outline-container-sec-2-1\" class=\"outline-3\">
<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> Using the prebuilt version</h3>
<div id=\"text-2-1\" class=\"outline-text-3\">
<div class=\"org-src-container\">
<pre class=\"src src-sh\">git clone https://github.com/ghcjs/ghcjs-build.git
<span style=\"color: #D0D0FF;\">cd</span> ghcjs-build
git checkout prebuilt
vagrant up
</pre>
</div>
<p>
Using this configuration the following procedures are performed:
</p>
<ol class=\"org-ol\">
<li>Vagrant sets up a 32-bit Ubuntu Precise system (/Note: if this is<br />
your first time running Vagrant it downloads the 280Mb<br />
precise32.box file from the Vagrant site/)
</li>
<li>Vagrants does some provisioning using Puppet (downloads and<br />
installs necessary packages)
</li>
<li>A 1.4GB archive with ghcjs and other prebuilt tools are downloaded<br />
and extracted.
</li>
</ol>
</div>
</div>
<div id=\"outline-container-sec-2-2\" class=\"outline-3\">
<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> Compiling from source</h3>
<div id=\"text-2-2\" class=\"outline-text-3\">
<div class=\"org-src-container\">
<pre class=\"src src-sh\">git clone https://github.com/ghcjs/ghcjs-build.git
<span style=\"color: #D0D0FF;\">cd</span> ghcjs-build
vagrant up
</pre>
</div>
<p>
Apart from setting up the box this will
</p>
<ol class=\"org-ol\">
<li>Get the GHC sources from Git HEAD and applies the GHCJS <a href=\"http://ghcjs.github.io/patches/ghc-ghcjs.patch\">patch</a>.
</li>
<li>Get all the necessary packages for ghcjs
</li>
<li>Get the latest Cabal from Git HEAD, applies the GHCJS <a href=\"http://ghcjs.github.io/patches/cabal-ghcjs.patch\">patch</a> and<br />
build it.
</li>
<li>Compile the necessary libraries using ghcjs
</li>
<li>Compile <code>ghcjs-examples</code> and its dependencies (it appears that it<br />
can take a lot of time to compile gtk2hs and gtk2hs’s tools)
</li>
</ol>
<p>
Please note, that depending on your computer, you might want to go for<br />
a long walk, enjoy a small book or get a night sleep (assuming you are<br />
not scared by the sound of computer fans).
</p>
<p>
Apart from being slow, the process of compiling everything from<br />
source is error prone. To give you a taste, last night I was not able<br />
to reproduce a working environment myself, because of some recent<br />
changes in GHC HEAD. The prebuilt version on the other hand is<br />
guaranteed to install correctly.
</p>
<p>
Hopefully, the GHCJS patches will be merged upstream before the GHC<br />
7.8 is out. That way you won’t need to partake in building GHC from<br />
the source in order to use GHCJS.
</p>
</div>
</div>
<div id=\"outline-container-sec-2-3\" class=\"outline-3\">
<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> Communicating with the VM</h3>
<div id=\"text-2-3\" class=\"outline-text-3\">
<p>
After you’ve finished with the initial setup you should be able just<br />
to
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vagrant ssh
</pre>
</div>
<p>
in your new vm and start messing around.
</p>
<p>
<code>ghcjs</code> command is available to you and Vagrant kindly forwards the<br />
3000 port on the VM to the local 3030 port, allowing you to run web<br />
servers like <code>warp</code> on the VM and accessing them locally.
</p>
<p>
You can access your local project directory under <code>/vagrant</code> in VM:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">$ ls /vagrant
keys  manifests  modules  outputs  README.rst  Vagrantfile
</pre>
</div>
<p>
However, copying file back-and-forth is not a perfect solution. I<br />
recommend setting up a sshfs filesystem (<i>Note: if you are on OSX,<br />
don’t forget to install fuse4x kernel extension</i>):
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">$ vagrant ssh-config
Host default
HostName 127.0.0.1
User vagrant
Port 2222
UserKnownHostsFile /dev/null
StrictHostKeyChecking no
PasswordAuthentication no
IdentityFile <span style=\"color: #b5bd68;\">\"/Users/dan/.vagrant.d/insecure_private_key\"</span>
IdentitiesOnly yes
LogLevel FATAL
$ sshfs vagrant@localhost:/home/vagrant ../vm -p2222 -oreconnect,defer_permissions,negative_vncache,<span style=\"color: #cc6666;\">volname</span>=ghcjs,<span style=\"color: #cc6666;\">IdentityFile</span>=~/.vagrant.d/insecure_private_key
$ ls ../vm
</pre>
</div>
<p>
When you are done you can just <code>umount ../vm</code>
</p>
</div>
</div>
</div>
<div id=\"outline-container-sec-3\" class=\"outline-2\">
<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> Compiling other packages</h2>
<div id=\"text-3\" class=\"outline-text-2\">
<p>
Since the <code>diagrams</code> package on Hackage depends on the older version<br />
of base we are going to use the latest version from Git:
</p>
<pre class=\"example\">mkdir dia; cd dia
git clone git://github.com/diagrams/diagrams-core.git
cd diagrams-core && cabal install && cd ..
cabal unpack active
cd active-0.1*
cat >version.patch <<EOF
--- active.cabal        2013-06-12 12:58:40.082914214 +0000
+++ active.cabal.new    2013-06-12 12:58:31.029465815 +0000
@@ -19,7 +19,7 @@
library
exposed-modules:     Data.Active
-  build-depends:       base >= 4.0 && < 4.7,
+  build-depends:       base >= 4.0 && < 4.8,
array >= 0.3 && < 0.5,
semigroups >= 0.1 && < 0.10,
semigroupoids >= 1.2 && < 3.1,
@@ -31,7 +31,7 @@
test-suite active-tests
type:              exitcode-stdio-1.0
main-is:           active-tests.hs
-    build-depends:     base >= 4.0 && < 4.7,
+    build-depends:     base >= 4.0 && < 4.8,
array >= 0.3 && < 0.5,
semigroups >= 0.1 && < 0.10,
semigroupoids >= 1.2 && < 3.1,
EOF
patch active.cabal < version.patch
cabal install
cd ..
git clone git://github.com/diagrams/diagrams-lib.git
cd diagrams-lib && cabal install && cd ..
git clone git://github.com/diagrams/diagrams-svg.git
cd diagrams-svg && cabal install && cd ..
</pre>
<p>
Other packages I had to install already had their Hackage versions<br />
updated.
</p>
<p>
Now you can try to build a test diagram to see that everything works
</p>
<div class=\"org-src-container\">
<pre class=\"src src-haskell\"><span style=\"color: #b294bb;\">module</span> <span style=\"color: #f0c674;\">Main</span> <span style=\"color: #b294bb;\">where</span>
<span style=\"color: #b294bb;\">import</span> <span style=\"color: #f0c674;\">Diagrams.Prelude</span>
<span style=\"color: #b294bb;\">import</span> <span style=\"color: #f0c674;\">Diagrams.Backend.SVG.CmdLine</span>
<span style=\"color: #81a2be;\">d</span> <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Diagram</span> <span style=\"color: #f0c674;\">SVG</span> <span style=\"color: #f0c674;\">R2</span>
<span style=\"color: #81a2be;\">d</span> <span style=\"color: #cc6666;\">=</span> square 20 <span style=\"color: #cc6666;\">#</span> lw 0<span style=\"color: #cc6666;\">.</span>5
<span style=\"color: #cc6666;\">#</span> fc black
<span style=\"color: #cc6666;\">#</span> lc green
<span style=\"color: #cc6666;\">#</span> dashing [0<span style=\"color: #cc6666;\">.</span>2,0<span style=\"color: #cc6666;\">.</span>2] 0
<span style=\"color: #81a2be;\">main</span> <span style=\"color: #cc6666;\">=</span> defaultMain (pad 1<span style=\"color: #cc6666;\">.</span>1 d)
</pre>
</div>
<p>
then you can compile and run it
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">ghc --make Test.hs
./Test -w 400 -o /vagrant/test.svg
</pre>
</div>
<p><a href=\"http://parenz.files.wordpress.com/2013/06/screen-shot-2013-06-12-at-5-19-03-pm.png\"><img src=\"http://parenz.files.wordpress.com/2013/06/screen-shot-2013-06-12-at-5-19-03-pm.png?w=300&h=289\" alt=\"Screen Shot 2013-06-12 at 5.19.03 PM\" height=\"289\" class=\"alignnone size-medium wp-image-47\" width=\"300\" /></a></p>
<p>
And that’s it!
</p>
</div>
</div>
<div id=\"outline-container-sec-4\" class=\"outline-2\">
<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> Outro</h2>
<div id=\"text-4\" class=\"outline-text-2\">
<p>
I would also like to note that we are currently polishing the GHCJS<br />
build process. Luite, especially is working on making ghcjs work (and<br />
run tests) with <a href=\"https://travis-ci.org/\">Travis CI</a> (it take quite a bit of time to build ghcjs<br />
and sometimes travis is timeouting) and I am working on tidying up<br />
the build config.
</p>
<p>
Stay tuned for more updates.
</p>
</div>
</div>
<br /> Tagged: <a href=\"http://parenz.wordpress.com/tag/diagrams/\">diagrams</a>, <a href=\"http://parenz.wordpress.com/tag/ghcjs/\">ghcjs</a>, <a href=\"http://parenz.wordpress.com/tag/haskell-2/\">haskell</a>, <a href=\"http://parenz.wordpress.com/tag/soc/\">soc</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/parenz.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/parenz.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=parenz.wordpress.com&blog=26722965&post=49&subd=parenz&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "e9bd00837f7d9ff75ce6adf08299e35e") (177 (20949 25792 600623) "http://feedproxy.google.com/~r/ezyang/~3/qvy2VqDp6Is/" "Edward Z. Yang: (Homotopy) Type Theory: Chapter One" nil "Mon, 24 Jun 2013 22:56:27 +0000" "<div class=\"document\">
<p>In what is old news by now, the folks at the Institute for Advanced Study have released <a href=\"http://homotopytypetheory.org/book/\" class=\"reference external\">Homotopy Type Theory:
Univalent Foundations of Mathematics</a>.  There has been some (meta)commentary (<a href=\"https://plus.google.com/107913314994758123748/posts/VzWAsojiifE\" class=\"reference external\">Dan Piponi</a>, <a href=\"http://existentialtype.wordpress.com/2013/06/22/whats-the-big-deal-with-hott/\" class=\"reference external\">Bob Harper</a>, <a href=\"http://math.andrej.com/2013/06/20/the-hott-book/\" class=\"reference external\">Andrej Bauer</a>, <a href=\"http://dorais.org/archives/1425\" class=\"reference external\">François G. Dorais</a>, <a href=\"http://homotopytypetheory.org/2013/06/20/the-hott-book/\" class=\"reference external\">Steve Awodey</a>, <a href=\"http://www.carloangiuli.com/blog/homotopy-type-theory-univalent-foundations-of-mathematics/\" class=\"reference external\">Carlo Angiuli</a>, <a href=\"http://golem.ph.utexas.edu/category/2013/06/the_hott_book.html\" class=\"reference external\">Mike Shulman</a>, <a href=\"https://plus.google.com/117663015413546257905/posts/cm1sKge8qxX\" class=\"reference external\">John Baez</a>) on the Internet, though, of course, it takes time to read a math textbook, so don’t expect detailed technical commentary from non-authors for a while.</p>
<p>Of course, being a puny grad student, I was, of course, most interested in the book’s contribution of <em>yet another Martin-Löf intuitionistic type theory introduction</em>, e.g. chapter one.  The classic introduction is, of course, the papers that Martin Löf wrote (nota bene: there were many iterations of this paper, so it’s a little hard to find the right one, though it seems Giovanni Sambin’s notes are the easiest to find), but an introduction of type theory for <em>homotopy type theory</em> has to make certain adjustments, and this makes for some novel presentation.  In particular, the chapter’s discussion of <em>identity types</em> is considerably more detailed than I have seen elsewhere (this is not surprising, since identity is of central importance to homotopy type theory). There is also a considerable bit of pedantry/structure in the discussion of the types that make up the theory, reminiscent of the <a href=\"http://existentialtype.wordpress.com/2012/12/03/pfpl-is-out/\" class=\"reference external\">PFPL</a> (though I believe that this particular chapter  was mostly written by others). And, of course, there are many little variations in how the theory is actually put together, expounded upon in some detail in the chapter notes.</p>
<p>In more detail:</p>
<p><strong>Definitional and propositional equality.</strong> The chapter spends a little bit of time carefully distinguishing between definitional equality (a purely syntactic notion up to computation) and propositional equality (which involves evidence), which I appreciated. The difference between connectives which show up inside and outside the deductive system was a major point of confusion for me when I was originally learning logic.</p>
<p><strong>The general pattern of the introduction of a new kind of type.</strong> The modern style for introducing logical connectives is to classify the rules into various kinds, such as introduction rules and elimination rules, and then hew to this regularity in the presentation.  Often, readers are expected to “see it”, but this book makes a helpful remark laying out the style. I found a useful exercise was to take the rules and reorganize them so that, for example, all of the elimination rules are together and compare them.</p>
<p><strong>Recursion and induction.</strong> <a href=\"http://blog.ezyang.com/2013/04/the-difference-between-recursion-induction/\" class=\"reference external\">I’ve written about this subject before</a>, arguing that recursion and induction aren’t the same thing, since induction needs to work over indexed types.  This is true, but there is an important point I did not make: <em>induction is generalized recursion</em>. This is because when you specify your type family <em>P</em> to be the <em>constant type family</em> which ignores its index, the dependence is erased and you have an ordinary recursor.  In fact, this is a <a href=\"http://adam.chlipala.net/cpdt/html/InductiveTypes.html\" class=\"reference external\">CPDT exercise</a>; I think it clarifies things to see this in both Coq and informal mathematics, as the informal presentation makes the dimension of generalization clearer.</p>
<p><strong>Identity types.</strong> I won’t lie: I had a difficult time with this section, and I don’t think I fully understand why path induction works, even after a very long remark at the end of the section.  (Additionally, while the notes point to some prior literature about the subject, I took a look at the papers and I did not see anything that resembled their presentation of path induction.) By default, Coq thinks the inductive principle for equality types should be what is referred to in this book as the indiscernability of identicals:</p>
<pre class=\"literal-block\">> Check eq_rect.
eq_rect
: forall (A : Type) (x : A) (P : A -> Type),
P x -> forall y : A, x = y -> P y
</pre>
<p>(As a tangent, the use of family <em>C</em> is confusingly overloaded; when discussing the generalization of the previous principlem the reader is required to imagine <tt class=\"docutils literal\">C(x) <span class=\"pre\">-></span> C(y)  ===  C(x, y)</tt>—the C’s of course being distinct.) Path induction asks for more:</p>
<pre class=\"literal-block\">eq_ind
: forall (A : Type), forall (C : forall (x y : A), x = y -> Type),
(forall (x : A), C x x (eq_refl x)) -> forall (x y : A), forall (p : x = y), C x y p
</pre>
<p>This is perhaps not too surprising, since this machinery is principally motivated by homotopy type theory. Additionally, the inductive principle follows the same pattern as the other inductive principles defined for the other types. The trouble is a frustrating discussion of why this inductive principle valid, even when you might expect, in a HoTT setting, that not all equality was proven using reflexivity. My understanding of the matter is that is has to do with the placement of the <tt class=\"docutils literal\">forall (x : A)</tt> quantifier. It is permissible to move one of the x's to the top level (based path induction), but not <em>both</em>. (This is somewhat obscured by the reuse of variable names.) There is also a geometric intuition, which is that when both or one endpoints of the path are free (inner-quantification), then I can contract the path into nothingness. But I have a difficult time mapping this onto any sort of rigorous argument. Perhaps you can help me out.</p>
<blockquote>
As an aside, I have some general remarks about learning type theory from a functional programming background.  I have noticed that it is not too hard to use Coq without knowing much type theory, and even easier to miss the point of why the type theory might be helpful.  But in the end, it is really useful to understand what is going on, and so it’s well worth studying <em>why</em> dependent products and sums generalize the way they do.  It also seems that people find the pi and sigma notation confusing: it helps if you realize that they are algebraic puns. Don’t skip the definition of the inductive principles.</blockquote>
<p>I apologize if any of this post has been inaccurate or misleadingly skewed. My overall impression is that this first chapter is a very crisp introduction to type theory, but that the segments on identity types may be a little difficult to understand. Now, onwards to chapter two!</p>
</div>
<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/qvy2VqDp6Is\" height=\"1\" width=\"1\" />" nil nil "ded0efee52c8409d7a27de5ea9b16a57") (176 (20949 25792 597903) "http://feedproxy.google.com/~r/FpComplete/~3/F6zWN-sWxgw/fp-haskell-center-video-blog" "FP Complete: FP Haskell Center Video Blog" nil "Mon, 24 Jun 2013 14:42:00 +0000" "<p>FP Haskell Center is approaching its beta release date for an on-time delivery, and I wanted to share with you some of the details of our product in a short video blog. You can find a link to the video below:</p><p><a href=\"http://youtu.be/3lPFg-tQaLY\">FP Haskell Center Video Blog</a></p><p>Remember, there is still plenty of time to sign-up for the <a href=\"https://www.fpcomplete.com/business/haskell-center\">FP Haskell Center beta.</a></p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=F6zWN-sWxgw:3yiTnUAVPzw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=F6zWN-sWxgw:3yiTnUAVPzw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=F6zWN-sWxgw:3yiTnUAVPzw:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=F6zWN-sWxgw:3yiTnUAVPzw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=F6zWN-sWxgw:3yiTnUAVPzw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=F6zWN-sWxgw:3yiTnUAVPzw:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/F6zWN-sWxgw\" height=\"1\" width=\"1\" />" nil nil "af70c2f29f9fedaf6d5338c6548cabfa") (175 (20949 25792 597506) "http://kenta.blogspot.com/2013/06/kiwzoxbe-deep-maybe.html" "Ken T Takusagawa: [kiwzoxbe] Deep maybe" "noreply@blogger.com (Ken)" "Mon, 24 Jun 2013 08:50:00 +0000" "<p dir=\"ltr\">Given a Haskell record data type, transform it so that each of its fields becomes a Maybe type, and do this recursively into subrecords, including the top level.</p><p dir=\"ltr\">data Foo = Foo Int String ; data Bar = Bar Foo Float</p><p dir=\"ltr\">data FooM = FooM (Maybe Int) (Maybe String) ; type MFoo = Maybe FooM ; data BarM = BarM MFoo (Maybe Float) ; type MBar = Maybe BarM</p><p dir=\"ltr\">Next, transform a function that operates on the original non-Maybe type to work on the new type, inserting Nothing when there is missing needed data.  This is very similar to liftM except deep.  Simple example:</p><p dir=\"ltr\">f :: (Foo -> Bar) -> (MFoo -> MBar)</p><p dir=\"ltr\">This has some feel of reifying laziness: where Foo had a bottom value, MFoo can have a Nothing.</p><p dir=\"ltr\">Given a Nothing in one of the fields of the output, get a trace of which operation in the function, and which Nothing in the input, caused it.</p><p dir=\"ltr\">Generalize to any MonadPlus.</p><p dir=\"ltr\">Avoid confusion between Maybes inserted by this transformation and Maybes that which were present in the original data type.  Perhaps it should be a different Maybe.</p><p dir=\"ltr\">Somewhat inspired by databases which permit \"undefined\" in any field.</p><p dir=\"ltr\">No actual application in mind for this, yet.</p>" nil nil "6cd8c5f54fafa12413a7e05844e0819f") (174 (20949 25792 595919) "http://theorylunch.wordpress.com/2013/05/30/when-does-an-endofunctor-derive-from-an-adjunction/" "Theory Lunch (Institute of Cybernetics, Tallinn): When does an endofunctor derive from an adjunction?" nil "Sun, 23 Jun 2013 15:23:28 +0000" "<p>This is the first of two talks based on Andrea Schalk’s very good introduction to monads, which can be retrieved <a href=\"http://www.cs.man.ac.uk/~schalk/notes/monads.pdf\" target=\"_blank\" title=\"http://www.cs.man.ac.uk/~schalk/notes/monads.pdf‎\">HERE</a></p>
<p>In the following, if <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> is a category, we indicate by <img src=\"http://s0.wp.com/latex.php?latex=%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"|\\mathcal{C}|\" class=\"latex\" title=\"|\\mathcal{C}|\" /> the collection of objects of <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />, and by <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}(A,B)\" class=\"latex\" title=\"\\mathcal{C}(A,B)\" /> the collection of morphisms in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> from <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> to <img src=\"http://s0.wp.com/latex.php?latex=B&bg=ffffff&fg=333333&s=0\" alt=\"B\" class=\"latex\" title=\"B\" />.</p>
<p>As we know, there are two basic ways of defining an adjunction: <span id=\"more-768\"></span></p>
<p><strong>Definition 1.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{D}\" class=\"latex\" title=\"\\mathcal{D}\" /> be categories; let <img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"F : \\mathcal{C} \\to \\mathcal{D}\" class=\"latex\" title=\"F : \\mathcal{C} \\to \\mathcal{D}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=G+%3A+%5Cmathcal%7BD%7D+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"G : \\mathcal{D} \\to \\mathcal{C}\" class=\"latex\" title=\"G : \\mathcal{D} \\to \\mathcal{C}\" /> be functors. An <em>adjunction</em> from <img src=\"http://s0.wp.com/latex.php?latex=F&bg=ffffff&fg=333333&s=0\" alt=\"F\" class=\"latex\" title=\"F\" /> to <img src=\"http://s0.wp.com/latex.php?latex=G&bg=ffffff&fg=333333&s=0\" alt=\"G\" class=\"latex\" title=\"G\" />, written <img src=\"http://s0.wp.com/latex.php?latex=F+%5Cdashv+G&bg=ffffff&fg=333333&s=0\" alt=\"F \\dashv G\" class=\"latex\" title=\"F \\dashv G\" />, is a quadruple <img src=\"http://s0.wp.com/latex.php?latex=%28F%2CG%2C%5Ceta%2C%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F,G,\\eta,\\varepsilon)\" class=\"latex\" title=\"(F,G,\\eta,\\varepsilon)\" /> where <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta%3A+%5Cmathrm%7BId%7D_%5Cmathcal%7BC%7D+%5Cto+GF&bg=ffffff&fg=333333&s=0\" alt=\"\\eta: \\mathrm{Id}_\\mathcal{C} \\to GF\" class=\"latex\" title=\"\\eta: \\mathrm{Id}_\\mathcal{C} \\to GF\" /> (the <em>unit</em> of the adjunction) and <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon%3A+FG+%5Cto+%5Cmathrm%7BId%7D_%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon: FG \\to \\mathrm{Id}_\\mathcal{D}\" class=\"latex\" title=\"\\varepsilon: FG \\to \\mathrm{Id}_\\mathcal{D}\" /> (the <em>counit</em>) are natural transformations such that , for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}|\" /> and <img src=\"http://s0.wp.com/latex.php?latex=S+%5Cin+%7C%5Cmathcal%7BD%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"S \\in |\\mathcal{D}|\" class=\"latex\" title=\"S \\in |\\mathcal{D}|\" />, <img src=\"http://s0.wp.com/latex.php?latex=G%5Cvarepsilon_S+%5Ccirc+%5Ceta_%7BGS%7D+%3D+%5Cmathrm%7Bid%7D_%7BGS%7D&bg=ffffff&fg=333333&s=0\" alt=\"G\\varepsilon_S \\circ \\eta_{GS} = \\mathrm{id}_{GS}\" class=\"latex\" title=\"G\\varepsilon_S \\circ \\eta_{GS} = \\mathrm{id}_{GS}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon_%7BFA%7D+%5Ccirc+F%5Ceta_%7BA%7D+%3D+%5Cmathrm%7Bid%7D_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon_{FA} \\circ F\\eta_{A} = \\mathrm{id}_{FA}\" class=\"latex\" title=\"\\varepsilon_{FA} \\circ F\\eta_{A} = \\mathrm{id}_{FA}\" />.</p>
<p><strong>Definition 2.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{D}\" class=\"latex\" title=\"\\mathcal{D}\" /> be categories. We call <em>adjunction quadruple</em> a quadruple <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, (\\cdot)^\\sharp)\" class=\"latex\" title=\"(F, G, \\eta, (\\cdot)^\\sharp)\" /> such that:</p>
<ol>
<li><img src=\"http://s0.wp.com/latex.php?latex=G+%3A+%5Cmathcal%7BD%7D+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"G : \\mathcal{D} \\to \\mathcal{C}\" class=\"latex\" title=\"G : \\mathcal{D} \\to \\mathcal{C}\" /> is a functor,</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%7C%5Cmathcal%7BC%7D%7C+%5Cto+%7C%5Cmathcal%7BD%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"F : |\\mathcal{C}| \\to |\\mathcal{D}|\" class=\"latex\" title=\"F : |\\mathcal{C}| \\to |\\mathcal{D}|\" /> is a mapping, and</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Ceta&bg=ffffff&fg=333333&s=0\" alt=\"\\eta\" class=\"latex\" title=\"\\eta\" /> associates to every object <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> a morphism <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A+%3A+A+%5Cto+GFA&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A : A \\to GFA\" class=\"latex\" title=\"\\eta_A : A \\to GFA\" /> so that</li>
<li>for every <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+GS&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to GS\" class=\"latex\" title=\"f : A \\to GS\" /> there exists a unique <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3A+FA+%5Cto+S&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp : FA \\to S\" class=\"latex\" title=\"f^\\sharp : FA \\to S\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp \\circ \\eta_A = f\" class=\"latex\" title=\"Gf^\\sharp \\circ \\eta_A = f\" />.</li>
</ol>
<p>The two definitions above are equivalent in the following sense. If <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> is an adjunction according to Definition 1, and <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3D+%5Cvarepsilon_S+%5Ccirc+Ff&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp = \\varepsilon_S \\circ Ff\" class=\"latex\" title=\"f^\\sharp = \\varepsilon_S \\circ Ff\" />, then <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, (\\cdot)^\\sharp)\" class=\"latex\" title=\"(F, G, \\eta, (\\cdot)^\\sharp)\" /> is an adjunction quadruple according to Definition 2. On the other hand, if <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"(F, G, \\eta, (\\cdot)^\\ast)\" /> is an adjunction quadruple according to Definition 2, and <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29_%5Cflat&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)_\\flat\" class=\"latex\" title=\"(\\cdot)_\\flat\" /> is the inverse operation of <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29%5E%5Csharp&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)^\\sharp\" class=\"latex\" title=\"(\\cdot)^\\sharp\" />—that is, <img src=\"http://s0.wp.com/latex.php?latex=g_%5Cflat+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"g_\\flat = f\" class=\"latex\" title=\"g_\\flat = f\" /> if and only if <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3D+g&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp = g\" class=\"latex\" title=\"f^\\sharp = g\" />—then necessarily <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A+%3D+%28%5Cmathrm%7Bid%7D_%7BFA%7D%29_%5Cflat&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A = (\\mathrm{id}_{FA})_\\flat\" class=\"latex\" title=\"\\eta_A = (\\mathrm{id}_{FA})_\\flat\" />, and by putting <img src=\"http://s0.wp.com/latex.php?latex=Ff+%3D+%28%5Ceta_B+%5Ccirc+f%29%5E%5Csharp&bg=ffffff&fg=333333&s=0\" alt=\"Ff = (\\eta_B \\circ f)^\\sharp\" class=\"latex\" title=\"Ff = (\\eta_B \\circ f)^\\sharp\" /> for <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,B)\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon_S+%3D+%28%5Cmathrm%7Bid%7D_%7BGS%7D%29%5E%5Csharp&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon_S = (\\mathrm{id}_{GS})^\\sharp\" class=\"latex\" title=\"\\varepsilon_S = (\\mathrm{id}_{GS})^\\sharp\" /> for <img src=\"http://s0.wp.com/latex.php?latex=S+%5Cin+%7C%5Cmathcal%7BD%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"S \\in |\\mathcal{D}|\" class=\"latex\" title=\"S \\in |\\mathcal{D}|\" /> we define an adjunction according to Definition 1.</p>
<p>If <img src=\"http://s0.wp.com/latex.php?latex=%28F%2CG%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F,G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F,G, \\eta, \\varepsilon)\" /> is an adjunction, then <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"T = GF : \\mathcal{C} \\to \\mathcal{C}\" class=\"latex\" title=\"T = GF : \\mathcal{C} \\to \\mathcal{C}\" /> is an endofunctor.The first question that comes to our mind is:</p>
<p style=\"text-align: center;\"><em>when does an endofunctor derive from an adjunction?</em></p>
<p>Let us check some basic properties such an endofunctor must satisfy. First of all, <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu+%3A+T%5E2+%5Cto+T&bg=ffffff&fg=333333&s=0\" alt=\"\\mu : T^2 \\to T\" class=\"latex\" title=\"\\mu : T^2 \\to T\" /> defined by <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%3D+G%5Cvarepsilon_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A = G\\varepsilon_{FA}\" class=\"latex\" title=\"\\mu_A = G\\varepsilon_{FA}\" /> is a natural transformation and satisfies</p>
<p style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+T%5Ceta_A+%3D+%5Cmu_A+%5Ccirc+%5Ceta_%7BTA%7D+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D+%5C%3B%5C%3B+%5Cforall+A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ T\\eta_A = \\mu_A \\circ \\eta_{TA} = \\mathrm{id}_{TA} \\;\\; \\forall A \\in |\\mathcal{C}|\" class=\"latex\" title=\"\\mu_A \\circ T\\eta_A = \\mu_A \\circ \\eta_{TA} = \\mathrm{id}_{TA} \\;\\; \\forall A \\in |\\mathcal{C}|\" /></p>
<p style=\"text-align: left;\">Moreover, as <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon+%3A+FG+%5Cto+%5Cmathrm%7BId%7D_%7B%5Cmathcal%7BD%7D%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon : FG \\to \\mathrm{Id}_{\\mathcal{D}}\" class=\"latex\" title=\"\\varepsilon : FG \\to \\mathrm{Id}_{\\mathcal{D}}\" /> is a natural transformation, by choosing <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+%5Cvarepsilon_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"f = \\varepsilon_{FA}\" class=\"latex\" title=\"f = \\varepsilon_{FA}\" /> we get <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon_%7BFA%7D+%5Ccirc+%5Cvarepsilon_%7BFGFA%7D+%3D+%5Cvarepsilon_%7BFA%7D+%5Ccirc+FG%5Cvarepsilon_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon_{FA} \\circ \\varepsilon_{FGFA} = \\varepsilon_{FA} \\circ FG\\varepsilon_{FA}\" class=\"latex\" title=\"\\varepsilon_{FA} \\circ \\varepsilon_{FGFA} = \\varepsilon_{FA} \\circ FG\\varepsilon_{FA}\" />, which after an application of <img src=\"http://s0.wp.com/latex.php?latex=G&bg=ffffff&fg=333333&s=0\" alt=\"G\" class=\"latex\" title=\"G\" /> yields</p>
<p style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Cmu_%7BTA%7D+%3D+%5Cmu_A+%5Ccirc+T%5Cmu_A+%5C%3B%5C%3B+%5Cforall+A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\mu_{TA} = \\mu_A \\circ T\\mu_A \\;\\; \\forall A \\in |\\mathcal{C}|\" class=\"latex\" title=\"\\mu_A \\circ \\mu_{TA} = \\mu_A \\circ T\\mu_A \\;\\; \\forall A \\in |\\mathcal{C}|\" /></p>
<p style=\"text-align: left;\">It will turn out that these two properties are precisely what we need.</p>
<p style=\"text-align: left;\"><strong>Definition 3.</strong> A <em>monad</em> on a category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> is a triple <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> where:</p>
<ol>
<li><img src=\"http://s0.wp.com/latex.php?latex=T+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"T : \\mathcal{C} \\to \\mathcal{C}\" class=\"latex\" title=\"T : \\mathcal{C} \\to \\mathcal{C}\" /> is an endofunctor,</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Ceta+%3A+%5Cmathrm%7BId%7D_%5Cmathcal%7BC%7D+%5Cto+T&bg=ffffff&fg=333333&s=0\" alt=\"\\eta : \\mathrm{Id}_\\mathcal{C} \\to T\" class=\"latex\" title=\"\\eta : \\mathrm{Id}_\\mathcal{C} \\to T\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu%3A+T%5E2+%5Cto+T&bg=ffffff&fg=333333&s=0\" alt=\"\\mu: T^2 \\to T\" class=\"latex\" title=\"\\mu: T^2 \\to T\" /> are natural transformations, and</li>
<li>for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}|\" /> we have <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Ceta_%7BTA%7D+%3D+%5Cmu_A+%5Ccirc+T%5Ceta_A+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\eta_{TA} = \\mu_A \\circ T\\eta_A = \\mathrm{id}_{TA}\" class=\"latex\" title=\"\\mu_A \\circ \\eta_{TA} = \\mu_A \\circ T\\eta_A = \\mathrm{id}_{TA}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Cmu_%7BTA%7D+%3D+%5Cmu_A+%5Ccirc+T%5Cmu_A&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\mu_{TA} = \\mu_A \\circ T\\mu_A\" class=\"latex\" title=\"\\mu_A \\circ \\mu_{TA} = \\mu_A \\circ T\\mu_A\" />,</li>
</ol>
<p>As a very basic example, the <em>free monoid</em> construction is a monad on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathbf%7BSet%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathbf{Set}\" class=\"latex\" title=\"\\mathbf{Set}\" />, where <img src=\"http://s0.wp.com/latex.php?latex=TA+%3D+A%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"TA = A^\\ast\" class=\"latex\" title=\"TA = A^\\ast\" />, <img src=\"http://s0.wp.com/latex.php?latex=Tf%28s%29+%3D+%5Bf%28a%29+%5C%3B+%5Cmathtt%7Bfor%7D+%5C%3B+a+%5C%3B+%5Cmathtt%7Bin%7D+%5C%3B+s%5D&bg=ffffff&fg=333333&s=0\" alt=\"Tf(s) = [f(a) \\; \\mathtt{for} \\; a \\; \\mathtt{in} \\; s]\" class=\"latex\" title=\"Tf(s) = [f(a) \\; \\mathtt{for} \\; a \\; \\mathtt{in} \\; s]\" />, <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A%28a%29+%3D+%5Ba%5D&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A(a) = [a]\" class=\"latex\" title=\"\\eta_A(a) = [a]\" />, and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A%28%5B%5Ba%5E1_1%2C+%5Cldots%2C+a%5E1_%7Bn_1%7D%5D%2C+%5Cldots%2C+%5Ba%5Em_1%2C+%5Cldots%2C+a%5Em_%7Bn_m%7D%5D%5D+%3D+%5Ba%5E1_1%2C+%5Cldots%2C+a%5E1_%7Bn_1%7D%2C+%5Cldots%2C+a%5Em_1%2C+%5Cldots%2C+a%5Em_%7Bn_m%7D%5D&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A([[a^1_1, \\ldots, a^1_{n_1}], \\ldots, [a^m_1, \\ldots, a^m_{n_m}]] = [a^1_1, \\ldots, a^1_{n_1}, \\ldots, a^m_1, \\ldots, a^m_{n_m}]\" class=\"latex\" title=\"\\mu_A([[a^1_1, \\ldots, a^1_{n_1}], \\ldots, [a^m_1, \\ldots, a^m_{n_m}]] = [a^1_1, \\ldots, a^1_{n_1}, \\ldots, a^m_1, \\ldots, a^m_{n_m}]\" />.</p>
<p>As a less basic example, suppose <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D+%3D+%28S%2C+%5Cleq%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C} = (S, \\leq)\" class=\"latex\" title=\"\\mathcal{C} = (S, \\leq)\" /> is a poset: what is a monad on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />? First of all, an endofunctor on a poset is a monotone function; next, if there is <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A+%3A+A+%5Cto+TA&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A : A \\to TA\" class=\"latex\" title=\"\\eta_A : A \\to TA\" />, then <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cleq+TA&bg=ffffff&fg=333333&s=0\" alt=\"A \\leq TA\" class=\"latex\" title=\"A \\leq TA\" />; finally, if there is <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%3A+T%5E2A+%5Cto+TA&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A : T^2A \\to TA\" class=\"latex\" title=\"\\mu_A : T^2A \\to TA\" />, then <img src=\"http://s0.wp.com/latex.php?latex=T%5E2A+%5Cleq+TA&bg=ffffff&fg=333333&s=0\" alt=\"T^2A \\leq TA\" class=\"latex\" title=\"T^2A \\leq TA\" />, which together with the previous inequality yields <img src=\"http://s0.wp.com/latex.php?latex=T%5E2A+%3D+TA&bg=ffffff&fg=333333&s=0\" alt=\"T^2A = TA\" class=\"latex\" title=\"T^2A = TA\" />. On the other hand, any nondecreasing idempotent is the endofunctor component of a monad: the monad equations are actually ensured by <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> being a poset, so that any two maps with same domain and same codomain are equal.</p>
<p>We then restate our original problem as follows:</p>
<p style=\"text-align: center;\"><em>given a monad <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" />, find an adjunction <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu+%3D+G+%5Cvarepsilon_F&bg=ffffff&fg=333333&s=0\" alt=\"\\mu = G \\varepsilon_F\" class=\"latex\" title=\"\\mu = G \\varepsilon_F\" /></em></p>
<p>If the adjunction <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> solves the problem above, we say that it <em>generates</em> the monad <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />.</p>
<p>The first solution to this problem was given by the Swiss mathematician Heinrich Kleisli, and is based on an alternative way of defining monads, as it is the case with adjunctions. Let us suppose <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> with <img src=\"http://s0.wp.com/latex.php?latex=F+%5Cdashv+G&bg=ffffff&fg=333333&s=0\" alt=\"F \\dashv G\" class=\"latex\" title=\"F \\dashv G\" />. If <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB+%3D+G%28FB%29&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB = G(FB)\" class=\"latex\" title=\"f : A \\to TB = G(FB)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3A+FA+%5Cto+FB&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp : FA \\to FB\" class=\"latex\" title=\"f^\\sharp : FA \\to FB\" />, so that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%3A+TA+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp : TA \\to TB\" class=\"latex\" title=\"Gf^\\sharp : TA \\to TB\" />: and we know from the definition of monad that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp \\circ \\eta_A = f\" class=\"latex\" title=\"Gf^\\sharp \\circ \\eta_A = f\" />. We can thus define an operator <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)^\\ast\" class=\"latex\" title=\"(\\cdot)^\\ast\" /> that takes <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,TB)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,TB)\" /> into <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Cin+%5Cmathcal%7BC%7D%28TA%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\in \\mathcal{C}(TA,TB)\" class=\"latex\" title=\"f^\\ast \\in \\mathcal{C}(TA,TB)\" /> in a way such that <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\circ \\eta_A = f\" class=\"latex\" title=\"f^\\ast \\circ \\eta_A = f\" /> whatever <img src=\"http://s0.wp.com/latex.php?latex=f&bg=ffffff&fg=333333&s=0\" alt=\"f\" class=\"latex\" title=\"f\" /> is. The simplest example is <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"f = \\eta_A\" class=\"latex\" title=\"f = \\eta_A\" /> itself, so that <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast \\circ \\eta_A = \\eta_A\" class=\"latex\" title=\"(\\eta_A)^\\ast \\circ \\eta_A = \\eta_A\" />, and <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" class=\"latex\" title=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" /> by uniqueness in the definition of adjunction quadruple. Moreover, if <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB\" class=\"latex\" title=\"f : A \\to TB\" /> and <img src=\"http://s0.wp.com/latex.php?latex=g+%3A+B+%5Cto+TC&bg=ffffff&fg=333333&s=0\" alt=\"g : B \\to TC\" class=\"latex\" title=\"g : B \\to TC\" />, then</p>
<p style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=g%5E%5Cast+%5Ccirc+f+%3D+Gg%5E%5Csharp+%5Ccirc+%28Gf%5E%5Csharp+%5Ccirc+%5Ceta_A%29+%3D+%28g%5E%5Cast+%5Ccirc+f%5E%5Cast%29+%5Ccirc+%5Ceta_A+%5C%3B%2C&bg=ffffff&fg=333333&s=0\" alt=\"g^\\ast \\circ f = Gg^\\sharp \\circ (Gf^\\sharp \\circ \\eta_A) = (g^\\ast \\circ f^\\ast) \\circ \\eta_A \\;,\" class=\"latex\" title=\"g^\\ast \\circ f = Gg^\\sharp \\circ (Gf^\\sharp \\circ \\eta_A) = (g^\\ast \\circ f^\\ast) \\circ \\eta_A \\;,\" /></p>
<p style=\"text-align: left;\">which implies <img src=\"http://s0.wp.com/latex.php?latex=%28g%5E%5Cast+%5Ccirc+f%29%5E%5Cast+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" class=\"latex\" title=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" /> by uniqueness.</p>
<p>This is the base of Kleisli’s solution to our problem, which we will discuss in a future talk.</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/theorylunch.wordpress.com/768/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/theorylunch.wordpress.com/768/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=theorylunch.wordpress.com&blog=43735749&post=768&subd=theorylunch&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "9de0b1bc83135bfdddf8d6ec17a371a4") (173 (20949 25792 592910) "http://www.yesodweb.com/blog/2013/06/first-11-chapters" "Yesod Web Framework: First 11 chapters are Yesod 1.2-compliant" nil "Sun, 23 Jun 2013 13:00:00 +0000" "<p>It's been a while since I've written a post. Besides being <a href=\"https://www.fpcomplete.com/blog/2013/06/beta-sign-up\">very busy at
work</a>, a lot of my time
has gone into getting the Yesod book up-to-date with Yesod version 1.2. And
today, I'm happy to report that the first 11 chapters, comprising the \"basics\"
section of the book, have been converted.</p><p>You can view the new content <a href=\"http://www.yesodweb.com/book-1.2\">at the 1.2
URL</a>. Once the entire book is converted, I'll
switch the URLs, but will continue hosting the 1.1 version of the book <a href=\"http://www.yesodweb.com/book-1.1\">at its
own URL</a>. I intend to continue this pattern
for any future releases as well.</p><p>I intend to continue the conversion process, but I also intend to augment the
book. In particular, I have a number of new examples to add. My current plans
are:</p><ul><li>JSON serving</li><li>Client-side development with Fay</li><li>An updated subsite example based on 1.2 features</li><li>Easy generation of streaming data</li><li>How to store some initialized data in the foundation</li><li>Getting configuration from environment variables</li><li>Writing your own Template Haskell code</li></ul><p>If anyone has suggestions for changes to this list, let me know.</p><p>As for the newly converted content: comments and pull requests are, as always,
welcome!</p>" nil nil "75e76ae2b6e600538f10b9261fdb6330") (172 (20949 25792 592480) "http://neilmitchell.blogspot.com/2013/06/building-llvm-using-shake.html" "Neil Mitchell: Building LLVM using Shake" "noreply@blogger.com (Neil Mitchell)" "Sun, 23 Jun 2013 09:33:08 +0000" "<i>Summary: You can now build LLVM using Shake, and a rebuild with nothing to do goes massively faster than make (0.8s vs 199s) and fractionally faster than Ninja (0.8s vs 0.9s).</i><br /><br />As of <a href=\"https://github.com/ndmitchell/shake\">Shake</a> 0.10.4 the <tt>shake</tt> tool can execute <a href=\"http://martine.github.io/ninja/\">Ninja</a> build files. <a href=\"http://llvm.org/\">LLVM</a> can be built with <a href=\"http://www.cmake.org/\">CMake</a>, and CMake can generate a Ninja build file, so you can compile LLVM with Shake. I've included the full steps I followed at the end of this post.<br /><br />The main thing I wanted to test was how fast a rebuild with nothing to do was using Shake vs Ninja, as Ninja prides itself on having \"a focus on speed\". When compiling LLVM on Windows with GCC, a nothing to do build using make takes 199s, Shake takes 0.8s and Ninja takes 0.9s. The CMake generator does not use one of the latest Ninja build features (the deps keyword), but if it did, Shake would be about 0.1s faster and Ninja would be at least 0.1s faster.<br /><br />Full builds with Shake and Ninja both take about the same time, but with anything higher than 2 CPUs the linker phase ends up contending heavily and the machine thrashes the disk, making robust measurements impossible. The solution would be to use <a href=\"http://neilmitchell.blogspot.co.uk/2013/02/summary-management-of-finite-resources.html\">finite resources</a> on the linkers, something that needs implementing in the CMake Ninja generator, and would then allow more CPUs to be used.<br /><br />Other than speed, why would you use Shake to compile LLVM?<br /><br /><ul><li>If you build with <tt>--report</tt> the file <tt>report.html</tt> will be generated. Open that report file and you can see numerous details about the build - how good the parallel utilisation was, what changed to cause what to rebuild, summary statistics, a dependency graph and more. See the Help page in any generated report for more details.</li><li>If you build with <tt>--progress</tt> the console titlebar will display a predicted completion time, how many seconds until your build completes. The predicted time will be fairly inaccurate the first time round, but future runs are influenced by recorded timings, and can produce useful guesses.</li><li>If your CPU has a preference for functional languages it will make the registers happier.</li></ul><br />Existing Ninja users may also be interested in <a href=\"https://github.com/ndmitchell/shake/blob/master/docs/Ninja.md\">a guide to running Ninja builds with Shake</a>, which gives a few more details on using Shake like Ninja.<br /><br /><b>Compiling LLVM with Shake</b><br /><br />These instructions are how I compiled LLVM with Shake, on Windows, with GCC. I didn't run into any significant problems, but there were two minor niggles I had to work though (both listed below). I compiled LLVM with make, then Ninja, then Shake, to check each phase as I went - but only the final Shake compile is actually necessary.<br /><br /><ul><li>Install Shake with <tt>cabal update && cabal install shake --global</tt>, if you are new to Haskell package installation, see <a href=\"https://github.com/ndmitchell/shake/blob/master/docs/Ninja.md#installing-shake\">here</a>.</li><li>Get LLVM and compile it with make, I followed the instructions at <tt>http://bencode.net/clangonwindows</tt>, which has disappeared in the last few days (I have emailed the web master to see where it went).</li><li>Install <a href=\"http://martine.github.io/ninja/\">Ninja</a>.</li><li>Run CMake over LLVM <a href=\"http://llvm.org/docs/CMake.html\">like this</a>, configuring with <tt>-G Ninja</tt>.</li><li>To build with Ninja I had to edit <tt>build.ninja</tt> line 17697 to delete <tt>lib/clang/3.4/lib/windows/libclang_rt.i386.a,</tt> which won't build on my system and isn't built at all by the make system - I suspect this is a tip/mingw issue. At this stage you can compile LLVM with Ninja.</li><li>Type <tt>touch tools/clang/lib/Basic/CMakeFiles/clang_revision_tag</tt> to create a dummy file. There is a Ninja rule to create such a file, but the rule is wrong since it doesn't actually produce the file, and Shake's sanity checking spots that.</li><li>Run <tt>shake -j2</tt> in the build directory. Come back later and you will have a build.</li><li>Run <tt>shake -j2</tt> again to enjoy the fast nothing to do build.</li></ul>" nil nil "9bd2d47ee046e50d1dbfbf0ed14be51c") (171 (20949 25792 589610) "http://existentialtype.wordpress.com/2013/06/22/whats-the-big-deal-with-hott/" "Robert Harper: =?utf-8?Q?What=E2=80=99s?= the big deal with HoTT?" nil "Sun, 23 Jun 2013 00:25:39 +0000" "<p>Now that the <a href=\"http://homotopytypetheory.org/book\" target=\"_blank\" title=\"Homotopy Type Theory Book\">Homotopy Type Theory</a> book is out, a lot of people are asking “What’s the big deal?”.  The full answer lies within the book itself (or, at any rate, the fullest answer to date), but I am sure that many of us who were involved in its creation will be fielding this question in our own ways to help explain why we are so excited by it.  In fact what I think is really fascinating about HoTT is precisely that there are so many different ways to think about it, according to one’s interests and backgrounds.  For example, one might say it’s a nice way to phrase arguments in homotopy theory that avoids some of the technicalities in the classical proofs by treating spaces and paths synthetically, rather than analytically.  Or one might say that it’s a good language for mechanization of mathematics that provides for the concise formulation of proofs in a form that can be verified by a computer.  Or one might say that it points the way towards a vast extension of the concept of computation that enables us to compute with abstract geometric objects such as spheres or toruses.  Or one might say that it’s a new foundation for mathematics that subsumes set theory by generalizing types from mere sets to arbitrary infinity groupoids,  sets being but particularly simple types (those with no non-trivial higher-dimensional structure).</p>
<p>But what is it about HoTT that makes all these interpretations and applications possible?  What is the key idea that separates HoTT from other approaches that seek to achieve similar ends?  What makes HoTT so special?</p>
<p>In a word the answer is <em>constructivity.</em>  The distinctive feature of HoTT is that it is based on Per Martin-Löf’s Intuitionistic Theory of Types, which was formulated as a foundation for <em>intuitionistic mathematics</em> as originally put forth by Brouwer in the 1930′s, and further developed by Bishop, Gentzen, Heyting, Kolmogorov, Kleene, Lawvere, and Scott, among many others.  Briefly put, the idea of type theory is to codify and systematize the concept of a <em>mathematical construction</em> by characterizing the abstract properties, rather than the concrete realizations, of the objects used in everyday mathematics.  Brouwer’s key insight, which lies at the heart of HoTT, is that <em>proofs are a form of construction</em> no different in kind or character from numbers, geometric figures, spaces, mappings, groups, algebras, or any other mathematical structure.  <a href=\"http://existentialtype.wordpress.com/2012/08/11/extensionality-intensionality-and-brouwers-dictum/\" target=\"_blank\" title=\"Extensionality, Intensionality, and Brouwer’s Dictum\">Brouwer’s dictum</a>, which distinguished his approach from competing alternatives, is that <em>logic is a part of mathematics</em>, rather than <em>mathematics is an application of logic</em>.  Because for him the concept of a construction, including the concept of a proof, is prior to any other form of mathematical activity, including the study of proofs themselves (<em>i.e.</em>, logic).</p>
<p>So under Martin-Löf’s influence HoTT starts with the notion of <em>type</em> as a classification of the notion of <em>construction</em>, and builds upwards from that foundation.  Unlike competing approaches to foundations, <em>proofs are mathematical objects</em> that play a central role in the theory.  This conception is <em>central</em> to the homotopy-theoretic interpretation of type theory, which enriches types to encompass spaces with higher-dimensional structure.  Specifically, the type <img src=\"http://s0.wp.com/latex.php?latex=%5Ctextsf%7BId%7D_A%28M%2CN%29&bg=ffffff&fg=333333&s=0\" alt=\"\\textsf{Id}_A(M,N)\" class=\"latex\" title=\"\\textsf{Id}_A(M,N)\" /> is the type of <em>identifications</em> of <img src=\"http://s0.wp.com/latex.php?latex=M&bg=ffffff&fg=333333&s=0\" alt=\"M\" class=\"latex\" title=\"M\" /> and <img src=\"http://s0.wp.com/latex.php?latex=N&bg=ffffff&fg=333333&s=0\" alt=\"N\" class=\"latex\" title=\"N\" /> within the space <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" />.  Identifications may be thought of as <em>proofs</em> that <img src=\"http://s0.wp.com/latex.php?latex=M&bg=ffffff&fg=333333&s=0\" alt=\"M\" class=\"latex\" title=\"M\" /> and <img src=\"http://s0.wp.com/latex.php?latex=N&bg=ffffff&fg=333333&s=0\" alt=\"N\" class=\"latex\" title=\"N\" /> are <em>equal</em> as elements of $A$, or, equivalently, as <em>paths</em> in the space <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> between points <img src=\"http://s0.wp.com/latex.php?latex=M&bg=ffffff&fg=333333&s=0\" alt=\"M\" class=\"latex\" title=\"M\" /> and <img src=\"http://s0.wp.com/latex.php?latex=N&bg=ffffff&fg=333333&s=0\" alt=\"N\" class=\"latex\" title=\"N\" />.  The fundamental principles of abstraction at the heart of type theory ensure that <em>all constructs of the theory respect these identifications</em>, so that we may treat them as proofs of equality of two elements.  There are three main sources of identifications in HoTT:</p>
<ol>
<li>Reflexivity, stating that everything is equal to itself.</li>
<li>Higher inductive types, defining a type by giving its points, paths, paths between paths, and so on to any dimension.</li>
<li>Univalence, which states that an equivalence between types determines a path between them.</li>
</ol>
<p>I will not attempt here to explain each of these in any detail; everything you need to know is in the HoTT book.  But I will say a few things about their consequences, just to give a flavor of what these new principles give us.</p>
<p>Perhaps the most important conceptual point is that mathematics in HoTT emphasizes the <em>structure of proofs</em> rather than their mere existence.  Rather than settle for a mere logical equivalence between two types (mappings back and forth stating that each implies the other), one instead tends to examine the <em>entire space</em> of proofs of a proposition and how it relates to others.  For example, the univalence axiom itself does not merely state that every equivalence between types gives rise to a path between them, but rather that there is an <em>equivalence</em> between the type of equivalences between two types and the type of paths between them.  Familiar patterns such as “<img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> iff <img src=\"http://s0.wp.com/latex.php?latex=B&bg=ffffff&fg=333333&s=0\" alt=\"B\" class=\"latex\" title=\"B\" />” tend to become “<img src=\"http://s0.wp.com/latex.php?latex=A%5Csimeq+B&bg=ffffff&fg=333333&s=0\" alt=\"A\\simeq B\" class=\"latex\" title=\"A\\simeq B\" />“, stating that the proofs of <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> and the proofs of <img src=\"http://s0.wp.com/latex.php?latex=B&bg=ffffff&fg=333333&s=0\" alt=\"B\" class=\"latex\" title=\"B\" /> are equivalent.  Of course one may <em>choose </em>neglect this additional information, stating only weaker forms of it using, say, truncation to suppress higher-dimensional information in a type, but the tendency is to <em>embrace</em> the structure and characterize the space of proofs as fully as possible.</p>
<p>A close second in importance is the <em>axiomatic freedom</em> afforded by constructive foundations.  This point has been made many times by many authors in many different settings, but has particular bite in HoTT.   The theory does not commit to (nor does it refute) the infamous <em>Law of the Excluded Middle</em> for arbitrary types: the type <img src=\"http://s0.wp.com/latex.php?latex=A%2B%28A%5Cto+%5Ctextbf%7B0%7D%29&bg=ffffff&fg=333333&s=0\" alt=\"A+(A\\to \\textbf{0})\" class=\"latex\" title=\"A+(A\\to \\textbf{0})\" /> need not always be inhabited.  This property of HoTT is absolutely essential to its expressive power.  Not only does it admit a wider range of interpretations than are possible with the Law included, but it also allows for the <em>selective imposition</em> of the Law where it is needed to recover a classical argument, or where it is important to distinguish the implications of decidability in a given situation.  (Here again I defer to the book itself for full details.)  Similar considerations arise in connection with the many forms of Choice that can be expressed in HoTT, some of which are outright provable, others of which are independent as they are in axiomatic set theory.</p>
<p>Thus, what makes HoTT so special is that it is a<em> constructive</em> theory of mathematics.  Historically, this has meant that it has a <em>computational</em> interpretation, expressed most vividly by the <a href=\"http://existentialtype.wordpress.com/2011/03/27/the-holy-trinity/\" target=\"_blank\" title=\"The Holy Trinity\"><em>propositions as types</em></a> principle.  And yet, for all of its promise, what HoTT currently lacks is a computational interpretation!  What, exactly, does it mean to <em>compute</em> with higher-dimensional objects?  At the moment it is difficult to say for sure, though there seem to be clear intuitions in at least some cases of how to “implement” such a rich type theory.  Alternatively, one may ask whether the term “constructive”, when construed in such a general setting, must inevitably involve a notion of computation.  While it seems obvious on computational grounds that the Law of the Excluded Middle should not be considered universally valid, it becomes less clear why it is so important to omit this Law (and, essentially, no other) in order to obtain the richness of HoTT when no computational interpretation is extant.  From my point of view understanding the <em>computational </em>meaning of higher-dimensional type theory is of paramount importance, because, for me, type theory is and always has been a <em>theory of computation</em> on which the entire edifice of mathematics ought to be built.</p>
<br />Filed under: <a href=\"http://existentialtype.wordpress.com/category/research/\">Research</a> Tagged: <a href=\"http://existentialtype.wordpress.com/tag/homotopy-theory/\">homotopy theory</a>, <a href=\"http://existentialtype.wordpress.com/tag/type-theory/\">type theory</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/existentialtype.wordpress.com/819/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/existentialtype.wordpress.com/819/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=existentialtype.wordpress.com&blog=2157150&post=819&subd=existentialtype&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "aa294495468e3227ea27d6a7c401b7f0") (170 (20949 25792 587816) "http://neilmitchell.blogspot.com/2013/05/three-types-of-build-system-dependency.html" "Neil Mitchell: Three types of build-system dependency" "noreply@blogger.com (Neil Mitchell)" "Sat, 22 Jun 2013 21:05:27 +0000" "<i>Summary: There are three types of dependencies you might want to express in a build system, all of which are supported by Shake.</i><br /><br />A build system, at its heart, is a system which runs commands in an order satisfying user-specified dependencies. But what kind of dependencies can be expressed? This post describes three different types of dependency, only one of which is available in Make, but all of which are available in both <a href=\"https://github.com/ndmitchell/shake#readme\">Shake</a> and <a href=\"http://martine.github.io/ninja/\">Ninja</a>.<br /><br /><b>Feature 1: Static dependencies (available in every build system)</b><br /><br />The most basic form of dependency is a static dependency, where a rule produces an output from some inputs:<br /><br /><pre>-- In Make --<br />result.tar : file1 file2<br />    tar -cf result.tar file1 file2<br /><br />-- In Shake --<br />\"result.tar\" *> \\out -> do<br />    let deps = [\"file1\",\"file2\"]<br />    need deps<br />    cmd \"tar -cf\" [out] deps<br /></pre><br />This rule says that the file <tt>result.tar</tt> depends on the inputs <tt>file1</tt> and <tt>file2</tt>, and provides a command to build <tt>result.tar</tt>. Whenever <tt>file1</tt> or <tt>file2</tt> change, the command will be run, and <tt>result.tar</tt> will be built.<br /><br />Static dependencies occur in almost every build rule, and are supported by all build tools, including Make and Shake.<br /><br /><b>Feature 2: Dynamic dependencies (available in Shake, Ninja, Redo and tup)</b><br /><br />A more advanced dependency is where the list of dependencies itself depends on the results of previous dependencies. Imagine we want to build <tt>result.tar</tt> from the list of files stored in <tt>list.txt</tt>. The dependencies of <tt>result.tar</tt> cannot be specified statically, but depend on <i>the contents</i> of <tt>list.txt</tt>. In Shake we can write:<br /><br /><pre>\"result.tar\" *> \\out -> do<br />    need [\"list.txt\"]<br />    contents <- readFileLines \"list.txt\"<br />    need contents<br />    cmd \"tar -cf\" [out] contents<br /></pre><br />This rule describes how to build <tt>result.tar</tt>. We depend on (<tt>need</tt>) the file <tt>list.txt</tt>. We read each line from <tt>list.txt</tt> into the variable <tt>contents</tt> - being a list of the files that should go into <tt>result.tar</tt>. Next, we depend on all the files in <tt>contents</tt>, and finally call the <tt>tar</tt> program. If either <tt>list.txt</tt> changes, or any of the files listed by <tt>list.txt</tt> change, then <tt>result.tar</tt> will be rebuilt.<br /><br />This feature is necessary in almost every build system, yet is shockingly lacking from most build tools - I am only aware of it being available in <a href=\"https://github.com/ndmitchell/shake#readme\">Shake</a>, <a href=\"http://martine.github.io/ninja/\">Ninja</a>, <a href=\"https://github.com/apenwarr/redo#readme\">Redo</a> and <a href=\"http://gittup.org/tup/\">tup</a>. As a common example, in Make you might write:<br /><br /><pre>result.o : result.c result_header1.h result_header2.h<br />    gcc ...<br /></pre><br />The file <tt>result.o</tt> depends on both the C source file <tt>result.c</tt> and all headers that file includes. But listing the headers both in <tt>result.c</tt> with <tt>#include</tt> directives, and in the Makefile, is a brittle form of duplication. A better approach is for the build system to run <tt>gcc -M result.c</tt> and extract the includes from there. In Shake we can write:<br /><br /><pre>\"result.o\" *> \\out -> do<br />    let src = \"result.c\"<br />    Stdout stdout <- cmd \"gcc -MM\" [src]<br />    need $ src : drop 2 (words stdout)<br />    cmd \"gcc -o\" [out] \"-c\" [src]<br /></pre><br />My experience is that about a quarter of rules require some kind of additional dependency based on previous dependencies. While you can hack round some of the issues in Make, and people have become disturbingly adept at doing so, the result often only approximates the dependencies - building either too much or too little.<br /><br /><b>Feature 3: Multiple outputs from one rule (available in Shake and Ninja)</b><br /><br />The final feature is producing multiple outputs from one command, and is used far more rarely (perhaps one or two rules in a complex build system) - but when needed, is essential. Some programs, such as GHC, can produce two outputs with one command - compiling <tt>Foo.hs</tt> produces both <tt>Foo.o</tt> and <tt>Foo.hi</tt>. As a first approximation, the <tt>.o</tt> file depends on the entire contents of the source file, while the <tt>.hi</tt> file depends only on the type signatures. A single <tt>ghc</tt> invocation needs to do all the work to produce both, but often the <tt>.hi</tt> file will be left unchanged. In Shake we can write:<br /><br /><pre>[\"Foo.hi\",\"Foo.o\"] *>> \\_ -> do<br />    need [\"Foo.hs\"]<br />    cmd \"gcc -c Foo.hs\"<br /></pre><br />While it is often possible to construct a series of dependencies to approximate a single rule producing multiple outputs, it only works in some cases, and is brittle. The only build systems I am aware of which support multiple outputs are <a href=\"https://github.com/ndmitchell/shake#readme\">Shake</a> and <a href=\"http://martine.github.io/ninja/\">Ninja</a>.<br /><br /><b>Essential features</b><br /><br />My standard advice when people ask about writing a build system is \"don't\". If some existing build system (e.g. ghc --make or Cabal) is capable of building your project, use that instead. Custom build systems are necessary for many complex projects, but many projects are not complex. If you have decided your project is complex, you should use a build tool that can express complex dependencies, both for writing the initial system and to provide the flexibility to make the inevitable changes required.<br /><br />Looking only at dependency features, I would consider it unwise to start a complex build system using a tool other than Shake or Ninja, or perhaps either Redo or tup (if you accept the absence of multiple outputs from one rule).<br /><br />Weak dependency specification in build tools, particularly Make, has left its mark on many programs. I recently talked to some OCaml hackers complaining that their tools were not \"Make friendly\" because they produced multiple output files. I wonder what lengths other tools have gone to in order to cope with weak dependency specification...<br /><br /><b>Update:</b> The relative power of tup was reported as a comment, and it appears to have the necessary power, but I haven't yet checked. Following further research into Ninja I suspect it may not be as powerful as originally stated and may not have Feature 2, but am not yet sure." nil nil "0d14184a7efb5c989225d6493150c5b5") (169 (20949 25792 586234) "http://twanvl.nl/blog/agda/subst-from-cong" "Twan van Laarhoven: Substitution from congruence in univalent OTT" nil "Sat, 22 Jun 2013 14:51:00 +0000" "<p>In this post I will show that in an univalence style observational type theory, it is enough to take congruence as a primitive, rather than the more complicated substitution or J axioms. This post is literate Agda, so here are some boring import declarations
</p><pre class=\"agda\"><span class=\"keyword\">module</span> <span class=\"varid\">subst-from-cong</span> <span class=\"keyword\">where</span>
<div class=\"empty-line\"></div>
<span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Level</span>
<span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Function</span>
<span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Data.Unit</span>
<span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Data.Bool</span>
<span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Data.Empty</span>
<span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Data.Product</span>
</pre><p>I will be using the standard propositional equality as a meta equality,
</p><pre class=\"agda\"><span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Relation.Binary.PropositionalEquality</span> <span class=\"varid\">as</span> <span class=\"conid\">Meta</span> <span class=\"varid\">using</span> (<span class=\"keyglyph\">_</span><span class=\"varop\">≡</span><span class=\"keyglyph\">_</span>)
</pre><p>while postulating a path type (equality type) and its computation rules for me to prove things about,
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span> <span class=\"conid\">Path</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>
<span class=\"keyword\">postulate</span> <span class=\"varid\">refl</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>) <span class=\"keyglyph\">→</span> (<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x</span>
</pre><p>The idea of Observational Type Theory (OTT) is that <tt><span class=\"conid\">Path</span></tt> is actually defined by case analysis on the structure of the argument type. For the finite types this is simple, there is a path if and only if the values are the same,
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span> <span class=\"conid\">Path-⊤</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> ⊤ <span class=\"varid\">tt</span> <span class=\"varid\">tt</span> <span class=\"varop\">≡</span> ⊤
<div class=\"empty-line\"></div>
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Bool00</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">Bool</span> <span class=\"varid\">false</span> <span class=\"varid\">false</span> <span class=\"varop\">≡</span> ⊤
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Bool01</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">Bool</span> <span class=\"varid\">false</span> <span class=\"varid\">true</span> <span class=\"varop\">≡</span> ⊥
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Bool10</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">Bool</span> <span class=\"varid\">true</span> <span class=\"varid\">false</span> <span class=\"varop\">≡</span> ⊥
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Bool11</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">Bool</span> <span class=\"varid\">true</span> <span class=\"varid\">true</span> <span class=\"varop\">≡</span> ⊤
</pre><p>A path for functions is a function to paths, which also means that we have functional extensionality.
</p><pre class=\"agda\"><span class=\"conid\">Π</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} (<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>) (<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> (<span class=\"varid\">a</span> ⊔ <span class=\"varid\">b</span>)
<span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span> <span class=\"keyglyph\">=</span> (<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">x</span>
<div class=\"empty-line\"></div>
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Π</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">:</span> <span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">≡</span> ((<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">B</span> <span class=\"varid\">x</span>) (<span class=\"varid\">f</span> <span class=\"varid\">x</span>) (<span class=\"varid\">g</span> <span class=\"varid\">x</span>))
</pre><p>In their <a href=\"http://www.cs.nott.ac.uk/~txa/publ/obseqnow.pdf\">original OTT paper</a>, Alternkirch et.al. defined equality for types also by structure matching. I.e. Π types are equal to Π types with equal arguments, Σ types are equal to Σ types, etc.
But this is incompatible with the univalence axiom from Homotopy Type Theory. That axiom states that equivalent or isomorphic types are equal. So, what happens if we take isomorphism as our definition of equality between types?
</p><pre class=\"agda\"><span class=\"conid\">Iso</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">A</span> <span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>
<span class=\"conid\">Iso</span> {<span class=\"varid\">a</span>} <span class=\"conid\">A</span> <span class=\"conid\">B</span>
<span class=\"keyglyph\">=</span> <span class=\"conid\">Σ</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"keyglyph\">\\</span><span class=\"varid\">fw</span> <span class=\"keyglyph\">→</span>
<span class=\"conid\">Σ</span> (<span class=\"conid\">B</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">\\</span><span class=\"varid\">bw</span> <span class=\"keyglyph\">→</span>
(<span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> (<span class=\"varid\">bw</span> (<span class=\"varid\">fw</span> <span class=\"varid\">x</span>)) <span class=\"varid\">x</span>) ×
(<span class=\"keyglyph\">∀</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">B</span> (<span class=\"varid\">fw</span> (<span class=\"varid\">bw</span> <span class=\"varid\">y</span>)) <span class=\"varid\">y</span>)
<div class=\"empty-line\"></div>
<span class=\"varid\">id-Iso</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Iso</span> <span class=\"conid\">A</span> <span class=\"conid\">A</span>
<span class=\"varid\">id-Iso</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">=</span> (<span class=\"varid\">id</span> , <span class=\"varid\">id</span> , <span class=\"varid\">refl</span> <span class=\"conid\">A</span> , <span class=\"varid\">refl</span> <span class=\"conid\">A</span>)
<div class=\"empty-line\"></div>
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Type</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} (<span class=\"conid\">A</span> <span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">Set</span> <span class=\"varid\">a</span>) <span class=\"conid\">A</span> <span class=\"conid\">B</span> <span class=\"varop\">≡</span> <span class=\"conid\">Lift</span> {<span class=\"varid\">a</span>} {<span class=\"varid\">suc</span> <span class=\"varid\">a</span>} (<span class=\"conid\">Iso</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
</pre><p>Now suppose that we have a congruence, i.e. that all functions preserve paths. So from a path between <tt><span class=\"varid\">x</span></tt> and <tt><span class=\"varid\">y</span></tt>, we can construct a path between <tt class=\"complex\"><span class=\"varid\">f</span> <span class=\"varid\">x</span></tt> and <tt class=\"complex\"><span class=\"varid\">f</span> <span class=\"varid\">y</span></tt> for any function <tt><span class=\"varid\">f</span></tt>.
</p><pre class=\"agda\"><span class=\"comment\">-- we have congruence for non-dependent functions</span>
<span class=\"keyword\">postulate</span> <span class=\"varid\">cong</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">f</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"keyglyph\">→</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">y</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">B</span> (<span class=\"varid\">f</span> <span class=\"varid\">x</span>) (<span class=\"varid\">f</span> <span class=\"varid\">y</span>)
</pre><p>Then this is enough to define substitution, since the paths for a type <tt class=\"complex\"><span class=\"conid\">B</span> <span class=\"varid\">x</span></tt> are isomorphisms, and we can apply these in the forward direction
</p><pre class=\"agda\"><span class=\"varid\">subst</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} (<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>) {<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">y</span>
<span class=\"varid\">subst</span> <span class=\"conid\">B</span> {<span class=\"varid\">x</span>} {<span class=\"varid\">y</span>} <span class=\"varid\">p</span> <span class=\"varid\">with</span> <span class=\"varid\">Meta.subst</span> <span class=\"varid\">id</span> (<span class=\"conid\">Path-Type</span> (<span class=\"conid\">B</span> <span class=\"varid\">x</span>) (<span class=\"conid\">B</span> <span class=\"varid\">y</span>)) (<span class=\"varid\">cong</span> <span class=\"conid\">B</span> <span class=\"varid\">p</span>)
<span class=\"varop\">...</span> <span class=\"keyglyph\">|</span> <span class=\"varid\">lift</span> (<span class=\"varid\">fw</span> , <span class=\"varid\">bw</span> , <span class=\"keyglyph\">_</span> , <span class=\"keyglyph\">_</span>) <span class=\"keyglyph\">=</span> <span class=\"varid\">fw</span>
</pre><p>With substitution we can now finally define what paths are for dependent Σ types.
A path between pairs is a pair of paths,
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Σ</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">Σ</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">Σ</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>) <span class=\"varid\">x</span> <span class=\"varid\">y</span>
<span class=\"varop\">≡</span> <span class=\"conid\">Σ</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> (<span class=\"varid\">proj₁</span> <span class=\"varid\">x</span>) (<span class=\"varid\">proj₁</span> <span class=\"varid\">y</span>))
(<span class=\"keyglyph\">\\</span><span class=\"varid\">pa</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">B</span> (<span class=\"varid\">proj₁</span> <span class=\"varid\">y</span>)) (<span class=\"varid\">subst</span> <span class=\"conid\">B</span> <span class=\"varid\">pa</span> (<span class=\"varid\">proj₂</span> <span class=\"varid\">x</span>)) (<span class=\"varid\">proj₂</span> <span class=\"varid\">y</span>))
</pre><p>Substitution is not the most general eliminator for paths.
It is not enough to prove properties about paths. For that we need the general induction principle for paths, often called J
</p><pre class=\"agda\"><span class=\"conid\">J</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">B</span> <span class=\"varop\">:</span> (<span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>)
<span class=\"keyglyph\">→</span> {<span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} <span class=\"keyglyph\">→</span> (<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">x</span> (<span class=\"varid\">refl</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">y</span> <span class=\"varid\">p</span>
</pre><p>Unfortunately, I was unable to prove J from just congruence. For that I needed an additional lemma,
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span> <span class=\"varid\">subst-refl</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} <span class=\"keyglyph\">→</span> (<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>)
<span class=\"keyglyph\">→</span> <span class=\"varid\">p</span> <span class=\"varop\">≡</span> <span class=\"varid\">subst</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span>) <span class=\"varid\">p</span> (<span class=\"varid\">refl</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span>)
</pre><p>Since <tt class=\"complex\"><span class=\"conid\">Path</span> <span class=\"conid\">A</span></tt> is inductively defined, I believe that <tt class=\"complex\"><span class=\"varid\">subst-refl</span></tt> should be provable by case analysis on <tt><span class=\"conid\">A</span></tt>, but I have not yet done so. We can now implement J by using <tt><span class=\"varid\">subst</span></tt> with a dependent pair.
Note that here I have to manually apply the comptuation rules for <tt class=\"complex\"><span class=\"conid\">Path</span> (<span class=\"conid\">Σ</span> <span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span>)</tt> and use the <tt class=\"complex\"><span class=\"varid\">subst-refl</span></tt> lemma.
</p><pre class=\"agda\"><span class=\"conid\">J</span> {<span class=\"conid\">A</span> <span class=\"keyglyph\">=</span> <span class=\"conid\">A</span>} {<span class=\"varid\">x</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">x</span>} <span class=\"conid\">B</span> {<span class=\"varid\">y</span>} <span class=\"varid\">p</span>
<span class=\"keyglyph\">=</span> <span class=\"varid\">subst</span> (<span class=\"varid\">uncurry</span> <span class=\"conid\">B</span>)
(<span class=\"varid\">Meta.subst</span> <span class=\"varid\">id</span> (<span class=\"varid\">Meta.sym</span> <span class=\"varop\">$</span> <span class=\"conid\">Path-Σ</span> (<span class=\"varid\">x</span> , <span class=\"varid\">refl</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span>) (<span class=\"varid\">y</span> , <span class=\"varid\">p</span>)) <span class=\"varop\">$</span>
(<span class=\"varid\">p</span> , <span class=\"varid\">Meta.subst</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">q</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) <span class=\"varid\">q</span> <span class=\"varid\">p</span>) (<span class=\"varid\">subst-refl</span> <span class=\"varid\">p</span>)
(<span class=\"varid\">refl</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) <span class=\"varid\">p</span>)))
</pre><h2><a name=\"does-it-compute\"></a>Does it compute </h2>
<p>An important question to ask is whether this style of OTT is actually implementable.
We can certainly implement the definitions, but would they allow us to compute?
</p><p>The type <tt class=\"complex\"><span class=\"conid\">Path</span> <span class=\"conid\">A</span></tt> certainly reduces, by definition. Similarly, it is not hard to implemenent <tt><span class=\"varid\">refl</span></tt>.
The hard part is defining what <tt><span class=\"varid\">cong</span></tt> means for various functions, and then proving <tt class=\"complex\"><span class=\"varid\">subst-refl</span></tt>.
Somewhere in there we should put the fact that paths are transitive and symmetric, since we have not used that property so far. For what I have done up till now I could equally well have taken <tt class=\"complex\"><span class=\"conid\">Iso</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span> <span class=\"keyglyph\">=</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span></tt>.
</p><p>Here are the implementations of <tt><span class=\"varid\">refl</span></tt>,
</p><pre class=\"agda\"><span class=\"keyglyph\">_</span><span class=\"varop\">≡[</span><span class=\"keyglyph\">_</span><span class=\"varop\">]≡</span><span class=\"keyglyph\">_</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} {<span class=\"conid\">A</span> <span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"varop\">≡</span> <span class=\"conid\">B</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>
<span class=\"varid\">a</span> <span class=\"varop\">≡[</span> <span class=\"varid\">p</span> <span class=\"varop\">]≡</span> <span class=\"varid\">b</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">Meta.subst</span> <span class=\"varid\">id</span> <span class=\"varid\">p</span> <span class=\"varid\">a</span> <span class=\"varop\">≡</span> <span class=\"varid\">b</span>
<div class=\"empty-line\"></div>
<span class=\"keyword\">postulate</span>
<span class=\"varid\">refl-⊤</span>     <span class=\"varop\">:</span> <span class=\"varid\">refl</span> ⊤ <span class=\"varid\">tt</span> <span class=\"varop\">≡[</span> <span class=\"conid\">Path-⊤</span> <span class=\"varop\">]≡</span> <span class=\"varid\">tt</span>
<span class=\"varid\">refl-Bool0</span> <span class=\"varop\">:</span> <span class=\"varid\">refl</span> <span class=\"conid\">Bool</span> <span class=\"varid\">false</span> <span class=\"varop\">≡[</span> <span class=\"conid\">Path-Bool00</span> <span class=\"varop\">]≡</span> <span class=\"varid\">tt</span>
<span class=\"varid\">refl-Bool1</span> <span class=\"varop\">:</span> <span class=\"varid\">refl</span> <span class=\"conid\">Bool</span> <span class=\"varid\">true</span>  <span class=\"varop\">≡[</span> <span class=\"conid\">Path-Bool11</span> <span class=\"varop\">]≡</span> <span class=\"varid\">tt</span>
<span class=\"varid\">refl-Π</span>     <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">f</span> <span class=\"varop\">:</span> <span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"varid\">refl</span> (<span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varop\">≡[</span> <span class=\"conid\">Path-Π</span> <span class=\"varid\">f</span> <span class=\"varid\">f</span> <span class=\"varop\">]≡</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">refl</span> (<span class=\"conid\">B</span> <span class=\"varid\">x</span>) (<span class=\"varid\">f</span> <span class=\"varid\">x</span>))
<span class=\"varid\">refl-Type</span>  <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} (<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>)
<span class=\"keyglyph\">→</span> <span class=\"varid\">refl</span> (<span class=\"conid\">Set</span> <span class=\"varid\">a</span>) <span class=\"conid\">A</span> <span class=\"varop\">≡[</span> <span class=\"conid\">Path-Type</span> <span class=\"conid\">A</span> <span class=\"conid\">A</span> <span class=\"varop\">]≡</span> <span class=\"varid\">lift</span> (<span class=\"varid\">id-Iso</span> <span class=\"conid\">A</span>)
</pre><p>For <tt class=\"complex\"><span class=\"varid\">refl</span> (<span class=\"conid\">Σ</span> <span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span>)</tt> we need yet another lemma, which is a bit a dual to <tt class=\"complex\"><span class=\"varid\">subst-refl₁</span></tt>, allowing <tt><span class=\"varid\">refl</span></tt> in the second argument instead of the third.
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span>
<span class=\"varid\">subst-refl₁</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} {<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} {<span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">B</span> <span class=\"varid\">x</span>}
<span class=\"keyglyph\">→</span> <span class=\"varid\">y</span> <span class=\"varop\">≡</span> <span class=\"varid\">subst</span> <span class=\"conid\">B</span> (<span class=\"varid\">refl</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span>) <span class=\"varid\">y</span>
<div class=\"empty-line\"></div>
<span class=\"varid\">refl-Σ</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">Σ</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"varid\">refl</span> (<span class=\"conid\">Σ</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>) <span class=\"varid\">x</span> <span class=\"varop\">≡[</span> <span class=\"conid\">Path-Σ</span> <span class=\"varid\">x</span> <span class=\"varid\">x</span> <span class=\"varop\">]≡</span>
(<span class=\"varid\">refl</span> <span class=\"conid\">A</span> (<span class=\"varid\">proj₁</span> <span class=\"varid\">x</span>) ,
<span class=\"varid\">Meta.subst</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">x1</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">B</span> (<span class=\"varid\">proj₁</span> <span class=\"varid\">x</span>)) <span class=\"varid\">x1</span> (<span class=\"varid\">proj₂</span> <span class=\"varid\">x</span>))
(<span class=\"varid\">subst-refl₁</span> {<span class=\"conid\">B</span> <span class=\"keyglyph\">=</span> <span class=\"conid\">B</span>} {<span class=\"varid\">y</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">proj₂</span> <span class=\"varid\">x</span>})
(<span class=\"varid\">refl</span> (<span class=\"conid\">B</span> (<span class=\"varid\">proj₁</span> <span class=\"varid\">x</span>)) (<span class=\"varid\">proj₂</span> <span class=\"varid\">x</span>)))
</pre><p>And here is a start of the implementation of <tt><span class=\"varid\">cong</span></tt>,
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span>
<span class=\"varid\">cong-const</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} {<span class=\"varid\">x</span> <span class=\"varid\">x'</span>} {<span class=\"varid\">y</span>} {<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x'</span>}
<span class=\"keyglyph\">→</span> <span class=\"varid\">cong</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">y</span>) <span class=\"varid\">p</span> <span class=\"varop\">≡</span> <span class=\"varid\">refl</span> <span class=\"conid\">B</span> <span class=\"varid\">y</span>
<span class=\"varid\">cong-id</span>    <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"varid\">x</span> <span class=\"varid\">x'</span>} {<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x'</span>}
<span class=\"keyglyph\">→</span> <span class=\"varid\">cong</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span>) <span class=\"varid\">p</span> <span class=\"varop\">≡</span> <span class=\"varid\">p</span>
<span class=\"varid\">cong-∘</span>     <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span> <span class=\"varid\">c</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"varid\">x</span> <span class=\"varid\">x'</span>} {<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x'</span>}
{<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} {<span class=\"conid\">C</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">c</span>} {<span class=\"varid\">f</span> <span class=\"varop\">:</span> <span class=\"conid\">B</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">C</span>} {<span class=\"varid\">g</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>}
<span class=\"keyglyph\">→</span> <span class=\"varid\">cong</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">f</span> (<span class=\"varid\">g</span> <span class=\"varid\">x</span>)) <span class=\"varid\">p</span> <span class=\"varop\">≡</span> <span class=\"varid\">cong</span> <span class=\"varid\">f</span> (<span class=\"varid\">cong</span> <span class=\"varid\">g</span> <span class=\"varid\">p</span>)
<span class=\"comment\">-- etc.</span>
</pre><p>At some point I think you will also need a dependent <tt><span class=\"varid\">cong</span></tt>.
</p><p>But this is enough postulating for one day.
</p>" nil nil "9639c3b5300fc194bc004a619c61a389") (168 (20949 25792 529712) "http://wadler.blogspot.com/2013/06/a-perverted-view-of-impact.html" "Philip Wadler: A perverted view of \"impact\"" "noreply@blogger.com (Philip Wadler)" "Fri, 21 Jun 2013 16:34:31 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/-5sYTh32tOSQ/UcR-z3Eze2I/AAAAAAAACcI/9AUvZRJBo-M/s1600/impact1.jpg\"><img src=\"http://3.bp.blogspot.com/-5sYTh32tOSQ/UcR-z3Eze2I/AAAAAAAACcI/9AUvZRJBo-M/s320/impact1.jpg\" height=\"160\" border=\"0\" width=\"320\" /></a></div>I think the emphasis on impact in UK research can be counterproductive. Jeremy Gibbons alerted me to this <a href=\"http://www.sciencemag.org/content/340/6138/1265.full\">op-ed by Marc Kirschner</a> in Science, pointing out that the situation is even more severe in the US biomedical community, where the search for \"impact\" leads to focus on human medicine, to the detriment of fundamental studies.<br /><blockquote class=\"tr_bq\">One may be able to recognize good science as it happens, but significant science can only be viewed in the rearview mirror. To pretend otherwise distorts science. DNA restriction enzymes, once the province of obscure microbiological investigation, ultimately enabled the entire recombinant DNA revolution. Measurement of the ratios of heavy and light isotopes of oxygen, once a limited area of geochemistry, eventually allowed the interpretation of prior climate change. What is now promoted as high-impact science is usually a narrow extension of existing experimental designs in a program focused on a set of feasible goals. Fuzzy new directions that might fail, but could open up major new questions, are often dismissed as too speculative and considered low-impact. And in biomedical science, there is an increasing tendency to equate significance to any form of medical relevance. This causes biochemical investigations and research on nonmammalian systems to be treated as intrinsically less valuable than studies on human cells. As a result, biomedicine is losing the historically productive cross-fertilization between model systems and human biology.</blockquote><div><br /></div>" nil nil "6d1161c0103a6846c483e8d0fdb0dc51") (167 (20949 25792 529273) "http://www.joachim-breitner.de/blog/archives/599-Haskell-and-Debian-talk-at-HaL8.html" "Joachim Breitner: Haskell and Debian talk at HaL8" "mail@joachim-breitner.de (nomeata)" "Fri, 21 Jun 2013 16:04:45 +0000" "<p>I just finished my “Haskell und Debian” talk at the Haskell-Workshop <a href=\"http://www.bioinf.uni-leipzig.de/conference-registration/13haskell/de/Start.html\">HaL8 in Leipzig</a>. Unfortunately I was thrown a off track by time constraints and since there were much less beginners and interested visitors in the audience than I had anticipated, so I skipped some parts and improvised others somewhat chaotically, so the presentation was not up to the standards that I expect from my talks. If you have attended (or if you have not) I recommend you have a look <a href=\"http://www.bioinf.uni-leipzig.de/conference-registration/13haskell/papers/paper_1.pdf\">at the extended abstract</a> (in German), which contains what I skipped and is much clearer than what I said.</p>" nil nil "86ffad58b09f38819f08eefb668c7812") (166 (20949 25792 528710) "http://lambdacube3d.wordpress.com/2013/06/21/a-few-thoughts-on-geometry-shaders/" "LambdaCube: A few thoughts on geometry shaders" nil "Fri, 21 Jun 2013 08:34:03 +0000" "<p>We just added a new example to the LambdaCube repository, which shows off <a href=\"https://github.com/csabahruska/lc-dsl/tree/master/samples/cubemap\" title=\"LambdaCube cube mapping example\">cube map based reflections</a>. Reflections are rendered by sampling a cube map, which is created by rendering the world from the centre of the reflecting object in six directions. This is done in a single pass, using a geometry shader to replicate every incoming triangle six times. Here is the final result:</p>
<div style=\"width: 640px;\" id=\"attachment_334\" class=\"wp-caption aligncenter\"><a href=\"http://lambdacube3d.files.wordpress.com/2013/06/cubemap-example1.png\"><img src=\"http://lambdacube3d.files.wordpress.com/2013/06/cubemap-example1.png?w=630&h=354\" alt=\"Reflecting surface simulated with cube mapping\" height=\"354\" class=\"size-full wp-image-334\" width=\"630\" /></a><p class=\"wp-caption-text\">Reflecting surface simulated with cube mapping</p></div>
<p>While the main focus of this blog is language and API design, we need to describe the pipeline structure of the example to put the rest of the discussion into context. The high-level structure corresponds to the following data-flow graph:</p>
<div style=\"width: 640px;\" id=\"attachment_340\" class=\"wp-caption aligncenter\"><a href=\"http://lambdacube3d.files.wordpress.com/2013/06/cubemap-example-pipeline1.png\"><img src=\"http://lambdacube3d.files.wordpress.com/2013/06/cubemap-example-pipeline1.png?w=630&h=261\" alt=\"Pipeline structure for the cube map example\" height=\"261\" class=\"size-full wp-image-340\" width=\"630\" /></a><p class=\"wp-caption-text\">Pipeline structure for the cube map example</p></div>
<p>The most important observation is that several pieces of this graph are reused multiple times. For instance, all geometry goes through the model-view transformation, but sometimes this is performed in a vertex shader (VS), sometimes in a geometry shader (GS). Also, the same lighting equation is used when creating the reflection map as well as the non-reflective parts of the final rendering, so the corresponding fragment shader (FS) is shared.</p>
<h2>The Good</h2>
<p>For us, the most important result of writing this example was that we could express all the above mentioned instances of shared logic in a straightforward way. The high-level graph structure is captured by the top declarations in <strong>sceneRender</strong>’s definition:</p>
<pre style=\"padding-bottom: 0;\"><span style=\"color: #0000ff;\">sceneRender</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Accumulate</span> accCtx <span style=\"color: #228b22;\">PassAll</span> reflectFrag (<span style=\"color: #228b22;\">Rasterize</span> rastCtx reflectPrims) directRender
<span style=\"color: #a020f0;\">where</span>
directRender <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Accumulate</span> accCtx <span style=\"color: #228b22;\">PassAll</span> frag (<span style=\"color: #228b22;\">Rasterize</span> rastCtx directPrims) clearBuf
cubeMapRender <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Accumulate</span> accCtx <span style=\"color: #228b22;\">PassAll</span> frag (<span style=\"color: #228b22;\">Rasterize</span> rastCtx cubePrims) clearBuf6
accCtx <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">AccumulationContext</span> <span style=\"color: #228b22;\">Nothing</span> (<span style=\"color: #228b22;\">DepthOp</span> <span style=\"color: #228b22;\">Less</span> <span style=\"color: #228b22;\">True</span> <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ColorOp</span> <span style=\"color: #228b22;\">NoBlending</span> (one' <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">V4B</span>) <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ZT</span>)
rastCtx <span style=\"color: #a0522d;\">=</span> triangleCtx { ctxCullMode <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">CullFront</span> <span style=\"color: #228b22;\">CCW</span> }
clearBuf <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">FrameBuffer</span> (<span style=\"color: #228b22;\">DepthImage</span> n1 1000 <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ColorImage</span> n1 (<span style=\"color: #228b22;\">V4</span> 0<span style=\"color: #a0522d;\">.</span>1 0<span style=\"color: #a0522d;\">.</span>2 0<span style=\"color: #a0522d;\">.</span>6 1) <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ZT</span>)
clearBuf6 <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">FrameBuffer</span> (<span style=\"color: #228b22;\">DepthImage</span> n6 1000 <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ColorImage</span> n6 (<span style=\"color: #228b22;\">V4</span> 0<span style=\"color: #a0522d;\">.</span>05 0<span style=\"color: #a0522d;\">.</span>1 0<span style=\"color: #a0522d;\">.</span>3 1) <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ZT</span>)
worldInput <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Fetch</span> <span style=\"color: #8b2252;\">\"geometrySlot\"</span> <span style=\"color: #228b22;\">Triangles</span> (<span style=\"color: #228b22;\">IV3F</span> <span style=\"color: #8b2252;\">\"position\"</span>, <span style=\"color: #228b22;\">IV3F</span> <span style=\"color: #8b2252;\">\"normal\"</span>)
reflectInput <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Fetch</span> <span style=\"color: #8b2252;\">\"reflectSlot\"</span> <span style=\"color: #228b22;\">Triangles</span> (<span style=\"color: #228b22;\">IV3F</span> <span style=\"color: #8b2252;\">\"position\"</span>, <span style=\"color: #228b22;\">IV3F</span> <span style=\"color: #8b2252;\">\"normal\"</span>)
directPrims <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Transform</span> directVert worldInput
cubePrims <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Reassemble</span> geom (<span style=\"color: #228b22;\">Transform</span> cubeMapVert worldInput)
reflectPrims <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Transform</span> directVert reflectInput</pre>
<p>The top-level definition describes the last pass, which draws the reflective capsule – whose geometry is carried by the primitive stream <strong>reflectPrims</strong> – on top of the image emitted by a previous pass called <strong>directRender</strong>. The two preceding passes render the scene without the capsule (<strong>worldInput</strong>) on a screen-sized framebuffer as well as the cube map. We can see that the pipeline section generating the cube map has a <strong>reassemble</strong> phase, which corresponds to the geometry shader. Note that these two passes have no data dependencies between each other, so they can be executed in any order by the back-end.</p>
<p>It’s clear to see how the same fragment shader is used in the first two passes. The more interesting story is finding a way to express the model-view transformation in one place and use it both in <strong>directVert</strong> and <strong>geom</strong>. As it turns out, we can simply extract the common functionality and give it a name. The function we get this way is frequency agnostic, which is reflected in its type:</p>
<pre style=\"padding-bottom: 0;\">    transformGeometry <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Exp</span> f <span style=\"color: #228b22;\">V4F</span> <span style=\"color: #a0522d;\">-></span> <span style=\"color: #228b22;\">Exp</span> f <span style=\"color: #228b22;\">V3F</span> <span style=\"color: #a0522d;\">-></span> <span style=\"color: #228b22;\">Exp</span> f <span style=\"color: #228b22;\">M44F</span> <span style=\"color: #a0522d;\">-></span> (<span style=\"color: #228b22;\">Exp</span> f <span style=\"color: #228b22;\">V4F</span>, <span style=\"color: #228b22;\">Exp</span> f <span style=\"color: #228b22;\">V4F</span>, <span style=\"color: #228b22;\">Exp</span> f <span style=\"color: #228b22;\">V3F</span>)
transformGeometry localPos localNormal viewMatrix <span style=\"color: #a0522d;\">=</span> (viewPos, worldPos, worldNormal)
<span style=\"color: #a020f0;\">where</span>
worldPos <span style=\"color: #a0522d;\">=</span> modelMatrix <span style=\"color: #a0522d;\">@*.</span> localPos
viewPos <span style=\"color: #a0522d;\">=</span> viewMatrix <span style=\"color: #a0522d;\">@*.</span> worldPos
worldNormal <span style=\"color: #a0522d;\">=</span> normalize' (v4v3 (modelMatrix <span style=\"color: #a0522d;\">@*.</span> n3v4 localNormal))</pre>
<p>The simpler use case is <strong>directVert</strong>, which simply wraps the above functionality in a vertex shader:</p>
<pre style=\"padding-bottom: 0;\">    directVert <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Exp</span> <span style=\"color: #228b22;\">V</span> (<span style=\"color: #228b22;\">V3F</span>, <span style=\"color: #228b22;\">V3F</span>) <span style=\"color: #a0522d;\">-></span> <span style=\"color: #228b22;\">VertexOut</span> <span style=\"color: #228b22;\">()</span> (<span style=\"color: #228b22;\">V3F</span>, <span style=\"color: #228b22;\">V3F</span>, <span style=\"color: #228b22;\">V3F</span>)
directVert attr <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">VertexOut</span> viewPos (floatV 1) <span style=\"color: #228b22;\">ZT</span> (<span style=\"color: #228b22;\">Smooth</span> (v4v3 worldPos) <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">Smooth</span> worldNormal <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">Flat</span> viewCameraPosition <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ZT</span>)
<span style=\"color: #a020f0;\">where</span>
(localPos, localNormal) <span style=\"color: #a0522d;\">=</span> untup2 attr
(viewPos, worldPos, worldNormal) <span style=\"color: #a0522d;\">=</span> transformGeometry (v3v4 localPos) localNormal viewCameraMatrix</pre>
<p>As for the geometry shader…</p>
<h2>The Bad</h2>
<p>… we already mentioned in <a href=\"http://lambdacube3d.wordpress.com/2012/09/07/the-lambdacube-3d-pipeline-model/\" title=\"The LambdaCube 3D pipeline model\">the introduction of our functional pipeline model</a> that we aren’t happy with the current way of expressing geometry shaders. The current approach is a very direct mapping of two nested for loops as an initialisation function and two state transformers – essentially <em>unfold</em> kernels. The outer loop is responsible for one primitive per iteration, while the inner loop emits the individual vertices. Without further ado, here’s the geometry shader needed by the example:</p>
<pre style=\"padding-bottom: 0;\">    geom <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">GeometryShader</span> <span style=\"color: #228b22;\">Triangle</span> <span style=\"color: #228b22;\">Triangle</span> <span style=\"color: #228b22;\">()</span> <span style=\"color: #228b22;\">()</span> 6 <span style=\"color: #228b22;\">V3F</span> (<span style=\"color: #228b22;\">V3F</span>, <span style=\"color: #228b22;\">V3F</span>, <span style=\"color: #228b22;\">V3F</span>)
geom <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">GeometryShader</span> n6 <span style=\"color: #228b22;\">TrianglesOutput</span> 18 init prim vert
<span style=\"color: #a020f0;\">where</span>
init attr <span style=\"color: #a0522d;\">=</span> tup2 (primInit, intG 6)
<span style=\"color: #a020f0;\">where</span>
primInit <span style=\"color: #a0522d;\">=</span> tup2 (intG 0, attr)
prim primState <span style=\"color: #a0522d;\">=</span> tup5 (layer, layer, primState', vertInit, intG 3)
<span style=\"color: #a020f0;\">where</span>
(layer, attr) <span style=\"color: #a0522d;\">=</span> untup2 primState
primState' <span style=\"color: #a0522d;\">=</span> tup2 (layer <span style=\"color: #a0522d;\">@+</span> intG 1, attr)
vertInit <span style=\"color: #a0522d;\">=</span> tup3 (intG 0, viewMatrix, attr)
viewMatrix <span style=\"color: #a0522d;\">=</span> indexG (map cubeCameraMatrix [1<span style=\"color: #a0522d;\">..</span>6]) layer
vert vertState <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">GeometryOut</span> vertState' viewPos pointSize <span style=\"color: #228b22;\">ZT</span> (<span style=\"color: #228b22;\">Smooth</span> (v4v3 worldPos) <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">Smooth</span> worldNormal <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">Flat</span> cubeCameraPosition <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ZT</span>)
<span style=\"color: #a020f0;\">where</span>
(index, viewMatrix, attr) <span style=\"color: #a0522d;\">=</span> untup3 vertState
vertState' <span style=\"color: #a0522d;\">=</span> tup3 (index <span style=\"color: #a0522d;\">@+</span> intG 1, viewMatrix, attr)
(attr0, attr1, attr2) <span style=\"color: #a0522d;\">=</span> untup3 attr
(localPos, pointSize, <span style=\"color: #a020f0;\">_</span>, localNormal) <span style=\"color: #a0522d;\">=</span> untup4 (indexG [attr0, attr1, attr2] index)
(viewPos, worldPos, worldNormal) <span style=\"color: #a0522d;\">=</span> transformGeometry localPos localNormal viewMatrix</pre>
<p>The <strong>init</strong> function’s sole job is to define the initial state and iteration count of the outer loop. The initial state is just a loop counter set to zero plus the input of the shader in a single tuple called <strong>attr</strong>, while the iteration count is <strong>6</strong>. The <strong>prim</strong> function takes care of increasing this counter, specifying the layer for the primitive (equal to the counter), and picking the appropriate view matrix from one of six uniforms. It defines the iteration count (<strong>3</strong>, since we’re drawing triangles) and the initial state of the inner loop, which contains another counter set at zero, the chosen view matrix, and the attribute tuple. Finally, the <strong>vert</strong> function calculates the output attributes using <strong>transformGeometry</strong>, and also its next state, which only differs from the current one in having the counter incremented.</p>
<p>On one hand, we had success in reusing the common logic between different shader stages by simply extracting it as a pure function. On the other, it is obvious at this point that directly mapping imperative loops results in really awkward code. At least it does the job!</p>
<p><span style=\"text-align: center; display: block;\" class=\"embed-youtube\"><iframe class=\"youtube-player\" frameborder=\"0\" height=\"385\" src=\"http://www.youtube.com/embed/9f5oSv1SZiE?version=3&amp;rel=1&amp;fs=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;wmode=transparent\" type=\"text/html\" width=\"630\"></iframe></span></p>
<h2>The Next Step?</h2>
<p>We’ve been thinking about alternative ways to model geometry shaders that would allow a more convenient and ‘natural’ manner of expressing our intent. One option we’ve considered lately would be to have the shader yield a list of lists. This would allow us to use scoping to access attributes in the inner loop instead of having to pass them around explicitly, not to mention doing away with explicit loop counters altogether. We could use existing techniques to generate imperative code, e.g. stream fusion. However, it is an open question how we could introduce lists or some similar structure in the language without disrupting other parts, keeping the use of the new feature appropriately constrained. One thing is clear: there has to be a better way.</p>
<br />  <img src=\"http://stats.wordpress.com/b.gif?host=lambdacube3d.wordpress.com&blog=39087425&post=331&subd=lambdacube3d&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "ea15f383268e24c5a2621214856f0745") (165 (20949 25792 526447) "http://existentialtype.wordpress.com/2013/06/20/the-homotopy-type-theory-book-is-out/" "Robert Harper: The Homotopy Type Theory Book is out!" nil "Thu, 20 Jun 2013 19:49:08 +0000" "<p>By now many of you have heard of the development of Homotopy Type Theory (HoTT), an extension of intuitionistic type theory that provides a natural foundation for doing synthetic homotopy theory.  Last year the <a href=\"http://ias.edu\" target=\"_blank\" title=\"Institute for Advanced Study\">Institute for Advanced Study at Princeton</a> sponsored a program on the <a href=\"http://uf-ias-2012.wikispaces.com/\" target=\"_blank\" title=\"Univalent Foundations Program\">Univalent Foundations of Mathematics</a>, which was concerned with developing these ideas.  One important outcome of the year-long program is a full-scale book presenting the main ideas of Homotopy Type Theory itself and showing how to apply them to various branches of mathematics, including homotopy theory, category theory, set theory, and constructive analysis.  The book is the product of a joint effort by dozens of participants in the program, and is intended to document the state of the art as it is known today, and to encourage its further development by the participation of others interested in the topic (i.e., you!).  Among the many directions in which one may take these ideas, the most important (to me) is to develop a constructive (computational) interpretation of HoTT.  Some partial results in this direction have already been obtained, including fascinating work by Thierry Coquand on developing a constructive version of Kan complexes in ITT, by Mike Shulman on proving homotopy canonicity for the natural numbers in a two-dimensional version of HoTT, and by Dan Licata and me on a weak definitional canonicity theorem for a similar two-dimensional theory.  Much work remains to be done to arrive at a fully satisfactory constructive interpretation, which is essential for application of these ideas to computer science.  Meanwhile, though, great progress has been made on using HoTT to formulate and formalize significant pieces of mathematics in a new, and strikingly beautiful, style, that are well-documented in the book.</p>
<p>The book is <a href=\"http://homotopytypetheory.org/book\" target=\"_blank\" title=\"Homotopy Type Theory Book\">freely available on the web</a> in various formats, including a PDF version with active references, an ebook version suitable for your reading device, and may be purchased in hard- or soft-cover from Lulu.  The book itself is open source, and is available at the <a href=\"http://github.com/hott/book\" target=\"_blank\" title=\"HoTT Book Git Hub\">Hott Book Git Hub</a>.  The book is under the Creative Commons  <a href=\"http://creativecommons.org/licenses/by-sa/3.0/\" title=\"Creative Common License\">CC BY-SA</a> license, and will be freely available in perpetuity.</p>
<p>Readers may also be interested in the posts on <a href=\"http://www.homotopytypetheory.org/2013/06/20/the-hott-book/\" target=\"_blank\" title=\"Homotopy Type Theory Book Announcement\">Homotopy Type Theory</a>, the <a href=\"http://golem.ph.utexas.edu/category/2013/06/the_hott_book.html\" title=\"n-Category Cafe Hott Book\">n-Category Cafe</a>, and <a href=\"http://math.andrej.com/2013/06/20/the-hott-book/\" title=\"Mathematics and Computation HoTT Book\">Mathematics and Computation</a> which describe more about the book and the process of its creation.</p>
<br />Filed under: <a href=\"http://existentialtype.wordpress.com/category/research/\">Research</a> Tagged: <a href=\"http://existentialtype.wordpress.com/tag/category-theory/\">category theory</a>, <a href=\"http://existentialtype.wordpress.com/tag/homotopy-theory/\">homotopy theory</a>, <a href=\"http://existentialtype.wordpress.com/tag/type-theory/\">type theory</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/existentialtype.wordpress.com/806/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/existentialtype.wordpress.com/806/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=existentialtype.wordpress.com&blog=2157150&post=806&subd=existentialtype&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "779b0106c5e914f76187985f13ddd5cd") (164 (20949 25792 525728) "http://joyful.com/blog/2013-06-17-darcsden-cleanup.html" "Simon Michael: darcsden cleanup" nil "Wed, 19 Jun 2013 01:15:00 +0000" "<div style=\"font-style: italic;\">June 19, 2013</div>
<h2>darcsden cleanup</h2>
<p>
</p><p>Back to the dev diary. <a href=\"http://joyful.com/2013-06-07-git-hooks-for-site-updates.html\">Last post</a> was 11 days ago, after a two-week opening streak of daily posts. I got blocked on one, then got busy. Press on.</p>
<p>Yesterday I started looking at BSRK Aditya’s <a href=\"http://bsrkaditya.blogspot.com/2013/06/gsoc-2013-enhancing-darcsden-preweek-1.html\">GSOC darcsden enhancements</a>, to review and hopefully deploy on <a href=\"http://hub.darcs.net\">darcs hub</a>. So far he has worked on alternate login methods (github/google), password reminder, and darcs pack support (for faster gets).</p>
<p>This is forcing some darcsden cleanup, my first darcsden work in a while aside from routine ops and support tasks. I’m going to release what’s in trunk as 1.1, and then start assimilating the new work by BSRK, Ganesh Sittampalam and anyone else who feels like chipping in. Started putting together release notes and a hub status update.</p>
<p>The support requests seem to be on the rise - more usage ? I also found a good bug today: viewing a certain 1K troff file causes darcs hub’s memory footprint to <a href=\"http://hub.darcs.net/simon/darcsden/issue/58\">blow up to 1.5G</a> :)</p>
<p>It would be great to have more functionality (like highlighting) broken out into separate, expendable worker processes, erlang style.</p>" nil nil "6e78d671b335a4f5356cf5742d89f7e9") (163 (20949 25792 525323) "http://functionaljobs.com/jobs/154-senior-software-developer-functional-programmer-at-vector-fabrics" "Functional Jobs: Senior software developer/Functional programmer at Vector Fabrics (Full-time)" nil "Tue, 18 Jun 2013 12:44:48 +0000" "<p>Vector Fabrics is hiring: we are looking for a top-notch programmer to extend our program-analysis and parallelization products. You design and implement algorithms to assist the programmer to create a parallel design from a sequential C or C++ program. You work with our international team of world-class computer scientists and experts in the Haskell / OCaml functional programming languages.</p>
<p>Your work is at the forefront of technology, giving you the opportunity to publish your work in major conferences and directly cooperate with processor design companies and domain-specific application vendors.</p>
<p>As we are a startup company, you will quickly have a major impact on our products and get to know all aspects of product creation. You will be part of a strongly committed development team and contribute to our agile development process and automated test suites. Interested? Send your CV, GitHub account or other proof of what you can do to <span class=\"spam-protect\"><span class=\"user\">jobs</span> [at] <span class=\"host\">vectorfabrics [dot] com</span></span>.</p>
<h3>Responsibilities</h3>
<ul>
<li>Design and implement software
optimization (e.g. parallelization)
algorithms for CPUs and GPUs;</li>
<li>Thoroughly test your code, create
automated test suites;</li>
<li>Contribute to our agile development
planning and process;</li>
<li>Analyze complex customer applications
for optimization opportunities and
translate this to new analysis
algorithms.</li>
</ul>
<h3>Profile</h3>
<ul>
<li>Your friends and colleagues describe
you as a superb programmer; your
programming ability is way above
average;</li>
<li>Demonstrable experience in design and
implementation of complex software
applications; prior experience in
functional programming languages is
preferred;</li>
<li>You continuously surprise us with
your creative yet pragmatic solutions
for complex software problems;</li>
<li>You are strongly committed to deliver
working software as early as
possible;</li>
<li>You work against very high quality
standards. Refactoring is your bread
and butter, pair-programming is how
you prefer to review your code;</li>
<li>Whatever technologies, languages, or
development environments you've been
using, we expect you have mastered
them in depth, and we expect that you
will be able to master any
technology, language, or development
environment that we need in the
future;</li>
<li>Excellent command of written and
spoken English.</li>
</ul>
<h3>Education</h3>
<p>MSc, MEng or PhD in Computer Science or significant relevant experience.</p>
<h3>About Vector Fabrics</h3>
<p>Vector Fabrics is a high-tech software company, developing tools for embedded multicore programming. Its technology and expertise is getting widespread recognition in the industry as being innovative and unique in their ability to address heterogeneous multicore application-specific silicon platforms. Due to the advanced nature of its tools, Vector Fabrics operates at the forefront of the next generation of embedded platforms for diverse markets ranging from supercomputers to automotive to cell phones.</p>
<p>Vector Fabrics puts absolute priority on hiring top class individuals in key positions. Vector Fabrics’ team profile is exceptional and its ambition is to hire only individuals that match or surpass that profile. The company pays top salary and offers a challenging, engaging and stimulating work environment with a high degree of responsibility.</p>
<p>Get information on <a href=\"http://functionaljobs.com/jobs/154-senior-software-developer-functional-programmer-at-vector-fabrics\">how to apply</a> for this position.</p>" nil nil "d5eabd288ce667f8447e8202a658e899") (162 (20949 25792 524613) "http://feedproxy.google.com/~r/FpComplete/~3/o-o2AKSmDZc/beta-sign-up" "FP Complete: FP Haskell Center Beta Sign-Up" nil "Mon, 17 Jun 2013 14:42:00 +0000" "<h4>Beta sign-up Blog</h4><p>It’s almost here!  After months of hard work by our engineers, I am pleased to announce that we’ve opened up sign-up for <a href=\"http://feeds.feedburner.com/business/designer-ide\">beta of FP Haskell Center</a>, the world's first commercial Haskell IDE and deployment platform.  The beta will be released by the end of the month, and we are eager to have your active testing and feedback so we can deliver a great product that the market needs in early September.  As an appreciation and reward for being in the beta program, we will offer special incentives to the finished product when available.  Details of the offer will be announced in late July/early August.</p><p>The IDE includes a Haskell compiler and a continually updated set of vetted, tested and supported libraries and code templates.  There is no need to run Cabal or other installers.  The FP Haskell Application Server is used to deploy and run Haskell applications directly in the cloud with no additional effort.  A free shared instance is included with every account. Larger and dedicated instances are available for active project deployments at a reasonable monthly charge.</p><h4>FP Haskell Center’s key features and benefits are:</h4><ul><li>Simplifies the writing and deploying of Haskell applications from a single online dashboard.</li><li>Cloud-based development frees you to move among multiple devices without needing your own functioning Haskell environment.</li><li>Integrated deployment frees you from needing to run a specific OS to match build and production environments.</li><li>A hierarchical module tree for:</li><li>convenient management (renaming, moving, deleting modules or whole trees)</li><li>navigation (much easier to read, expand/collapse)</li><li>Regular, automatic parsing and type checking as feedback inside the editor and unobtrusive error output below.</li><li>Type and documentation inspection of names.</li><li>Integrated access to sample code, School of Haskell tutorials, Haddock documentation service, and Hoogle resource database.</li></ul><p>Sign-up for <a href=\"http://feeds.feedburner.com/business/haskell-center\">beta of FP Haskell Center</a>.</p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=o-o2AKSmDZc:zpOQ0FhJErU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=o-o2AKSmDZc:zpOQ0FhJErU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=o-o2AKSmDZc:zpOQ0FhJErU:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=o-o2AKSmDZc:zpOQ0FhJErU:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=o-o2AKSmDZc:zpOQ0FhJErU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=o-o2AKSmDZc:zpOQ0FhJErU:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/o-o2AKSmDZc\" height=\"1\" width=\"1\" />" nil nil "22a6a917ca09fbcd2a3acebe5ebe140a") (161 (20949 25792 524056) "http://feedproxy.google.com/~r/FpComplete/~3/YGZb2pYnjPw/interim-web-site" "FP Complete: Interim Web Site" nil "Mon, 17 Jun 2013 12:42:00 +0000" "<h4>Interim Site blog</h4><p>Welcome to our updated website! FP Complete is evolving into a full-fledged commercial developer of Haskell tools and services, as called for in our original plans.  The previous site showcased the School of Haskell. We have been delighted to see it used by thousands of Haskell learners and teachers, including some authors who’ve taken advantage of its unique Active Code features to help people learn.  Now that we are about to release the FP Haskell Center beta, the School remains an integral part of our offering as a place to teach and learn, but we are even more excited by the new full-powered commercial features.</p><p>This site is an interim redesign, and will be completed when we release FP Haskell Center, the world’s first commercial Haskell IDE and deployment platform, in early September.  The site, and our strategy, are based on 3 pillars:</p><ol><li>We must produce products and services needed by developers who are already using Haskell tools in their work. This is our base.</li><li>At the same time, we need to promote Haskell to the vastly larger non-Haskeller market which on the whole is unaware of Haskell’s existence.  This is a long-term effort that’s absolutely necessary if Haskell is going to have meaningful adoption in the mainstream market.  That’s why you see us putting a lot of effort into high-level discussions and information about what Haskell is, its feature advantages and strategic benefits.  The target audience is business management, engineering management and developers who need to be converted into Haskell supporters and users.  </li><li>In all our efforts, we are always working with the Haskell community.  FP Complete was started in 2012 with the help of some of the leaders of the community and is committed to continue working with the entire community to advance the technology and expand Haskell adoption in the commercial market.  This follows a well-proven model of success for companies commercializing open-source technologies starting with Red Hat.</li></ol><p>In the coming months, we will be continually adding more content to fulfill our goal to be a major resource for all things Haskell.  Things like more whitepapers, case studies, video testimonials, tutorials and sample codes.  If you have any suggestions or things to contribute, be sure to let us know.  As always, we welcome constructive comments from the community.</p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=YGZb2pYnjPw:Cjpscs1vI9g:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=YGZb2pYnjPw:Cjpscs1vI9g:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=YGZb2pYnjPw:Cjpscs1vI9g:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=YGZb2pYnjPw:Cjpscs1vI9g:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=YGZb2pYnjPw:Cjpscs1vI9g:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=YGZb2pYnjPw:Cjpscs1vI9g:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/YGZb2pYnjPw\" height=\"1\" width=\"1\" />" nil nil "695d299721c8e0e8cb689c6cdf730c98") (160 (20949 25792 523335) "http://logicaltypes.blogspot.com/2013/06/thoughts-on-kleisli-arrows-in-java-wip.html" "Douglas M. Auclair (geophf): Thoughts on Kleisli Arrows in Java (WIP)" "noreply@blogger.com (geophf)" "Mon, 17 Jun 2013 12:39:32 +0000" "Here are some ramblings as I puzzle my way through on how to represent Kleisli arrows in Java (and why I would want to do that, anyway). This is very much a work in progress, so no solid conclusions from this posting.<br /><br /><br />Categories are abstractions. They have objects and morphisms. The thing of Category theory is that the objects can be anything, as they are atomic, and the morphisms aren't necessarily functions. So, the objects can be numbers, not that we care, or they could be arrows (another term for morphisms), or they could be categories themselves, so the morphisms become morphisms between categories. Or if the objects are arrows then the morphisms are higher-order functions.<br /><br />Neat-o!<br /><br />So, John Baez did some wonderful pieces on higher-order categories in the direction of physical math: topologies and groups and such, and this was replicated in Edward Kmett's work with ... what are they called? Ah, yes: semigroupoids (how could I forget), where the monoids have no zero bases and so identity functions aren't necessary, I suppose.<br /><br />Interesting! Half-monoids!<br /><br />But if we look at Categories as simply that: objects and morphisms, and we look at morphisms as simply arrows from a to b, then does that simplify my implementation of my categories library?<br /><br />Monads no longer are generically typeful but now use inheritance to describe the type families:<br /><br />Monad<a> is the interface and Maybe<a> extends Monad<a> instead of<br /><br />Monad<M extends Monad, a> being the interface as Maybe<a> extends Monad<Maybe, a>.<br /><br />The problem is in the generic functions, how does one grab the 'm' in the monadic type? Or is it as simple as using inheritance and forgetting the thorny problem of genericity, or passing that problem off to the inheritance structure?<br /><br />Same thing for Arrow ...<br /><br />instead of Arrow<a, b, c><br /><br />we have Arrow<b, c><br /><br />and then the Kleisli arrow becomes more simple, perhaps? Because<br /><br />KleisliArrow<m, b, c> extends Arrow<b, m c><br /><br />... but how does that work? Can it work? I don't see how that works.<br /><br />for first :: a b c -> a (b, d) (c, d)<br /><br />how does that work for the KleisliArrow, and for chaining the monadic computation?<br /><br />It appears further research is necessary for me to get a solid grasp of this to be able to implement this properly in Java (as opposed to writing a haskell parser on top of Java, which is also a viable way of going about it, except for the fact that there is political resistance to learning a domain-specific language from devs brought on to code 'only' in language-of-choice X).<br /><br />So that's my problem, because in my 'Monads in Java' article I concluded with a:<br /><br />So you see we can now do the following:<br /><br />f.apply(m).bind(g).bind(h)<br /><br />and I now know that f.apply(m) is a weakness in coding. This should all be strung together with Kleisli arrows and the resulting morphism be run through the Kleisli computer.<br /><br />\"The (explicit) use of apply considered harmful\"?<br /><br />I mean, Gah! How bold! How daring! How so against the grain!<br /><br />And it isn't even really 'harmful' either. More like obtuse or obnoxious. And not even that, more like: inelegant. That's the word: inelegant. And we're not even 'using' apply in the above computation. I mean, we are, but we are always using apply. It's so inherent that now just juxtaposition is now apply, so it's not the '(explicit) use' of apply, it's the '(explicit) call' or '(explicit) invocation' of apply that's inelegant.<br /><br />I mean, when I see the above formulation, I now shudder, whereas before I might've said, with a pause so slight it didn't even register, 'What do we do here? Oh, use apply!' knowing, at the back of my mind, that this didn't sit perfectly right, but what else was there to do?<br /><br />Well, with Kleisli composition, there is nothing to do at all, but just do it<br /><br />runKleisli (f <+> g <+> h) m<br /><br />and we're done.<br /><br />Now, how to represent that in Java, ... well, I do have a KleisliArrow type that does return the underlying arrow, but what about composition ... it probably has that, too:<br /><br />f >>> g >>> h<br /><br />But the gnawing problem there is that KleisliArrow is not related to Arrow, because, properly, it isn't: KleisliArrow on a specific monadic type m IS related to Arrow.<br /><br />And I don't know how to represent that in Java.<br /><br />Yet.<br />" nil nil "33e6e65867758c2349d78b3cb9c29021") (159 (20949 25792 522450) "http://hyperq.github.io/blog/trading-a-hacker-approach.html" "hyperq: Trading: a hacker approach?" nil "Mon, 17 Jun 2013 08:19:00 +0000" "<blockquote>
<p>
You are startled by the sound of an alarm. It is followed by an urgent voice
which warns that the Arcada has been boarded by unknown intruders. It ends
abruptly. <br />
> <br />
<a href=\"http://sarien.net/spacequest#anotherhallway\">start of Space Quest I</a>
</p>
</blockquote>
<p>
Most hackers involved in the world of trading enter from the technology side
of the business. And there's two main gateways are via trader enhancement or
trader replacement. Making traders smarter and faster using technology is one
well worn road. There's lots of room to streamline the human trading process:
automation of regular tasks, expansion of back-testing capabilities and easy
gains to be had in better trader dashboards to get information when and where
needed.
</p>
<p>
Trader replacement is a little harder but also hackable. There's plenty of
tricks out there to shave a few msecs of computation and execution time, and
bringing bigdata testing and conversion of a sometimes fuzzy human rule-set
into a more rigorous computational exercise.
</p>
<p>
Either way, a trading runtime ends up paving the cow-paths of institutional
finance which look somewhat like this:
</p>
<img src=\"http://hyperq.github.io/assets/ats_features_diagram.png\" alt=\"design\" width=\"100%\" />
<p>
Over at <a href=\"http://hyperq.github.io\">hyperq</a>, we've been thinking about the above diagram and how to get
together a decent trading runtime. Now when a wildly ambitious objective meets
a meager resource base you have two options:
</p>
<ul class=\"org-ul\">
<li>go on a <a href=\"http://hyperq.github.io/../blog/trading-a-hacker-approach/ENOxd.jpg\">kamikaze</a> death march
</li>
<li>take the team on a <a href=\"http://www.qt.com.au/news/abolish-fringe-benefits-tax-bring-back-long-lunch-/1895360/\">long lunch</a> and redefine
</li>
</ul>
<p>
Since this is all open source, our long lunch redefinitional musings led us to
computer sciencing the bejesus out of the trading problem domain.
</p>
<p>
Here's the alternative design specification document we wrote on one of the
drink coasters:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-haskell\"><span class=\"org-function-name\">trade</span> <span class=\"org-variable-name\">::</span> [<span class=\"org-type\">MarketData</span> a] <span class=\"org-variable-name\">-></span> <span class=\"org-type\">Book</span> b <span class=\"org-variable-name\">-></span> <span class=\"org-type\">IO</span> [<span class=\"org-type\">Order</span> b]
<span class=\"org-function-name\">main</span> <span class=\"org-variable-name\">=</span> forever <span class=\"org-variable-name\">.</span> <span class=\"org-keyword\">do</span> <span class=\"org-variable-name\">.</span> trade
</pre>
</div>
<p>
Having just cut 3 months out of our critical path we even had time for some
Zork:
</p>
<blockquote>
<p>
You are in an open field west of a big white house with a boarded
front door.
There is a small mailbox here.<br />
> <br />
<a href=\"http://thcnet.net/error/index.php\">Zork</a>
</p>
</blockquote>
<p>
Long lunch over and the new specs still seem sweet. Some immediate ideas:
</p>
<ul class=\"org-ul\">
<li>the concept of market data becomes naturally abstractable.  Data can
include multiple sources, news flow or whatever universe observation you
can think of. Do you need the Market prefix?
</li>
<li>there is an immediate reminder of real world interaction with the IO monad.
</li>
<li>subsequent functions scan more easily and can be categorized - often as a
matter of taste.  For example, a complex event process (CEP), a fashionable
big deal in trading system circles, seems logically to have this type:
<div class=\"org-src-container\">
<pre class=\"src src-haskell\"><span class=\"org-function-name\">cep</span> <span class=\"org-variable-name\">::</span> [<span class=\"org-type\">MarketData</span> a] <span class=\"org-variable-name\">-></span> <span class=\"org-type\">MarketData</span> a
</pre>
</div>
<p>
Whether to put this prior to or inside the trade function then becomes a
matter of taste.
</p>
</li>
<li>Should the input be [Maybe MarketData a]? This puts the real world
likelihood of the data feed being down front and center, rather than
designing a system assuming an idealized world and then panicking when
something breaks.
</li>
</ul>
<p>
More generally, a more hacker approach leads you away from bigdata phd
solutions that dominate hft and algorithmic trading and towards the important,
small and obvious stuff (that may not lend themselves to a phd dissertation).
The market is closed (unexpectedly) - I better not try and trade, or I had
better try and trade elsewhere given the sorry state of Book a. Gee, there's a
lot of volatility out and about today - is it a big news day? The last news
piece of note was a facebook announcement. Wow, facebook really tanked but but
zygna didn't - what gives there? Someone must have forgot to turn the market
feed on. etc etc
</p>
<p>
And I suspect this approach leads further to a big, big gap in the market.
Imagine on a busy day in the market you could slow down time. The e-mini
suddenly drops by 1% in the space of a few heartbeats. What just happened?
Rewind the video tape and look more carefully at the last few minutes. Look
back at the news-flow over the last 10 minutes and look for keywords. Check
other markets - are they all tanking or is it just a local event? Or did some
human just enter an extra zero or three again?
</p>
<p>
If you can do all of that in a few seconds your process is way ahead of the
competition. The HFT guys have already panicked and run away to hide behind
their statistical order flow models. Algorithmic trades are pinging their stop
loss instructions blindly creating what may be a forecastable trend.
Meanwhile, discretionary day traders have just noticed a small section of one
of their screen is flashing red…
</p>
<p>
In this zone, a hacker trader with a hacker-like trading process can find all
sorts of edges and market tells.
</p>
<p>
So do we want our trading process to look and feel like a big finance
organizational structure? Or should for hyperq to have a Roger Wilco attitude:
</p>
<blockquote>
<p>
Anyway, I aborted the launch and jetted out of there in an escape pod. I
crawled into the sleep chamber, and the next thing I knew, I woke up in a
trash freighter! Yeah, things didn't look too good, but I blasted out of the
freighter in an old jalopy I resurrected from the rubble.
~ <a href=\"http://spacequest.wikia.com/wiki/Roger's_Dialogue\">Roger Wilco</a>
</p>
</blockquote>
<p>
Much more fun than a death march to pave the cow-paths.
</p>" nil nil "4e7b987ae5448f94b3bcced9b9139493") (158 (20949 25792 521357) "http://justtesting.org/post/53175916852" "Manuel M T Chakravarty: Data Flow Fusion with Series Expressions in Haskell" nil "Mon, 17 Jun 2013 05:39:34 +0000" "<p>We are currently exploring <em>flow fusion</em>, a new fusion method for purely functional array code that overcomes the main limitation of stream fusion, namely stream fusion’s inability to fuse branching streams. Our current flow-fusion prototype in the Glasgow Haskell Compiler manages to achieve a twofold speedup over stream fusion for computing convex hulls of 2D points using the <a href=\"http://en.wikipedia.org/wiki/QuickHull\">QuickHull</a> algorithm. In fact, the code generated by flow fusion is only a few percent points away from hand-written C code. We have summarised all the details in a draft paper <a href=\"http://www.cse.unsw.edu.au/~chak/papers/BCKR13.html\">Data Flow Fusion with Series Expressions in Haskell</a>.</p>" nil nil "b0293428423ebdd45c9b97ca048f28e6") (157 (20949 25792 521034) "http://gentoohaskell.wordpress.com/2013/06/16/call-for-help-wiki-gentoo-org-documentation/" "The Gentoo Haskell Team: Call for help: wiki.gentoo.org documentation" nil "Sun, 16 Jun 2013 19:30:25 +0000" "<p>I’d like to ask gentoo-haskell community for help. We have a nice <a href=\"http://wiki.gentoo.org\">wiki</a> and our project page have moved <a href=\"http://wiki.gentoo.org/wiki/Project:Haskell\">there</a>. But it seems that we don’t have enough documentation quality for end-user application. As a developers we support proper builds and tests for that packages but we are not expert users for many of them. So I’d like to ask community to add some docs and tips for applications you use. This basically means installation, advanced config (examples), interesting use cases, links to external resources (blog posts/documentation) and so on. It can help a lot for new Gentoo users.</p>
<p>The most interesting projects are:</p>
<ul>
<li><a href=\"http://wiki.gentoo.org/wiki/Pandoc\">pandoc</a></li>
<li><a href=\"http://wiki.gentoo.org/wiki/Git-annex\">git-annex</a></li>
<li><a href=\"http://wiki.gentoo.org/wiki/Gitit\">gitit</a></li>
<li><a href=\"http://wiki.gentoo.org/wiki/yi\">yi</a></li>
<li><a href=\"http://wiki.gentoo.org/wiki/Xmonad\">xmonad</a></li>
</ul>
<p>Thanks!</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/gentoohaskell.wordpress.com/86/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/gentoohaskell.wordpress.com/86/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=gentoohaskell.wordpress.com&blog=7667502&post=86&subd=gentoohaskell&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "572902e9fab39b437b1a73b7587bc288") (156 (20949 25792 520591) "http://lambda.jstolarek.com/2013/06/getting-friendly-with-stg/" "Jan Stolarek: Getting friendly with STG" nil "Thu, 13 Jun 2013 20:45:46 +0000" "<p style=\"text-align: justify;\">I’ve been spending last months on developing GHC. No rocket science so far, just a bit of hacking here and there. The biggest thing I am working on is <a href=\"http://hackage.haskell.org/trac/ghc/ticket/6135\">ticket #6135</a>, which is about changing some of the existing <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Commentary/PrimOps\">PrimOps</a> to return unboxed <code>Int#</code> instead of <code>Bool</code>. This means that the result of comparing two unboxed values will be either an unboxed <code>0#</code> or unboxed <code>1#</code>, instead of a tagged pointer to statically allocated object representing <code>True</code> or <code>False</code>. This modification will allow to write branchless algorithms in Haskell. I promise to write about this one day, but today I want to blog about a different topic.</p>
<p style=\"text-align: justify;\">It so happens that things I’ve been doing in GHC require me to make changes in the code generator. This is a bit challenging for me, because the code generator is something that didn’t interest me much when I started to learn about compilers. Probably the main reason for this is that code generation means dealing with assembly. I’ve been programming for about 16 years and only two languages caused me problems when I tried to learn them. Assembly is one of them<sup><a title=\" In case you’re interested, the other one is Io\" href=\"http://lambda.jstolarek.com/2013/06/getting-friendly-with-stg/#footnote_0_1210\" id=\"identifier_0_1210\" class=\"footnote-link footnote-identifier-link\">1</a></sup>. I have been learning it for one year during my studies and, although I had no problems with understanding the idea behind assembly and writing short snippets of code, writing a larger piece of code always ended up in a headache.</p>
<p style=\"text-align: justify;\">It looks that the time has come to overcome my fear. During last months I’ve been reading a lot of assembly generated by GHC and I even made some attempts at writing assembly code by myself (well, using intrinsics, but I guess that counts). But between Haskell source code and the generated executable there are many intermediate steps. From my observations it seems that many Haskellers have basic knowledge of Core – GHC’s intermediate language. Most have also heard about other two intermediate representations used by GHC – STG and Cmm – but it seems that few people know them, unless they hack the compiler. And since I’m hacking the compiler I should probably have more knowledge about these two representations, right?</p>
<p style=\"text-align: justify;\">There’s a classic paper by Simon Peyton-Jones “Implementing lazy functional languages on stock hardware: the Spineless Tagless G-machine”. It is quite long – 87 pages total – and, being published in 1992, it is mostly out of date. These two things kept me from reading it, although I think that being out of date was only a pretext for me to avoid reading almost 90 pages of text. But, since I need to learn about STG, I finally decided to give it a shot. Reading the paper took my four days. Paper is very well written and in general is an easy read. I was afraid that I might not understand formal description of operational semantics of STG, but it turned out to be well explained so I had no problem with that. The major problem turned out to be the amount of knowledge I had to learn while reading. This resulted in problems with fully understanding last sections of the paper. Not because they are more difficult than the initial ones, but because I didn’t fully remember all the details that were discussed earlier. An important question is which information is not up to date. I’m not yet familiar with the existing implementation, but it seems that many things have changed: the Spineless Tagless G-machine is not tagless any more since the introduction of pointer tagging; curried function are now evaluated using eval/apply convention, while the paper describes push/enter; the paper discusses only compilation to C, while currently C back-end is becoming deprecated in favour of native code generator and LLVM; and finally the layout of closures is now slightly different than the one presented in the paper. I am almost certain that garbage collection is also performed differently. These are the differences that I noticed, which means that really a lot has changed since the publication over 20 years ago. Surprisingly, this doesn’t seem like a big problem, because the most important thing is that the paper presents an idea of how STG works, while the mentioned changes are only not so important details.</p>
<p style=\"text-align: justify;\">So, now that I have a basic idea of how STG works, what comes next? There are a few follow up papers:</p>
<ul>
<li style=\"text-align: justify;\">“The STG runtime system (revised)” – an updated description of STG written in 1999 by Simon Peyton Jones and Simon Marlow. I guess it’s also outdated, but still probably worth reading. It has only 65 pages :)</li>
<li style=\"text-align: justify;\">“Making a Fast Curry. Push-Enter vs. Eval-Apply for Higher-order Languages” – this described the mentioned eval/apply and push/enter strategies. Already read this one.</li>
<li style=\"text-align: justify;\">“Faster Laziness Using Dynamic Pointer Tagging” – this will tell you why STG is not tagless. Read this one also.</li>
</ul>
<p>And once I’ll deal with STG I’ll have to learn about Cmm.</p>
<ol class=\"footnotes\"><li id=\"footnote_0_1210\" class=\"footnote\"> In case you’re interested, the other one is <a href=\"http://iolanguage.org/\">Io</a></li></ol>" nil nil "8c8888c588943fd2f01dff1af6714827") (155 (20949 25792 519662) "http://parenz.wordpress.com/2013/06/10/soc-2013/" "Daniil Frumin: Summer of Code" nil "Wed, 12 Jun 2013 14:17:57 +0000" "<p>Hello, everyone!</p>
<p>I’ve decided to reinstate this blog since I’ve got accepted to this year’s Google Summer of Code program. I’ll blog about my updates, stuff that I’ve been working on and bottlenecks and problems I’ve encountered.</p>
<p>My project is a pastebin site using diagrams and <a href=\"http://weblog.luite.com/wordpress/?p=14\">GHCJS</a> to generate embeddable interactive widgets and static images/text in case when the pasted code does not require additional interaction. My mentor is Luite Stegeman, and Brent Yorgey and other nice people from the diagrams community has agreed to help.</p>
<p>I am very excited about this and happy that I’ve got a whole bunch of smart people to help me with this.</p>
<p>Unfortunately, as we haven’t sorted out a completely safe way to evaluate code coming from 3rd parties, there is no public version hosted anywhere yet. Meanwhile, there is a <a href=\"https://github.com/co-dan/interactive-diagrams\">project on GitHub</a>.</p>
<p>Hopefully, soon I’ll be able to publish a post about my experience with bootstrapping GHCJS.<br />
Until then, stay tuned!</p>
<br /> Tagged: <a href=\"http://parenz.wordpress.com/tag/diagrams/\">diagrams</a>, <a href=\"http://parenz.wordpress.com/tag/ghcjs/\">ghcjs</a>, <a href=\"http://parenz.wordpress.com/tag/haskell-2/\">haskell</a>, <a href=\"http://parenz.wordpress.com/tag/interactive-diagrams/\">interactive-diagrams</a>, <a href=\"http://parenz.wordpress.com/tag/soc/\">soc</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/parenz.wordpress.com/42/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/parenz.wordpress.com/42/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=parenz.wordpress.com&blog=26722965&post=42&subd=parenz&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "c01acb8375d3b6d504e21446e5ed35f7") (154 (20949 25792 519011) "http://blog.moertel.com/posts/2013-06-12-recursion-to-iteration-4-trampolines.html" "Tom Moertel: Tricks of the trade: Recursion to Iteration, Part 4: The Trampoline" nil "Wed, 12 Jun 2013 00:00:00 +0000" "<div class=\"info byline\">Posted by <span><span>Tom Moertel<span></span></span></span></div>
<div class=\"info\">Posted on <time datetime=\"2013-06-12\" itemprop=\"datePublished\">June 12, 2013</time></div>
<div class=\"tags\">Tags: <span><a href=\"http://blog.moertel.com/tags/programming.html\">programming</a>, <a href=\"http://blog.moertel.com/tags/recursion.html\">recursion</a>, <a href=\"http://blog.moertel.com/tags/iteration.html\">iteration</a>, <a href=\"http://blog.moertel.com/tags/python.html\">python</a>, <a href=\"http://blog.moertel.com/tags/recursion-to-iteration series.html\">recursion-to-iteration series</a>, <a href=\"http://blog.moertel.com/tags/tail calls.html\">tail calls</a>, <a href=\"http://blog.moertel.com/tags/data structures.html\">data structures</a>, <a href=\"http://blog.moertel.com/tags/trampolines.html\">trampolines</a></span></div>
<div>
<p>This is the fourth article in <a href=\"http://blog.moertel.com/tags/recursion-to-iteration%20series.html\">a series on converting recursive algorithms into iterative algorithms</a>. If you haven’t read the earlier articles first, you may want to do so before continuing.</p>
<p>In <a href=\"http://blog.moertel.com/posts/2013-05-11-recursive-to-iterative.html\">the first article of our series</a>, we showed that if you can convert an algorithm’s recursive calls into tail calls, you can eliminate those tail calls to create an iterative version of the algorithm using The Simple Method. In this article, we’ll look at another way to eliminate tail calls: the <em>trampoline</em>.</p>
<p>The idea behind the trampoline is this: before making a tail call, manually remove the current execution frame from the stack, eliminating stack build-up.</p>
<h3 id=\"execution-frames-and-the-stack\">Execution frames and the stack</h3>
<p>To understand why we might want to manually remove an execution frame, let’s think about what happens when we call a function. The language runtime needs some place to store housekeeping information and any local variables the function may use, so it allocates a new execution frame on the stack. Then it turns control over to the function. When the function is done, it executes a <code>return</code> statement. This statement tells the runtime to remove the execution frame from the stack and to give control (and any result) back to the caller.</p>
<p>But what if the function doesn’t return right away? What if it makes another function call instead? In that case, the runtime must create a new execution frame for <em>that</em> call and push it onto the stack, on top of the current frame. If the function ends up calling itself many times recursively, each call will add another frame to the stack, and pretty soon we will have eaten up a lot of stack space.</p>
<h3 id=\"eliminating-stack-build-up\">Eliminating stack build-up</h3>
<p>To avoid this problem, some programming languages guarantee that they will recycle the current execution frame whenever a function makes a tail call. That is, if the function calls some other function (or itself recursively) and just returns that function’s result verbatim, that’s a tail call. In that case, the runtime will recycle the current function’s execution frame before transferring control to the other function, making it so that the other function will return its result directly to the original function’s caller. This process is called <em>tail-call elimination</em>.</p>
<p>But in languages like Python that don’t offer tail-call elimination, every call, even if it’s a tail call, pushes a new frame onto the stack. So if we want to prevent stack build-up, we must somehow eliminate the current frame from the stack ourselves, before making a tail call.</p>
<p>But how? The only obvious way to eliminate the current frame is to <code>return</code> to our caller. If we’re to make this work, then, the caller must be willing to help us out. That’s where the trampoline comes in. It’s our co-conspirator in the plot to eliminate stack build-up.</p>
<h3 id=\"the-trampoline\">The trampoline</h3>
<p>Here’s what the trampoline does:</p>
<ol style=\"\">
<li>It calls our function <code>f</code>, making itself the current caller.</li>
<li>When <code>f</code> wants to make a recursive tail call to itself, it returns the instruction <code>call(f)(*args, **kwds)</code>. The language runtime dutifully removes the current execution frame from the stack and returns control to the trampoline, passing it the instruction.</li>
<li>The trampoline interprets the instruction and calls <code>f</code> back, giving it the supplied arguments, and again making itself the caller.</li>
<li>This process repeats until <code>f</code> wants to return a final result <code>z</code>; then it returns the new instruction <code>result(z)</code> instead. As before, the runtime removes the current execution frame from the stack and returns control to the trampoline.</li>
<li>But now when the trampoline interprets the new instruction it will return <code>z</code> to <em>its</em> caller, ending the trampoline dance.</li>
</ol>
<p>Now you can see how the trampoline got its name. When our function uses a <code>return</code> statement to remove its own execution frame from the stack, the trampoline bounces control back to it with new arguments.</p>
<p>Here’s a simple implementation. First, we will encode our instructions to the trampoline as triples. We’ll let <code>call(f)(*args, **kwds)</code> be the triple <code>(f, args, kwds)</code>, and <code>result(z)</code> be the triple <code>(None, z, None)</code>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> call(f):
<span class=\"co\">\"\"\"Instruct trampoline to call f with the args that follow.\"\"\"</span>
<span class=\"kw\">def</span> g(*args, **kwds):
<span class=\"kw\">return</span> f, args, kwds
<span class=\"kw\">return</span> g
<span class=\"kw\">def</span> result(value):
<span class=\"co\">\"\"\"Instruct trampoline to stop iterating and return a value.\"\"\"</span>
<span class=\"kw\">return</span> <span class=\"ot\">None</span>, value, <span class=\"ot\">None</span></code></pre>
<p>Now we’ll create a decorator to wrap a function with a trampoline that will interpret the instructions that the function returns:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"ch\">import</span> functools
<span class=\"kw\">def</span> with_trampoline(f):
<span class=\"co\">\"\"\"Wrap a trampoline around a function that expects a trampoline.\"\"\"</span>
<span class=\"ot\">@functools.wraps</span>(f)
<span class=\"kw\">def</span> g(*args, **kwds):
h = f
<span class=\"co\"># the trampoline</span>
<span class=\"kw\">while</span> h is not <span class=\"ot\">None</span>:
h, args, kwds = h(*args, **kwds)
<span class=\"kw\">return</span> args
<span class=\"kw\">return</span> g</code></pre>
<p>Note that the trampoline boils down to three lines:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">while</span> h is not <span class=\"ot\">None</span>:
h, args, kwds = h(*args, **kwds)
<span class=\"kw\">return</span> args</code></pre>
<p>Basically, the trampoline keeps calling whatever function is in <code>h</code> until that function returns a <code>result(z)</code> instruction, at which time the loop exits and <code>z</code> is returned. The original recursive tail calls have been boiled down to a <code>while</code> loop. Recursion has become iteration.</p>
<h3 id=\"example-factorial\">Example: factorial</h3>
<p>To see how we might use this implementation, let’s return to the factorial example from <a href=\"http://blog.moertel.com/posts/2013-05-11-recursive-to-iterative.html\">the first article in our series</a>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> factorial(n):
<span class=\"kw\">if</span> n < <span class=\"dv\">2</span>:
<span class=\"kw\">return</span> <span class=\"dv\">1</span>
<span class=\"kw\">return</span> n * factorial(n - <span class=\"dv\">1</span>)</code></pre>
<p>Step one, as before, is to tail-convert the lone recursive call:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"> <span class=\"kw\">def</span> factorial(n, acc=<span class=\"dv\">1</span>):
<span class=\"kw\">if</span> n < <span class=\"dv\">2</span>:
<span class=\"kw\">return</span> acc
<span class=\"kw\">return</span> factorial(n - <span class=\"dv\">1</span>, acc * n)</code></pre>
<p>Now we can create an equivalent function that uses trampoline idioms:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> trampoline_factorial(n, acc=<span class=\"dv\">1</span>):
<span class=\"kw\">if</span> n < <span class=\"dv\">2</span>:
<span class=\"kw\">return</span> result(acc)
<span class=\"kw\">return</span> call(trampoline_factorial)(n - <span class=\"dv\">1</span>, n * acc)</code></pre>
<p>Note how the <code>return</code> statements have been transformed.</p>
<p>Finally, we can wrap this function with a trampoline to get a callable version that we can use just like the original:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\">factorial = with_trampoline(trampoline_factorial)</code></pre>
<p>Let’s take it for a spin:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\">>>> factorial(<span class=\"dv\">5</span>)
<span class=\"dv\">120</span></code></pre>
<p>To really see what’s going on, be sure to use the Online Python Tutor’s visualizer to step through the original, tail-recursive, and trampoline versions of the function. Just open this link: <a href=\"http://www.pythontutor.com/visualize.html#code=%23+our+trampoline+library%0A%0Aimport+functools%0A%0Adef+call(f)%3A%0A++++%22%22%22Instruct+trampoline+to+call+f+with+the+args+that+follow.%22%22%22%0A++++def+g(*args,+**kwds)%3A%0A++++++++return+f,+args,+kwds%0A++++return+g%0A%0Adef+result(value)%3A%0A++++%22%22%22Instruct+trampoline+to+stop+iterating+and+return+a+value.%22%22%22%0A++++return+None,+value,+None%0A%0Adef+with_trampoline(f)%3A%0A++++%22%22%22Wrap+a+trampoline+around+a+function+that+expects+a+trampoline.%22%22%22%0A++++%40functools.wraps(f)%0A++++def+g(*args,+**kwds)%3A%0A++++++++h+%3D+f%0A++++++++%23+the+trampoline%0A++++++++while+h+is+not+None%3A%0A++++++++++++h,+args,+kwds+%3D+h(*args,+**kwds)%0A++++++++return+args%0A++++return+g%0A%0A%0A%23+original+recursive+version+of+factorial+function%0A%0Adef+factorial(n)%3A%0A++++if+n+%3C+2%3A%0A++++++++return+1%0A++++return+n+*+factorial(n+-+1)%0A%0Aprint+factorial(5)%0A%0A%0A%23+tail-call+recursive+version%0A%0Adef+factorial(n,+acc%3D1)%3A%0A+++++if+n+%3C+2%3A%0A+++++++++return+acc%0A+++++return+factorial(n+-+1,+acc+*+n)%0A%0Aprint+factorial(5)%0A%0A%0A%23+trampoline-based+tail-call+version+(%3D+iterative)%0A%0Adef+trampoline_factorial(n,+acc%3D1)%3A%0A++++if+n+%3C+2%3A%0A++++++++return+result(acc)%0A++++return+call(trampoline_factorial)(n+-+1,+n+*+acc)%0A%0Afactorial+%3D+with_trampoline(trampoline_factorial)%0A%0Aprint+factorial(5)%0A&mode=display&cumulative=false&heapPrimitives=false&drawParentPointers=false&textReferences=false&showOnlyOutputs=false&py=2&curInstr=0\">Visualize the execution</a>. (ProTip: use a new tab.)</p>
<h3 id=\"why-use-the-trampoline\">Why use the trampoline?</h3>
<p>As I mentioned at the beginning of this article, if you can convert a function’s recursive calls into tail calls – which you must do to use a trampoline – you can also use the Simple Method on the function. For example, here’s what the Simple Method does to our original <code>factorial</code> function:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> factorial(n, acc=<span class=\"dv\">1</span>):
<span class=\"kw\">while</span> n > <span class=\"dv\">1</span>:
(n, acc) = (n - <span class=\"dv\">1</span>, acc * n)
<span class=\"kw\">return</span> acc</code></pre>
<p>This version is simpler and more efficient than the trampoline version. So why not use the Simple Method always?</p>
<p>The answer is that the Simple Method is tricky to apply to functions that make tail calls from within loops. Recall that it introduces a loop around a function’s body and replaces recursive tail calls with <code>continue</code> statements. But if the function already has its own loops, replacing a tail call within one of them with a <code>continue</code> statement will restart that inner loop instead of the whole-body loop, as desired. In that case, you must add condition flags to make sure the right loop gets restarted, and that gets old fast. Then, using a trampoline may be a win.</p>
<p>That said, I almost never use trampolines. Getting a function into tail-call form is nine tenths of the battle. If I’ve gone that far already, I’ll usually go the rest of the way to get a tight, iterative version.</p>
<p>Why, then, did we make this effort to understand the trampoline? Two reasons. First, it’s semi-common in programming lore, so it’s best to know about it. Second, it’s a stepping stone to a more-general, more-powerful technique: <em>continuation-passing-style expressions</em>. That’s our subject for next time.</p>
<p>In the meantime, if you want another take on trampolines in Python, Kyle Miller wrote a nice article on the subject: <a href=\"http://web.mit.edu/kmill/www/programming/tailcall.html\">Tail call recursion in Python</a>.</p>
<p>Thanks for reading! As always, if you have questions or comments, please leave a comment on the blog or hit me at <a href=\"https://twitter.com/tmoertel\">@tmoertel</a>.</p>
</div>" nil nil "d110609d0d7f6497c0af1ab073925f0f") (153 (20949 25792 513506) "http://izbicki.me/blog/hlearns-code-is-shorter-and-clearer-than-wekas?utm_source=rss&utm_medium=rss&utm_campaign=hlearns-code-is-shorter-and-clearer-than-wekas" "Mike Izbicki: =?utf-8?Q?HLearn=E2=80=99s?= code is shorter and clearer than =?utf-8?Q?Weka=E2=80=99s?=" nil "Tue, 11 Jun 2013 17:50:09 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /></p>
<p>Haskell code is expressive.  The <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn library</a> uses 6 lines of Haskell to define a function for training a Bayesian classifier; the equivalent code in the <a href=\"http://www.cs.waikato.ac.nz/ml/weka/\">Weka library</a> uses over 100 lines of Java.  That’s a big difference!  In this post, we’ll look at the actual code and see why the Haskell is so much more concise.</p>
<p><strong>But first, a disclaimer:</strong>  It is really hard to fairly compare two code bases this way.  In both libraries, there is a lot of supporting code that goes into defining each classifier, and it’s not obvious what code to include and not include.  For example, both libraries implement interfaces to a number of probability distributions, and this code is not contained in the source count.  The Haskell code takes more advantage of this abstraction, so this is one language-agnostic reason why the Haskell code is shorter.  If you think I’m not doing a fair comparison, here’s some links to the full repositories so you can do it yourself:</p>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\"><a href=\"https://github.com/mikeizbicki/HLearn/blob/master/HLearn-classification/src/HLearn/Models/Classifiers/Bayes.hs\">HLearn’s bayesian classifier source code</a> (74 lines of code)</span></li>
<li><a href=\"https://svn.cms.waikato.ac.nz/svn/weka/trunk/weka/src/main/java/weka/classifiers/bayes/NaiveBayes.java\">Weka’s naive bayes source code</a> (946 lines of code)</li>
</ul>
<p><span id=\"more-2520\"></span></p>
<h3>The HLearn code</h3>
<p>HLearn implements training for a <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">bayesian classifier</a> with these six lines of Haskell:</p>
<pre>newtype Bayes labelIndex dist = Bayes dist
deriving (Read,Show,Eq,Ord,Monoid,Abelian,Group)
instance (Monoid dist, HomTrainer dist) => HomTrainer (Bayes labelIndex dist) where
type Datapoint (Bayes labelIndex dist) = Datapoint dist
train1dp dp = Bayes $ train1dp dp</pre>
<p>This code elegantly captures how to train a Bayesian classifier—just train a probability distribution.  Here’s an explanation:</p>
<ul>
<li>The first two lines define the Bayes data type as a wrapper around a distribution.</li>
<li>The fourth line says that we’re implementing the Bayesian classifier using the HomTrainer type class.  We do this because <strong>the Haskell compiler automatically generates a parallel batch training function, an online training function, and a fast cross-validation function for all HomTrainer instances.</strong></li>
<li>The fifth line says that our data points have the same type as the underlying distribution.</li>
<li>The sixth line says that in order to train, just train the corresponding distribution.</li>
</ul>
<p>We only get the benefits of the HomTrainer type class because the bayesian classifier is a monoid.  But we didn’t even have to specify what the monoid instance for bayesian classifiers looks like!  In this case, it’s automatically derived from the monoid instances for the base distributions using a language extension called <a href=\"http://www.haskell.org/ghc/docs/7.6.1/html/users_guide/deriving.html\">GeneralizedNewtypeDeriving</a>.  For examples of these monoid structures, check out the algebraic structure of the <a href=\"http://izbicki.me/blog/gausian-distributions-are-monoids\">normal</a> and <a href=\"http://izbicki.me/blog/the-categorical-distributions-algebraic-structure\">categorical</a> distributions, or more complex distributions using <a href=\"http://izbicki.me/blog/markov-networks-monoids-and-futurama\">Markov networks</a>.</p>
<h3>The Weka code</h3>
<p>Look for these differences between the HLearn and Weka source:</p>
<ul>
<li>In Weka we must separately define the online and batch trainers, whereas Haskell derived these for us automatically.</li>
<li>Weka must perform a variety of error handling that Haskell’s type system takes care of in HLearn.</li>
<li>The Weka code is tightly coupled to the underlying probability distribution, whereas the Haskell code was generic enough to handle any distribution. This means that while Weka must make the “naive bayes assumption” that all attributes are independent of each other, HLearn can support any dependence structure.</li>
<li>Weka’s code is made more verbose by for loops and if statements that aren’t necessary for HLearn.</li>
<li>The Java code requires extensive comments to maintain readability, but the Haskell code is simple enough to be self-documenting (at least once you know how to read Haskell).</li>
<li>Weka does not have parallel training, fast cross-validation, data point subtraction, or weighted data points, but HLearn does.</li>
</ul>
<pre>/**
* Generates the classifier.
*
* @param instances set of instances serving as training data
* @exception Exception if the classifier has not been generated
* successfully
*/
public void buildClassifier(Instances instances) throws Exception {
// can classifier handle the data?
getCapabilities().testWithFail(instances);
// remove instances with missing class
instances = new Instances(instances);
instances.deleteWithMissingClass();
m_NumClasses = instances.numClasses();
// Copy the instances
m_Instances = new Instances(instances);
// Discretize instances if required
if (m_UseDiscretization) {
m_Disc = new weka.filters.supervised.attribute.Discretize();
m_Disc.setInputFormat(m_Instances);
m_Instances = weka.filters.Filter.useFilter(m_Instances, m_Disc);
} else {
m_Disc = null;
}
// Reserve space for the distributions
m_Distributions = new Estimator[m_Instances.numAttributes() - 1]
[m_Instances.numClasses()];
m_ClassDistribution = new DiscreteEstimator(m_Instances.numClasses(),
true);
int attIndex = 0;
Enumeration enu = m_Instances.enumerateAttributes();
while (enu.hasMoreElements()) {
Attribute attribute = (Attribute) enu.nextElement();
// If the attribute is numeric, determine the estimator
// numeric precision from differences between adjacent values
double numPrecision = DEFAULT_NUM_PRECISION;
if (attribute.type() == Attribute.NUMERIC) {
m_Instances.sort(attribute);
if ( (m_Instances.numInstances() > 0)
    && !m_Instances.instance(0).isMissing(attribute)) {
  double lastVal = m_Instances.instance(0).value(attribute);
  double currentVal, deltaSum = 0;
  int distinct = 0;
  for (int i = 1; i < m_Instances.numInstances(); i++) { 	
Instance currentInst = m_Instances.instance(i); 	
if (currentInst.isMissing(attribute)) {
break; 	
}
	    currentVal = currentInst.value(attribute);
	    if (currentVal != lastVal) {
	      deltaSum += currentVal - lastVal;
	      lastVal = currentVal;
	      distinct++;
	    }
	  }
	  if (distinct > 0) {
    numPrecision = deltaSum / distinct;
  }
}
}
for (int j = 0; j < m_Instances.numClasses(); j++) {
switch (attribute.type()) {
case Attribute.NUMERIC:
  if (m_UseKernelEstimator) {
    m_Distributions[attIndex][j] =
      new KernelEstimator(numPrecision);
  } else {
    m_Distributions[attIndex][j] =
      new NormalEstimator(numPrecision);
  }
  break;
case Attribute.NOMINAL:
  m_Distributions[attIndex][j] =
    new DiscreteEstimator(attribute.numValues(), true);
  break;
default:
  throw new Exception(\"Attribute type unknown to NaiveBayes\");
}
}
attIndex++;
}
// Compute counts
Enumeration enumInsts = m_Instances.enumerateInstances();
while (enumInsts.hasMoreElements()) {
Instance instance =
(Instance) enumInsts.nextElement();
updateClassifier(instance);
}
// Save space
m_Instances = new Instances(m_Instances, 0);
}</pre>
<p>And the code for online learning is:</p>
<pre>/**
* Updates the classifier with the given instance.
*
* @param instance the new training instance to include in the model
* @exception Exception if the instance could not be incorporated in
* the model.
*/
public void updateClassifier(Instance instance) throws Exception {
if (!instance.classIsMissing()) {
Enumeration enumAtts = m_Instances.enumerateAttributes();
int attIndex = 0;
while (enumAtts.hasMoreElements()) {
Attribute attribute = (Attribute) enumAtts.nextElement();
if (!instance.isMissing(attribute)) {
  m_Distributions[attIndex][(int)instance.classValue()].
addValue(instance.value(attribute), instance.weight());
}
attIndex++;
}
m_ClassDistribution.addValue(instance.classValue(),
instance.weight());
}
}</pre>
<h3>Conclusion</h3>
<p>Every algorithm implemented in HLearn uses similarly concise code.  I invite you to <a href=\"https://github.com/mikeizbicki/HLearn/\">browse the repository</a> and see for yourself.  The most complicated algorithm is for Markov chains which use only <a href=\"https://github.com/mikeizbicki/HLearn/blob/master/HLearn-markov/src/HLearn/Models/Markov/MarkovChain.hs\">6 lines for training, and about 20 for defining the Monoid</a>.</p>
<p>You can expect lots of tutorials on how to incorporate the HLearn library into Haskell programs over the next few months.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned!</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2520\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "a2eed72f1858331b6796fee4e1e76ae7") (152 (20949 25792 511765) "http://wadler.blogspot.com/2013/06/iain-banks.html" "Philip Wadler: Iain Banks" "noreply@blogger.com (Philip Wadler)" "Tue, 11 Jun 2013 08:24:56 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-0cLAVwyWSKU/Ubbaw7r7N9I/AAAAAAAACKI/DItsN5fXHQE/s1600/scotsbanks-003.jpg\"><img src=\"http://1.bp.blogspot.com/-0cLAVwyWSKU/Ubbaw7r7N9I/AAAAAAAACKI/DItsN5fXHQE/s400/scotsbanks-003.jpg\" title=\"Writer Iain Banks seen in front of the Scottish Parliament Building at Holyrood in Edinburgh. Photograph: Murdo MacLeod (Observer)\" height=\"240\" width=\"400\" alt=\"Writer Iain Banks seen in front of the Scottish Parliament Building at Holyrood in Edinburgh. Photograph: Murdo MacLeod (Observer)\" border=\"0\" /></a></div>In April, Iain Banks discovered he had cancer of the gall bladder, and proposed to his girl friend by requesting she `do me the honour of becoming my widow'.  Yesterday his death was announced.  In his honour, here is something he <a href=\"http://www.guardian.co.uk/culture/2011/aug/28/scottish-independence-snp-iain-banks?INTCMP=SRCH\">wrote for the Observer</a>.  See also this <a href=\"http://www.guardian.co.uk/books/2013/jun/10/iain-banks-ken-macleod-science-fiction\">tribute from Ken McLeod</a>.<br /><blockquote class=\"tr_bq\"><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-0cLAVwyWSKU/Ubbaw7r7N9I/AAAAAAAACKI/DItsN5fXHQE/s1600/scotsbanks-003.jpg\"></a></div>These days, I support the idea of an independent Scotland. It's with a  heavy heart in some ways; I think I'd still sacrifice an independent  Scotland for a socialist UK, but… I can't really see that happening.  What I can imagine is England continuing to turn to the right and  eventually leaving the EU altogether.<br /><br />Scotland, though, could have  a viable future either as a completely independent country or – more  likely – within Europe. The European ideal is taking a battering right  now, certainly, and the gloss has come off comparing our prospects to  Ireland's or Iceland's, but it remains both possible and plausible that  Scotland could become a transparent, low-inequality society on the  Scandinavian model, with fair, non-regressive taxes, strong unions, a  nuclear-free policy, a non-punitive tertiary education system,  enlightened social policies in general and long-term support for green  energy programmes.<br /><br />We'd need to make sure our banks were small  enough to fail, and there are problems of poverty, ill health and  religious tribalism that will take decades to overcome. But with the  advantages and attractions that Scotland already has, and, more  importantly, taking into account the morale boost, the sheer  energisation of a whole people that would come about because we would  finally have our destiny at least largely back in our own hands again – I  think we could do it.<br /><br />And that we should.</blockquote>" nil nil "8510fdd9ba7c0ba403464d9449971edf") (151 (20949 25792 507936) "http://theorylunch.wordpress.com/2013/06/06/an-initial-solution-to-the-monad-problem-and-then-some-more/" "Theory Lunch (Institute of Cybernetics, Tallinn): An initial solution to the monad problem, and then some more" nil "Mon, 10 Jun 2013 11:27:02 +0000" "<p>This is the second of two talks about monads, based on <a href=\"http://www.cs.man.ac.uk/~schalk/notes/monads.pdf\" target=\"_blank\" title=\"http://www.cs.man.ac.uk/~schalk/notes/monads.pdf\">the very good notes by Andrea Schalk</a> and continuing <a href=\"http://theorylunch.wordpress.com/2013/05/30/when-does-an-endofunctor-derive-from-an-adjunction/\" target=\"_blank\" title=\"http://theorylunch.wordpress.com/2013/05/30/when-does-an-endofunctor-derive-from-an-adjunction/\">the one I gave on the 30th of May</a>. Recall that we are trying to solve the following problem:</p>
<p style=\"text-align: center;\"><em>given a monad <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" />, find an adjunction <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu+%3D+G+%5Cvarepsilon_F&bg=ffffff&fg=333333&s=0\" alt=\"\\mu = G \\varepsilon_F\" class=\"latex\" title=\"\\mu = G \\varepsilon_F\" /></em></p>
<p>If the adjunction <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> solves the problem above, we say that it <em>generates</em> the monad <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />.</p>
<p>The first solution to this problem was given by the Swiss mathematician Heinrich Kleisli, and is based on an alternative way of defining monads, as it is the case with adjunctions. <span id=\"more-885\"></span> Let us suppose <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> with <img src=\"http://s0.wp.com/latex.php?latex=F+%5Cdashv+G&bg=ffffff&fg=333333&s=0\" alt=\"F \\dashv G\" class=\"latex\" title=\"F \\dashv G\" />. If <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB+%3D+G%28FB%29&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB = G(FB)\" class=\"latex\" title=\"f : A \\to TB = G(FB)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3A+FA+%5Cto+FB&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp : FA \\to FB\" class=\"latex\" title=\"f^\\sharp : FA \\to FB\" />, so that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%3A+TA+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp : TA \\to TB\" class=\"latex\" title=\"Gf^\\sharp : TA \\to TB\" />: and we know from the definition of monad that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp \\circ \\eta_A = f\" class=\"latex\" title=\"Gf^\\sharp \\circ \\eta_A = f\" />. We can thus define an operator <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)^\\ast\" class=\"latex\" title=\"(\\cdot)^\\ast\" /> that takes <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,TB)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,TB)\" /> into <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%3D+Gf%5E%5Csharp+%5Cin+%5Cmathcal%7BC%7D%28TA%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast = Gf^\\sharp \\in \\mathcal{C}(TA,TB)\" class=\"latex\" title=\"f^\\ast = Gf^\\sharp \\in \\mathcal{C}(TA,TB)\" /> so that <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\circ \\eta_A = f\" class=\"latex\" title=\"f^\\ast \\circ \\eta_A = f\" /> whatever <img src=\"http://s0.wp.com/latex.php?latex=f&bg=ffffff&fg=333333&s=0\" alt=\"f\" class=\"latex\" title=\"f\" /> is. The simplest example is <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"f = \\eta_A\" class=\"latex\" title=\"f = \\eta_A\" /> itself, which yields <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast \\circ \\eta_A = \\eta_A\" class=\"latex\" title=\"(\\eta_A)^\\ast \\circ \\eta_A = \\eta_A\" />, so that <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Csharp+%3D+%5Cmathrm%7Bid%7D_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\sharp = \\mathrm{id}_{FA}\" class=\"latex\" title=\"(\\eta_A)^\\sharp = \\mathrm{id}_{FA}\" /> by uniqueness in the definition of adjunction quadruple, and <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" class=\"latex\" title=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" />. Moreover, if <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB\" class=\"latex\" title=\"f : A \\to TB\" /> and <img src=\"http://s0.wp.com/latex.php?latex=g+%3A+B+%5Cto+TC&bg=ffffff&fg=333333&s=0\" alt=\"g : B \\to TC\" class=\"latex\" title=\"g : B \\to TC\" />, then <img src=\"http://s0.wp.com/latex.php?latex=g%5E%5Cast+%5Ccirc+f+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast+%5Ccirc+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"g^\\ast \\circ f = g^\\ast \\circ f^\\ast \\circ \\eta_A\" class=\"latex\" title=\"g^\\ast \\circ f = g^\\ast \\circ f^\\ast \\circ \\eta_A\" />, which implies <img src=\"http://s0.wp.com/latex.php?latex=%28g%5E%5Cast+%5Ccirc+f%29%5E%5Cast+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" class=\"latex\" title=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" /> by uniqueness.</p>
<p><strong>Definition 4.</strong> A <em>Kleisli triple</em> on a category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> is a triple <img src=\"http://s0.wp.com/latex.php?latex=%28T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"(T, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"(T, \\eta, (\\cdot)^\\ast)\" /> where:</p>
<ol>
<li><img src=\"http://s0.wp.com/latex.php?latex=T+%3A+%7C%5Cmathcal%7BC%7D%7C+%5Cto+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"T : |\\mathcal{C}| \\to |\\mathcal{C}|\" class=\"latex\" title=\"T : |\\mathcal{C}| \\to |\\mathcal{C}|\" /> is a function,</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A+%5Cin+%5Cmathcal%7BC%7D%28A%2C+TA%29&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A \\in \\mathcal{C}(A, TA)\" class=\"latex\" title=\"\\eta_A \\in \\mathcal{C}(A, TA)\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}|\" />, and</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Cin+%5Cmathcal%7BC%7D%28TA%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\in \\mathcal{C}(TA,TB)\" class=\"latex\" title=\"f^\\ast \\in \\mathcal{C}(TA,TB)\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,TB)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,TB)\" /></li>
</ol>
<p>such that the following equations are satisfied:</p>
<ol>
<li><img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\circ \\eta_A = f\" class=\"latex\" title=\"f^\\ast \\circ \\eta_A = f\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB\" class=\"latex\" title=\"f : A \\to TB\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" class=\"latex\" title=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%28g%5E%5Cast+%5Ccirc+f%29%5E%5Cast+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" class=\"latex\" title=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB\" class=\"latex\" title=\"f : A \\to TB\" />, <img src=\"http://s0.wp.com/latex.php?latex=g+%3A+B+%5Cto+TC&bg=ffffff&fg=333333&s=0\" alt=\"g : B \\to TC\" class=\"latex\" title=\"g : B \\to TC\" />.</li>
</ol>
<p>If <img src=\"http://s0.wp.com/latex.php?latex=%28F%2CG%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(F,G, \\eta, (\\cdot)^\\sharp)\" class=\"latex\" title=\"(F,G, \\eta, (\\cdot)^\\sharp)\" /> is an adjunction quadruple then <img src=\"http://s0.wp.com/latex.php?latex=%28GF%2C+%5Ceta%2C+G%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(GF, \\eta, G(\\cdot)^\\sharp)\" class=\"latex\" title=\"(GF, \\eta, G(\\cdot)^\\sharp)\" /> is a Kleisli triple.</p>
<p><strong>Theorem 1.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> be a category.</p>
<ol>
<li>If <img src=\"http://s0.wp.com/latex.php?latex=%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"(T, \\eta, \\mu)\" class=\"latex\" title=\"(T, \\eta, \\mu)\" /> is a monad on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />, and if <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%3D+%5Cmu_B+%5Ccirc+Tf&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast = \\mu_B \\circ Tf\" class=\"latex\" title=\"f^\\ast = \\mu_B \\circ Tf\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB\" class=\"latex\" title=\"f : A \\to TB\" />, then <img src=\"http://s0.wp.com/latex.php?latex=%28T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"(T, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"(T, \\eta, (\\cdot)^\\ast)\" /> is a Kleisli triple on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />.</li>
<li>If <img src=\"http://s0.wp.com/latex.php?latex=%28T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"(T, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"(T, \\eta, (\\cdot)^\\ast)\" /> is a Kleisli triple on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />, and if <img src=\"http://s0.wp.com/latex.php?latex=Tf+%3D+%28%5Ceta_B+%5Ccirc+f%29%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"Tf = (\\eta_B \\circ f)^\\ast\" class=\"latex\" title=\"Tf = (\\eta_B \\circ f)^\\ast\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+B&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to B\" class=\"latex\" title=\"f : A \\to B\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%3D+%28%5Cmathrm%7Bid%7D_%7BTA%7D%29%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A = (\\mathrm{id}_{TA})^\\ast\" class=\"latex\" title=\"\\mu_A = (\\mathrm{id}_{TA})^\\ast\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" />, then <img src=\"http://s0.wp.com/latex.php?latex=%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"(T, \\eta, \\mu)\" class=\"latex\" title=\"(T, \\eta, \\mu)\" /> is a monad on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />.</li>
<li>The two operations from the previous points are each other’s converse.</li>
</ol>
<p><em>Proof:</em> Point 1 follows from naturality of <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta&bg=ffffff&fg=333333&s=0\" alt=\"\\eta\" class=\"latex\" title=\"\\eta\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu&bg=ffffff&fg=333333&s=0\" alt=\"\\mu\" class=\"latex\" title=\"\\mu\" /> and the three monad laws:</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+%5Cmu_B+%5Ccirc+Tf+%5Ccirc+%5Ceta_A+%3D+%5Cmu_B+%5Ccirc+%5Ceta_%7BTB%7D+%5Ccirc+f+%3D+%5Cmathrm%7Bid%7D_%7BTB%7D+%5Ccirc+f+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\circ \\eta_A = \\mu_B \\circ Tf \\circ \\eta_A = \\mu_B \\circ \\eta_{TB} \\circ f = \\mathrm{id}_{TB} \\circ f = f\" class=\"latex\" title=\"f^\\ast \\circ \\eta_A = \\mu_B \\circ Tf \\circ \\eta_A = \\mu_B \\circ \\eta_{TB} \\circ f = \\mathrm{id}_{TB} \\circ f = f\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmu_%7BTA%7D+%5Ccirc+%5Ceta_A+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast = \\mu_{TA} \\circ \\eta_A = \\mathrm{id}_{TA}\" class=\"latex\" title=\"(\\eta_A)^\\ast = \\mu_{TA} \\circ \\eta_A = \\mathrm{id}_{TA}\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%28g%5E%5Cast+%5Ccirc+f%29%5E%5Cast+%3D+%5Cmu_C+%5Ccirc+T%5Cmu_C+%5Ccirc+T%5E2g+%5Ccirc+Tf+%3D+%5Cmu_C+%5Ccirc+%5Cmu_%7BTC%7D+%5Ccirc+T%5E2g+%5Ccirc+Tf+%3D+%5Cmu_C+%5Ccirc+Tg+%5Ccirc+%5Cmu_B+%5Ccirc+Tf+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(g^\\ast \\circ f)^\\ast = \\mu_C \\circ T\\mu_C \\circ T^2g \\circ Tf = \\mu_C \\circ \\mu_{TC} \\circ T^2g \\circ Tf = \\mu_C \\circ Tg \\circ \\mu_B \\circ Tf = g^\\ast \\circ f^\\ast\" class=\"latex\" title=\"(g^\\ast \\circ f)^\\ast = \\mu_C \\circ T\\mu_C \\circ T^2g \\circ Tf = \\mu_C \\circ \\mu_{TC} \\circ T^2g \\circ Tf = \\mu_C \\circ Tg \\circ \\mu_B \\circ Tf = g^\\ast \\circ f^\\ast\" /></li>
</ul>
<p>For point 2, functoriality of <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />, naturality of <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta&bg=ffffff&fg=333333&s=0\" alt=\"\\eta\" class=\"latex\" title=\"\\eta\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu&bg=ffffff&fg=333333&s=0\" alt=\"\\mu\" class=\"latex\" title=\"\\mu\" />, and monad laws follow from Kleisli laws:</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=T%28g+%5Ccirc+f%29+%3D+%28%5Ceta_C+%5Ccirc+g+%5Ccirc+f%29%5E%5Cast+%3D+%28%28%5Ceta_C+%5Ccirc+g%29%5E%5Cast+%5Ccirc+%5Ceta_B+%5Ccirc+f%29%5E%5Cast+%3D+%28%5Ceta_C+%5Ccirc+g%29%5E%5Cast+%5Ccirc+%28%5Ceta_B+%5Ccirc+f%29%5E%5Cast+Tg+%5Ccirc+Tf&bg=ffffff&fg=333333&s=0\" alt=\"T(g \\circ f) = (\\eta_C \\circ g \\circ f)^\\ast = ((\\eta_C \\circ g)^\\ast \\circ \\eta_B \\circ f)^\\ast = (\\eta_C \\circ g)^\\ast \\circ (\\eta_B \\circ f)^\\ast Tg \\circ Tf\" class=\"latex\" title=\"T(g \\circ f) = (\\eta_C \\circ g \\circ f)^\\ast = ((\\eta_C \\circ g)^\\ast \\circ \\eta_B \\circ f)^\\ast = (\\eta_C \\circ g)^\\ast \\circ (\\eta_B \\circ f)^\\ast Tg \\circ Tf\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=T%5Cmathrm%7Bid%7D_A+%3D+%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"T\\mathrm{id}_A = (\\eta_A)^\\ast = \\mathrm{id}_{TA}\" class=\"latex\" title=\"T\\mathrm{id}_A = (\\eta_A)^\\ast = \\mathrm{id}_{TA}\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=Tf+%5Ccirc+%5Ceta_A+%3D+%28%5Ceta_B+%5Ccirc+f%29%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+%5Ceta_B+%5Ccirc+f&bg=ffffff&fg=333333&s=0\" alt=\"Tf \\circ \\eta_A = (\\eta_B \\circ f)^\\ast \\circ \\eta_A = \\eta_B \\circ f\" class=\"latex\" title=\"Tf \\circ \\eta_A = (\\eta_B \\circ f)^\\ast \\circ \\eta_A = \\eta_B \\circ f\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_B+%5Ccirc+T%5E2f+%3D+%28%5Cmathrm%7Bid%7D_%7BTB%7D%5E%5Cast+%5Ccirc+%5Ceta_%7BTB%7D+%5Ccirc+%28%5Ceta_B+%5Ccirc+f%29%5E%5Cast%29%5E%5Cast+%3D+%28%5Ceta_B+%5Ccirc+Tf%29%5E%7B%5Cast%5Cast%7D+%3D+%28%28%5Ceta_B+%5Ccirc+f%29%5E%5Cast+%5Ccirc+%5Cmathrm%7Bid%7D_%7BTA%7D%29%5E%5Cast+%3D+Tf+%5Ccirc+%5Cmu_A&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_B \\circ T^2f = (\\mathrm{id}_{TB}^\\ast \\circ \\eta_{TB} \\circ (\\eta_B \\circ f)^\\ast)^\\ast = (\\eta_B \\circ Tf)^{\\ast\\ast} = ((\\eta_B \\circ f)^\\ast \\circ \\mathrm{id}_{TA})^\\ast = Tf \\circ \\mu_A\" class=\"latex\" title=\"\\mu_B \\circ T^2f = (\\mathrm{id}_{TB}^\\ast \\circ \\eta_{TB} \\circ (\\eta_B \\circ f)^\\ast)^\\ast = (\\eta_B \\circ Tf)^{\\ast\\ast} = ((\\eta_B \\circ f)^\\ast \\circ \\mathrm{id}_{TA})^\\ast = Tf \\circ \\mu_A\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Ceta_%7BTA%7D+%3D+%28%5Cmathrm%7Bid%7D_%7BTA%7D%29%5E%5Cast+%5Ccirc+%5Ceta_%7BTA%7D+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D+%3D+%28%5Cmathrm%7Bid%7D_%7BTA%7D+%5Ccirc+%5Ceta_A%29%5E%5Cast+%3D+%28%28%5Cmathrm%7Bid%7D_%7BTA%7D%29%5E%5Cast+%5Ccirc+%5Ceta_%7BTA%7D+%5Ccirc+%5Ceta_A%29%5E%5Cast+%3D+%5Cmu_A+%5Ccirc+T%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\eta_{TA} = (\\mathrm{id}_{TA})^\\ast \\circ \\eta_{TA} = \\mathrm{id}_{TA} = (\\mathrm{id}_{TA} \\circ \\eta_A)^\\ast = ((\\mathrm{id}_{TA})^\\ast \\circ \\eta_{TA} \\circ \\eta_A)^\\ast = \\mu_A \\circ T\\eta_A\" class=\"latex\" title=\"\\mu_A \\circ \\eta_{TA} = (\\mathrm{id}_{TA})^\\ast \\circ \\eta_{TA} = \\mathrm{id}_{TA} = (\\mathrm{id}_{TA} \\circ \\eta_A)^\\ast = ((\\mathrm{id}_{TA})^\\ast \\circ \\eta_{TA} \\circ \\eta_A)^\\ast = \\mu_A \\circ T\\eta_A\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Cmu_%7BTA%7D+%3D+%28%5Cmathrm%7Bid%7D_%7BTA%7D%5E%5Cast+%5Ccirc+%5Cmathrm%7Bid%7D_%7BT%5E2A%7D%29%5E%5Cast+%3D+%28%5Cmathrm%7Bid%7D_A+%5Ccirc+%5Cmathrm%7Bid%7D_%7BTA%7D%5E%5Cast%29%5E%5Cast+%3D+%28%5Cmathrm%7Bid%7D_%7BTA%7D%5E%5Cast+%5Ccirc+%5Ceta_%7BTA%7D+%5Ccirc+%5Cmathrm%7Bid%7D_%7BTA%7D%5E%5Cast%29%5E%5Cast+%3D+%5Cmu_A+%5Ccirc+T%5Cmu_A&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\mu_{TA} = (\\mathrm{id}_{TA}^\\ast \\circ \\mathrm{id}_{T^2A})^\\ast = (\\mathrm{id}_A \\circ \\mathrm{id}_{TA}^\\ast)^\\ast = (\\mathrm{id}_{TA}^\\ast \\circ \\eta_{TA} \\circ \\mathrm{id}_{TA}^\\ast)^\\ast = \\mu_A \\circ T\\mu_A\" class=\"latex\" title=\"\\mu_A \\circ \\mu_{TA} = (\\mathrm{id}_{TA}^\\ast \\circ \\mathrm{id}_{T^2A})^\\ast = (\\mathrm{id}_A \\circ \\mathrm{id}_{TA}^\\ast)^\\ast = (\\mathrm{id}_{TA}^\\ast \\circ \\eta_{TA} \\circ \\mathrm{id}_{TA}^\\ast)^\\ast = \\mu_A \\circ T\\mu_A\" /></li>
</ul>
<p>Point 3 is straightforward. <img src=\"http://s0.wp.com/latex.php?latex=%5CBox&bg=ffffff&fg=333333&s=0\" alt=\"\\Box\" class=\"latex\" title=\"\\Box\" /></p>
<p>Considering again the free monoid example, the corresponding Kleisli triple has</p>
<p style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast%28s%29+%3D+%5B+x+%5C%3B+%5Cmathtt%7Bfor%7D+%5C%3B+x+%5C%3B+%5Cmathtt%7Bin%7D+%5C%3B+f%28a%29+%5C%3B+%5Cmathtt%7Bfor%7D+%5C%3B+a+%5C%3B+%5Cmathtt%7Bin%7D+%5C%3B+s+%5D&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast(s) = [ x \\; \\mathtt{for} \\; x \\; \\mathtt{in} \\; f(a) \\; \\mathtt{for} \\; a \\; \\mathtt{in} \\; s ]\" class=\"latex\" title=\"f^\\ast(s) = [ x \\; \\mathtt{for} \\; x \\; \\mathtt{in} \\; f(a) \\; \\mathtt{for} \\; a \\; \\mathtt{in} \\; s ]\" /></p>
<p>Theorem 1 says that we can restate our problem as follows:</p>
<p style=\"text-align: center;\"><em>given a Kleisli triple <img src=\"http://s0.wp.com/latex.php?latex=%28T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"(T, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"(T, \\eta, (\\cdot)^\\ast)\" />,</em><em> find an adjunction quadruple <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, (\\cdot)^\\sharp)\" class=\"latex\" title=\"(F, G, \\eta, (\\cdot)^\\sharp)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29%5E%5Cast+%3D+G%28%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)^\\ast = G((\\cdot)^\\sharp)\" class=\"latex\" title=\"(\\cdot)^\\ast = G((\\cdot)^\\sharp)\" /></em></p>
<p>If <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> with <img src=\"http://s0.wp.com/latex.php?latex=F+%5Cdashv+G&bg=ffffff&fg=333333&s=0\" alt=\"F \\dashv G\" class=\"latex\" title=\"F \\dashv G\" />, then for every <img src=\"http://s0.wp.com/latex.php?latex=A%2CB+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A,B \\in |\\mathcal{C}|\" class=\"latex\" title=\"A,B \\in |\\mathcal{C}|\" /> there is an isomorphism <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D%28FA%2CFB%29+%5Ccong+%5Cmathcal%7BC%7D%28A%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{D}(FA,FB) \\cong \\mathcal{C}(A,TB)\" class=\"latex\" title=\"\\mathcal{D}(FA,FB) \\cong \\mathcal{C}(A,TB)\" />: this observation is at the base of Kleisli’s construction.</p>
<p><strong>Definition 5.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"T = (T, \\eta, (\\cdot)^\\ast)\" /> be a Kleisli triple on a category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />. The <em>Kleisli category </em>of <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" /> is the category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T\" class=\"latex\" title=\"\\mathcal{C}_T\" /> defined as follows:</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=%7C%5Cmathcal%7BC%7D_T%7C+%3D+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"|\\mathcal{C}_T| = |\\mathcal{C}|\" class=\"latex\" title=\"|\\mathcal{C}_T| = |\\mathcal{C}|\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T%28A%2CB%29+%3D+%5Cmathcal%7BC%7D%28A%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T(A,B) = \\mathcal{C}(A,TB)\" class=\"latex\" title=\"\\mathcal{C}_T(A,B) = \\mathcal{C}(A,TB)\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Cmathrm%7Bid%7D_%7BA%7D%5E%7B%5Cmathcal%7BC%7D_T%7D+%3D+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"\\mathrm{id}_{A}^{\\mathcal{C}_T} = \\eta_A\" class=\"latex\" title=\"\\mathrm{id}_{A}^{\\mathcal{C}_T} = \\eta_A\" />, that is, the identity of <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T\" class=\"latex\" title=\"\\mathcal{C}_T\" /> is <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A\" class=\"latex\" title=\"\\eta_A\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=g+%5Cbullet+f+%3D+g%5E%5Cast+%5Ccirc+f&bg=ffffff&fg=333333&s=0\" alt=\"g \\bullet f = g^\\ast \\circ f\" class=\"latex\" title=\"g \\bullet f = g^\\ast \\circ f\" />, that is, the composition of <img src=\"http://s0.wp.com/latex.php?latex=f&bg=ffffff&fg=333333&s=0\" alt=\"f\" class=\"latex\" title=\"f\" /> and <img src=\"http://s0.wp.com/latex.php?latex=g&bg=ffffff&fg=333333&s=0\" alt=\"g\" class=\"latex\" title=\"g\" /> in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T\" class=\"latex\" title=\"\\mathcal{C}_T\" /> is the composition of <img src=\"http://s0.wp.com/latex.php?latex=f&bg=ffffff&fg=333333&s=0\" alt=\"f\" class=\"latex\" title=\"f\" /> and <img src=\"http://s0.wp.com/latex.php?latex=g%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"g^\\ast\" class=\"latex\" title=\"g^\\ast\" /> in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />.</li>
</ul>
<p><strong>Theorem 2.</strong> <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T\" class=\"latex\" title=\"\\mathcal{C}_T\" /> is a category.</p>
<p><em>Proof:</em> If <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(A,B)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cbullet+%5Cmathrm%7Bid%7D_%7BA%7D%5E%7B%5Cmathcal%7BC%7D_T%7D+%3D+f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f \\bullet \\mathrm{id}_{A}^{\\mathcal{C}_T} = f^\\ast \\circ \\eta_A = f\" class=\"latex\" title=\"f \\bullet \\mathrm{id}_{A}^{\\mathcal{C}_T} = f^\\ast \\circ \\eta_A = f\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathrm%7Bid%7D_%7BB%7D%5E%7B%5Cmathcal%7BC%7D_T%7D+%5Cbullet+f+%3D+%28%5Ceta_B%29%5E%5Cast+%5Ccirc+f+%3D+%5Cmathrm%7Bid%7D_%7BTB%7D+%5Ccirc+f+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"\\mathrm{id}_{B}^{\\mathcal{C}_T} \\bullet f = (\\eta_B)^\\ast \\circ f = \\mathrm{id}_{TB} \\circ f = f\" class=\"latex\" title=\"\\mathrm{id}_{B}^{\\mathcal{C}_T} \\bullet f = (\\eta_B)^\\ast \\circ f = \\mathrm{id}_{TB} \\circ f = f\" /> by the Kleisli laws. If <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(A,B)\" />, <img src=\"http://s0.wp.com/latex.php?latex=g+%5Cin+%5Cmathcal%7BC%7D_T%28B%2CC%29&bg=ffffff&fg=333333&s=0\" alt=\"g \\in \\mathcal{C}_T(B,C)\" class=\"latex\" title=\"g \\in \\mathcal{C}_T(B,C)\" />, and <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28C%2CD%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(C,D)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(C,D)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=%28h+%5Cbullet+g%29+%5Cbullet+f+%3D+%28h%5E%5Cast+%5Ccirc+g%29%5E%5Cast+%5Ccirc+f+%3D+h%5E%5Cast+%5Ccirc+g%5E%5Cast+%5Ccirc+f+%3D+h+%5Cbullet+%28g+%5Cbullet+f%29.&bg=ffffff&fg=333333&s=0\" alt=\"(h \\bullet g) \\bullet f = (h^\\ast \\circ g)^\\ast \\circ f = h^\\ast \\circ g^\\ast \\circ f = h \\bullet (g \\bullet f).\" class=\"latex\" title=\"(h \\bullet g) \\bullet f = (h^\\ast \\circ g)^\\ast \\circ f = h^\\ast \\circ g^\\ast \\circ f = h \\bullet (g \\bullet f).\" /> <img src=\"http://s0.wp.com/latex.php?latex=%5CBox&bg=ffffff&fg=333333&s=0\" alt=\"\\Box\" class=\"latex\" title=\"\\Box\" /></p>
<p>Our plan is to construct an adjunction quadruple <img src=\"http://s0.wp.com/latex.php?latex=%28F_T%2C+G_T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(F_T, G_T, \\eta, (\\cdot)^\\sharp)\" class=\"latex\" title=\"(F_T, G_T, \\eta, (\\cdot)^\\sharp)\" />, with <img src=\"http://s0.wp.com/latex.php?latex=F_T+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D_T&bg=ffffff&fg=333333&s=0\" alt=\"F_T : \\mathcal{C} \\to \\mathcal{C}_T\" class=\"latex\" title=\"F_T : \\mathcal{C} \\to \\mathcal{C}_T\" /> and <img src=\"http://s0.wp.com/latex.php?latex=G_T+%3A+%5Cmathcal%7BC%7D_T+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"G_T : \\mathcal{C}_T \\to \\mathcal{C}\" class=\"latex\" title=\"G_T : \\mathcal{C}_T \\to \\mathcal{C}\" />, such that <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+G_T+F_T&bg=ffffff&fg=333333&s=0\" alt=\"T = G_T F_T\" class=\"latex\" title=\"T = G_T F_T\" /> and <img src=\"http://s0.wp.com/latex.php?latex=G_T+f%5E%5Csharp+%3D+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"G_T f^\\sharp = f^\\ast\" class=\"latex\" title=\"G_T f^\\sharp = f^\\ast\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(A,B)\" />. We do this as follows:</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=F_T+A+%3D+A&bg=ffffff&fg=333333&s=0\" alt=\"F_T A = A\" class=\"latex\" title=\"F_T A = A\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}|\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=G_T+A+%3D+TA&bg=ffffff&fg=333333&s=0\" alt=\"G_T A = TA\" class=\"latex\" title=\"G_T A = TA\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D_T%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}_T|\" class=\"latex\" title=\"A \\in |\\mathcal{C}_T|\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=G_T+f+%3D+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"G_T f = f^\\ast\" class=\"latex\" title=\"G_T f = f^\\ast\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(A,B)\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp = f\" class=\"latex\" title=\"f^\\sharp = f\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2C+G_T+B%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A, G_T B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A, G_T B)\" />.</li>
</ul>
<p>Let us quickly check that <img src=\"http://s0.wp.com/latex.php?latex=G_T&bg=ffffff&fg=333333&s=0\" alt=\"G_T\" class=\"latex\" title=\"G_T\" /> is indeed a functor.<em></em> If <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D_T%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}_T|\" class=\"latex\" title=\"A \\in |\\mathcal{C}_T|\" /> then <img src=\"http://s0.wp.com/latex.php?latex=G_T+%5Cmathrm%7Bid%7D_%7BA%7D%5E%7B%5Cmathcal%7BC%7D_T%7D+%3D+%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D+%3D+%5Cmathrm%7Bid%7D_%7BG_T+A%7D&bg=ffffff&fg=333333&s=0\" alt=\"G_T \\mathrm{id}_{A}^{\\mathcal{C}_T} = (\\eta_A)^\\ast = \\mathrm{id}_{TA} = \\mathrm{id}_{G_T A}\" class=\"latex\" title=\"G_T \\mathrm{id}_{A}^{\\mathcal{C}_T} = (\\eta_A)^\\ast = \\mathrm{id}_{TA} = \\mathrm{id}_{G_T A}\" />. If <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(A,B)\" /> and <img src=\"http://s0.wp.com/latex.php?latex=g+%5Cin+%5Cmathcal%7BC%7D_T%28B%2CC%29&bg=ffffff&fg=333333&s=0\" alt=\"g \\in \\mathcal{C}_T(B,C)\" class=\"latex\" title=\"g \\in \\mathcal{C}_T(B,C)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=G_T%28g+%5Cbullet+f%29+%3D+%28g%5E%5Cast+%5Ccirc+f%29%5E%5Cast+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast+%3D+G_Tg+%5Ccirc+G_Tf&bg=ffffff&fg=333333&s=0\" alt=\"G_T(g \\bullet f) = (g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast = G_Tg \\circ G_Tf\" class=\"latex\" title=\"G_T(g \\bullet f) = (g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast = G_Tg \\circ G_Tf\" />. We are only left to determine, for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2C+G_T+B%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A, G_T B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A, G_T B)\" />, a unique <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%5Cin+%5Cmathcal%7BC%7D_T%28F_T+A%2C+B%29&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp \\in \\mathcal{C}_T(F_T A, B)\" class=\"latex\" title=\"f^\\sharp \\in \\mathcal{C}_T(F_T A, B)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=G_T+f%5E%5Csharp+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"G_T f^\\sharp \\circ \\eta_A = f\" class=\"latex\" title=\"G_T f^\\sharp \\circ \\eta_A = f\" />: but the entire construction leads to the choice <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp = f\" class=\"latex\" title=\"f^\\sharp = f\" />! Indeed, <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T%28F_T+A%2C+B%29+%3D+%5Cmathcal%7BC%7D_T%28A%2CB%29+%3D+%5Cmathcal%7BC%7D%28A%2CTB%29+%3D+%5Cmathcal%7BC%7D%28A%2C+G_T+B%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T(F_T A, B) = \\mathcal{C}_T(A,B) = \\mathcal{C}(A,TB) = \\mathcal{C}(A, G_T B)\" class=\"latex\" title=\"\\mathcal{C}_T(F_T A, B) = \\mathcal{C}_T(A,B) = \\mathcal{C}(A,TB) = \\mathcal{C}(A, G_T B)\" />, and <img src=\"http://s0.wp.com/latex.php?latex=G_Tf+%5Ccirc+%5Ceta_A+%3D+f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"G_Tf \\circ \\eta_A = f^\\ast \\circ \\eta_A = f\" class=\"latex\" title=\"G_Tf \\circ \\eta_A = f^\\ast \\circ \\eta_A = f\" /> by the Kleisli laws. Observe that the functor <img src=\"http://s0.wp.com/latex.php?latex=G_T&bg=ffffff&fg=333333&s=0\" alt=\"G_T\" class=\"latex\" title=\"G_T\" /> is the one that does all the work, while the function <img src=\"http://s0.wp.com/latex.php?latex=F_T&bg=ffffff&fg=333333&s=0\" alt=\"F_T\" class=\"latex\" title=\"F_T\" /> is little more than a placeholder.</p>
<p>By our identification of adjunctions with adjunction quadruples (see the previous talk) we also get <img src=\"http://s0.wp.com/latex.php?latex=F_T+f+%3D+%28%5Ceta_B+%5Ccirc+f%29%5E%5Csharp+%3D+%5Ceta_B+%5Ccirc+f&bg=ffffff&fg=333333&s=0\" alt=\"F_T f = (\\eta_B \\circ f)^\\sharp = \\eta_B \\circ f\" class=\"latex\" title=\"F_T f = (\\eta_B \\circ f)^\\sharp = \\eta_B \\circ f\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,B)\" />, and <img src=\"http://s0.wp.com/latex.php?latex=%28%5Cvarepsilon_T%29_S+%3D+%28%5Cmathrm%7Bid%7D_%7BG_T+S%7D%5E%7B%5Cmathcal%7BC%7D%7D%29%5E%5Csharp+%3D+%5Cmathrm%7Bid%7D_%7BTS%7D+%5Cin+%5Cmathcal%7BC%7D%28G_TF_TS%2C+TS%29+%3D+%5Cmathcal%7BC%7D_T%28F_TG_TS%2C+S%29&bg=ffffff&fg=333333&s=0\" alt=\"(\\varepsilon_T)_S = (\\mathrm{id}_{G_T S}^{\\mathcal{C}})^\\sharp = \\mathrm{id}_{TS} \\in \\mathcal{C}(G_TF_TS, TS) = \\mathcal{C}_T(F_TG_TS, S)\" class=\"latex\" title=\"(\\varepsilon_T)_S = (\\mathrm{id}_{G_T S}^{\\mathcal{C}})^\\sharp = \\mathrm{id}_{TS} \\in \\mathcal{C}(G_TF_TS, TS) = \\mathcal{C}_T(F_TG_TS, S)\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=S+%5Cin+%7C%5Cmathcal%7BC%7D_T%7C+%3D+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"S \\in |\\mathcal{C}_T| = |\\mathcal{C}|\" class=\"latex\" title=\"S \\in |\\mathcal{C}_T| = |\\mathcal{C}|\" />.</p>
<p>Kleisli’s solution is not the only one, but just one among many: and, in a sense that will be clear later, the “simplest” one. Another solution was constructed by Eilenberg and Moore, and is based on a completely different approach: instead of keeping the objects and specializing the morphisms, one expands the objects and redefines the morphisms.</p>
<p><strong>Definition 6.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> be a category and let <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> be a monad on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />.</p>
<ol>
<li>A <em><img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebra</em> on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> is a pair <img src=\"http://s0.wp.com/latex.php?latex=a+%3D+%28A%2Ca%29&bg=ffffff&fg=333333&s=0\" alt=\"a = (A,a)\" class=\"latex\" title=\"a = (A,a)\" /> where <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> is an object in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=a+%3A+TA+%5Cto+A&bg=ffffff&fg=333333&s=0\" alt=\"a : TA \\to A\" class=\"latex\" title=\"a : TA \\to A\" /> is such that <img src=\"http://s0.wp.com/latex.php?latex=a+%5Ccirc+%5Ceta_A+%3D+%5Cmathrm%7Bid%7D_A&bg=ffffff&fg=333333&s=0\" alt=\"a \\circ \\eta_A = \\mathrm{id}_A\" class=\"latex\" title=\"a \\circ \\eta_A = \\mathrm{id}_A\" /> and <img src=\"http://s0.wp.com/latex.php?latex=a+%5Ccirc+%5Cmu_A+%3D+a+%5Ccirc+Ta&bg=ffffff&fg=333333&s=0\" alt=\"a \\circ \\mu_A = a \\circ Ta\" class=\"latex\" title=\"a \\circ \\mu_A = a \\circ Ta\" />.</li>
<li>A morphism of <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras from a <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebra <img src=\"http://s0.wp.com/latex.php?latex=a+%3D+%28A%2Ca%29&bg=ffffff&fg=333333&s=0\" alt=\"a = (A,a)\" class=\"latex\" title=\"a = (A,a)\" /> to a <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebra <img src=\"http://s0.wp.com/latex.php?latex=b+%3D+%28B%2Cb%29&bg=ffffff&fg=333333&s=0\" alt=\"b = (B,b)\" class=\"latex\" title=\"b = (B,b)\" /> is an arrow <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,B)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=b+%5Ccirc+Tf+%3D+f+%5Ccirc+a&bg=ffffff&fg=333333&s=0\" alt=\"b \\circ Tf = f \\circ a\" class=\"latex\" title=\"b \\circ Tf = f \\circ a\" />.</li>
<li>The category of <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras on <img src=\"http://s0.wp.com/latex.php?latex=C&bg=ffffff&fg=333333&s=0\" alt=\"C\" class=\"latex\" title=\"C\" /> is the category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D%5ET&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}^T\" class=\"latex\" title=\"\\mathcal{C}^T\" /> which has <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras as objects, morphisms of <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras as morphisms, and where identities and composition are defined as in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />.</li>
</ol>
<p>If <img src=\"http://s0.wp.com/latex.php?latex=T%3DM&bg=ffffff&fg=333333&s=0\" alt=\"T=M\" class=\"latex\" title=\"T=M\" /> is the free monoid construction, then an <img src=\"http://s0.wp.com/latex.php?latex=M&bg=ffffff&fg=333333&s=0\" alt=\"M\" class=\"latex\" title=\"M\" />-algebra is a function <img src=\"http://s0.wp.com/latex.php?latex=a+%3A+A%5E%5Cast+%5Cto+A&bg=ffffff&fg=333333&s=0\" alt=\"a : A^\\ast \\to A\" class=\"latex\" title=\"a : A^\\ast \\to A\" /> such that</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=a%5Bx%5D+%3D+x&bg=ffffff&fg=333333&s=0\" alt=\"a[x] = x\" class=\"latex\" title=\"a[x] = x\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=x+%5Cin+A&bg=ffffff&fg=333333&s=0\" alt=\"x \\in A\" class=\"latex\" title=\"x \\in A\" />, and</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=a%5Bu%5E1_1+%5Ccdots+u%5E1_%7Bn_1%7D+%5Ccdots+u%5Em_1+%5Ccdots+u%5Em_%7Bn_m%7D%5D+%3D+a%5Ba%5Bu%5E1_1+%5Ccdots+u%5E1_%7Bn_1%7D%5D+%5Ccdots+a%5Bu%5Em_1+%5Ccdots+u%5Em_%7Bn_m%7D%5D%5D&bg=ffffff&fg=333333&s=0\" alt=\"a[u^1_1 \\cdots u^1_{n_1} \\cdots u^m_1 \\cdots u^m_{n_m}] = a[a[u^1_1 \\cdots u^1_{n_1}] \\cdots a[u^m_1 \\cdots u^m_{n_m}]]\" class=\"latex\" title=\"a[u^1_1 \\cdots u^1_{n_1} \\cdots u^m_1 \\cdots u^m_{n_m}] = a[a[u^1_1 \\cdots u^1_{n_1}] \\cdots a[u^m_1 \\cdots u^m_{n_m}]]\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=u%5E1_1%2C+%5Cldots%2C+u%5E1_%7Bn_1%7D%2C+%5Cldots%2C+u%5Em_1%2C+%5Cldots%2C+u%5Em_%7Bn_m%7D+%5Cin+A&bg=ffffff&fg=333333&s=0\" alt=\"u^1_1, \\ldots, u^1_{n_1}, \\ldots, u^m_1, \\ldots, u^m_{n_m} \\in A\" class=\"latex\" title=\"u^1_1, \\ldots, u^1_{n_1}, \\ldots, u^m_1, \\ldots, u^m_{n_m} \\in A\" />.</li>
</ul>
<p>As <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" /> is a monad, for every object <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> of <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> there is a <em>free <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebra</em> <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%3D+%28TA%2C+%5Cmu_A%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A = (TA, \\mu_A)\" class=\"latex\" title=\"\\mu_A = (TA, \\mu_A)\" />, and every arrow <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,B)\" /> induces a morphism of free <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras <img src=\"http://s0.wp.com/latex.php?latex=Tf+%5Cin+%5Cmathcal%7BC%7D%5ET%28%5Cmu_A%2C+%5Cmu_B%29&bg=ffffff&fg=333333&s=0\" alt=\"Tf \\in \\mathcal{C}^T(\\mu_A, \\mu_B)\" class=\"latex\" title=\"Tf \\in \\mathcal{C}^T(\\mu_A, \\mu_B)\" />. Moreover, <em>any</em> <img src=\"http://s0.wp.com/latex.php?latex=a+%5Cin+%5Cmathcal%7BC%7D%28TA%2CA%29&bg=ffffff&fg=333333&s=0\" alt=\"a \\in \\mathcal{C}(TA,A)\" class=\"latex\" title=\"a \\in \\mathcal{C}(TA,A)\" /><em></em> is, by definition, also a morphism from <img src=\"http://s0.wp.com/latex.php?latex=%28TA%2C+%5Cmu_A%29&bg=ffffff&fg=333333&s=0\" alt=\"(TA, \\mu_A)\" class=\"latex\" title=\"(TA, \\mu_A)\" /> to <img src=\"http://s0.wp.com/latex.php?latex=%28TA%2C+a%29&bg=ffffff&fg=333333&s=0\" alt=\"(TA, a)\" class=\"latex\" title=\"(TA, a)\" /> in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D%5ET&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}^T\" class=\"latex\" title=\"\\mathcal{C}^T\" />.</p>
<p>This time, our plan is to construct an adjunction <img src=\"http://s0.wp.com/latex.php?latex=%28F%5ET%2C+G%5ET%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"(F^T, G^T, \\eta, \\mu)\" class=\"latex\" title=\"(F^T, G^T, \\eta, \\mu)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=F%5ET+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D%5ET&bg=ffffff&fg=333333&s=0\" alt=\"F^T : \\mathcal{C} \\to \\mathcal{C}^T\" class=\"latex\" title=\"F^T : \\mathcal{C} \\to \\mathcal{C}^T\" />, <img src=\"http://s0.wp.com/latex.php?latex=G%5ET+%3A+%5Cmathcal%7BC%7D%5ET+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"G^T : \\mathcal{C}^T \\to \\mathcal{C}\" class=\"latex\" title=\"G^T : \\mathcal{C}^T \\to \\mathcal{C}\" />, <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+G%5ET+F%5ET&bg=ffffff&fg=333333&s=0\" alt=\"T = G^T F^T\" class=\"latex\" title=\"T = G^T F^T\" />, and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%3D+G%5ET+%5Cvarepsilon_%7BF%5ET+A%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A = G^T \\varepsilon_{F^T A}\" class=\"latex\" title=\"\\mu_A = G^T \\varepsilon_{F^T A}\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}|\" />. We do this as follows:</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=F%5ET+A+%3D+%5Cmu_A+%3D+%28TA%2C+%5Cmu_A%29&bg=ffffff&fg=333333&s=0\" alt=\"F^T A = \\mu_A = (TA, \\mu_A)\" class=\"latex\" title=\"F^T A = \\mu_A = (TA, \\mu_A)\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=F%5ET+f+%3D+Tf&bg=ffffff&fg=333333&s=0\" alt=\"F^T f = Tf\" class=\"latex\" title=\"F^T f = Tf\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=G%5ET+a+%3D+A&bg=ffffff&fg=333333&s=0\" alt=\"G^T a = A\" class=\"latex\" title=\"G^T a = A\" /> if <img src=\"http://s0.wp.com/latex.php?latex=a+%3A+TA+%5Cto+A&bg=ffffff&fg=333333&s=0\" alt=\"a : TA \\to A\" class=\"latex\" title=\"a : TA \\to A\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=G%5ET+f+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"G^T f = f\" class=\"latex\" title=\"G^T f = f\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon%5ET_a+%3D+a&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon^T_a = a\" class=\"latex\" title=\"\\varepsilon^T_a = a\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=a+%3D+%28A%2Ca%29+%5Cin+%7C%5Cmathcal%7BC%7D%5ET%7C&bg=ffffff&fg=333333&s=0\" alt=\"a = (A,a) \\in |\\mathcal{C}^T|\" class=\"latex\" title=\"a = (A,a) \\in |\\mathcal{C}^T|\" />.</li>
</ul>
<p>Then clearly <img src=\"http://s0.wp.com/latex.php?latex=G%5ET+F%5ET+%3D+T&bg=ffffff&fg=333333&s=0\" alt=\"G^T F^T = T\" class=\"latex\" title=\"G^T F^T = T\" />, while naturality of <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon\" class=\"latex\" title=\"\\varepsilon\" /> follows from the properties of free <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras with respect to <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebra morphisms. In addition, if <img src=\"http://s0.wp.com/latex.php?latex=S+%3D+a+%3D+%28A%2Ca%29+%5Cin+%7C%5Cmathcal%7BC%7D%5ET%7C&bg=ffffff&fg=333333&s=0\" alt=\"S = a = (A,a) \\in |\\mathcal{C}^T|\" class=\"latex\" title=\"S = a = (A,a) \\in |\\mathcal{C}^T|\" /> then <img src=\"http://s0.wp.com/latex.php?latex=G%5ET+%5Cvarepsilon%5ET_S+%5Ccirc+%5Ceta_%7BG%5ET+S%7D+%3D+a+%5Ccirc+%5Ceta_A+%3D+%5Cmathrm%7Bid%7D_%7BG%5ET+S%7D&bg=ffffff&fg=333333&s=0\" alt=\"G^T \\varepsilon^T_S \\circ \\eta_{G^T S} = a \\circ \\eta_A = \\mathrm{id}_{G^T S}\" class=\"latex\" title=\"G^T \\varepsilon^T_S \\circ \\eta_{G^T S} = a \\circ \\eta_A = \\mathrm{id}_{G^T S}\" />, and if <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%5Cmathrm%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"A \\in \\mathrm{C}\" class=\"latex\" title=\"A \\in \\mathrm{C}\" /> then <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon%5ET_%7BF%5ET+A%7D+%5Ccirc+F%5ET+%5Ceta_A+%3D+%5Cmu_A+%5Ccirc+T%5Ceta_A+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon^T_{F^T A} \\circ F^T \\eta_A = \\mu_A \\circ T\\eta_A \\mathrm{id}_{TA}\" class=\"latex\" title=\"\\varepsilon^T_{F^T A} \\circ F^T \\eta_A = \\mu_A \\circ T\\eta_A \\mathrm{id}_{TA}\" />. We thus have a full-featured adjunction: this time, <img src=\"http://s0.wp.com/latex.php?latex=F%5ET&bg=ffffff&fg=333333&s=0\" alt=\"F^T\" class=\"latex\" title=\"F^T\" /> is doing all the work, and <img src=\"http://s0.wp.com/latex.php?latex=G%5ET&bg=ffffff&fg=333333&s=0\" alt=\"G^T\" class=\"latex\" title=\"G^T\" /> is just a forgetful functor.</p>
<p><strong>Theorem 3.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> be a monad on a <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />. Identify the monad <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" /> with the corresponding Kleisli triple <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"T = (T, \\eta, (\\cdot)^\\ast)\" />. The Kleisli category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T\" class=\"latex\" title=\"\\mathcal{C}_T\" /> is equivalent to the full subcategory of <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D%5ET&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}^T\" class=\"latex\" title=\"\\mathcal{C}^T\" /> generated by the free <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras.</p>
<p><em>Proof:</em> Define a functor <img src=\"http://s0.wp.com/latex.php?latex=J+%3A+%5Cmathcal%7BC%7D_T+%5Cto+%5Cmathcal%7BC%7D%5ET&bg=ffffff&fg=333333&s=0\" alt=\"J : \\mathcal{C}_T \\to \\mathcal{C}^T\" class=\"latex\" title=\"J : \\mathcal{C}_T \\to \\mathcal{C}^T\" /> by setting <img src=\"http://s0.wp.com/latex.php?latex=JA+%3D+%5Cmu_A+%3D+%28TA%2C+%5Cmu_A%29&bg=ffffff&fg=333333&s=0\" alt=\"JA = \\mu_A = (TA, \\mu_A)\" class=\"latex\" title=\"JA = \\mu_A = (TA, \\mu_A)\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D_T%7C+%3D+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}_T| = |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}_T| = |\\mathcal{C}|\" />, and <img src=\"http://s0.wp.com/latex.php?latex=Jf+%3D+%5Cmu_B+%5Ccirc+Tf+%3D+f%5E%5Cast+%5Cin+%5Cmathcal%7BC%7D%5ET%28JA%2C+JB%29&bg=ffffff&fg=333333&s=0\" alt=\"Jf = \\mu_B \\circ Tf = f^\\ast \\in \\mathcal{C}^T(JA, JB)\" class=\"latex\" title=\"Jf = \\mu_B \\circ Tf = f^\\ast \\in \\mathcal{C}^T(JA, JB)\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29+%3D+%5Cmathcal%7BC%7D%28A%2C+TB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(A,B) = \\mathcal{C}(A, TB)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(A,B) = \\mathcal{C}(A, TB)\" />. Then <img src=\"http://s0.wp.com/latex.php?latex=J&bg=ffffff&fg=333333&s=0\" alt=\"J\" class=\"latex\" title=\"J\" /> is a faithful functor, because if <img src=\"http://s0.wp.com/latex.php?latex=f%2Cg+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f,g \\in \\mathcal{C}_T(A,B)\" class=\"latex\" title=\"f,g \\in \\mathcal{C}_T(A,B)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+%5Cmu_B+%5Ccirc+%5Ceta_%7BTB%7D+%5Ccirc+f+%3D+%5Cmu_B+%5Ccirc+Tf+%5Ccirc+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"f = \\mu_B \\circ \\eta_{TB} \\circ f = \\mu_B \\circ Tf \\circ \\eta_A\" class=\"latex\" title=\"f = \\mu_B \\circ \\eta_{TB} \\circ f = \\mu_B \\circ Tf \\circ \\eta_A\" /> and similarly <img src=\"http://s0.wp.com/latex.php?latex=g+%3D+%5Cmu_B+%5Ccirc+%5Ceta_%7BTB%7D+%5Ccirc+g+%3D+%5Cmu_B+%5Ccirc+Tg+%5Ccirc+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"g = \\mu_B \\circ \\eta_{TB} \\circ g = \\mu_B \\circ Tg \\circ \\eta_A\" class=\"latex\" title=\"g = \\mu_B \\circ \\eta_{TB} \\circ g = \\mu_B \\circ Tg \\circ \\eta_A\" />, so that <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+g&bg=ffffff&fg=333333&s=0\" alt=\"f = g\" class=\"latex\" title=\"f = g\" /> if <img src=\"http://s0.wp.com/latex.php?latex=Jf+%3D+Jg&bg=ffffff&fg=333333&s=0\" alt=\"Jf = Jg\" class=\"latex\" title=\"Jf = Jg\" />. But <img src=\"http://s0.wp.com/latex.php?latex=J&bg=ffffff&fg=333333&s=0\" alt=\"J\" class=\"latex\" title=\"J\" /> is also full, because if <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+%28TA%2C+%5Cmu_A%29+%5Cto+%28TB%2C+%5Cmu_B%29&bg=ffffff&fg=333333&s=0\" alt=\"f : (TA, \\mu_A) \\to (TB, \\mu_B)\" class=\"latex\" title=\"f : (TA, \\mu_A) \\to (TB, \\mu_B)\" /> is a morphism of free <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras, then from the laws of monads follows that <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+J%28f+%5Ccirc+%5Ceta_A%29&bg=ffffff&fg=333333&s=0\" alt=\"f = J(f \\circ \\eta_A)\" class=\"latex\" title=\"f = J(f \\circ \\eta_A)\" />. <img src=\"http://s0.wp.com/latex.php?latex=%5CBox&bg=ffffff&fg=333333&s=0\" alt=\"\\Box\" class=\"latex\" title=\"\\Box\" /></p>
<p>But things get even more interesting than this! Let <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> be a monad: let us consider <em>all</em> the adjunctions <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> that generate <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />. What can be a <em>morphism</em> of such adjunctions? First, if <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> is a solution with <img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"F : \\mathcal{C} \\to \\mathcal{D}\" class=\"latex\" title=\"F : \\mathcal{C} \\to \\mathcal{D}\" />, and <img src=\"http://s0.wp.com/latex.php?latex=%28F%27%2C+G%27%2C+%5Ceta%2C+%5Cvarepsilon%27%29&bg=ffffff&fg=333333&s=0\" alt=\"(F', G', \\eta, \\varepsilon')\" class=\"latex\" title=\"(F', G', \\eta, \\varepsilon')\" /> is a solution with <img src=\"http://s0.wp.com/latex.php?latex=F%27+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D%27&bg=ffffff&fg=333333&s=0\" alt=\"F' : \\mathcal{C} \\to \\mathcal{D}'\" class=\"latex\" title=\"F' : \\mathcal{C} \\to \\mathcal{D}'\" />, we may consider a functor <img src=\"http://s0.wp.com/latex.php?latex=L+%3A+%5Cmathcal%7BD%7D+%5Cto+%5Cmathcal%7BD%27%7D&bg=ffffff&fg=333333&s=0\" alt=\"L : \\mathcal{D} \\to \\mathcal{D'}\" class=\"latex\" title=\"L : \\mathcal{D} \\to \\mathcal{D'}\" /> as a morphism from <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> to <img src=\"http://s0.wp.com/latex.php?latex=%28F%27%2C+G%27%2C+%5Ceta%2C+%5Cvarepsilon%27%29&bg=ffffff&fg=333333&s=0\" alt=\"(F', G', \\eta, \\varepsilon')\" class=\"latex\" title=\"(F', G', \\eta, \\varepsilon')\" />. Next, we want that the equalities <img src=\"http://s0.wp.com/latex.php?latex=GF+%3D+T+%3D+G%27F%27&bg=ffffff&fg=333333&s=0\" alt=\"GF = T = G'F'\" class=\"latex\" title=\"GF = T = G'F'\" /> are not affected by mid-way application of <img src=\"http://s0.wp.com/latex.php?latex=L&bg=ffffff&fg=333333&s=0\" alt=\"L\" class=\"latex\" title=\"L\" />: this translates into the two conditions <img src=\"http://s0.wp.com/latex.php?latex=L+%5Ccirc+F+%3D+F%27&bg=ffffff&fg=333333&s=0\" alt=\"L \\circ F = F'\" class=\"latex\" title=\"L \\circ F = F'\" /> and <img src=\"http://s0.wp.com/latex.php?latex=G%27+%5Ccirc+L+%3D+G&bg=ffffff&fg=333333&s=0\" alt=\"G' \\circ L = G\" class=\"latex\" title=\"G' \\circ L = G\" />. Finally, as the previous point yields <img src=\"http://s0.wp.com/latex.php?latex=LFG+%3D+F%27G%27L&bg=ffffff&fg=333333&s=0\" alt=\"LFG = F'G'L\" class=\"latex\" title=\"LFG = F'G'L\" />, we want that <img src=\"http://s0.wp.com/latex.php?latex=L&bg=ffffff&fg=333333&s=0\" alt=\"L\" class=\"latex\" title=\"L\" /> does not interfere with the counits: that is, <img src=\"http://s0.wp.com/latex.php?latex=L%5Cvarepsilon+%3D+%5Cvarepsilon%27_L&bg=ffffff&fg=333333&s=0\" alt=\"L\\varepsilon = \\varepsilon'_L\" class=\"latex\" title=\"L\\varepsilon = \\varepsilon'_L\" />.</p>
<p><strong>Definition 7.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> be a monad on a category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> and let <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" />, <img src=\"http://s0.wp.com/latex.php?latex=%28F%27%2C+G%27%2C+%5Ceta%2C+%5Cvarepsilon%27%29&bg=ffffff&fg=333333&s=0\" alt=\"(F', G', \\eta, \\varepsilon')\" class=\"latex\" title=\"(F', G', \\eta, \\varepsilon')\" /> be two adjunctions that generate <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />, with <img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"F : \\mathcal{C} \\to \\mathcal{D}\" class=\"latex\" title=\"F : \\mathcal{C} \\to \\mathcal{D}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=F%27+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D%27&bg=ffffff&fg=333333&s=0\" alt=\"F' : \\mathcal{C} \\to \\mathcal{D}'\" class=\"latex\" title=\"F' : \\mathcal{C} \\to \\mathcal{D}'\" />, respectively. A <em><img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-preserving functor</em> from <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> to <img src=\"http://s0.wp.com/latex.php?latex=%28F%27%2C+G%27%2C+%5Ceta%2C+%5Cvarepsilon%27%29&bg=ffffff&fg=333333&s=0\" alt=\"(F', G', \\eta, \\varepsilon')\" class=\"latex\" title=\"(F', G', \\eta, \\varepsilon')\" /> is a functor <img src=\"http://s0.wp.com/latex.php?latex=L+%3A+%5Cmathcal%7BD%7D+%5Cto+%5Cmathcal%7BD%7D%27&bg=ffffff&fg=333333&s=0\" alt=\"L : \\mathcal{D} \\to \\mathcal{D}'\" class=\"latex\" title=\"L : \\mathcal{D} \\to \\mathcal{D}'\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=L+%5Ccirc+F+%3D+F%27&bg=ffffff&fg=333333&s=0\" alt=\"L \\circ F = F'\" class=\"latex\" title=\"L \\circ F = F'\" />, <img src=\"http://s0.wp.com/latex.php?latex=G%27+%5Ccirc+L+%3D+G&bg=ffffff&fg=333333&s=0\" alt=\"G' \\circ L = G\" class=\"latex\" title=\"G' \\circ L = G\" />, and <img src=\"http://s0.wp.com/latex.php?latex=L%5Cvarepsilon+%3D+%5Cvarepsilon%27_L&bg=ffffff&fg=333333&s=0\" alt=\"L\\varepsilon = \\varepsilon'_L\" class=\"latex\" title=\"L\\varepsilon = \\varepsilon'_L\" />.</p>
<p>It is straightforward to see that <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-generating adjunctions together with <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-preserving functors form a category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathrm%7BAdj%7D%28T%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathrm{Adj}(T)\" class=\"latex\" title=\"\\mathrm{Adj}(T)\" />: composition is provided by the usual composition of functors, while the identity of <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathrm%7BAdj%7D%28T%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathrm{Adj}(T)\" class=\"latex\" title=\"\\mathrm{Adj}(T)\" /> is the identity functor of <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{D}\" class=\"latex\" title=\"\\mathcal{D}\" /> if <img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"F : \\mathcal{C} \\to \\mathcal{D}\" class=\"latex\" title=\"F : \\mathcal{C} \\to \\mathcal{D}\" />.</p>
<p>To confirm that our intuition is correct, let us verify that <img src=\"http://s0.wp.com/latex.php?latex=J&bg=ffffff&fg=333333&s=0\" alt=\"J\" class=\"latex\" title=\"J\" /> satisfies the three given equations:</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=J+F_T+A+%3D+JA+%3D+%28T_A%2C+%5Cmu_A%29+%3D+F%5ET+A&bg=ffffff&fg=333333&s=0\" alt=\"J F_T A = JA = (T_A, \\mu_A) = F^T A\" class=\"latex\" title=\"J F_T A = JA = (T_A, \\mu_A) = F^T A\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=J+F_T+f+%3D+%5Cmu_B+%5Ccirc+T%28%5Ceta_B+%5Ccirc+f%29+%3D+%5Cmu_B+%5Ccirc+T%5Ceta_B+%5Ccirc+Tf+%3D+%5Cmathrm%7Bid%7D_%7BTB%7D+%5Ccirc+Tf+%3D+F%5ETf&bg=ffffff&fg=333333&s=0\" alt=\"J F_T f = \\mu_B \\circ T(\\eta_B \\circ f) = \\mu_B \\circ T\\eta_B \\circ Tf = \\mathrm{id}_{TB} \\circ Tf = F^Tf\" class=\"latex\" title=\"J F_T f = \\mu_B \\circ T(\\eta_B \\circ f) = \\mu_B \\circ T\\eta_B \\circ Tf = \\mathrm{id}_{TB} \\circ Tf = F^Tf\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=G%5ET+J+A+%3D+G%5ET+%28TA%2C+%5Cmu_A%29+%3D+TA+%3D+G_T+A&bg=ffffff&fg=333333&s=0\" alt=\"G^T J A = G^T (TA, \\mu_A) = TA = G_T A\" class=\"latex\" title=\"G^T J A = G^T (TA, \\mu_A) = TA = G_T A\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=G%5ET+J+f+%3D+G%5ET+%28%5Cmu_B+%5Ccirc+Tf%29+%3D+%5Cmu_B+%5Ccirc+Tf+%3D+f%5E%5Cast+%3D+G_T+f&bg=ffffff&fg=333333&s=0\" alt=\"G^T J f = G^T (\\mu_B \\circ Tf) = \\mu_B \\circ Tf = f^\\ast = G_T f\" class=\"latex\" title=\"G^T J f = G^T (\\mu_B \\circ Tf) = \\mu_B \\circ Tf = f^\\ast = G_T f\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=J%28%5Cvarepsilon_T%29_S+%3D+J%5Cmathrm%7Bid%7D_%7BTS%7D%3D+%5Cmu_S+%5Ccirc+T%5Cmathrm%7Bid%7D_%7BTS%7D+%3D+%5Cmu_S+%3D+%5Cvarepsilon%5ET_%7B%28TS%2C+%5Cmu_S%29%7D+%3D+%5Cvarepsilon%5ET_%7BJS%7D&bg=ffffff&fg=333333&s=0\" alt=\"J(\\varepsilon_T)_S = J\\mathrm{id}_{TS}= \\mu_S \\circ T\\mathrm{id}_{TS} = \\mu_S = \\varepsilon^T_{(TS, \\mu_S)} = \\varepsilon^T_{JS}\" class=\"latex\" title=\"J(\\varepsilon_T)_S = J\\mathrm{id}_{TS}= \\mu_S \\circ T\\mathrm{id}_{TS} = \\mu_S = \\varepsilon^T_{(TS, \\mu_S)} = \\varepsilon^T_{JS}\" />.</li>
</ul>
<p><strong>Theorem 4.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> be a monad. Then the Kleisli adjunction is the initial object of <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathrm%7BAdj%7D%28T%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathrm{Adj}(T)\" class=\"latex\" title=\"\\mathrm{Adj}(T)\" />, the Eilenberg-Moore adjunction is the final object. In particular, <img src=\"http://s0.wp.com/latex.php?latex=J&bg=ffffff&fg=333333&s=0\" alt=\"J\" class=\"latex\" title=\"J\" /> is the only arrow in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathrm%7BAdj%7D%28T%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathrm{Adj}(T)\" class=\"latex\" title=\"\\mathrm{Adj}(T)\" /> from the former to the latter.</p>
<p><em>Proof:</em> If <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> is the Kleisli adjunction, then the only choice for <img src=\"http://s0.wp.com/latex.php?latex=L&bg=ffffff&fg=333333&s=0\" alt=\"L\" class=\"latex\" title=\"L\" /> is <img src=\"http://s0.wp.com/latex.php?latex=LA+%3D+F%27A&bg=ffffff&fg=333333&s=0\" alt=\"LA = F'A\" class=\"latex\" title=\"LA = F'A\" /> and <img src=\"http://s0.wp.com/latex.php?latex=Lf+%3D+%5Cvarepsilon%27_%7BF%27B%7D+%5Ccirc+F%27+f&bg=ffffff&fg=333333&s=0\" alt=\"Lf = \\varepsilon'_{F'B} \\circ F' f\" class=\"latex\" title=\"Lf = \\varepsilon'_{F'B} \\circ F' f\" />. If <img src=\"http://s0.wp.com/latex.php?latex=%28F%27%2C+G%27%2C+%5Ceta%2C+%5Cvarepsilon%27%29&bg=ffffff&fg=333333&s=0\" alt=\"(F', G', \\eta, \\varepsilon')\" class=\"latex\" title=\"(F', G', \\eta, \\varepsilon')\" /> is the Eilenberg-Moore adjunction, then the only choice for <img src=\"http://s0.wp.com/latex.php?latex=L&bg=ffffff&fg=333333&s=0\" alt=\"L\" class=\"latex\" title=\"L\" /> is <img src=\"http://s0.wp.com/latex.php?latex=LS+%3D+%28GS%2C+G+%5Cvarepsilon_S%29&bg=ffffff&fg=333333&s=0\" alt=\"LS = (GS, G \\varepsilon_S)\" class=\"latex\" title=\"LS = (GS, G \\varepsilon_S)\" /> and <img src=\"http://s0.wp.com/latex.php?latex=Lf+%3D+Gf&bg=ffffff&fg=333333&s=0\" alt=\"Lf = Gf\" class=\"latex\" title=\"Lf = Gf\" />. <img src=\"http://s0.wp.com/latex.php?latex=%5CBox&bg=ffffff&fg=333333&s=0\" alt=\"\\Box\" class=\"latex\" title=\"\\Box\" /></p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/theorylunch.wordpress.com/885/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/theorylunch.wordpress.com/885/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=theorylunch.wordpress.com&blog=43735749&post=885&subd=theorylunch&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "92e03d16b542face905b39bb94f05733") (150 (20949 25792 498434) "http://kenta.blogspot.com/2013/06/sjhltpdo-unscope-symbol.html" "Ken T Takusagawa: [sjhltpdo] Unscope symbol" "noreply@blogger.com (Ken)" "Mon, 10 Jun 2013 08:49:00 +0000" "<p dir=\"ltr\"><code>let { foo = ... } in let { hide foo } in foo</code></p><p dir=\"ltr\">This should cause the compiler to signal an error.  We wish to assert that a certain symbol is not used within an inner scope, perhaps to avoid programmer typos of similar symbols.  \"hide foo\" can also be a statement in <code>do</code> notation.</p><p dir=\"ltr\">If we have <a href=\"http://kenta.blogspot.com/2013/04/isjnkupe-local-types-and-imports.html\">local imports</a>, then perhaps syntax like <code>let { import OUTER-SCOPE hiding (foo) }</code>, where <code>OUTER-SCOPE</code> is a new keyword.</p><p dir=\"ltr\">We could also hide everything in the outer scope except a few symbols.  <code>let { import OUTER-SCOPE(foo); import Prelude }</code>.</p>" nil nil "df2433ea452286105d65b846b31f5c96") (149 (20949 25792 498107) "http://winterkoninkje.dreamwidth.org/84469.html" "wren ng thornton: Dungeon World: Assassin class" nil "Sun, 09 Jun 2013 00:32:03 +0000" "<p>After far too long, I've finally found a new roleplaying group. We're using <a href=\"http://www.dungeon-world.com/\">Dungeon World</a>, a lightweight system I've never used before. It's a class-based system, which I've never been too fond of, but it does seem like it gets rid of most of the things I hate about class-based systems. The core book only gives the standard D&D-style classes, but they give some guidelines on making up your own classes. For my character I worked with the GM to come up with a new <a href=\"http://llama.freegeek.org/~wren/resources/blog/assassin.pdf\">Assassin</a> class which combines some of the traits of the Thief and the Fighter. I tried to make sure it's balanced against the other classes and doesn't obviate the Thief/Fighter, but not having used DW before it's hard to be sure. If you've used DW and have any comments, I'd be interested in hearing them.</p>
<p><i>Edit:</i> I've posted a new version which adjusts the damage option for the Death Dealer and Assassin's Strike moves. Also included is a discussion about how different ways of doing DD/AS would affect DPS, which is necessary for doing a fair comparison against other classes. If you run a game with this class, let me know how it goes.</p><br /><br /><img src=\"http://www.dreamwidth.org/tools/commentcount?user=winterkoninkje&ditemid=84469\" alt=\"comment count unavailable\" height=\"12\" style=\"vertical-align: middle;\" width=\"30\" /> comments" nil nil "677779af46b7f0a7a41798fc7f4bc722") (148 (20949 25792 497725) "http://joyful.com/blog/2013-06-08-zwiki-styling.html" "Simon Michael: Zwiki styling" nil "Sat, 08 Jun 2013 19:15:00 +0000" "<div style=\"font-style: italic;\">June  8, 2013</div>
<h2>Zwiki styling</h2>
<p>
</p><p><a href=\"http://joyful.com/2013-06-07-git-hooks-for-site-updates..html\">Yesterday</a>.</p>
<p>Next backlog item: <a href=\"https://trello.com/card/5127f6bb0698a36663002981/16\">style the wiki more like hledger.org</a>.</p>
<p>The wiki software is my own <a href=\"http://zwiki.org\">Zwiki</a> engine. I haven’t skinned a zwiki for a few years, but with the docs (<a href=\"http://zwiki.org/CustomizingAppearance\">CustomizingAppearance</a>, <a href=\"http://zwiki.org/QuickReference#skin-templates\">QuickReference -> skin templates</a>, <a href=\"http://zwiki.org/zwikidir/skins/zwiki\">standard templates</a>) plus experience, it went pretty smoothly.</p>
<p>Zwiki config changes at this point:</p>
<ul>
<li>pasted the standard maintemplate.pt into a Page Template with the same name in the wiki folder, with the hledger.org stylesheet and nav buttons added (in the head and body respectively)</li>
<li>added a style override to give the <code>#content</code> div a zero margin</li>
<li>renamed FrontPage to “hledger wiki”, and configured the new name in a <code>default_page</code> property on the wiki folder</li>
<li>disabled the icon in the zwiki page header by adding a <code>site_logo</code> folder property containing an empty html comment</li>
<li>committed a bugfix for a broken image border that was appearing in the rating form</li>
</ul>
<p>What didn’t work: rewording Zwiki’s “home” navigation link. My custom <code>links.pt</code> page template should do the trick, but it’s being ignored. This is unsatisfying, I suppose I will dig in and debug it, after a suitable cooling-off-and-reflection period.</p>
<p>Zope is still very impressive, and pleasing to use.</p>
<p>Here’s the <a href=\"http://hledger.org/wiki\">wiki</a>, now looking like part of hledger.org.</p>" nil nil "587c4c21b3bdb01689dda4bc38769898") (147 (20949 25792 497260) "http://joyful.com/blog/2013-06-07-git-hooks-for-site-updates.html" "Simon Michael: git pull hook, github service hook for quick site updates" nil "Sat, 08 Jun 2013 00:30:00 +0000" "<div style=\"font-style: italic;\">June  8, 2013</div>
<h2>git pull hook, github service hook for quick site updates</h2>
<p>
</p><p>Finished the hledger.org updating task begun <a href=\"http://joyful.com/2013-06-06-blog-tinkering-hledger.org.html\">yesterday</a>. There were a few parts to this.</p>
<p>I added an executable `.git/hooks/post-merge’ script in the website repo:</p>
<pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span class=\"co\">#!/bin/sh</span>
<span class=\"co\">#</span>
<span class=\"co\"># Rebuild the website after a pull.</span>
<span class=\"kw\">exec</span> make site</code></pre>
<p>Now it runs <code>make site</code> (rebuilding the hakyll script and any changed site content as necessary) after a successful git pull to this repo.</p>
<p>Then I configured a github service hook, using my setup for ledger-cli.org as a guide. Added another <a href=\"http://hub.darcs.net/simon/github-listener\">github listener</a> daemon to <code>/etc/supervisord.conf</code>:</p>
<pre><code>[program:hledger.org-webhook]
command=/src/github-listener/github-listener-yesod 10000 'sudo -u simon git pull'
directory=/src/hledger.org
priority=3
redirect_stderr=true
autostart=true
autorestart=true
environment=LANG=\"en_US.UTF-8\"</code></pre>
<p>activated it using <a href=\"http://supervisord.org\">supervisorctl</a>:</p>
<pre><code>supervisor> update
hledger.org-webhook: added process group
supervisor> status
...
hledger.org-webhook              RUNNING    pid 31379, uptime 0:00:02
...</code></pre>
<p>and configure a <a href=\"https://help.github.com/articles/post-receive-hooks\">webhook</a> in the hledger repo on github, posting to <code>http://hledger.org:10000/</code>. Now any change landing in the github repo causes an immediate update of hledger.org.</p>" nil nil "8b412f3327c0909169bf9d3852242f82") (146 (20949 25792 496799) "http://joyful.com/blog/2013-06-06-blog-tinkering-hledger.org.html" "Simon Michael: Blog tinkering, hledger.org" nil "Fri, 07 Jun 2013 01:00:00 +0000" "<div style=\"font-style: italic;\">June  7, 2013</div>
<h2>Blog tinkering, hledger.org</h2>
<p>
</p><h3 id=\"a-better-ghci-fix\">A better ghci fix</h3>
<p>I forgot to commit <a href=\"http://joyful.com/2013-06-05-ghci-fix.html\">last night’s ghci fix</a>, which is good because I <a href=\"https://github.com/simonmichael/hledger/commit/39f6ec9f04a5f077ac8e0f4036d81d5185c23c4a\">improved it</a> today, fixing the code duplication.</p>
<h3 id=\"blog-tinkering\">Blog tinkering</h3>
<p>Thanks to help from #hakyll, I spent some time figuring out how to safely update published blog posts without having them reappear as new on Planet Haskell. The problem seemed to be that I wasn’t setting a separate <code>updated</code> date, which caused the <code>published</code> date to change, which caused the post to reappear as new, at least in my feed reader.</p>
<p>Solution: Start blog posts with metadata like this:</p>
<pre><code>---
title:     6/6
author:    Simon Michael
published: 2013-06-06 16:00:00PDT
updated:   2013-06-06 17:00:00PDT
---</code></pre>
<h3 id=\"hledger.org\">hledger.org</h3>
<p>Worked on the next hledger backlog item, improving the website update process. Did some file cleanup and testing.</p>
<p>I found that I had broken hledger.org several days ago, when I gratuitously enhanced:</p>
<pre><code>RewriteRule ^/bugs?/?$   https://github.com/simonmichael/hledger/issues [L,NE]</code></pre>
<p>to:</p>
<pre><code>RewriteRule ^/(bugs|issues)?/?$   https://github.com/simonmichael/hledger/issues [L,NE]</code></pre>
<p>Doh. Fixed it:</p>
<pre><code>RewriteRule ^/(bugs?|issues)/?$   https://github.com/simonmichael/hledger/issues [L,NE]</code></pre>
<p>Next: yes, the cron job for updating the site is reporting an error - though it seems to successfully update the site all the same:</p>
<pre><code>From github.com:simonmichael/hledger
47ebc21..e87f492  master     -> origin/master
Updating 47ebc21..e87f492
Fast-forward
README.md |    2 +-
1 file changed, 1 insertion(+), 1 deletion(-)
cd site; ghc site.hs -L/usr/lib -package-db ~/src/joyful.com/cabal-dev/packages-*.conf
cd site; ./site build
Initialising...
Creating store...
Creating provider...
Running rules...
Checking for out-of-date items
Compiling
site: _site/README.html: commitBuffer: invalid argument (invalid character)
updated README.md
make: *** [site] Error 1</code></pre>
<p>Re-enabling <code>export LANG=en_US.UTF-8</code> in the Makefile seems to have fixed it. I have a non-ascii character in the site footer. Setting the LANG environment variable is the quick way to configure a locale, which used to be very much required to avoid encoding errors with GHC 6, but which I thought was less necessary with GHC 7. Perhaps not.</p>" nil nil "9600c2a5d128c8bf5478662f9b5ffee6") (145 (20949 25792 496059) "http://tomschrijvers.blogspot.com/2013/06/ppdp-13-last-call-for-papers.html" "Tom Schrijvers: PPDP '13: Last Call for Papers" "noreply@blogger.com (Tom Schrijvers)" "Thu, 06 Jun 2013 15:56:18 +0000" "<div style=\"text-align: left;\" dir=\"ltr\"><br />=====================================================================<br /><br />                        Last Call for papers<br />               15th International Symposium on<br />       Principles and Practice of Declarative Programming<br />                           PPDP 2013<br /><br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Special Issue of Science of Computer Programming (SCP)<br /><br />            Madrid, Spain, September 16-18, 2013<br />                 (co-located with LOPSTR 2013)<br /><br />              http://users.ugent.be/~tschrijv/PPDP2013/<br /><br />======================================================================<br /><br />PPDP 2013 is a forum that brings together researchers from the declarative<br />programming communities, including those working in the logic, constraint and<br />functional programming paradigms, but also embracing a variety of other<br />paradigms such as visual programming, executable specification languages,<br />database languages, and knowledge representation languages.<br /><br />The goal is to stimulate research in the use of logical formalisms and methods<br />for specifying, performing, and analysing computations, including mechanisms<br />for mobility, modularity, concurrency, object-orientation, security,<br />verification and static analysis. Papers related to the use of declarative<br />paradigms and tools in industry and education are especially solicited. Topics<br />of interest include, but are not limited to:<br /><br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Functional programming<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Logic programming<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Answer-set programming<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Functional-logic programming<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Declarative visual languages<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Constraint Handling Rules<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Parallel implementation and concurrency<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Monads, type classes and dependent type systems<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Declarative domain-specific languages<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Termination, resource analysis and the verification of declarative programs<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Transformation and partial evaluation of declarative languages<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Language extensions for security and tabulation<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Probabilistic modelling in a declarative language and modelling reactivity<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Memory management and the implementation of declarative systems<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Practical experiences and industrial application<br /><br />This year the conference will be co-located with the 23nd International<br />Symposium on Logic-Based Program Synthesis and Transformation (LOPSTR 2013) and<br />held in cooperation with ACM SIGPLAN.  The conference will be held in Madrid,<br />Spain. Previous symposia were held at Leuven (Belgium), Odense (Denmark),<br />Hagenberg (Austria), Coimbra (Portugal), Valencia (Spain), Wroclaw (Poland),<br />Venice (Italy), Lisboa (Portugal), Verona (Italy), Uppsala (Sweden), Pittsburgh<br />(USA), Florence (Italy), Montreal (Canada), and Paris (France).<br /><br />Papers must describe original work, be written and presented in English, and<br />must not substantially overlap with papers that have been published or that are<br />simultaneously submitted to a journal, conference, or workshop with refereed<br />proceedings. Work that already appeared in unpublished or informally published<br />workshop proceedings may be submitted (please contact the PC chair in case of<br />questions).  Proceedings will be published in the ACM International Conference<br />Proceedings Series.<br /><br /><br />After the symposium, a selection of the best papers will be invited to extend<br />their submissions in the light of the feedback solicited at the symposium.  The<br />papers are expected to include at least 30% extra material over and above the<br />PPDP version. Then, after another round of reviewing, these revised papers will<br />be published in a special issue of SCP with a target publication date by<br />Elsevier of 2014.<br /><br />Important Dates<br /><br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Abstract Submission: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">  </span>June 10, 2013<br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Paper submission: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">  </span>June 13, 2013<br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Notification: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">   </span>July 18, 2013<br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Camera-ready: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">   </span>August 4, 2013<br /><br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Symposium: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">   </span>September 16-18, 2013 <br /><br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Invites for SCP: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">  </span>October 2, 2013<br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Submission of SCP: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">  </span>December 11, 2013<br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Notification from SCP: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">  </span>February 22, 2014<br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Camera-ready for SCP: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">  </span>March 14, 2014<br /><br />Authors should submit an electronic copy of the paper (written in English) in<br />PDF.  Each submission must include on its first page the paper title; authors<br />and their affiliations; abstract; and three to four keywords. The keywords will<br />be used to assist us in selecting appropriate reviewers for the paper. Papers<br />should consist of no more than 12 pages, formatted following the ACM SIG<br />proceedings template (option 1). The 12 page limit must include references but<br />excludes well-marked appendices not intended for publication. Referees are not<br />required to read the appendices, and thus papers should be intelligible without<br />them.<br /><br />Program Committee<br /><br />Sergio Antoy               Portland State University, USA<br />Manuel Carro               IMDEA Software Institute, Spain<br />Iliano Cervesato           Carnegie Mellon University, Qatar<br />Agostino Dovier            Universita degli Studi di Udine, Italy<br />Maria Garcia de la Banda   Monash University, Australia<br />Ralf Hinze                 University of Oxford, UK<br />Yukiyoshi Kameyama         University of Tsukuba, Japan<br />Oleg Kiselyov              USA<br />Yanhong Annie Liu          State University of New York at Stony Brook, USA<br />Stefan Monnier             Universite de Montreal, Canada<br />Alan Mycroft               University of Cambrige, UK<br />Bruno C. d. S. Oliveira<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>   National University of Singapore, Singapore<br />Alberto Pettorossi         Universita di Roma Tor Vergata, Italy<br />Enrico Pontelli            New Mexico State University, USA<br />Kristoffer Rose            IBM Research, USA<br />Sukyoung Ryu               KAIST, South Korea<br />Vitor Santos Costa         University of Porto, Portugal<br />Torsten Schaub             University Potsdam, Germany<br />Tom Schrijvers             Ghent University, Belgium<br />Martin Sulzmann            Hochschule Karlsruhe, Germany<br />Wouter Swierstra           Universiteit Utrecht, The Netherlands<br />Tarmo Uustalu              Institute of Cybernetics, Estonia<br />Janis Voigtlaender         University of Bonn, Germany<br />Meng Wang                  Chalmers University of Technology, Sweden<br />Jan Wielemaker             Universiteit van Amsterdam, The Netherlands<br /><br />Program Chair<br /><br />    Tom Schrijvers<br />    Department of Applied Mathematics and Computer Science<br />    Ghent University<br />    9000 Gent, Belgium<br /><br />General Chair<br /><br />    Ricardo Pena<br />    Facultad de Informatica<br />    Universidad Complutense de Madrid<br />    28040 Madrid, Spain<br /><div><br /></div></div>" nil nil "b08992db795cb1bba13198d8e1942060") (144 (20949 15567 82991) "http://neilmitchell.blogspot.com/2013/06/building-llvm-using-shake.html" "Neil Mitchell: Building LLVM using Shake" "noreply@blogger.com (Neil Mitchell)" "Sat, 22 Jun 2013 21:01:00 +0000" "<i>Summary: You can now build LLVM using Shake, and a rebuild with nothing to do goes massively faster than make (0.8s vs 199s) and fractionally faster than Ninja (0.8s vs 0.9s).</i><br /><br />As of <a href=\"https://github.com/ndmitchell/shake\">Shake</a> 0.10.4 the <tt>shake</tt> tool can execute <a href=\"http://martine.github.io/ninja/\">Ninja</a> build files. <a href=\"http://llvm.org/\">LLVM</a> can be built with <a href=\"http://www.cmake.org/\">CMake</a>, and CMake can generate a Ninja build file, so you can compile LLVM with Shake. I've included the full steps I followed at the end of this post.<br /><br />The main thing I wanted to test was how fast a rebuild with nothing to do was using Shake vs Ninja, as Ninja prides itself on having \"a focus on speed\". When compiling LLVM on Windows with GCC, a nothing to do build using make takes 199s, Shake takes 0.8s and Ninja takes 0.9s. The CMake generator does not use one of the latest Ninja build features (the deps keyword), but if it did, Shake would be about 0.1s faster and Ninja would be at least 0.1s faster.<br /><br />Full builds with Shake and Ninja both take about the same time, but with anything higher than 2 CPUs the linker phase ends up contending heavily and the machine thrashes the disk, making robust measurements impossible. The solution would be to use <a href=\"http://neilmitchell.blogspot.co.uk/2013/02/summary-management-of-finite-resources.html\">finite resources</a> on the linkers, something that needs implementing in the CMake Ninja generator, and would then allow more CPUs to be used.<br /><br />Other than speed, why would you use Shake to compile LLVM?<br /><br /><ul><li>If you build with <tt>--report</tt> the file <tt>report.html</tt> will be generated. Open that report file and you can see numerous details about the build - how good the parallel utilisation was, what changed to cause what to rebuild, summary statistics, a dependency graph and more. See the Help page in any generated report for more details.</li><li>If you build with <tt>--progress</tt> the console titlebar will display a predicted completion time, how many seconds until your build completes. The predicted time will be fairly inaccurate the first time round, but future runs are influenced by recorded timings, and can produce useful guesses.</li><li>If your CPU has a preference for functional languages it will make the registers happier.</li></ul><br />Existing Ninja users may also be interested in <a href=\"https://github.com/ndmitchell/shake/blob/master/docs/Ninja.md\">a guide to running Ninja builds with Shake</a>, which gives a few more details on using Shake like Ninja.<br /><br /><b>Compiling LLVM with Shake</b><br /><br />These instructions are how I compiled LLVM with Shake, on Windows, with GCC. I didn't run into any significant problems, but there were two minor niggles I had to work though (both listed below). I compiled LLVM with make, then Ninja, then Shake, to check each phase as I went - but only the final Shake compile is actually necessary.<br /><br /><ul><li>Install Shake with <tt>cabal update && cabal install shake --global</tt>, if you are new to Haskell package installation, see <a href=\"https://github.com/ndmitchell/shake/blob/master/docs/Ninja.md#installing-shake\">here</a>.</li><li>Get LLVM and compile it with make, I followed the instructions at <tt>http://bencode.net/clangonwindows</tt>, which has disappeared in the last few days (I have emailed the web master to see where it went).</li><li>Install <a href=\"http://martine.github.io/ninja/\">Ninja</a>.</li><li>Run CMake over LLVM <a href=\"http://llvm.org/docs/CMake.html\">like this</a>, configuring with <tt>-G Ninja</tt>.</li><li>To build with Ninja I had to edit <tt>build.ninja</tt> line 17697 to delete <tt>lib/clang/3.4/lib/windows/libclang_rt.i386.a,</tt> which won't build on my system and isn't built at all by the make system - I suspect this is a tip/mingw issue. At this stage you can compile LLVM with Ninja.</li><li>Type <tt>touch tools/clang/lib/Basic/CMakeFiles/clang_revision_tag</tt> to create a dummy file. There is a Ninja rule to create such a file, but the rule is wrong since it doesn't actually produce the file, and Shake's sanity checking spots that.</li><li>Run <tt>shake -j2</tt> in the build directory. Come back later and you will have a build.</li><li>Run <tt>shake -j2</tt> again to enjoy the fast nothing to do build.</li></ul>" nil nil "4af6d2b2497aec80b9814659087428c8") (143 (20947 56086 995663) "http://winterkoninkje.dreamwidth.org/84727.html" "wren ng thornton: Bitties" nil "Wed, 03 Jul 2013 03:57:07 +0000" "<p>Just got back from <a href=\"http://www.cs.cornell.edu/Conferences/MFPS29/\">MFPS</a>-<a href=\"http://lii.rwth-aachen.de/lics/lics13/\">LICS</a>-<a href=\"http://csf2013.seas.harvard.edu/index.html\">CSF</a> saturday night. T'was the first LICS I've been to, and my first time in the deep south. I had fun overall. Definitely enjoyed the French Quarter with its narrower streets, delightful architecture, and other non-American features. And I ran into the Pride parade the day after arriving; I seem to have a knack for that ;)  The humidity was killer though.</p>
<p>The slides from my <a href=\"http://www.indiana.edu/~iulg/nlcs.html\">NLCS</a> talk are <a href=\"http://llama.freegeek.org/~wren/pubs/chiastic_nlcs2013.pdf\">available here</a>. I've been having some issues with my bibtex2html script, so they're not linked to on the publications page yet; but they will be once I get that issue fixed.</p>
<p>In less happy news, I got some bloodwork back today. Cholesterol is far far too high, and I'm getting into the pre-diabetic range for bloodsugar levels. So, I'm starting a major diet change in hopes of getting those under control. Apparently lack of protein is a big part of the problem (for me), which is ironic since most americans get far too much. Damn midwestern genes. Went grocery shopping today; it's profoundly difficult to get a 1::1 carbs-to-protein ratio as a vegetarian.</p><br /><br /><img src=\"http://www.dreamwidth.org/tools/commentcount?user=winterkoninkje&ditemid=84727\" alt=\"comment count unavailable\" height=\"12\" style=\"vertical-align: middle;\" width=\"30\" /> comments" nil nil "8d99624ed918906bbb4ced559b60a631") (142 (20947 56086 995286) "http://winterkoninkje.dreamwidth.org/83774.html" "wren ng thornton: Upcoming talk" nil "Wed, 03 Jul 2013 03:43:14 +0000" "<p>Next month I'll be giving a talk at the <a href=\"http://www.indiana.edu/~iulg/nlcs.html\">NLCS</a> workshop, on the chiastic lambda-calculi I first presented at NASSLLI 2010 (<a href=\"http://llama.freegeek.org/~wren/pubs/ccgjp_nasslli2010.pdf\">slides</a>[1]). After working out some of the metatheory for one of my quals, I gave more recent talks at our local PL Wonks and CLingDing seminars (<a href=\"http://llama.freegeek.org/~wren/pubs/chiastic_plwonks2013.pdf\">slides</a>). The NASSLLI talk was more about the linguistic motivations and the general idea, whereas the PLWonks/CLingDing talks were more about the formal properties of the calculus itself. For NLCS I hope to combine these threads a bit better— which has always been the challenge with this work.</p>
<p>NLCS is collocated with this year's <a href=\"http://lii.rwth-aachen.de/lics/lics13/\">LICS</a> (and MFPS and CSF). I'll also be around for LICS itself, and in town for MFPS though probably not attending. So if you're around, feel free to stop by and chat.</p>
<p>[1] N.B., the NASSLLI syntax is a bit different than the newer version: square brackets were used instead of angle brackets (the latter were chosen because they typeset better in general); juxtaposition was just juxtaposition rather than being made explicit; and the left- vs right-chiastic distinction was called chi vs ksi (however, it turns out that ksi already has an important meaning in type theory).</p>
<p><i>Edit 2013.07.02:</i> the slides are <a href=\"http://llama.freegeek.org/~wren/pubs/chiastic_nlcs2013.pdf\">available here</a>.</p><br /><br /><img src=\"http://www.dreamwidth.org/tools/commentcount?user=winterkoninkje&ditemid=83774\" alt=\"comment count unavailable\" height=\"12\" style=\"vertical-align: middle;\" width=\"30\" /> comments" nil nil "db8826ca76c6d2fb61f6a5ce5b33ab88") (141 (20947 56086 994717) "http://feedproxy.google.com/~r/ezyang/~3/zSgfaMODNkM/" "Edward Z. Yang: No grammar? No problem!" nil "Wed, 03 Jul 2013 02:17:02 +0000" "<div class=\"document\">
<p>One day, you’re strolling along fields of code, when suddenly you spot a syntax construct that you don’t understand.</p>
<p>Perhaps you’d ask your desk-mate, who’d tell you in an instant what it was.</p>
<p>Perhaps your programming toolchain can tell you. (Perhaps the IDE would you mouse over the construct, or you’re using Coq which let’s you <tt class=\"docutils literal\">Locate</tt> custom notations.)</p>
<p>Perhaps you’d pull up the manual (or, more likely, one of many tutorials) and scan through looking for the syntax construct in question.</p>
<p>But when all this fails, what is one to do?  What if the code in question is written in an internal language for a compiler, whose details have changed since it was last documented, for which the documentation is out of date?</p>
<p><em>No problem.</em> As long as you’re willing to roll up your sleeves and take a look at the source code of the compiler in question, you can frequently resolve your question for less effort than it would have taken to look up the syntax in the manual (and it’s guaranteed to be up-to-date too!)  The key is that  modern compilers all use parser generators, and the input to these are essentially executable specifications.</p>
<hr class=\"docutils\" />
<p>I’ll give two examples from GHC.  The first is from C--, GHC’s high-level assembly language. Consider this function:</p>
<pre class=\"literal-block\">INFO_TABLE_RET(stg_maskUninterruptiblezh_ret, RET_SMALL, W_ info_ptr)
return (P_ ret)
{
StgTSO_flags(CurrentTSO) =
%lobits32(
(TO_W_(StgTSO_flags(CurrentTSO))
| TSO_BLOCKEX)
& ~TSO_INTERRUPTIBLE
);
return (ret);
}
</pre>
<p>Some aspects of this definition are familiar to someone who has written C before, but there are some mysterious bits. For example, what does the <tt class=\"docutils literal\">return (P_ ret)</tt> mean in the preamble?</p>
<p>The first order of business is to find the relevant file.  When the code in question has very distinctive keywords (as this one does), a grep will often do the trick:</p>
<pre class=\"literal-block\">ezyang@javelin:~/Dev/ghc-clean/rts$ grep -R INFO_TABLE_RET ../compiler/
../compiler/cmm/CmmParse.y:INFO_TABLE_RET ( label, FRAME_TYPE, info_ptr, field1, ..., fieldN )
../compiler/cmm/CmmParse.y:        'INFO_TABLE_RET'{ L _ (CmmT_INFO_TABLE_RET) }
../compiler/cmm/CmmParse.y:        | 'INFO_TABLE_RET' '(' NAME ',' INT ')'
../compiler/cmm/CmmParse.y:        | 'INFO_TABLE_RET' '(' NAME ',' INT ',' formals0 ')'
../compiler/cmm/CmmParse.y:-- is.  That is, for an INFO_TABLE_RET we want the return convention,
../compiler/cmm/CmmLex.x:  | CmmT_INFO_TABLE_RET
../compiler/cmm/CmmLex.x:   ( \"INFO_TABLE_RET\",     CmmT_INFO_TABLE_RET ),
</pre>
<p>File extensions can also be dead giveaways; GHC uses a parser generator named Happy, and the file extension of Happy files is <tt class=\"docutils literal\">.y</tt>:</p>
<pre class=\"literal-block\">ezyang@javelin:~/Dev/ghc-clean/rts$ find ../compiler -name *.y
../compiler/cmm/CmmParse.y
../compiler/parser/ParserCore.y
</pre>
<p>From there, we can search the file for keywords or symbols (check for the string token name if a lexer is used; also, make sure to quote alphanumeric literals).  A symbol can show up in multiple places, as it does for return:</p>
<pre class=\"literal-block\">maybe_conv :: { Convention }
: {- empty -}        { NativeNodeCall }
| 'return'           { NativeReturn }
</pre>
<p>and:</p>
<pre class=\"literal-block\">stmt    :: { CmmParse () }
: ';'                                   { return () }
...
| 'goto' NAME ';'
{ do l <- lookupLabel $2; emit (mkBranch l) }
| 'return' '(' exprs0 ')' ';'
{ doReturn $3 }
</pre>
<p>Guessing from the names of the productions and the contexts, it seems more likely that <tt class=\"docutils literal\">maybe_conv</tt> is the relevant production. It is used here:</p>
<pre class=\"literal-block\">cmmproc :: { CmmParse () }
: info maybe_conv maybe_formals maybe_body
{ do ((entry_ret_label, info, stk_formals, formals), agraph) <-
getCodeR $ loopDecls $ do {
(entry_ret_label, info, stk_formals) <- $1;
formals <- sequence (fromMaybe [] $3);
$4;
return (entry_ret_label, info, stk_formals, formals) }
let do_layout = isJust $3
code (emitProcWithStackFrame $2 info
entry_ret_label stk_formals formals agraph
do_layout ) }
</pre>
<p>Now, if you really need to know <em>exactly</em> how it is lade out, you can go and checkout how <tt class=\"docutils literal\">emitProcWithStackFrame</tt> is implemented.  Alternately, you might hope there is a useful comment in the source file which explains what is up:</p>
<pre class=\"literal-block\">A stack frame is written like this:
INFO_TABLE_RET ( label, FRAME_TYPE, info_ptr, field1, ..., fieldN )
return ( arg1, ..., argM )
{
... code ...
}
where field1 ... fieldN are the fields of the stack frame (with types)
arg1...argN are the values returned to the stack frame (with types).
The return values are assumed to be passed according to the
NativeReturn convention.
</pre>
<hr class=\"docutils\" />
<p>The second example is for STG, which you can ask GHC to print out using <tt class=\"docutils literal\"><span class=\"pre\">-ddump-stg</span></tt>. Now, there is no parser for STG, so instead you’ll have to look at the <em>pretty-printer</em>. Not too difficult. Take this simple function:</p>
<pre class=\"literal-block\">Gnam.$WKST =
\\r [tpl_sl4 tpl_sl6]
case tpl_sl4 of tpl_sl8 {
__DEFAULT ->
case tpl_sl6 of tpl_sl9 {
__DEFAULT -> Gnam.KST [tpl_sl8 tpl_sl9];
};
};
</pre>
<p>Some aspects are familiar. But what does the <tt class=\"docutils literal\">\\r</tt> mean?</p>
<p>Once again, we have to find the relevant source file.  Since STG is printed out only when we pass the <tt class=\"docutils literal\"><span class=\"pre\">-ddump-stg</span></tt> flag, a good start is to trace the flag through the source code:</p>
<pre class=\"literal-block\">ezyang@javelin:~/Dev/ghc-clean/compiler$ grep -R ddump-stg .
./main/DynFlags.hs:  , Flag \"ddump-stg\"               (setDumpFlag Opt_D_dump_stg)
ezyang@javelin:~/Dev/ghc-clean/compiler$ grep -R Opt_D_dump_stg .
./main/DynFlags.hs:   | Opt_D_dump_stg
./main/DynFlags.hs:  , Flag \"ddump-stg\"               (setDumpFlag Opt_D_dump_stg)
./simplStg/SimplStg.lhs:        ; dumpIfSet_dyn dflags Opt_D_dump_stg \"STG syntax:\"
</pre>
<p>That’s a good sign! Popping open <tt class=\"docutils literal\">SimpleStg.lhs</tt> gives us:</p>
<pre class=\"literal-block\">; dumpIfSet_dyn dflags Opt_D_dump_stg \"STG syntax:\"
(pprStgBindings un_binds)
</pre>
<p>And the location of <tt class=\"docutils literal\">pprStgBindings</tt> (<tt class=\"docutils literal\">compiler/stgSyn/StgSyn.lhs</tt>) is in fact the ticket.</p>
<p>STG is pretty small, and as it turns out if you just do a quick scan of the file you’re likely to find what you need. But in case you don’t, you can still figure things out deliberately. Suppose we search for a quoted backslash:</p>
<pre class=\"literal-block\">pprStgExpr (StgLam bndrs body)
= sep [ char '\\\\' <+> ppr_list (map (pprBndr LambdaBind) bndrs)
<+> ptext (sLit \"->\"),
pprStgExpr body ]
where ppr_list = brackets . fsep . punctuate comma
...
-- general case
pprStgRhs (StgRhsClosure cc bi free_vars upd_flag srt args body)
= sdocWithDynFlags $ \\dflags ->
hang (hsep [if gopt Opt_SccProfilingOn dflags then ppr cc else empty,
pp_binder_info bi,
ifPprDebug (brackets (interppSP free_vars)),
char '\\\\' <> ppr upd_flag, pprMaybeSRT srt, brackets (interppSP args)])
4 (ppr body)
</pre>
<p>Which is it? As it turns out:</p>
<pre class=\"literal-block\">StgLam is used *only* during CoreToStg's work. Before CoreToStg has
finished it encodes (\\x -> e) as (let f = \\x -> e in f)
</pre>
<p>Since <tt class=\"docutils literal\"><span class=\"pre\">-ddump-stg</span></tt> is post-CoreToSTG, we must be looking at <tt class=\"docutils literal\">StgRhsClosure</tt>, and <tt class=\"docutils literal\">ppr upd_flag</tt> looks like the ticket.  <tt class=\"docutils literal\">r</tt> must be an <tt class=\"docutils literal\">upd_flag</tt>, whatever that is. An <tt class=\"docutils literal\">UpdateFlag</tt>, as it turns out:</p>
<pre class=\"literal-block\">data UpdateFlag = ReEntrant | Updatable | SingleEntry
instance Outputable UpdateFlag where
ppr u = char $ case u of
ReEntrant   -> 'r'
Updatable   -> 'u'
SingleEntry -> 's'
</pre>
<p>The <tt class=\"docutils literal\">r</tt> indicates the function is re-entrant! (Of course, as for what that means, you’ll have to consult other documentation.)</p>
<hr class=\"docutils\" />
<p>Of course, in an ideal world, all of this would be documented. But even if it is not, there is no reason why you can’t help yourself. If your codebase is as nice as GHC’s, there will be plenty of breadcrumbs and comments to help you out. I hope this gives some insight into one possible thought process when you encounter something you don’t know, and don’t know how to learn. (Of course, sometimes it’s just best to ignore it!)</p>
</div>
<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/zSgfaMODNkM\" height=\"1\" width=\"1\" />" nil nil "56bbf01a6602377366c5e22567f26e54") (140 (20947 56086 992802) "http://praisecurseandrecurse.blogspot.com/2013/07/the-polar-game-in-haskell-day-5-array-v.html" "Paul Potts: The Polar Game in Haskell, Day 5: Array v. List" "noreply@blogger.com (Paul Potts)" "Tue, 02 Jul 2013 23:25:00 +0000" "<p>So, a little more progress in learning me a Haskell: I've managed to implement the board using an immutable array. There's good news and bad news here. If you're an old hand at functional programming, you probably know all this and more, but I needed to do a little thinking on purely functional data structures. I have not really been satisfied with the amount of code necessary to manage my 2-D board in a list. I spent some time doodling some possible alternative implementation before concluding that purely functional data structures -- in which nodes are never mutated -- are hard. Anything I might be accustomed to doing with double or multiply-linked lists is pretty much a washout, since you can't ever share structure. In fact, I think one data structure I came up with might not be constructible at all without being able to mutate links between nodes. So I'm starting to understand why the tutorials all advise me to stick with lists.</p> <p>Nevertheless, this is a small problem, and efficiency is not my biggest concern, at least not in the learning phase. I wanted to figure out how to use an immutable array. The tutorials have not been very satisfying. They seem to assume that anything this trivial is too trivial to demonstrate. But here's what I did.</p> <p>First, the type of an array in Haskell encodes the number of dimensions and the node type, but not the size. You set that when you call the constructor. Here's a 2-D array type for my board:</p> <pre>type BoardArray = Array ( Int, Int ) Tile</pre> <p>I specified some bounds:</p> <pre>max_row :: Int<br />max_row = 3<br /><br />max_col :: Int<br />max_col = 23</pre> <p>And I should point out one of the fundamental problems with using arrays: it's very easy to kill your program by exceeding the array bounds. There is a similar problem with <b>head</b>, but when writing functions with pattern-matching and guards there are pretty accepted conventions for dealing with empty lists. I suppose one could use guard patterns on all array accesses, but it starts to seem a little silly.</p> <p>The next thing is that a given array works with some auxiliary types. The <b>//</b> operator takes an array and a list of tuples and builds a new array with updated content. The type of that list of tuples is this:</p> <pre>type TileAssocList = [ ( ( Int, Int ), Tile ) ]</pre> <p>For accessing multiple items in an array, the <b>range</b> method builds lists of indexing tuples. The syntax to range requires tuples of tuples, with the parentheses piling up, so I wrapped it up in a function:</p> <pre>make_2d_range :: Int -> Int -> Int -> Int -> [ ( Int, Int ) ]<br />make_2d_range y0 x0 y1 x1 = range ( ( y0, x0 ), ( y1, x1 ) )</pre> <p>So how does that work? It just iterates coordinates, permuting from higher indices to lower, like so:</p> <pre>*Main> make_range 0 0 0 1<br />[(0,0),(0,1)]<br /><br />*Main> make_range 0 0 1 3<br />[(0,0),(0,1),(0,2),(0,3),(1,0),(1,1),(1,2),(1,3)]</pre> <p>For this problem domain, I need to know how reversed ranges work. For example, when the penguin is facing West, I want to build a range and a list of tiles in reverse index order. Can range do that for me?</p> <pre>*Main> make_range 0 23 0 0<br />[]</pre> <p>Ah... no. I guess that would have been too easy. So I'll have to account for those cases specially. Here's a function to get the penguin's view out of a 2-D array of tiles, in the form of a tile association list I can use to create a freshly created \"modified\" array (it's not really modified, but a new one is created with the updates from that list applied):</p> <pre>view_array :: BoardArray -> Pos -> Dir -> TileAssocList<br />view_array board pos dir =<br />    let row = ( posY pos )<br />        col = ( posX pos )<br />        coord_list = case dir of<br />            East  -> if ( col == max_col )<br />                     then []<br />                     else make_2d_range row ( col + 1 ) row max_col<br />            South -> if ( row == max_row )<br />                     then []<br />                     else make_2d_range ( row + 1 ) col max_row col<br />            West ->  if ( col == 0 )<br />                     then []<br />                     else make_2d_range row 0 row ( col - 1 )<br />            North -> if ( row == 0 )<br />                     then []<br />                     else make_2d_range 0 col ( row - 1 ) col<br />        tile_assoc = zip coord_list ( map ( (!) board )<br />                                           coord_list )<br />    in case dir of<br />        East -> tile_assoc<br />        South -> tile_assoc<br />        West -> reverse tile_assoc<br />        North -> reverse tile_assoc</pre> <p>That's not so bad. The key to this function is the <b>!</b> operator -- this gets a tuple and an array and returns an element -- and I zip the elements up with their coordinate tuples. Note that a lot of the bulk of this function is handling the edge cases, because we don't want to apply an out-of-range coordinate tuple to <b>!</b>. There may still be a shorter, clearer implementation possible. By comparison, here's a list-of-lists version factored a bit using currying to make it as self-documenting as I could get it -- note the use of <b>id</b> to let me return a general function as <b>orient</b>. I'm sure it doesn't impress FP whizzes, but I'm kinda proud of it -- I feel like I'm starting to use Haskell a little more idiomatically:</p> <pre>view_list :: BoardList -> Pos -> Dir -> [Tile]<br />view_list board pos dir =<br />    let row = ( posY pos )<br />        col = ( posX pos )<br />        transposed = elem dir [ South, North ]<br />        reversed = elem dir [ West, North ]<br />        orient | reversed = reverse<br />               | otherwise = id<br />        trim = case dir of<br />            East -> drop ( col + 1 )<br />            South -> drop ( row + 1 )<br />            West -> take col<br />            North -> take row<br />        extract | transposed = ( transpose board ) !! col<br />                | otherwise = board !! row  <br />    in orient $ trim $ extract</pre> <p>Testing <b>view_list</b>:</p> <pre>*Main> view_list init_board_list (Pos 0 0) East<br />[Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,<br />Empty,Empty,Tree,Empty,Empty,Empty,Empty,Empty,Ice_Block,Empty,Empty]<br /><br />*Main> view_array init_board_array (Pos 0 0) East<br />[((0,1),Empty),((0,2),Empty),((0,3),Empty),((0,4),Empty),<br />((0,5),Empty),((0,6),Empty),((0,7),Empty),((0,8),Empty),<br />((0,9),Empty),((0,10),Empty),((0,11),Empty),((0,12),Empty),<br />((0,13),Empty),((0,14),Empty),((0,15),Tree),((0,16),Empty),<br />((0,17),Empty),((0,18),Empty),((0,19),Empty),((0,20),Empty),<br />((0,21),Ice_Block),((0,22),Empty),((0,23),Empty)]</pre> <p>Now we can write <b>step</b>. Here's the list version I've presented before:</p> <pre>step_list :: [Tile] -> ( Bool, [Tile] )<br />step_list [] = ( False, [] )<br />step_list ts = if walkable (head ts) then ( True, ts )<br />                                     else ( False, collide ts )</pre> <p>The array version is a little more complicated, because I want to strip the list I pass to <b>collide</b> down to just a list of tiles, in order to retain that clean logic for dealing with just a list of tiles. So I unzip my coordinate tuples from my tiles, get a potentially updated tile list, and zip it back together. That complicates it a bit, like so:</p> <pre>step_array :: TileAssocList -> ( Bool, TileAssocList )<br />step_array [] = ( False, [] )<br />step_array tile_assoc = if ( walkable $ head tile_list )<br />                        then ( True, tile_assoc )<br />                        else ( False, zip coord_list<br />                               ( collide tile_list ) )<br />    where ( coord_list, tile_list ) = unzip tile_assoc</pre> <p>I'm going to have to uglify my nice collide method a bit because I need to return at least one additional value -- indicating whether <b>collide</b> consumed a heart, so that we can keep score of the game.</p> <p>Next up, you can see the array and list solutions start to diverge hugely. It's hard to merge the list-based board back together with the potentially updated tile list to create the next immutable list-based board. My original method was pretty hideous. With Jeff's refactoring it's still a lot of code. (Note: I don't have this completely working yet; I'm getting a run-time error about bad patterns I haven't quite figured out yet):</p> <pre>next_board_list :: BoardList -> Pos -> Dir -> ( Bool, BoardList )<br />next_board_list board pos dir =<br />    let ( penguin_could_move, updated_view_list ) = <br />        step_list $ view_list board pos dir<br />    in ( penguin_could_move, update_board_from_view_list <br />         board pos dir updated_view_list )<br /><br />apply_view_list_to_row :: [Tile] -> Int -> Bool -> [Tile] -> [Tile]<br />apply_view_list_to_row orig pos True update =<br />    take ( pos + 1 ) orig ++ ( init update )<br />apply_view_to_row orig pos False update =<br />    ( reverse ( init update ) ) ++ ( drop pos orig )<br /><br />apply_view_list_to_rows :: BoardList -> Int -> Int -> <br />    Bool -> [Tile] -> BoardList<br />apply_view_list_to_rows orig row pos is_forward update =<br />    take row orig ++<br />    nest ( apply_view_to_row ( orig !! row ) pos is_forward update ) ++<br />    drop ( row + 1 ) orig<br /><br />update_board_from_view_list :: BoardList -> Pos -> Dir -> <br />    [Tile] -> BoardList<br />update_board_from_view_list board pos dir updated_view_list<br />    | is_eastwest = apply_view_list_to_rows board<br />                        ( posY pos ) ( posX pos )<br />                        is_forward updated_view_list<br />    | otherwise = transpose ( apply_view_list_to_rows ( transpose board )<br />                              ( posX pos ) ( posY pos ) <br />                              is_forward updated_view_list )<br />    where is_forward = elem dir [ East, South ]<br />          is_eastwest = elem dir [ East, West ]</pre> <p>By comparison, the array is much more suited to create an updated version of itself, given a list of elements to update. This is handled by the <b>//</b> function, in this simple function to create the next board in array form, called from <b>step_array</b>:</p> <pre>next_board_array :: BoardArray -> Pos -> Dir -> ( Bool, BoardArray )<br />next_board_array board pos dir =<br />    let ( penguin_could_move, updated_view ) =<br />        step_array $ view_array board pos dir<br />    in ( penguin_could_move, board // updated_view )</pre> <p>I like that -- it looks like we're working with the data structure rather than against it, although the overhead to manage the ranges and lists still feels to me more complicated than it should be. That complexity carries over elsewhere: for example, pretty-printing the array requires that range logic again. In fact I wind up just wrapping up and re-using the logic to pretty-print the list, so you can see how much additional code I needed:</p> <pre>pretty_tiles :: [Tile] -> String<br />pretty_tiles [] = \"\\n\"<br />pretty_tiles (t:ts) = case t of<br />                 Empty     -> \"___\"<br />                 Mountain  -> \"mt \"<br />                 House     -> \"ho \"<br />                 Ice_Block -> \"ic \"<br />                 Heart     -> \"he \"<br />                 Bomb      -> \"bo \"<br />                 Tree      -> \"tr \"<br />             ++ pretty_tiles ts<br /><br />pretty_board_list :: BoardList -> String<br />pretty_board_list [] = \"\"<br />pretty_board_list (ts:tss) = pretty_tiles ts ++ pretty_board_list tss<br /><br />split_tile_list :: [ Tile ] -> [ [ Tile ] ]<br />split_tile_list [] = []<br />split_tile_list ts = [ take tiles_in_row ts ] ++<br />                     ( split_tile_list $ ( drop tiles_in_row ) ts )<br />    where tiles_in_row = max_col + 1<br /><br />pretty_board_array :: BoardArray -> String <br />pretty_board_array board = pretty_board_list split_tiles<br />    where full_range = make_2d_range 0 0 max_row max_col<br />          all_tiles = map ( (!) board ) full_range<br />          split_tiles = split_tile_list all_tiles</pre> <p>As an aside, it seems like there ought to be at least one standard list split function, but it looks like folks don't really agree on how it should work</p> <p>So there it is -- the array is kind of a mixed blessing here. I haven't done any large-scale profiling on it, to determine if the need to generate a whole new array each pass is a big loss, compared to the potential structure-sharing in the list implementation. It simplifies some of the code dramatically, while adding a layer of dealing with ranges and lists of tuples everywhere -- as soon as we want to pull items out of the array, or merge them back in to a new array, we're dealing with lists again. Still, given the ugliness of the list merge code, it seems like the more natural choice for this kind of small game board data structure.</p>" nil nil "ec01a3b208c066be357a7b47b937d43b") (139 (20947 56086 989387) "http://joyful.com/blog/2013-07-01-june-review.html" "Simon Michael: June review" nil "Mon, 01 Jul 2013 23:00:00 +0000" "<div style=\"font-style: italic;\">July  1, 2013</div>
<h2>June review</h2>
<p>
</p><p>The beginning of a new month. Here’s a quick update.</p>
<p>No hledger release today as there isn’t much new to ship, following a month with several <a href=\"http://hledger.org/NEWS.html\">bugfix releases</a> and otherwise mostly infrastructural work (build and dev tool fixes, wiki styling, site update hook). 8/1 is the likely next release date. Oh, <a href=\"http://newartisans.com/\">John</a> and I also had a nice voice chat - nice to escape the IRC window isn’t it - reviewing our glorious *ledger plans, and I happily accepted his <a href=\"https://github.com/simonmichael/hledger/commit/a05e7a5a671af25b220eb4f152ad935687faef1a\">first hledger patch</a> - thanks John! :)</p>
<p>My free hacking time in recent weeks went more towards <a href=\"http://darcs.net\">darcs</a>:</p>
<ul>
<li><p>Unix shell helpers to get one-line-per-patch output from darcs (awesome!)</p>
<pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span class=\"co\"># show darcs changes, push, pull etc. output with one patch per line</span>
<span class=\"co\"># Eg:</span>
<span class=\"co\"># dch --last 3</span>
<span class=\"co\"># darcs pull --dry | d1</span>
<span class=\"kw\">alias</span> darcsoneline=<span class=\"st\">\"egrep '^\\w' -A1 | egrep -v '^(--|The remote repository has|Would pu)' | sed '</span><span class=\"ot\">$!</span><span class=\"st\">N;s/\\n/ /'\"</span>
<span class=\"kw\">alias</span> d1=darcsoneline
<span class=\"kw\">function</span><span class=\"fu\"> dch()</span> <span class=\"kw\">{</span>
<span class=\"kw\">darcs</span> changes <span class=\"ot\">$*</span> <span class=\"kw\">|</span> <span class=\"kw\">darcsoneline</span>
<span class=\"kw\">}</span></code></pre></li>
<li><p>Support for BSRK Aditya’s <a href=\"http://hub.darcs.net/Aditya/darcsden-gsoc/changes\">GSOC work</a>. Together with Ganesh Sittampalam we did several rounds of code review and BSRK’s nice enhancements should be appearing on darcs hub soon.</p></li>
<li><p>Also driven by the above, updated <a href=\"http://hub.darcs.net/simon/darcsden/changes\">darcsden</a> and HSP for current GHC and libraries, and made it easy for me to build and deploy again. Also merged <a href=\"http://hub.darcs.net/ganesh/darcsden-service/changes\">Ganesh’s improvements</a> for MS Windows compatibility. This will be released as darcsden 1.1 shortly.</p></li>
<li><p>Ongoing <a href=\"http://hub.darcs.net\">darcs hub</a> ops/maintenance, including a fix for <a href=\"http://hub.darcs.net/simon/darcsden/issue/59\">this interesting segfault</a>, and a server upgrade from ubuntu 12.04 to 13.04. This last caused about <s>45m</s><a href=\"http://stats.pingdom.com/olo874j6ixzj/632910/2013/06\">1h20m of downtime >:(</a> late last night as I wrestled with the unfamiliar couchdb migration process and erlang stack traces. (For reference: just copy /var/lib/couchdb/1.0.1/* to 1.2.0/, but <em>don’t forget to preserve file ownership</em>.) At least it got resolved it before month-end at pingdom, so there’s a chance to get uptime back up where it should be - 3 or 4 nines - in July!</p></li>
</ul>" nil nil "5584ac7e57c46406bcd0820dccddee71") (138 (20947 56086 970799) "http://joyful.com/blog/2013-06-17-darcsden-cleanup.html" "Simon Michael: darcsden cleanup" nil "Wed, 19 Jun 2013 01:15:00 +0000" "<div style=\"font-style: italic;\">June 19, 2013</div>
<h2>darcsden cleanup</h2>
<p>
</p><p>Back to the dev diary. <a href=\"http://joyful.com/2013-06-07-git-hooks-for-site-updates.html\">Last post</a> was 11 days ago, after a two-week opening streak of daily posts. I got blocked on one, then got busy. Press on.</p>
<p>Yesterday I started looking at BSRK Aditya’s <a href=\"http://bsrkaditya.blogspot.com/2013/06/gsoc-2013-enhancing-darcsden-preweek-1.html\">GSOC darcsden enhancements</a>, to review and hopefully deploy on <a href=\"http://hub.darcs.net\">darcs hub</a>. So far he has worked on alternate login methods (github/google), password reminder, and darcs pack support (for faster gets).</p>
<p>This is forcing some darcsden cleanup, my first darcsden work in a while aside from routine ops and support tasks. I’m going to release what’s in trunk as 1.1, and then start assimilating the new work by BSRK, Ganesh Sittampalam and anyone else who feels like chipping in. Started putting together release notes and a hub status update.</p>
<p>The support requests seem to be on the rise - more usage ? I also found a good bug today: viewing a certain 1K troff file causes darcs hub’s memory footprint to <a href=\"http://hub.darcs.net/simon/darcsden/issue/58\">blow up to 1.5G</a> :)</p>
<p>It would be great to have more functionality (like highlighting) broken out into separate, expendable worker processes, erlang style.</p>" nil nil "2fb3adb43a6ea3d7ec74500c951e4ad2") (137 (20947 56086 913134) "http://joyful.com/blog/2013-06-08-zwiki-styling.html" "Simon Michael: Zwiki styling" nil "Sat, 08 Jun 2013 19:15:00 +0000" "<div style=\"font-style: italic;\">June  8, 2013</div>
<h2>Zwiki styling</h2>
<p>
</p><p><a href=\"http://joyful.com/2013-06-07-git-hooks-for-site-updates..html\">Yesterday</a>.</p>
<p>Next backlog item: <a href=\"https://trello.com/card/5127f6bb0698a36663002981/16\">style the wiki more like hledger.org</a>.</p>
<p>The wiki software is my own <a href=\"http://zwiki.org\">Zwiki</a> engine. I haven’t skinned a zwiki for a few years, but with the docs (<a href=\"http://zwiki.org/CustomizingAppearance\">CustomizingAppearance</a>, <a href=\"http://zwiki.org/QuickReference#skin-templates\">QuickReference -> skin templates</a>, <a href=\"http://zwiki.org/zwikidir/skins/zwiki\">standard templates</a>) plus experience, it went pretty smoothly.</p>
<p>Zwiki config changes at this point:</p>
<ul>
<li>pasted the standard maintemplate.pt into a Page Template with the same name in the wiki folder, with the hledger.org stylesheet and nav buttons added (in the head and body respectively)</li>
<li>added a style override to give the <code>#content</code> div a zero margin</li>
<li>renamed FrontPage to “hledger wiki”, and configured the new name in a <code>default_page</code> property on the wiki folder</li>
<li>disabled the icon in the zwiki page header by adding a <code>site_logo</code> folder property containing an empty html comment</li>
<li>committed a bugfix for a broken image border that was appearing in the rating form</li>
</ul>
<p>What didn’t work: rewording Zwiki’s “home” navigation link. My custom <code>links.pt</code> page template should do the trick, but it’s being ignored. This is unsatisfying, I suppose I will dig in and debug it, after a suitable cooling-off-and-reflection period.</p>
<p>Zope is still very impressive, and pleasing to use.</p>
<p>Here’s the <a href=\"http://hledger.org/wiki\">wiki</a>, now looking like part of hledger.org.</p>" nil nil "af63fdf556208f43ba0bea09e89e937f") (136 (20947 56086 912677) "http://joyful.com/blog/2013-06-07-git-hooks-for-site-updates.html" "Simon Michael: git pull hook, github service hook for quick site updates" nil "Sat, 08 Jun 2013 00:30:00 +0000" "<div style=\"font-style: italic;\">June  8, 2013</div>
<h2>git pull hook, github service hook for quick site updates</h2>
<p>
</p><p>Finished the hledger.org updating task begun <a href=\"http://joyful.com/2013-06-06-blog-tinkering-hledger.org.html\">yesterday</a>. There were a few parts to this.</p>
<p>I added an executable `.git/hooks/post-merge’ script in the website repo:</p>
<pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span class=\"co\">#!/bin/sh</span>
<span class=\"co\">#</span>
<span class=\"co\"># Rebuild the website after a pull.</span>
<span class=\"kw\">exec</span> make site</code></pre>
<p>Now it runs <code>make site</code> (rebuilding the hakyll script and any changed site content as necessary) after a successful git pull to this repo.</p>
<p>Then I configured a github service hook, using my setup for ledger-cli.org as a guide. Added another <a href=\"http://hub.darcs.net/simon/github-listener\">github listener</a> daemon to <code>/etc/supervisord.conf</code>:</p>
<pre><code>[program:hledger.org-webhook]
command=/src/github-listener/github-listener-yesod 10000 'sudo -u simon git pull'
directory=/src/hledger.org
priority=3
redirect_stderr=true
autostart=true
autorestart=true
environment=LANG=\"en_US.UTF-8\"</code></pre>
<p>activated it using <a href=\"http://supervisord.org\">supervisorctl</a>:</p>
<pre><code>supervisor> update
hledger.org-webhook: added process group
supervisor> status
...
hledger.org-webhook              RUNNING    pid 31379, uptime 0:00:02
...</code></pre>
<p>and configure a <a href=\"https://help.github.com/articles/post-receive-hooks\">webhook</a> in the hledger repo on github, posting to <code>http://hledger.org:10000/</code>. Now any change landing in the github repo causes an immediate update of hledger.org.</p>" nil nil "3ee5dc5150a06bd1b8db96213b6ca3b8") (135 (20946 55674 501299) "http://parenz.wordpress.com/2013/06/29/vado/" "Daniil Frumin: Agile development and deployment in the cloud with Haskell and vado" nil "Tue, 02 Jul 2013 13:26:14 +0000" "<p>
In this post I would like to give you an update on vado – a piece of<br />
software for running programs on vagrant VMs (or any other ssh server,<br />
actually), projects I’ve contributed briefly to.
</p>
<div id=\"outline-container-sec-1\" class=\"outline-2\">
<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> New build system</h2>
<div id=\"text-1\" class=\"outline-text-2\">
<p>
The <a href=\"http://parenz.wordpress.com/2013/06/12/ghcjs-build/\">old</a> <a href=\"http://github.com/ghcjs/ghcjs-build\">build system</a> for ghcjs was a little bit messy. Basically, it was<br />
just one Puppet configuration file that contained a hardcoded shell<br />
script as a resource that is supposed to be written to the home<br />
directory and executed. I decided to clean it up a notch and take more<br />
of a Puppet approach to the whole thing.
</p>
<p>
You can find the new set of build script on the GitHub:<br />
<a href=\"https://github.com/ghcjs/ghcjs-build\">https://github.com/ghcjs/ghcjs-build</a>
</p>
<p>
And since the errors are now printed to the screen it’s<br />
easy to see which stage the build is going through and if anything<br />
goes wrong you see an error trace for the current stage.
</p>
<p>
The <a href=\"https://github.com/ghcjs/ghcjs-build/tree/prebuilt\">prebuilt</a> version has also been updated by<br />
<a href=\"http://weblog.luite.com/wordpress/\">Luite Stegeman</a>.
</p>
</div>
</div>
<div id=\"outline-container-sec-2\" class=\"outline-2\">
<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Vado</h2>
<div id=\"text-2\" class=\"outline-text-2\">
</div>
<div id=\"outline-container-sec-2-1\" class=\"outline-3\">
<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> Vado intro</h3>
<div id=\"text-2-1\" class=\"outline-text-3\">
<p>
Hamish Mackenzie and I have been working on <a href=\"https://github.com/hamishmack/vado\">vado</a> – a quick way to run<br />
commands on a remote ssh server. Just mount the directory you want to<br />
run the command in using <a href=\"http://fuse.sourceforge.net/sshfs.html\">sshfs</a>, in that directory (or its<br />
subdirectory) run vado like this:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vado ls -l
</pre>
</div>
<p>
vado will run ‘mount’ to identify the user account, server name and<br />
the remote directory to run the command in. It will then run ssh to<br />
connect to the server and run the command.
</p>
<p>
You can also pass ssh options like this:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vado -t htop
</pre>
</div>
<p>
This tells vado to pass -t to ssh (forces pseudo-tty allocation and<br />
makes programs like vim and htop work nicely).
</p>
<p>
I will explain below how to set up vado for multiple remote<br />
servers/sshfs mount points and how to develop Haskell projects on a<br />
remote server/VM nicely using Emacs and ghc-mod.
</p>
</div>
</div>
<div id=\"outline-container-sec-2-2\" class=\"outline-3\">
<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> .vadosettings</h3>
<div id=\"text-2-2\" class=\"outline-text-3\">
<p>
Vado is not tied to vagrant, but can be used with it and is faster<br />
than <code>vagrant ssh</code>. If the user and host detected in <code>mount</code> are<br />
specified in the <code>~/.vadosettings</code> file, then the specified key and<br />
port will be used.
</p>
<p>
The contents of the <code>~/.vadosettings</code> file is basically a Haskell<br />
list of <code>MountSettings</code> datastructures and we use standard <code>Read</code> and<br />
<code>Show</code> type-classes for serialization.
</p>
<p>
The <code>MountSettings</code> data type is defined as follows:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-haskell\"><span style=\"color: #b5bd68;\">-- | Mount point settings</span>
<span style=\"color: #b294bb;\">data</span> <span style=\"color: #f0c674;\">MountSettings</span> <span style=\"color: #cc6666;\">=</span> <span style=\"color: #f0c674;\">MountSettings</span> {
sshfsUser <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Text</span>
, sshfsHost <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Text</span>
, sshfsPort <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Int</span>
, idFile <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">FilePath</span>
} <span style=\"color: #b294bb;\">deriving</span> (<span style=\"color: #f0c674;\">Show</span>, <span style=\"color: #f0c674;\">Read</span>)
</pre>
</div>
<p>
If the file is not present or incorrectly formatted<br />
then the default settings for vagrant will be used:
</p>
<ul class=\"org-ul\">
<li>User: vagrant
</li>
<li>Host: 127.0.0.1
</li>
<li>Port: 2222
</li>
<li>Key file: <code>~/.vagrant.d/insecure_private_key</code>
</li>
</ul>
</div>
<div id=\"outline-container-sec-2-2-1\" class=\"outline-4\">
<h4 id=\"sec-2-2-1\"><span class=\"section-number-4\">2.2.1</span> Example .vadosettings file</h4>
<div id=\"text-2-2-1\" class=\"outline-text-4\">
<p>
An example settings file might look like this:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-haskell\">[
<span style=\"color: #f0c674;\">MountSettings</span> {
sshfsUser <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"vagrant\"</span>
, sshfsHost <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"localhost\"</span>
, sshfsPort <span style=\"color: #cc6666;\">=</span> 2222
, idFile <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"/Users/dan/.vagrant.d/insecure_private_key\"</span>
},
<span style=\"color: #f0c674;\">MountSettings</span> {
sshfsUser <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"admin\"</span>
, sshfsHost <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"server.local\"</span>
, sshfsPort <span style=\"color: #cc6666;\">=</span> 2233
, idFile <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"/Users/dan/keys/local_server_key\"</span>
}
]
</pre>
</div>
</div>
</div>
</div>
<div id=\"outline-container-sec-2-3\" class=\"outline-3\">
<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> Vamount</h3>
<div id=\"text-2-3\" class=\"outline-text-3\">
<p>
Of course, using <code>vado</code> requires mounting the sshfs beforehand. But<br />
it gets tedious typing out
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">sshfs vagrant@localhost:/home/vagrant ../vm/ -p2222
-reconnect,defer_permissions,negative_vncache,<span style=\"color: #cc6666;\">volname</span>=ghcjs,<span style=\"color: #cc6666;\">IdentityFile</span>=~/.vagrant.d/insecure_private_key
</pre>
</div>
<p>
every time. A tool called <code>vamount</code> which is bundled together<br />
with <code>vado</code> can be used for mounting remote filesystems based on<br />
<code>~/.vadosettings</code> file.
</p>
<p>
You can use it like this:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vamount [ssh options] remote_path [profile <span style=\"color: #969896;\">#</span><span style=\"color: #969896;\">]</span>
</pre>
</div>
<p>
The <code>remote_path</code> from the remote server specified in the<br />
~/.vadosettings file under number [profile #] will be mounted in the<br />
current directory using sshfs.
</p>
<p>
The profile number count starts from 1. If the [profile #] is absent<br />
or is 0 then the default (vagrant) configuration will be used.
</p>
</div>
</div>
<div id=\"outline-container-sec-2-4\" class=\"outline-3\">
<h3 id=\"sec-2-4\"><span class=\"section-number-3\">2.4</span> Vado and ghc-mod</h3>
<div id=\"text-2-4\" class=\"outline-text-3\">
<p>
<a href=\"http://www.mew.org/~kazu/proj/ghc-mod/en/\">ghc-mod</a> is a backend designed command to enrich Haskell programming on<br />
editors like Emacs and Vim and it also features a front-end for Emacs<br />
as a set of elisp scripts. It’s a really cool piece of software and if<br />
you have not tried it yet I highly recommend you to invest into<br />
installing and using it.
</p>
<p>
What we would like, however, is to edit files on the mounted<br />
filesystem using Emacs on the host machine, but run ghc-mod inside the<br />
VM. In order to do that we need to install ghc-mod both on our host<br />
machine and on the VM.
</p>
<p>
While installing ghc-mod on the host machine running the latest<br />
haskell-platform is pretty straightforward it is harder to do so on<br />
the VM running GHC 7.7 due to the fact that many libraries are not<br />
ready for GHC 7.7 and base 4.7 yet. We have to resort to installing<br />
most of the things from source.
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\"><span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">run this on the guest machine</span>
mkdir ghcmod && <span style=\"color: #D0D0FF;\">cd</span> ghcmod
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">patching installing convertible</span>
cabal unpack convertible
<span style=\"color: #D0D0FF;\">cd</span> convertible*
wget http://co-dan.github.io/patched/convertible.patch
patch -p1 Data/Convertible/Utils.hs convertible.patch
cabal install
<span style=\"color: #D0D0FF;\">cd</span> ..
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">installing ghc-syb-utils</span>
git clone https://github.com/co-dan/ghc-syb.git
<span style=\"color: #D0D0FF;\">cd</span> ghc-syb/utils/
cabal install
<span style=\"color: #D0D0FF;\">cd</span> ../..
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">finally getting and installing ghc-mod</span>
git clone https://github.com/co-dan/ghc-mod.git
<span style=\"color: #D0D0FF;\">cd</span> ghc-mod
cabal install
</pre>
</div>
<p>
Ghc-mod itself uses the GHC API extensively so it’s no surprise we<br />
have to change at least some code. Now that we have installed ghc-mod<br />
on the guest VM we need to set up our host’s Emacs configuration to<br />
communicate properly with the VM. First of all put this in your Emacs<br />
config:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-elisp\"><span style=\"color: #7f7f7f;\">(</span>setq load-path <span style=\"color: #7f7f7f;\">(</span>cons <span style=\"color: #b5bd68;\">\"~/Library/Haskell/ghc-7.6.3/lib/ghc-mod-2.0.3/share\"</span> load-path<span style=\"color: #7f7f7f;\">))</span>
<span style=\"color: #7f7f7f;\">(</span>autoload 'ghc-init <span style=\"color: #b5bd68;\">\"ghc\"</span> nil t<span style=\"color: #7f7f7f;\">)</span>
<span style=\"color: #7f7f7f;\">(</span>add-hook 'haskell-mode-hook <span style=\"color: #7f7f7f;\">(</span><span style=\"color: #b294bb;\">lambda</span> <span style=\"color: #7f7f7f;\">()</span> <span style=\"color: #7f7f7f;\">(</span>ghc-init<span style=\"color: #7f7f7f;\">)))</span>
<span style=\"color: #969896;\">;; </span><span style=\"color: #969896;\">(setq ghc-module-command \"ghc-mod\")</span>
<span style=\"color: #7f7f7f;\">(</span>setq ghc-module-command <span style=\"color: #b5bd68;\">\"~/vado-ghc-mod.sh\"</span><span style=\"color: #7f7f7f;\">)</span>
</pre>
</div>
<p>
<code>~/vado-ghc-mod.sh</code> should contain the following:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\"><span style=\"color: #969896;\">#</span><span style=\"color: #969896;\">!/bin/</span><span style=\"color: #b294bb;\">bash</span>
<span style=\"color: #cc6666;\">VADO</span>=/Users/dan/Library/Haskell/bin/vado
<span style=\"color: #cc6666;\">LOCAL_PATH</span>=/Users/dan/projects/ghcjs/mnt/
<span style=\"color: #cc6666;\">REMOTE_PATH</span>=/home/vagrant/
$<span style=\"color: #cc6666;\">VADO</span> -t ghc-mod ${<span style=\"color: #cc6666;\">@</span>//$<span style=\"color: #cc6666;\">LOCAL_PATH</span>/$<span style=\"color: #cc6666;\">REMOTE_PATH</span>} | sed <span style=\"color: #b5bd68;\">\"s,$REMOTE_PATH,$LOCAL_PATH,g\"</span>
</pre>
</div>
<p>
I know that it’s a hack, but it does work and I guess that’s what<br />
shell scripts are for ;)
</p>
<p>
Now go to <code>~/.bashrc</code> on the <i>guest machine</i> and make sure that the<br />
<code>PATH</code> variable is <a href=\"http://stackoverflow.com/questions/820517/bashrc-at-ssh-login\">set correctly</a>:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\"><span style=\"color: #cc6666;\">PATH</span>=/home/vagrant/ghcjs/bin:/home/vagrant/.cabal/bin:/home/vagrant/ghc/bin:/home/vagrant/jsshell:/home/vagrant/node-v0.10.10-linux-x86/bin:$<span style=\"color: #cc6666;\">PATH</span>
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">PATH is set *before* this line:</span>
[ -z <span style=\"color: #b5bd68;\">\"$PS1\"</span> ] && <span style=\"color: #b294bb;\">return</span>
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\"><snip></span>
</pre>
</div>
<p>
And that’s it, you should be done!
</p>
<p>Before (ghc-mod running on the host machine):<br />
<a href=\"http://parenz.files.wordpress.com/2013/06/ghcmod-before.png\"><img src=\"http://parenz.files.wordpress.com/2013/06/ghcmod-before.png?w=600&h=306\" alt=\"ghcmod-before\" height=\"306\" class=\"alignnone size-medium wp-image-66\" width=\"600\" /></a></p>
<p>After (ghc-mod running inside <a href=\"https://github.com/ghcjs/ghcjs-build\">ghcjs-build</a> VM):<br />
<a href=\"http://parenz.files.wordpress.com/2013/06/ghcmod-after.png\"><img src=\"http://parenz.files.wordpress.com/2013/06/ghcmod-after.png?w=600&h=306\" alt=\"ghcmod-after\" height=\"306\" class=\"alignnone size-medium wp-image-65\" width=\"600\" /></a></p>
</div>
</div>
</div>
<div id=\"outline-container-sec-3\" class=\"outline-2\">
<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> Conclusion and future work</h2>
<div id=\"text-3\" class=\"outline-text-2\">
<p>
We’ve seen how a small but useful tool <code>vado</code> can make our life easier if<br />
we want to develop Haskell projects on a remote server or on a<br />
virtual machine. You can get Vado from GitHub: <a href=\"https://github.com/hamishmack/vado\">https://github.com/hamishmack/vado</a>
</p>
<p>
Next week we are planning on releasing our first version of<br />
interactive-diagrams pastesite (not going to be very interactive<br />
though) and writing out its security model.
</p>
<p>
Meanwhile check Luite’s <a href=\"http://weblog.luite.com/wordpress/?p=127\">post</a> on using Sodium FRP library for creating<br />
Functional Reactive Web interfaces. It’s astonishing how easily you<br />
can just get a FRP library, compile to JavaScript and make nifty web<br />
apps with it.
</p>
</div>
</div>
<br /> Tagged: <a href=\"http://parenz.wordpress.com/tag/ghcjs/\">ghcjs</a>, <a href=\"http://parenz.wordpress.com/tag/haskell-2/\">haskell</a>, <a href=\"http://parenz.wordpress.com/tag/soc/\">soc</a>, <a href=\"http://parenz.wordpress.com/tag/vm/\">vm</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/parenz.wordpress.com/64/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/parenz.wordpress.com/64/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=parenz.wordpress.com&blog=26722965&post=64&subd=parenz&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "1077250fd66e87bb5d79ba483a1e8877") (134 (20946 49852 366664) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_8737\"></span>, where <span id=\"tex_8183\"></span> is the number of “folds” and <span id=\"tex_7114\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_7143\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "9e4ff0aeeea6d385493fa853b31c20c0") (133 (20946 42380 578787) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_2914\"></span>, where <span id=\"tex_9114\"></span> is the number of “folds” and <span id=\"tex_6617\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_1826\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "d5bd3213990b3292a5d49649e64580d1") (132 (20946 37594 578384) "http://feedproxy.google.com/~r/ezyang/~3/tSmwYHznwqQ/" "Edward Z. Yang: HoTT exercises in Coq (in progress)" nil "Mon, 01 Jul 2013 20:21:18 +0000" "<div class=\"document\">
<p>I spent some of my plane ride yesterday working on Coq versions of the exercises in <a href=\"http://homotopytypetheory.org/book/\" class=\"reference external\">The HoTT book</a>. I got as far as 1.6 (yeah, not very far, perhaps I should make a GitHub repo if other folks are interested in contributing skeletons. Don't know what to do about the solutions though).  All of these have been test solved.</p>
<p>You will need HoTT/coq in order to run this development; instructions on <a href=\"https://github.com/HoTT/HoTT/blob/master/INSTALL.txt\" class=\"reference external\">how to install it are here.</a></p>
<pre class=\"literal-block\">Require Import HoTT.
Definition admit {T: Type} : T. Admitted.
(* Exercise 1.1 *)
Definition mycompose {A B C : Type} (g : B -> C) (f : A -> B) : A -> C := admit.
Goal forall (A B C D : Type) (f : A -> B) (g : B -> C) (h : C -> D),
mycompose h (mycompose g f) = mycompose (mycompose h g) f.
Admitted.
(* Exercise 1.2 *)
Section ex_1_2_prod.
Variable A B : Type.
Check @fst.
Check @snd.
Definition my_prod_rec (C : Type) (g : A -> B -> C) (p : A * B) : C := admit.
Goal fst = my_prod_rec A (fun a => fun b => a). Admitted.
Goal snd = my_prod_rec B (fun a => fun b => b). Admitted.
End ex_1_2_prod.
Section ex_1_2_sig.
Variable A : Type.
Variable B : A -> Type.
Check @projT1.
Check @projT2.
Definition my_sig_rec (C : Type) (g : forall (x : A), B x -> C) (p : exists (x : A), B x) : C := admit.
Goal @projT1 A B = my_sig_rec A (fun a => fun b => a). Admitted.
(* What goes wrong when you try to prove this for projT2? *)
End ex_1_2_sig.
(* Exercise 1.3 *)
Definition refl {A : Type} (x : A) : x = x := 1%path.
Section ex_1_3_prod.
Variable A B : Type.
(* Given by the book *)
Definition uppt : forall (x : A * B), ((fst x, snd x) = x) :=
fun p => match p with (a,b) => refl (a,b) end.
Definition my_prod_ind (C : A * B -> Type) (g : forall (x : A) (y : B), C (x, y)) (x : A * B) : C x := admit.
Goal forall C g a b, my_prod_ind C g (a, b) = g a b. Admitted.
End ex_1_3_prod.
Section ex_1_3_sig.
Variable A : Type.
Variable B : A -> Type.
Definition sig_uppt : forall (x : exists (a : A), B a), ((projT1 x; projT2 x) = x) := admit.
Definition mysig_ind (C : (exists (a : A), B a) -> Type) (g : forall (a : A) (b : B a), C (a; b)) (x : exists (a : A), B a) : C x := admit.
Goal forall C g a b, mysig_ind C g (a; b) = g a b. Admitted.
End ex_1_3_sig.
(* Exercise 1.4 *)
Fixpoint iter (C : Type) (c0 : C) (cs : C -> C) (n : nat) : C :=
match n with
| 0 => c0
| S n' => cs (iter C c0 cs n')
end.
Definition mynat_rec (C : Type) : C -> (nat -> C -> C) -> nat -> C := admit.
Eval compute in mynat_rec (list nat) nil (@cons nat) 2.
Eval compute in nat_rect (fun _ => list nat) nil (@cons nat) 2.
(* Exercise 1.5 *)
Definition mycoprod (A B : Type) := exists (x : Bool), Bool_rect (fun _ => Type) A B x.
Section ex_1_5.
Variable A B : Type.
Definition inl := existT (Bool_rect (fun _ => Type) A B) true.
Definition inr := existT (Bool_rect (fun _ => Type) A B) false.
Definition mycoprod_ind (C : mycoprod A B -> Type)
(l : forall (a : A), C (inl a))
(r : forall (b : B), C (inr b))
(x : mycoprod A B) : C x := admit.
Goal forall C l r x, mycoprod_ind C l r (inl x) = l x. Admitted.
Goal forall C l r x, mycoprod_ind C l r (inr x) = r x. Admitted.
End ex_1_5.
(* Exercise 1.6 *)
Definition myprod (A B : Type) := forall (x : Bool), Bool_rect (fun _ => Type) A B x.
Section ex_1_6.
Context `{Funext}.
Variable A B : Type.
Definition mypr1 (p : myprod A B) := p true.
Definition mypr2 (p : myprod A B) := p false.
Definition mymkprod (a : A) (b : B) : myprod A B := Bool_rect (Bool_rect (fun _ => Type) A B) a b.
Definition myprod_ind (C : myprod A B -> Type)
(g : forall (x : A) (y : B), C (mymkprod x y)) (x : myprod A B) : C x := admit.
Goal forall C g a b, myprod_ind C g (mymkprod a b) = g a b. Admitted.
End ex_1_6.
</pre>
<p>Actually, I lied. I haven't proved the last goal in exercise 1.6; my trouble is I don't know how to get function extensionality to compute, but I’m sure it’s something simple...</p>
</div>
<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/tSmwYHznwqQ\" height=\"1\" width=\"1\" />" nil nil "00c72c0d3632ef1e609639e02f072f60") (131 (20946 37594 496792) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_510\"></span>, where <span id=\"tex_2094\"></span> is the number of “folds” and <span id=\"tex_8091\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_418\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "30a077d3167d92ca2db62951d2fb0061") (130 (20945 42499 903671) "http://feedproxy.google.com/~r/FpComplete/~3/WtRkqbxIn5Q/fp-haskell-center-beta-announcement" "FP Complete: FP Haskell Center Beta Released, and Beta Accounts Activated" nil "Sun, 30 Jun 2013 19:51:00 +0000" "<h3>Beta Release Blog</h3><p>It’s here! After months of hard work by our engineers, and only 9 months since we announced our plans in ICFP last September, I am pleased to announce that we’ve released the <a href=\"https://www.fpcomplete.com/business/designer-ide\">beta of FP Haskell Center</a>, the world's first commercial Haskell IDE and deployment platform.  We’ve received great response with nearly 1,000 sign-ups already.  Since we want to have a smooth beta process and a good user experience, we are going to activate beta accounts selectively, in ever increasing numbers, in the next few weeks as we test new features and load factors.  We will notify users via email that their account is ready to be activated; some of you who are reading this may already have received the message.  We expect to have “open enrollment” for all before the end of July.  </p><p><a href=\"https://www.fpcomplete.com/blog/2013/06/fp-haskell-center-beta-demo\">Watch a video</a> walkthrough of the highlighted features.  There’s still time to <a href=\"https://www.fpcomplete.com/business/designer-ide\">sign-up</a>.</p><p>As an appreciation and reward for being in the beta program, we will offer a special discount only to beta customers who buy an annual subscription to the GA product before the official release date in early September.  We are working on our pricing and offering plans, and expect to have them completed by early August, so stay tuned.</p><p>FP Haskell Center has two integrated components that allow you to develop and deploy Haskell applications in the cloud from a single platform.  The FP Haskell Development Environment is an IDE that includes a Haskell compiler and a continually updated set of vetted, tested and supported libraries and code templates. There is no need to run Cabal or other installers. The FP Haskell Application Server is used to deploy and run Haskell applications directly in the cloud with no additional effort. A free shared instance is included with every account. Larger and dedicated instances are available for active project deployments at a reasonable monthly charge.</p><p>For further information and sign up, <a href=\"https://www.fpcomplete.com/business/designer-ide\">please go here</a>.</p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=WtRkqbxIn5Q:EMKkzrydVc4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=WtRkqbxIn5Q:EMKkzrydVc4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=WtRkqbxIn5Q:EMKkzrydVc4:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=WtRkqbxIn5Q:EMKkzrydVc4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=WtRkqbxIn5Q:EMKkzrydVc4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=WtRkqbxIn5Q:EMKkzrydVc4:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/WtRkqbxIn5Q\" height=\"1\" width=\"1\" />" nil nil "edec5e773dc3c376472ffe33581f3ee4") (129 (20945 42499 819964) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_7143\"></span>, where <span id=\"tex_657\"></span> is the number of “folds” and <span id=\"tex_8261\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_3875\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "88d93a056afb6614f83e6c21ed3227ad") (128 (20945 34652 382661) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_9019\"></span>, where <span id=\"tex_1428\"></span> is the number of “folds” and <span id=\"tex_4097\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_8787\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "65af1b9fdea122048bee73ed2f295d81") (127 (20945 27240 6754) "http://www.yesodweb.com/blog/2013/07/runtime-lucius-mixins" "Yesod Web Framework: Runtime Lucius: now with mixins!" nil "Mon, 01 Jul 2013 13:00:00 +0000" "<p>About two months ago, <a href=\"http://www.yesodweb.com/blog/2013/04/mixin-support-in-lucius\">I announced that Lucius now had mixin
support</a>.
Unfortunately, it was missing something important: support in runtime Lucius.
Many of you have probably never used runtime Lucius, but it's the component
underlying Lucius's ability to do live code reloading during development. So
without this feature, it's impossible to use mixins when using <code>yesod devel</code>.</p><p>As of <code>shakespeare-css</code> 1.0.6.1, this is no longer a problem: mixins should now
work perfectly with <code>yesod devel</code>. In order to take advantage of this, just add
a minimum bound on your shakespeare-css constraint in your cabal file. (The
next release of yesod-platform will include this change.)</p><p>If anyone finds any problems, let me know.</p>" nil nil "e5c90f2bdabb21a02596b3ff3a553944") (126 (20945 27239 927746) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_3822\"></span>, where <span id=\"tex_5149\"></span> is the number of “folds” and <span id=\"tex_7521\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_110\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "1a3917e9ad2f845bfbe9e5464e49d1d8") (125 (20945 14387 195654) "http://lambda.jstolarek.com/2013/06/msr-internship-and-some-retrospection/" "Jan Stolarek: MSR internship and some retrospection" nil "Sun, 30 Jun 2013 20:00:38 +0000" "<p style=\"text-align: justify;\">I feel I can finally write about: I got accepted for a three-month internship at Microsoft Research Cambridge! This means I will be developing GHC and, hopefully, doing some serious research on the subject of functional programming and compiler implementation. My internship starts tomorrow, on 1st July. I’m not yet 100% certain about the exact topic of my research, so I’ll refrain from going into any kind of technical details for now and I will focus on my personal experience with functional programming. I feel this is really a good moment to summarize the past 1,5 year. I learned about functional programming at the very beginning of 2012 and since then I progressed from knowing completely nothing to being in Cambridge – something I would have not imagined 18 months ago.</p>
<p style=\"text-align: justify;\">Somewhere around July 2011 I finished writing my PhD. I had yet to deal with many formalities – which in the end took 8 months – but the most important part of my work was done and I only continued research on a few minor subjects that I ran into while writing a PhD. Somewhere in October I decided I need a break from all my current research topic – I finally wanted some time to pursue topics that interested me all along and for which I never had time. Compiler construction and theory of automata were two main topics I had in mind. That was the plan, but it wasn’t meant to work out, at least not yet. Somewhere around December 2012 I stumbled upon a book <a href=\"http://lambda.jstolarek.com/2012/04/7-languages-in-7-weeks-book-review/\">“Seven languages in seven weeks”</a>, which was my first contact with functional programming. I didn’t follow the book exactly. I read chapters about Ruby, Io, Prolog (so much fun!), Scala and Erlang, but instead of reading chapter about Clojure I went for Scheme. I read <a href=\"http://www.schemers.org/Documents/Standards/R5RS/\">R5RS</a> language specification and <a href=\"http://lambda.jstolarek.com/2013/01/the-little-schemer-book-review/\">The Little Schemer</a> and when I reached the chapter about Haskell I decided to read <a href=\"http://learnyouahaskell.com/chapters\">Learn You A Haskell</a> instead. At that point I already knew that Haskell is <em>the</em> functional programming language and I think that this was the moment I started having some serious plans about functional programming. But at the same time I was figuring out how to learn about compilers. It was April when <a href=\"http://lambda.jstolarek.com/2012/04/stanford-opens-new-online-courses-about-compilers-and-automata/\">Stanford University announced their two online courses on Compilers and Automata</a> – these were really godsend. The Compilers course ended in late June. This concludes my first six months of contact with FP and I think that these months were extremely intense. I learned theoretical and practical foundations of compilers, a new programming paradigm and some new languages designed in that paradigm. I also started reading research papers on functional programming, with a focus on implementation of GHC. At that point I didn’t even try to work on the source code, but I was trying to understand how the compiler is designed.</p>
<p style=\"text-align: justify;\">The next six months, from July to December, were not as fruitful. I picked up interest in doing data-parallel computations in Haskell, as this seemed to be an active topic of research and also related to my PhD work. I made a failed attempt of an efficient parallel implementation of a wavelet transform. Although I wasn’t successful, my time was not wasted: I learned how to write, test and benchmark libraries in Haskell and also read a lot of papers on FP. I also got in touch with <a href=\"http://www.cse.unsw.edu.au/~benl/\">Ben Lippmeier</a>, who pointed me to one problem with GHC he needed fixed. This was somewhere in January 2013. I already started reading the source code of GHC in December, but now I finally had a particular problem to solve. It was the time to start working on GHC. That is mostly what I did during the last six months, although I also managed to spend some time on theory (more papers and <a href=\"http://lambda.jstolarek.com/2013/02/to-mock-a-mockingbird-or-how-i-learned-to-stop-worrying-and-learned-combinatory-logic/\">a book on combinatory logic</a>).</p>
<p style=\"text-align: justify;\">As for the internship, I decided to apply for it in February. I polished my CV and cover letter (many thanks go to my friend <a href=\"http://www.mareklab.org/\">Marek</a> for his help) and sent my application at the beginning of March. After an interview with Geoffrey Mainland and Simon Peyton Jones I got acceptance notification at the beginning of April. And here I am in Cambridge, over 1300km from home, waiting for my first day at Microsoft Research.</p>" nil nil "7b89d995cf9d4ed26a83825b79e01588") (124 (20945 14387 194586) "http://parenz.wordpress.com/2013/06/29/vado/" "Daniil Frumin: Agile development and deployment in the cloud with Haskell and vado" nil "Sun, 30 Jun 2013 19:16:28 +0000" "<p>
In this post I would like to give you an update on vado – a piece of<br />
software for running programs on vagrant VMs (or any other ssh server,<br />
actually), projects I’ve contributed briefly to.
</p>
<div id=\"outline-container-sec-1\" class=\"outline-2\">
<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> New build system</h2>
<div id=\"text-1\" class=\"outline-text-2\">
<p>
The <a href=\"http://parenz.wordpress.com/2013/06/12/ghcjs-build/\">old</a> <a href=\"http://github.com/ghcjs/ghcjs-build\">build system</a> for ghcjs was a little bit messy. Basically, it was<br />
just one Puppet configuration file that contained a hardcoded shell<br />
script as a resource that is supposed to be written to the home<br />
directory and executed. I decided to clean it up a notch and take more<br />
of a Puppet approach to the whole thing.
</p>
<p>
You can find the new set of build script on the GitHub:<br />
<a href=\"https://github.com/ghcjs/ghcjs-build\">https://github.com/ghcjs/ghcjs-build</a>
</p>
<p>
And since the errors are now printed to the screen it’s<br />
easy to see which stage the build is going through and if anything<br />
goes wrong you see an error trace for the current stage.
</p>
<p>
The <a href=\"https://github.com/ghcjs/ghcjs-build/tree/prebuilt\">prebuilt</a> version has also been updated by<br />
<a href=\"http://weblog.luite.com/wordpress/\">Luite Stegeman</a>.
</p>
</div>
</div>
<div id=\"outline-container-sec-2\" class=\"outline-2\">
<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Vado</h2>
<div id=\"text-2\" class=\"outline-text-2\">
</div>
<div id=\"outline-container-sec-2-1\" class=\"outline-3\">
<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> Vado intro</h3>
<div id=\"text-2-1\" class=\"outline-text-3\">
<p>
Hamish Mackenzie and I have been working on <a href=\"https://github.com/hamishmack/vado\">vado</a> – a quick way to run<br />
commands on a remote ssh server. Just mount the directory you want to<br />
run the command in using <a href=\"http://fuse.sourceforge.net/sshfs.html\">sshfs</a>, in that directory (or its<br />
subdirectory) run vado like this:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vado ls -l
</pre>
</div>
<p>
vado will run ‘mount’ to identify the user account, server name and<br />
the remote directory to run the command in. It will then run ssh to<br />
connect to the server and run the command.
</p>
<p>
You can also pass ssh options like this:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vado -t htop
</pre>
</div>
<p>
This tells vado to pass -t to ssh (forces pseudo-tty allocation and<br />
makes programs like vim and htop work nicely).
</p>
<p>
I will explain below how to set up vado for multiple remote<br />
servers/sshfs mount points and how to develop Haskell projects on a<br />
remote server/VM nicely using Emacs and ghc-mod.
</p>
</div>
</div>
<div id=\"outline-container-sec-2-2\" class=\"outline-3\">
<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> .vadosettings</h3>
<div id=\"text-2-2\" class=\"outline-text-3\">
<p>
Vado is not tied to vagrant, but can be used with it and is faster<br />
than <code>vagrant ssh</code>. If the user and host detected in <code>mount</code> are<br />
specified in the <code>~/.vadosettings</code> file, then the specified key and<br />
port will be used.
</p>
<p>
The contents of the <code>~/.vadosettings</code> file is basically a Haskell<br />
list of <code>MountSettings</code> datastructures and we use standard <code>Read</code> and<br />
<code>Show</code> type-classes for serialization.
</p>
<p>
The <code>MountSettings</code> data type is defined as follows:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-haskell\"><span style=\"color: #b5bd68;\">-- | Mount point settings</span>
<span style=\"color: #b294bb;\">data</span> <span style=\"color: #f0c674;\">MountSettings</span> <span style=\"color: #cc6666;\">=</span> <span style=\"color: #f0c674;\">MountSettings</span> {
sshfsUser <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Text</span>
, sshfsHost <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Text</span>
, sshfsPort <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Int</span>
, idFile <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">FilePath</span>
} <span style=\"color: #b294bb;\">deriving</span> (<span style=\"color: #f0c674;\">Show</span>, <span style=\"color: #f0c674;\">Read</span>)
</pre>
</div>
<p>
If the file is not present or incorrectly formatted<br />
then the default settings for vagrant will be used:
</p>
<ul class=\"org-ul\">
<li>User: vagrant
</li>
<li>Host: 127.0.0.1
</li>
<li>Port: 2222
</li>
<li>Key file: <code>~/.vagrant.d/insecure_private_key</code>
</li>
</ul>
</div>
<div id=\"outline-container-sec-2-2-1\" class=\"outline-4\">
<h4 id=\"sec-2-2-1\"><span class=\"section-number-4\">2.2.1</span> Example .vadosettings file</h4>
<div id=\"text-2-2-1\" class=\"outline-text-4\">
<p>
An example settings file might look like this:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-haskell\">[
<span style=\"color: #f0c674;\">MountSettings</span> {
sshfsUser <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"vagrant\"</span>
, sshfsHost <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"localhost\"</span>
, sshfsPort <span style=\"color: #cc6666;\">=</span> 2222
, idFile <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"/Users/dan/.vagrant.d/insecure_private_key\"</span>
},
<span style=\"color: #f0c674;\">MountSettings</span> {
sshfsUser <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"admin\"</span>
, sshfsHost <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"server.local\"</span>
, sshfsPort <span style=\"color: #cc6666;\">=</span> 2233
, idFile <span style=\"color: #cc6666;\">=</span> <span style=\"color: #b5bd68;\">\"/Users/dan/keys/local_server_key\"</span>
}
]
</pre>
</div>
</div>
</div>
</div>
<div id=\"outline-container-sec-2-3\" class=\"outline-3\">
<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> Vamount</h3>
<div id=\"text-2-3\" class=\"outline-text-3\">
<p>
Of course, using <code>vado</code> requires mounting the sshfs beforehand. But<br />
it gets tedious typing out
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">sshfs vagrant@localhost:/home/vagrant ../vm/ -p2222
-reconnect,defer_permissions,negative_vncache,<span style=\"color: #cc6666;\">volname</span>=ghcjs,<span style=\"color: #cc6666;\">IdentityFile</span>=~/.vagrant.d/insecure_private_key
</pre>
</div>
<p>
every time. A tool called <code>vamount</code> which is bundled together<br />
with <code>vado</code> can be used for mounting remote filesystems based on<br />
<code>~/.vadosettings</code> file.
</p>
<p>
You can use it like this:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vamount [ssh options] remote_path [profile <span style=\"color: #969896;\">#</span><span style=\"color: #969896;\">]</span>
</pre>
</div>
<p>
The <code>remote_path</code> from the remote server specified in the<br />
~/.vadosettings file under number [profile #] will be mounted in the<br />
current directory using sshfs.
</p>
<p>
The profile number count starts from 1. If the [profile #] is absent<br />
or is 0 then the default (vagrant) configuration will be used.
</p>
</div>
</div>
<div id=\"outline-container-sec-2-4\" class=\"outline-3\">
<h3 id=\"sec-2-4\"><span class=\"section-number-3\">2.4</span> Vado and ghc-mod</h3>
<div id=\"text-2-4\" class=\"outline-text-3\">
<p>
<a href=\"http://www.mew.org/~kazu/proj/ghc-mod/en/\">ghc-mod</a> is a backend designed command to enrich Haskell programming on<br />
editors like Emacs and Vim and it also features a front-end for Emacs<br />
as a set of elisp scripts. It’s a really cool piece of software and if<br />
you have not tried it yet I highly recommend you to invest into<br />
installing and using it.
</p>
<p>
What we would like, however, is to edit files on the mounted<br />
filesystem using Emacs on the host machine, but run ghc-mod inside the<br />
VM. In order to do that we need to install ghc-mod both on our host<br />
machine and on the VM.
</p>
<p>
While installing ghc-mod on the host machine running the latest<br />
haskell-platform is pretty straightforward it is harder to do so on<br />
the VM running GHC 7.7 due to the fact that many libraries are not<br />
ready for GHC 7.7 and base 4.7 yet. We have to resort to installing<br />
most of the things from source.
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\"><span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">run this on the guest machine</span>
mkdir ghcmod && <span style=\"color: #D0D0FF;\">cd</span> ghcmod
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">patching installing convertible</span>
cabal unpack convertible
<span style=\"color: #D0D0FF;\">cd</span> convertible*
wget http://co-dan.github.io/patched/convertible.patch
patch -p1 Data/Convertible/Utils.hs convertible.patch
cabal install
<span style=\"color: #D0D0FF;\">cd</span> ..
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">installing ghc-syb-utils</span>
git clone https://github.com/co-dan/ghc-syb.git
<span style=\"color: #D0D0FF;\">cd</span> ghc-syb/utils/
cabal install
<span style=\"color: #D0D0FF;\">cd</span> ../..
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">finally getting and installing ghc-mod</span>
git clone https://github.com/co-dan/ghc-mod.git
<span style=\"color: #D0D0FF;\">cd</span> ghc-mod
cabal install
</pre>
</div>
<p>
Ghc-mod itself uses the GHC API extensively so it’s no surprise we<br />
have to change at least some code. Now that we have installed ghc-mod<br />
on the guest VM we need to set up our host’s Emacs configuration to<br />
communicate properly with the VM. First of all put this in your Emacs<br />
config:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-elisp\"><span style=\"color: #7f7f7f;\">(</span>setq load-path <span style=\"color: #7f7f7f;\">(</span>cons <span style=\"color: #b5bd68;\">\"~/Library/Haskell/ghc-7.6.3/lib/ghc-mod-2.0.3/share\"</span> load-path<span style=\"color: #7f7f7f;\">))</span>
<span style=\"color: #7f7f7f;\">(</span>autoload 'ghc-init <span style=\"color: #b5bd68;\">\"ghc\"</span> nil t<span style=\"color: #7f7f7f;\">)</span>
<span style=\"color: #7f7f7f;\">(</span>add-hook 'haskell-mode-hook <span style=\"color: #7f7f7f;\">(</span><span style=\"color: #b294bb;\">lambda</span> <span style=\"color: #7f7f7f;\">()</span> <span style=\"color: #7f7f7f;\">(</span>ghc-init<span style=\"color: #7f7f7f;\">)))</span>
<span style=\"color: #969896;\">;; </span><span style=\"color: #969896;\">(setq ghc-module-command \"ghc-mod\")</span>
<span style=\"color: #7f7f7f;\">(</span>setq ghc-module-command <span style=\"color: #b5bd68;\">\"~/vado-ghc-mod.sh\"</span><span style=\"color: #7f7f7f;\">)</span>
</pre>
</div>
<p>
<code>~/vado-ghc-mod.sh</code> should contain the following:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\"><span style=\"color: #969896;\">#</span><span style=\"color: #969896;\">!/bin/</span><span style=\"color: #b294bb;\">bash</span>
<span style=\"color: #cc6666;\">VADO</span>=/Users/dan/Library/Haskell/bin/vado
<span style=\"color: #cc6666;\">LOCAL_PATH</span>=/Users/dan/projects/ghcjs/mnt/
<span style=\"color: #cc6666;\">REMOTE_PATH</span>=/home/vagrant/
<span style=\"color: #D0D0FF;\">cd</span> $<span style=\"color: #cc6666;\">LOCAL_PATH</span>
$<span style=\"color: #cc6666;\">VADO</span> -t ghc-mod ${<span style=\"color: #cc6666;\">@</span>//$<span style=\"color: #cc6666;\">LOCAL_PATH</span>/$<span style=\"color: #cc6666;\">REMOTE_PATH</span>} | sed <span style=\"color: #b5bd68;\">\"s,$REMOTE_PATH,$LOCAL_PATH,g\"</span>
</pre>
</div>
<p>
I know that it’s a hack, but it does work and I guess that’s what<br />
shell scripts are for ;)
</p>
<p>
Now go to <code>~/.bashrc</code> on the <i>guest machine</i> and make sure that the<br />
<code>PATH</code> variable is <a href=\"http://stackoverflow.com/questions/820517/bashrc-at-ssh-login\">set correctly</a>:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\"><span style=\"color: #cc6666;\">PATH</span>=/home/vagrant/ghcjs/bin:/home/vagrant/.cabal/bin:/home/vagrant/ghc/bin:/home/vagrant/jsshell:/home/vagrant/node-v0.10.10-linux-x86/bin:$<span style=\"color: #cc6666;\">PATH</span>
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\">PATH is set *before* this line:</span>
[ -z <span style=\"color: #b5bd68;\">\"$PS1\"</span> ] && <span style=\"color: #b294bb;\">return</span>
<span style=\"color: #969896;\"># </span><span style=\"color: #969896;\"><snip></span>
</pre>
</div>
<p>
And that’s it, you should be done!
</p>
<p>Before (ghc-mod running on the host machine):<br />
<a href=\"http://parenz.files.wordpress.com/2013/06/ghcmod-before.png\"><img src=\"http://parenz.files.wordpress.com/2013/06/ghcmod-before.png?w=600&h=306\" alt=\"ghcmod-before\" height=\"306\" class=\"alignnone size-medium wp-image-66\" width=\"600\" /></a></p>
<p>After (ghc-mod running inside <a href=\"https://github.com/ghcjs/ghcjs-build\">ghcjs-build</a> VM):<br />
<a href=\"http://parenz.files.wordpress.com/2013/06/ghcmod-after.png\"><img src=\"http://parenz.files.wordpress.com/2013/06/ghcmod-after.png?w=600&h=306\" alt=\"ghcmod-after\" height=\"306\" class=\"alignnone size-medium wp-image-65\" width=\"600\" /></a></p>
</div>
</div>
</div>
<div id=\"outline-container-sec-3\" class=\"outline-2\">
<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> Conclusion and future work</h2>
<div id=\"text-3\" class=\"outline-text-2\">
<p>
We’ve seen how a small but useful tool <code>vado</code> can make our life easier if<br />
we want to develop Haskell projects on a remote server or on a<br />
virtual machine. You can get Vado from GitHub: <a href=\"https://github.com/hamishmack/vado\">https://github.com/hamishmack/vado</a>
</p>
<p>
Next week we are planning on releasing our first version of<br />
interactive-diagrams pastesite (not going to be very interactive<br />
though) and writing out its security model.
</p>
<p>
Meanwhile check Luite’s <a href=\"http://weblog.luite.com/wordpress/?p=127\">post</a> on using Sodium FRP library for creating<br />
Functional Reactive Web interfaces. It’s astonishing how easily you<br />
can just get a FRP library, compile to JavaScript and make nifty web<br />
apps with it.
</p>
</div>
</div>
<br /> Tagged: <a href=\"http://parenz.wordpress.com/tag/ghcjs/\">ghcjs</a>, <a href=\"http://parenz.wordpress.com/tag/haskell-2/\">haskell</a>, <a href=\"http://parenz.wordpress.com/tag/soc/\">soc</a>, <a href=\"http://parenz.wordpress.com/tag/vm/\">vm</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/parenz.wordpress.com/64/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/parenz.wordpress.com/64/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=parenz.wordpress.com&blog=26722965&post=64&subd=parenz&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "23dd5df297dc0020f4d100cfcef2ce53") (123 (20945 14387 192426) "http://jpmoresmau.blogspot.com/2013/06/eclipsefp-253-released.html" "JP Moresmau: EclipseFP 2.5.3 released" "noreply@blogger.com (JP Moresmau)" "Sun, 30 Jun 2013 18:20:49 +0000" "Hello, I've just released a new version of EclipseFP, 2.5.3. This is a minor release for bug fixes, general stability and hopefully better performance.<br /><br />You can find the release notes here: <a href=\"https://raw.github.com/JPMoresmau/eclipsefp/master/docs/releasenotes/net.sf.eclipsefp.haskell_2.5.3.txt\">https://raw.github.com/JPMoresmau/eclipsefp/master/docs/releasenotes/net.sf.eclipsefp.haskell_2.5.3.txt</a>.<br /><br />I don't have a lot of time for EclipseFP at the moment, being busy on other projects, but I'm well aware that there are a few enhancements that people have asked for in the queue. I'll try to address these later on, and of course I'll happily accept pull request on <a href=\"https://github.com/JPMoresmau/eclipsefp\">https://github.com/JPMoresmau/eclipsefp</a>.<br /><br />As usual install or update by pointing your Eclipse to <span style=\"background-color: white; font-family: monospace; font-size: 12px; line-height: 19px;\">http://eclipsefp.sf.net/updates.</span><br /><span style=\"background-color: white; font-family: monospace; font-size: 12px; line-height: 19px;\"><br /></span>Happy Haskell Hacking!" nil nil "a87220f31b8e30c79a8cfc534119fb89") (122 (20945 14387 192051) "http://blog.darcs.net/2013/06/darcs-news-104.html" "Darcs: darcs news #104" "noreply@blogger.com (guillaume)" "Sun, 30 Jun 2013 11:29:10 +0000" "<h3 id=\"news-and-discussions\">News and discussions</h3><ol style=\"\"><li>Google Summer of Code 2013 has begun! BSRK and José will post updates on their blogs:<br /> <ul><li><a href=\"http://bsrkaditya.blogspot.com/search/label/darcs\"><code class=\"url\">http://bsrkaditya.blogspot.com/search/label/darcs</code></a></li><li><a href=\"http://blog.jlneder.com.ar/search/label/darcs\"><code class=\"url\">http://blog.jlneder.com.ar/search/label/darcs</code></a></li></ul></li></ol><h3 id=\"issues-resolved-8\">Issues resolved (8)</h3><dl><dt>issue2163 Radoslav Dorcik</dt><dd><ul><li>new option for amend, select author for patch stealing.</li><li><a href=\"http://bugs.darcs.net/issue2163\"><code class=\"url\">http://bugs.darcs.net/issue2163</code></a></li></ul></dd><dt>issue2227 Ganesh Sittampalam</dt><dd><ul><li>move the rebase patch to the end before an amend-record</li><li><a href=\"http://bugs.darcs.net/issue2227\"><code class=\"url\">http://bugs.darcs.net/issue2227</code></a></li></ul></dd><dt>issue2248 Ganesh Sittampalam</dt><dd><ul><li>always clean up rebase-in-progress state</li><li><a href=\"http://bugs.darcs.net/issue2248\"><code class=\"url\">http://bugs.darcs.net/issue2248</code></a></li></ul></dd><dt>issue2250 BSRK Aditya</dt><dd><ul><li>tabbing in usageHelper - pad by max length of command name</li><li><a href=\"http://bugs.darcs.net/issue2250\"><code class=\"url\">http://bugs.darcs.net/issue2250</code></a></li></ul></dd><dt>issue2311 Sebastian Fischer</dt><dd><ul><li>posthook for 'get' should run in created repo</li><li><a href=\"http://bugs.darcs.net/issue2311\"><code class=\"url\">http://bugs.darcs.net/issue2311</code></a></li></ul></dd><dt>issue2312 Sebastian Fischer</dt><dd><ul><li>posthooks for 'record' and 'amend-record' should receive DARCS_PATCHES</li><li><a href=\"http://bugs.darcs.net/issue2312\"><code class=\"url\">http://bugs.darcs.net/issue2312</code></a></li></ul></dd><dt>issue2320 Jose Luis Neder</dt><dd><ul><li>save prompted author name in ~/.darcs/author instead of ./_darcs/prefs/author</li><li><a href=\"http://bugs.darcs.net/issue2320\"><code class=\"url\">http://bugs.darcs.net/issue2320</code></a></li></ul></dd><dt>issue2321 Jose Luis Neder</dt><dd><ul><li>when no patch name given, directly invoke text editor</li><li><a href=\"http://bugs.darcs.net/issue2321\"><code class=\"url\">http://bugs.darcs.net/issue2321</code></a></li></ul></dd></dl><h3 id=\"patches-applied-20\">Patches applied (20)</h3><dl><dt>2013-06-09 Guillaume Hoffmann</dt><dd><ul><li>make nano the default text editor instead of vi</li></ul></dd><dt>2013-06-20 BSRK Aditya</dt><dd><ul><li>Resolve issue2250: tabbing in usageHelper - pad by max length of command name</li></ul></dd><dt>2013-06-16 Guillaume Hoffmann</dt><dd><ul><li>remove word repetition in fileHelpAuthor string</li></ul></dd><dt>2013-06-16 Jose Luis Neder</dt><dd><ul><li>resolve issue2320: save prompted author name in ~/.darcs/author instead of ./_darcs/prefs/author</li><li>resolve issue2321: when no patch name given, directly invoke text editor</li></ul></dd><dt>2013-04-30 Guillaume Hoffmann</dt><dd><ul><li>remove repository flag DryRun parameter when not used or always NoDryRun</li></ul></dd><dt>2013-04-05 Ganesh Sittampalam</dt><dd><ul><li>fix test for Windows</li></ul></dd><dt>2013-03-10 Sebastian Fischer</dt><dd><ul><li>Follow-up on patch1066 resolving issue2312.</li><li>resolve issue2312: posthooks for 'record' and 'amend-record' should receive DARCS_PATCHES</li><li>Added tests for issue2312: posthooks for 'record' and 'amend-record' should receive DARCS_PATCHES</li></ul></dd><dt>2013-02-16 Ganesh Sittampalam</dt><dd><ul><li>resolve issue2227: move the rebase patch to the end before an amend-record</li><li>tidy command definitions in Darcs.UI.Commands.Rebase</li><li>resolve issue2248: always clean up rebase-in-progress state</li><li>add --ignore-times option to rebase commands that read the working dir</li></ul></dd><dt>2013-03-08 Sebastian Fischer</dt><dd><ul><li>resolve issue2311: posthook for 'get' should run in created repo</li><li>Added tests for Issue 2311.</li></ul></dd><dt>2013-06-03 Guillaume Hoffmann</dt><dd><ul><li>haddocks for functions that look for user e-mail</li></ul></dd><dt>2013-03-02 Radoslav Dorcik</dt><dd><ul><li>Resolve issue2163: new option for amend, select author for patch stealing.</li></ul></dd><dt>2013-05-29 BSRK Aditya</dt><dd><ul><li>Export doOptimizeHTTP from Optimize module</li><li>Increase efficiency of patch index update by more efficient extraction</li></ul></dd></dl>See <a href=\"http://wiki.darcs.net/DarcsWeeklyNews/2013-06-30\">darcs wiki entry</a> for details." nil nil "d1984c0a17d48ef8a084e126494e9f2a") (121 (20945 14387 191318) "http://wadler.blogspot.com/2013/06/knowledge-economy.html" "Philip Wadler: Knowledge Economy" "noreply@blogger.com (Philip Wadler)" "Sun, 30 Jun 2013 11:20:54 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-5FG3qlbvISc/UdATLL5FduI/AAAAAAAACdk/5DgXlPXknxY/s242/ke-logo.gif\"><img src=\"http://2.bp.blogspot.com/-5FG3qlbvISc/UdATLL5FduI/AAAAAAAACdk/5DgXlPXknxY/s400/ke-logo.gif\" height=\"208\" border=\"0\" width=\"400\" /></a></div><div style=\"clear: both; text-align: justify;\" class=\"separator\">UCU writes:</div><blockquote class=\"tr_bq\"><span style=\"background-color: white; color: #222222; text-align: start;\"><span style=\"font-family: inherit;\">Wednesday’s spending review was bad news for universities, colleges and students. Student visa charges will go up, student grants will be frozen and funding aimed at encouraging the poorest students to apply to university will be axed. On Thursday, Danny Alexander announced plans to sell off student loans. All this in the same week that the OECD research showed the UK falling behind in investment in higher education at a time when demand for highly skilled graduates is still rising faster than supply.</span></span></blockquote>Sign up to the <a href=\"http://www.knowledgeeconomy.org.uk/\">Knowledge Economy campaign</a>.<br /><div style=\"clear: both; text-align: center;\" class=\"separator\"><br /></div><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/-PWs4Y4eMJZg/UdASqk29BeI/AAAAAAAACdg/6iOJK4FXLTE/s1600/ke1.tiff\"><img src=\"http://3.bp.blogspot.com/-PWs4Y4eMJZg/UdASqk29BeI/AAAAAAAACdg/6iOJK4FXLTE/s640/ke1.tiff\" height=\"188\" border=\"0\" width=\"640\" /></a></div><div style=\"clear: both; text-align: center;\" class=\"separator\"><br /></div><br /><div style=\"clear: both; text-align: center;\" class=\"separator\"></div><br />" nil nil "7581b30ff1d90d8410eaea11bab61ed2") (120 (20945 14387 190793) "http://praisecurseandrecurse.blogspot.com/2013/06/the-polar-game-in-haskell-day-4-12.html" "Paul Potts: The Polar Game in Haskell, Day 4 1/2: Folding a Penguin" "noreply@blogger.com (Paul Potts)" "Sat, 29 Jun 2013 19:03:00 +0000" "<p>So, just a quick update today. While I was cooking bacon this morning I looked at comments and tried to implement an idea I had last night. Roland suggested I could get rid of <b>Edge</b>. I had already been asking myself this. Using a special flag value for the edge-of-board case came from the Objective-C version where I wanted to avoid reading tiles outside the bounds of the board array. When using lists there is a built-in termination condition, so Edge is gone completely.</p> <p>Roland also suggested a simplified next_ppos, like so:</p> <pre>next_ppos :: Pos -> Dir -> Pos<br />next_ppos pos dir = Pos ( posY pos + fst step ) ( posX pos + snd step )<br />    where step = delta dir<br />          delta East = ( 0, 1 )<br />          delta South = ( 1, 0 )<br />          delta West = ( 0, -1 )<br />          delta North = ( -1, 0 )</pre> <p>So that's in there now. Thanks, Roland!</p> <p>The next thing I wanted to do is get rid of that ugly test code with all the nested calls to next_world. I was re-reading <i>Learn You a Haskell</i> and it occurred to me that this sort of thing -- distilling a list -- is what <i>folds</i> are for. And then, a minute later, that I don't actually want to <i>fold</i> the worlds down to one final world -- I want to capture all the intermediate worlds as we process a list of moves. And that's what a <i>scan</i> is for. So we're conducting surveillance on the penguin as he goes about his business. GHCI tells me that the type of <b>scanl</b> is <b>(a -> b -> a) -> a -> [b] -> [a]</b>. So I'm calling it with a function that takes a <b>World</b> and a <b>Dir</b> and returns a <b>World</b>. That's the <b>(a -> b -> a)</b> part. Then it gets an initial <b>World</b>, that's the <b>a</b>, and a list of elements of type <b>Dir</b>, that's the <b>[b]</b>, and returns a list of elements of type <b>World</b>, that's <b>[a]</b>.</p> <pre>moves_to_dirs :: [(Dir, Int)] -> [Dir]<br />moves_to_dirs [] = []<br />moves_to_dirs (m:ms) = replicate ( snd m ) ( fst m ) ++ moves_to_dirs ms<br /><br />moves_board_1 = [(East,21),(South,2), (East,3),(North,2),(West,2)]<br /><br />move_sequence :: [(Dir,Int)] -> [World]<br />move_sequence repeats = scanl next_world init_world steps<br />    where steps = moves_to_dirs repeats<br /><br />main :: IO ()<br />main = do<br />    mapM_ putStrLn pretty_worlds<br />    where worlds = move_sequence moves_board_1</pre> <p>And that gives me the whole shebang, ending in:</p> <pre>penguin @: Pos {posY = 0, posX = 22}, facing: West, hearts: 3<br />tr __________________________________________tr _______________ic ______<br />tr ___bo ___mt ___he ic he ___________________________tr ______tr ______<br />tr _____________________________________________he _________mt ho ______<br />tr tr ____________tr ___________________________________________________<br /><br />penguin @: Pos {posY = 0, posX = 21}, facing: West, hearts: 3<br />tr __________________________________________tr ic _____________________<br />tr ___bo ___mt ___he ic he ___________________________tr ______tr ______<br />tr _____________________________________________he _________mt ho ______<br />tr tr ____________tr ___________________________________________________</pre> <p>Oh, if you just want to see the final result, foldl will work here. Their types are identical, except that foldl returns a single <b>a</b> (in this case, a <b>World</b>) instead of a list of elements of type <b>World</b>. So a function to make use of that just returns a single <b>World</b>, but everything else is the same. Like so:</p> <pre>move_sequence' :: [(Dir,Int)] -> World<br />move_sequence' repeats = foldl next_world init_world steps<br />    where steps = moves_to_dirs repeats</pre> <p>And then I can display both:</p> <pre>main :: IO ()<br />main = do<br />    mapM_ putStrLn pretty_worlds <br />    putStrLn pretty_final_world<br />    where worlds = move_sequence moves_board_1<br />          final_world = move_sequence' moves_board_1<br />          pretty_worlds = map pretty_world worlds</pre> <p>I like it -- examples of fold and scan that are a little more complex than the usual textbook examples. Personally I'd rather read more of those and less about how we can implement some simple math operation that can be trivially implemented in a dozen other, more readable ways.</p> <p>Oh, and it's not thoroughly tested or finished by any means, but if you'd like to play with this code, it's on github now: <a href=\"https://github.com/paulrpotts/arctic-slide-haskell\">https://github.com/paulrpotts/arctic-slide-haskell</a>. Comments are welcome as always.</p>" nil nil "2937163cc3ea7f642ea5600cd8db448a") (119 (20945 14387 190012) "http://lpuppet.banquise.net/blog/2013/06/28/full-rewrite-in-progress/" "language-puppet: Full rewrite in progress" nil "Fri, 28 Jun 2013 20:24:00 +0000" "<p>In the process of writing the language-puppet library, I learned quite a lot about Haskell and its libraries. The first part of language-puppet that was written was the parser. At that time I did not understand monads, brute-forced the do-notation until it seemed to do what I wanted, and generally made all kind of blunders. The other problem was that I was learning Puppet too, at a time when it was changing a lot and nothing was really documented. This led to unfortunate decisions that I already <a href=\"http://lpuppet.banquise.net/blog/2012/10/08/types-used-in-the-interpretation-stage/\">documented</a>.</p>
<p>I dediced to rewrite everything from scratch, by directly implementing all I could find in the
<a href=\"http://docs.puppetlabs.com/puppet/3/reference/\">reference</a>. I started a new parser during the weekend, encoding as many verifications as possible in
it, and then tried it on real manifests. Boy, was I naïve ! It did not work at all. The specification is good for learning the language or dissipating
some common misconceptions, but is of moderate use for my purpose. I relaxed most of the checks and it seems to work now.</p>
<p><img src=\"http://lpuppet.banquise.net/images/lpuppet-parser-color.png\" alt=\"Alt text\" /></p>
<p>On the technical side, I am now using the <a href=\"http://hackage.haskell.org/package/parsers\">parsers</a> package, which has a very nice interface. I considered
using <a href=\"http://hackage.haskell.org/package/trifecta\">trifecta</a> as the underlying parser. Its error messages are gorgeous, but it turns out it is not trivial to get my own <em>lexeme</em>
system in place with it. I went with <a href=\"http://hackage.haskell.org/package/parsec\">parsec</a>, and, instead of using the
<a href=\"http://hackage.haskell.org/package/parsec-parsers\">parsec-parsers</a> package, wrote my own instances (to be honest I copy-pasted those of the package
and added a non-default definition for <em>token</em>). Edward Kmett was nice enough to give me pointers on how to do this with trifecta, but this did look quite
clumsy. He hinted that he might work on a monad-transformer approach to this problem, so I am just waiting for this to happen. The nice thing about
the parsers approach is that switching now is trivial.</p>
<p>As can be seen on the previous screenshot, I am using a <a href=\"http://hackage.haskell.org/package/ansi-wl-pprint\">nice pretty printing library</a> that let me
(ab)use color.</p>
<p>Another huge difference is that I now use strict type whenever possible. The previous version seemed to be able to support an arbitrary number of worker threads with
300mb of storage for my catalogs, whereas the Puppet version could go up to 800mb for a single thread. I would like to at least halve this figure for
the next version.</p>
<p>The next step is to write the new <em>daemon</em> infrastructure. I already have a generic <a href=\"https://github.com/bartavelle/filecache\">file-cache</a> module that
let you cache things related to files. When a file is modified, the cached value is automagically invalidated (using inotify). I hope this will work
well in practice and will not be blocking all the other threads.</p>" nil nil "6d140c593e83a96e51a56d0aaedd9567") (118 (20945 14387 189151) "http://praisecurseandrecurse.blogspot.com/2013/06/the-polar-game-in-haskell-day-4.html" "Paul Potts: The Polar Game in Haskell, Day 4" "noreply@blogger.com (Paul Potts)" "Fri, 28 Jun 2013 20:07:00 +0000" "<p>OK, things are getting meaty: I've made some minor modifications to <b>World</b>:</p> <pre>data World = World { wBoard :: Board, wPenguinPos :: Pos,<br />                     wPenguinDir :: Dir, wHeartCount :: Int }<br />                     deriving (Show)</pre> <p>This extracts the sequence of tiles in front of the penguin, for various directions, from a nested list representation of the board:</p> <pre>view :: Board -> Pos -> Dir -> [Tile]<br />view board pos East = ( drop ( posX pos + 1 ) $<br />    board !! ( posY pos ) ) ++ [Edge]<br />view board pos South = ( drop ( posY pos + 1 ) $<br />    ( transpose board ) !! ( posX pos ) ) ++ [Edge]<br />view board pos West = ( reverse $ take ( posX pos ) $<br />    board !! ( posY pos ) ) ++ [Edge]<br />view board pos North = ( reverse $ take ( posY pos ) $<br />    ( transpose board ) !! ( posX pos ) ) ++ [Edge]</pre> <p>I have fleshed out slide and collide after some testing; I haven't tested all my known cases yet. Maybe tomorrow. Here is how I create the initial world:</p> <pre>init_world :: World<br />init_world = ( World init_board ( Pos 0 0 ) South 3 )</pre> <p>South because in the south-facing representation, the penguin's face is visible (although of course I don't have a GUI yet).</p> <p>A little utility function for clarity:</p> <pre>nest :: [a] -> [[a]]<br />nest xs = [xs]</pre> <p>And now, deep breath, the logic to build the next board out of the current board combined with a replaced list of tiles that may have been changed due to object interaction. It gets pretty ugly here when we're undoing the appending of Edge with init, and undoing the reversing that view has done when looking North and West, and working with the transposed board for North and South. There are some extra line breaks in there that are not in the working code. I have an issue with my <b>let</b> clauses not compiling correctly if I break the lines. I'm sure there's a prettier workaround, and I will look that up, but after going down a rabbit hole of Haskell syntax, I have timed out for today and right now I'm just happy it runs:</p> <pre>next_board :: Board -> Pos -> Dir -> ( Bool, Board )<br />next_board board pos East =<br />    let ( penguin_could_move, updated_view ) =<br />        step $ view board pos East<br />    in (<br />        penguin_could_move,<br />        take ( posY pos ) board ++<br />        nest (<br />            ( take ( posX pos + 1 )<br />                ( board !! ( posY pos ) ) ) ++<br />            ( init updated_view ) ) ++<br />        drop ( posY pos + 1 ) board )<br />next_board board pos South =<br />    let ( penguin_could_move, updated_view ) =<br />        step $ view board pos South<br />    in (<br />        penguin_could_move,<br />        transpose (<br />            take ( posX pos ) ( transpose board ) ++<br />            nest (<br />                ( take ( posY pos + 1 )<br />                    ( ( transpose board ) !! ( posX pos ) ) ) ++<br />                ( init updated_view ) ) ++<br />        drop ( posX pos + 1 ) ( transpose board ) ) )<br />next_board board pos West =<br />    let ( penguin_could_move, updated_view ) =<br />        step $ view board pos West<br />    in (<br />        penguin_could_move,<br />        take ( posY pos ) board ++<br />        nest (<br />            ( reverse ( init updated_view ) ) ++<br />            ( drop ( posX pos )<br />                ( board !! ( posY pos ) ) ) ) ++<br />        drop ( posY pos + 1 ) board )<br />next_board board pos North =<br />    let ( penguin_could_move, updated_view ) =<br />        step $ view board pos North<br />    in (<br />        penguin_could_move,<br />            transpose (<br />            take ( posX pos ) ( transpose board ) ++<br />            nest (<br />                ( reverse ( init updated_view ) ) ++<br />                ( drop ( posY pos )<br />                    ( ( transpose board ) !! ( posX pos ) ) ) ) ++<br />            drop ( posX pos + 1 ) ( transpose board ) ) )</pre> <p>That... seems like way too much code, and I would like to kill it in favor of using a real array type -- soon. The tutorials were pretty insistent that I try to use lists. I'm pretty sure this is not what they meant. I will say that I was really impressed, writing this, how much of it worked the first time, as soon as I got it past the compiler. But that doesn't necessarily mean this is the best possible design for this code.</p> <p>Anyway, updating penguin pos:</p> <pre>next_ppos :: Pos -> Dir -> Pos<br />next_ppos pos East = ( Pos ( posY pos ) ( posX pos + 1 ) )<br />next_ppos pos South = ( Pos ( posY pos + 1 ) ( posX pos ) )<br />next_ppos pos West = ( Pos ( posY pos ) ( posX pos - 1 ) )<br />next_ppos pos North = ( Pos ( posY pos - 1 ) ( posX pos ) )</pre> <p>And, updating the world. I had a similar problem with the line-broken <b>let</b> clause here:</p> <pre>next_world :: World -> Dir-> World<br />next_world old_world move_dir =<br />    let ( can_move, board ) = next_board ( wBoard old_world )<br />        ( wPenguinPos old_world ) ( wPenguinDir old_world )<br />    in<br />        if ( move_dir /= wPenguinDir old_world )<br />        then ( World ( wBoard old_world ) ( wPenguinPos old_world )<br />                   move_dir ( wHeartCount old_world ) )<br />        else ( World board<br />                   ( next_ppos ( wPenguinPos old_world )<br />                               ( wPenguinDir old_world ) )<br />                   ( wPenguinDir old_world )<br />                   ( wHeartCount old_world ) )</pre> <p>Now, some pretty-printing, since it gets pretty tedious to visualize the board from reading the dumped-out list in GHCI:</p> <pre>pretty_tiles :: [Tile] -> String<br />pretty_tiles [] = \"\\n\"<br />pretty_tiles (t:ts) = case t of<br />                 Empty     -> \"___ \"<br />                 Mountain  -> \"mtn \"<br />                 House     -> \"hou \"<br />                 Ice_Block -> \"ice \"<br />                 Heart     -> \"hea \"<br />                 Bomb      -> \"bom \"<br />                 Tree      -> \"tre \"<br />                 Edge      -> \"### \"<br />             ++ pretty_tiles ts<br /><br />pretty_board :: Board -> String<br />pretty_board [] = \"\"<br />pretty_board (ts:tss) = pretty_tiles ts ++ pretty_board tss<br /><br />pretty_world :: World -> String<br />pretty_world world =<br />    \"penguin @: \" ++ show ( wPenguinPos world ) ++<br />    \", facing: \"  ++ show ( wPenguinDir world ) ++<br />    \", hearts: \"  ++ show ( wHeartCount world ) ++<br />    \"\\n\" ++ pretty_board ( wBoard world )</pre> <p>And here's where the rubber meets the road -- or, rather, fails to. I need state, at least simulated state. I messed with state monads for a while but I'm not quite ready. I will tackle that another day. I messed with trying to capture a list in a closure and append a series of successive worlds to it but while that would work fine in Scheme, Lisp, or Dylan I realized that in Haskell I was just fighting the entire language design. So I gave in and did this stupid thing for now, just so I could see my world updating and start to validate that all the tile interactions on the board work:</p> <pre>main :: IO ()<br />main = do<br />    putStrLn \"ArcticSlide start\"<br />    let world0 = init_world<br />    putStrLn $ pretty_world world0<br /><br />    -- 21 East<br />    let world5  = next_world ( next_world ( next_world ( next_world (<br />        next_world world0  East ) East ) East ) East ) East<br />    let world10 = next_world ( next_world ( next_world ( next_world (<br />        next_world world5  East ) East ) East ) East ) East<br />    let world15 = next_world ( next_world ( next_world ( next_world (<br />        next_world world10 East ) East ) East ) East ) East<br />    let world20 = next_world ( next_world ( next_world ( next_world (<br />        next_world world15 East ) East ) East ) East ) East<br />    let world21 = next_world world20 East<br />    putStrLn $ pretty_world world21<br />    -- 2 South<br />    let world23 = next_world ( next_world world21 South ) South<br />    putStrLn $ pretty_world world23<br />    -- 3 East<br />    let world26 = next_world ( next_world (<br />        next_world world23 East ) East ) East<br />    putStrLn $ pretty_world world26<br />    -- 2 North<br />    let world28 = next_world ( next_world world26 North ) North<br />    putStrLn $ pretty_world world28<br />    -- 2 West<br />    let world30 = next_world ( next_world world28 West ) West<br />    putStrLn $ pretty_world world30</pre> <p>That is far from what I'd like to be doing eventually with managing game moves, and I still haven't put in any handling for the heart count, but it works:</p> <pre>ArcticSlide start<br />penguin @: Pos {posY = 0, posX = 0}, facing: South, hearts: 3<br />tr __________________________________________tr _______________ic ______<br />tr ___bo ___mt ___he ic he ___________________________tr ______tr ______<br />tr _____________________________________________he _________mt ho ______<br />tr tr ____________tr ___________________________________________________<br /><br />...<br /><br />penguin @: Pos {posY = 0, posX = 22}, facing: North, hearts: 3<br />tr __________________________________________tr _______________ic ______<br />tr ___bo ___mt ___he ic he ___________________________tr ______tr ______<br />tr _____________________________________________he _________mt ho ______<br />tr tr ____________tr ___________________________________________________<br /><br />penguin @: Pos {posY = 0, posX = 21}, facing: West, hearts: 3<br />tr __________________________________________tr ic _____________________<br />tr ___bo ___mt ___he ic he ___________________________tr ______tr ______<br />tr _____________________________________________he _________mt ho ______<br />tr tr ____________tr ___________________________________________________<br /></pre> <p>Aaaand... the penguin has pushed the ice block in the upper right to the west, and it has slid west and become blocked by the tree. That's... good, right? My brain is a little fried. All that to update a game board. I need a break, and maybe a stiff drink. I'm going to have to fortify myself before I successfully tackle the state monad. But I am determined!</p>" nil nil "99ee8d6a74004aefc0db264560efeed3") (117 (20945 14387 144339) "http://praisecurseandrecurse.blogspot.com/2013/06/the-polar-game-in-haskell-day-3.html" "Paul Potts: The Polar Game in Haskell, Day 3" "noreply@blogger.com (Paul Potts)" "Fri, 28 Jun 2013 01:12:00 +0000" "<p>More phone interviews, more coding. On my laptop, amidst a gaggle of fighting children, during a thunderstorm, with our basement flooding, with the kind assistance of some friendly commentors, a little more progress. Let's change <b>Pos</b></p> <pre>data Pos = Pos { posY :: Int, posX :: Int }<br />    deriving (Show, Eq)</pre> <p>And define a game world:</p> <pre>data World = World { board :: Board, penguinPos :: Pos,<br />                          penguinDir :: Dir,<br />                          heartCount :: Int } deriving (Show)</pre> <p>It was painful, took an embarrassingly long time, and this can't possibly be how I want to keep it indefinitely, but I finished <b>slice</b> which treats a list of lists of tiles like a 2-dimensional array and gives us what the penguin sees before him, looking in a given direction:</p> <pre>slice :: Board -> Pos -> Dir -> [Tile]<br />slice board pos East = ( drop ( posX pos ) $ <br />    board !! ( posY pos ) ) ++ [Edge]<br />slice board pos South = ( drop ( posY pos ) $ <br />    ( transpose board ) !! ( posX pos ) ) ++ [Edge]<br />slice board pos West = ( reverse $ take ( posX pos + 1 ) $ <br />    board !! ( posY pos ) ) ++ [Edge]<br />slice board pos North = ( reverse $ take ( posY pos + 1 ) $ <br />    ( transpose board ) !! ( posX pos ) ) ++ [Edge]</pre> <p>Let's just leave that as it is for now and use it, with the intent of replacing it with a real array of some sort later on. I still have to figure out how to merge a modified penguin track with an unmodified board to create the next state of the entire board... that's not going to be pretty, but it's doable.</p> <p>So, one of the things I really love about Haskell is that once you get these pieces, they really do start come together nicely. Let's go ahead and define the first board. I could make it from the strings or a run-length encoding or something, but for now let's just bite the bullet and build the list the hard way:</p> <pre>get_initial_board :: [[Tile]]<br />get_initial_board = [[Tree,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Tree,Empty,Empty,<br />                      Empty,Empty,Empty,Ice_Block,Empty,Empty],<br />                     [Tree,Empty,Bomb,Empty,Mountain,Empty,<br />                      Heart,Ice_Block,Heart,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty,<br />                      Tree,Empty,Empty,Tree,Empty,Empty],<br />                     [Tree,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Heart,Empty,<br />                      Empty,Empty,Mountain,House,Empty,Empty],<br />                     [Tree,Tree,Empty,Empty,Empty,Empty,<br />                      Tree,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty]]<br /><br />penguin_view :: Board -> Pos -> Dir -> [Tile]<br />penguin_view board pos dir = drop 1 $ slice board pos dir</pre> <p>So now we can actually start doing stuff with this. Here's what's in front of the penguin when he looks at the board from different points, in different directions:</p> <a href=\"http://4.bp.blogspot.com/-7lLSOnNaHd8/Ua4uWuQMFmI/AAAAAAAADBs/8ByFzRW9Ccs/s1600/level_1_blown_up.tiff\"><img src=\"http://4.bp.blogspot.com/-7lLSOnNaHd8/Ua4uWuQMFmI/AAAAAAAADBs/8ByFzRW9Ccs/s640/level_1_blown_up.tiff\" height=\"120\" border=\"0\" width=\"512\" /></a> <pre>*Main> penguin_view get_initial_board (Pos 0 0) East<br />[Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,<br />Empty,Empty,Empty,Empty,Empty,Tree,Empty,Empty,Empty,Empty,<br />Empty,Ice_Block,Empty,Empty,Edge]<br /><br />*Main> penguin_view get_initial_board (Pos 0 0) South<br />[Tree,Tree,Tree,Edge]<br /><br />*Main> penguin_view get_initial_board (Pos 0 0) West<br />[Edge]<br /><br />*Main> penguin_view get_initial_board (Pos 0 0) North<br />[Edge]<br /><br />*Main> penguin_view get_initial_board (Pos 3 21) North<br />[House,Tree,Ice_Block,Edge]</pre> <p>Fun! Tomorrow, if I can manage it... an updated world.</p>" nil nil "cd156fb19829a0e207e5bbc2f788a431") (116 (20945 14387 113814) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_635\"></span>, where <span id=\"tex_5669\"></span> is the number of “folds” and <span id=\"tex_3690\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_6360\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "b7a60f562fd66b7a9a4081054395adc6") (115 (20941 47656 550654) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_4120\"></span>, where <span id=\"tex_5799\"></span> is the number of “folds” and <span id=\"tex_7138\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_4516\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "a29de488ef5250e4814771cbf284ab45") (114 (20941 43077 507817) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_4537\"></span>, where <span id=\"tex_3947\"></span> is the number of “folds” and <span id=\"tex_8487\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_6091\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "c8195d5d51e954ab03fffa4a88158065") (113 (20941 38058 954177) "http://wadler.blogspot.com/2013/06/parallel-prefix-scan-and-mapreduce.html" "Philip Wadler: Parallel prefix scan and MapReduce" "noreply@blogger.com (Philip Wadler)" "Fri, 28 Jun 2013 12:25:45 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-xZnXzPFujn8/Uc1_cVu63CI/AAAAAAAACdA/zp4IE1PRG54/s445/MapReduce.png\"><img src=\"http://2.bp.blogspot.com/-xZnXzPFujn8/Uc1_cVu63CI/AAAAAAAACdA/zp4IE1PRG54/s400/MapReduce.png\" height=\"341\" border=\"0\" width=\"400\" /></a></div>The <a href=\"http://dl.acm.org/citation.cfm?id=1327492\">MapReduce</a> paper begins its discussion of related work as follows:<br /><blockquote class=\"tr_bq\">Many systems have provided restricted programming<br />models and used the restrictions to parallelize the computation<br />automatically. For example, an associative function<br />can be computed over all prefixes of an <i>N</i> element<br />array in log <i>N</i> time on <i>N</i> processors using parallel prefix<br />computations.</blockquote>Has anyone implemented parallel prefix scan as an extension to MapReduce or a similar framework such as Hadoop, and did it prove useful?" nil nil "afea56fb50cb0c7fb97f1fd1d6a5c7fb") (112 (20941 34168 794143) "http://wadler.blogspot.com/2013/06/parallel-prefix-scan-and-mapreduce.html" "Philip Wadler: Parallel prefix scan and MapReduce" "noreply@blogger.com (Philip Wadler)" "Fri, 28 Jun 2013 12:23:38 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-xZnXzPFujn8/Uc1_cVu63CI/AAAAAAAACdA/zp4IE1PRG54/s445/MapReduce.png\"><img src=\"http://2.bp.blogspot.com/-xZnXzPFujn8/Uc1_cVu63CI/AAAAAAAACdA/zp4IE1PRG54/s400/MapReduce.png\" height=\"341\" border=\"0\" width=\"400\" /></a></div>The <a href=\"http://dl.acm.org/citation.cfm?id=1327492\">MapReduce</a> paper begins its discussion of related work as follows:<br /><blockquote class=\"tr_bq\">Many systems have provided restricted programming<br />models and used the restrictions to parallelize the computation<br />automatically. For example, an associative function<br />can be computed over all prefixes of an <i>N</i> element<br />array in log <i>N</i> time on <i>N</i> processors using parallel prefix<br />computations.</blockquote>Has anyone implemented parallel prefix scan as an extension to MapReduce or a similar framework such as Hadoop, and did it prove useful?" nil nil "0df589e0a9c61d271eafa5b3487f6c52") (111 (20941 17517 388149) "http://praisecurseandrecurse.blogspot.com/2013/06/the-polar-game-in-haskell-day-3.html" "Paul Potts: The Polar Game in Haskell, Day 3" "noreply@blogger.com (Paul Potts)" "Fri, 28 Jun 2013 01:12:00 +0000" "<p>More phone interviews, more coding. On my laptop, amidst a gaggle of fighting children, during a thunderstorm, with our basement flooding, with the kind assistance of some friendly commentors, a little more progress. Let's change <b>Pos</b></p> <pre>data Pos = Pos { posY :: Int, posX :: Int }<br />    deriving (Show, Eq)</pre> <p>And define a game world:</p> <pre>data World = World { board :: Board, penguinPos :: Pos, penguinDir :: Dir,<br />                     heartCount :: Int } deriving (Show)</pre> <p>It was painful, took an embarrassingly long time, and this can't possibly be how I want to keep it indefinitely, but I finished <b>slice</b> which treats a list of lists of tiles like a 2-dimensional array and gives us what the penguin sees before him, looking in a given direction:</p> <pre>slice :: Board -> Pos -> Dir -> [Tile]<br />slice board pos East = ( drop ( posX pos ) $ <br />    board !! ( posY pos ) ) ++ [Edge]<br />slice board pos South = ( drop ( posY pos ) $ <br />    ( transpose board ) !! ( posX pos ) ) ++ [Edge]<br />slice board pos West = ( reverse $ take ( posX pos + 1 ) $ <br />    board !! ( posY pos ) ) ++ [Edge]<br />slice board pos North = ( reverse $ take ( posY pos + 1 ) $ <br />    ( transpose board ) !! ( posX pos ) ) ++ [Edge]</pre> <p>Let's just leave that as it is for now and use it, with the intent of replacing it with a real array of some sort later on. I still have to figure out how to merge a modified penguin track with an unmodified board to create the next state of the entire board... that's not going to be pretty, but it's doable.</p> <p>So, one of the things I really love about Haskell is that once you get these pieces, they really do start come together nicely. Let's go ahead and define the first board. I could make it from the strings or a run-length encoding or something, but for now let's just bite the bullet and build the list the hard way:</p> <pre>get_initial_board :: [[Tile]]<br />get_initial_board = [[Tree,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Tree,Empty,Empty,<br />                      Empty,Empty,Empty,Ice_Block,Empty,Empty],<br />                     [Tree,Empty,Bomb,Empty,Mountain,Empty,<br />                      Heart,Ice_Block,Heart,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty,<br />                      Tree,Empty,Empty,Tree,Empty,Empty],<br />                     [Tree,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Heart,Empty,<br />                      Empty,Empty,Mountain,House,Empty,Empty],<br />                     [Tree,Tree,Empty,Empty,Empty,Empty,<br />                      Tree,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty,<br />                      Empty,Empty,Empty,Empty,Empty,Empty]]<br /><br />penguin_view :: Board -> Pos -> Dir -> [Tile]<br />penguin_view board pos dir = drop 1 $ slice board pos dir</pre> <p>So now we can actually start doing stuff with this. Here's what's in front of the penguin when he looks at the board from different points, in different directions:</p> <a href=\"http://4.bp.blogspot.com/-7lLSOnNaHd8/Ua4uWuQMFmI/AAAAAAAADBs/8ByFzRW9Ccs/s1600/level_1_blown_up.tiff\"><img src=\"http://4.bp.blogspot.com/-7lLSOnNaHd8/Ua4uWuQMFmI/AAAAAAAADBs/8ByFzRW9Ccs/s640/level_1_blown_up.tiff\" height=\"120\" border=\"0\" width=\"512\" /></a> <pre>*Main> penguin_view get_initial_board (Pos 0 0) East<br />[Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Tree,Empty,Empty,Empty,Empty,Empty,Ice_Block,Empty,Empty,Edge]<br /><br />*Main> penguin_view get_initial_board (Pos 0 0) South<br />[Tree,Tree,Tree,Edge]<br /><br />*Main> penguin_view get_initial_board (Pos 0 0) West<br />[Edge]<br /><br />*Main> penguin_view get_initial_board (Pos 0 0) North<br />[Edge]<br /><br />*Main> penguin_view get_initial_board (Pos 3 21) North<br />[House,Tree,Ice_Block,Edge]</pre> <p>Fun! Tomorrow, if I can manage it... an updated world.</p>" nil nil "21685732a0f8447ed37274f5715c40f1") (110 (20941 17517 387235) "http://feedproxy.google.com/~r/FpComplete/~3/LJ7ZmluBNOk/fp-haskell-center-beta-demo" "FP Complete: FP Haskell Center Beta Demo" nil "Thu, 27 Jun 2013 19:51:00 +0000" "<p>Thanks to the roughly 1000 people who have already
<a href=\"https://www.fpcomplete.com/business/haskell-center\">requested beta accounts</a> to try FP Haskell Center.
We are about to start admitting beta users in small groups,
and in the meantime I thought you all might enjoy a detailed demo. Enjoy!</p><p><a href=\"http://www.youtube.com/watch?v=cyyDmQKcHMs\">FP Haskell Center Beta Demo</a> on YouTube.</p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=LJ7ZmluBNOk:MzhjMDnd8lU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=LJ7ZmluBNOk:MzhjMDnd8lU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=LJ7ZmluBNOk:MzhjMDnd8lU:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=LJ7ZmluBNOk:MzhjMDnd8lU:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=LJ7ZmluBNOk:MzhjMDnd8lU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=LJ7ZmluBNOk:MzhjMDnd8lU:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/LJ7ZmluBNOk\" height=\"1\" width=\"1\" />" nil nil "2467f214f95140f2335b3ebb03f406c4") (109 (20941 17517 271582) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_9787\"></span>, where <span id=\"tex_2416\"></span> is the number of “folds” and <span id=\"tex_70\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_724\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "104ea18e962a68ec303a00607923a3b3") (108 (20940 21559 637127) "http://theorylunch.wordpress.com/2013/06/27/having-lunch-in-a-garden-of-eden/" "Theory Lunch (Institute of Cybernetics, Tallinn): Having lunch in a Garden of Eden" nil "Thu, 27 Jun 2013 13:30:53 +0000" "<p>Today I talked about the Garden-of-Eden theorem, the first rigorous result in cellular automata theory.</p>
<p>I wrote a post about it in my new blog, dedicated to cellular automata, which I launched this week. The post contains extended proofs and examples, and most important, fixes several errors I had made during the talk. I might update it later, by adding figures—which are well known to take their time.</p>
<p>Link: <a href=\"http://anotherblogonca.wordpress.com/2013/06/27/in-a-garden-of-eden/\" target=\"_blank\">http://anotherblogonca.wordpress.com/2013/06/27/in-a-garden-of-eden/</a></p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/theorylunch.wordpress.com/1017/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/theorylunch.wordpress.com/1017/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=theorylunch.wordpress.com&blog=43735749&post=1017&subd=theorylunch&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "e3a58f5f2aabdc78ef17622784e9b15e") (107 (20940 7905 551634) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_5805\"></span>, where <span id=\"tex_4655\"></span> is the number of “folds” and <span id=\"tex_9437\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_3966\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "0c5231a2301e77d36f196e49ca9f3f95") (106 (20939 63903 514915) "http://praisecurseandrecurse.blogspot.com/2013/06/the-polar-game-in-haskell-day-2.html" "Paul Potts: The Polar Game in Haskell, Day 2" "noreply@blogger.com (Paul Potts)" "Wed, 26 Jun 2013 20:59:00 +0000" "<p>Another short day since I had several phone interviews. Thanks to the folks who left comments!</p> <p>I got a little further today; I feel like I'm starting to understand Haskell's data handling a little bit better. It's a cliché but I think the hard part is un-learning, and understanding what something like this <i>doesn't</i> do. So here's where it stands now -- not finished by any means, but coming along, with painful slowness as I continue to learn:</p> <pre>data Dir = North | East | South | West<br />    deriving (Show, Eq)<br /><br />data Pos y x = Pos Int Int<br />    deriving (Show, Eq)<br /><br />-- N.B.: capitalization of initial letters in posY, posX is<br />-- semantically important!<br />posY ( Pos y x ) = y<br />posX ( Pos y x ) = x<br /><br />data Tile = Empty | Tree | Mountain | House | Ice_Block |<br />    Bomb | Heart | Edge deriving (Show, Eq)<br /><br />-- Different types of tiles have different properties in<br />-- different interaction contexts: <br /><br />-- The penguin can walk through empty tiles or trees (forest)<br />walkable :: Tile -> Bool<br />walkable t = ( t == Empty ) || ( t == Tree )<br /><br />-- But everything except empty tiles will block sliding objects<br />blocking :: Tile -> Bool<br />blocking t = ( t /= Empty )<br /><br />-- A subset of tiles are movable (and will slide until blocked)<br />movable :: Tile -> Bool<br />movable t = ( t == Bomb ) || ( t == Heart ) || ( t == Ice_Block )<br /><br />-- A subset of tiles aren't movable; note that this set<br />-- overlaps blocking and that Tree is both walkable and fixed<br />fixed :: Tile -> Bool<br />fixed t = ( t == House ) || ( t == Mountain ) || ( t == Edge )</pre> <p>That all should be fairly non-controversial, I think. The predicate approach to classifying tiles in different contexts may actually make more sense in Haskell, given that I can then use these predicates as guards. The replacement for a simple struct, <b>Pos</b>, still feels awkward -- I haven't really dug into whether it could be improved with record syntax, or some other technique. For now it's there because it works.</p> <p>All the beginner tutorials say \"don't use arrays, don't use arrays, don't use arrays!\" At least not until I reach the stage where I need to optimize the implementation. So I'll try that. Let's try a list, and I'll extract \"slices\" from it, lists starting at a given <b>Pos</b> going in one of four different directions. Eventually I want the slice function to terminate the slices with <b>Edge</b> tiles that aren't actually stored in the list. So... I have to think about this some more, but here's a single case, sort of taken care of:</p> <pre>type Board = [[Tile]]<br /><br />slice :: Board -> Pos y x -> Dir -> [Tile]<br />slice board pos East = drop ( posX pos )<br />    $ head $ drop ( posY pos ) board<br />slice _ _ _ = error \"slice: not handled yet!\"</pre> <p>I don't have <b>slide</b> finished, but here's a version of collide that works, at least a little:</p> <pre>collide :: [Tile] -> [Tile]<br />collide (t:(Empty:ts)) | movable t =<br />    [Empty] ++ collide (t:ts)<br />collide (Bomb:(Mountain:ts)) = [Empty, Empty] ++ ts<br />collide (Heart:House:ts) = [Empty, House] ++ ts<br />collide (_) = error \"collide: unexpected case!\"</pre> <p>The nested pattern <b>(Bomb:(Mountain:ts))</b> was sort of a flash of inspiration -- but it appears that maybe both this version and the <b>(Heart:House:ts)</b> version work the same -- I think -- so perhaps it's kind of pointless. It seemed to go along with the \"destructure it the way you would structure it\" idea, although I would normally not build a list out of cons cells unless it was irregular in some way.</p> <p>Here's the penguin step function, returning True if the penguin can move onto the tile at the head of the list:</p> <pre>step :: [Tile] -> ( Bool, [Tile] )<br />step [] = error \"step: empty list!\"<br />step ts = if walkable (head ts) then ( True, ts )<br />                                else ( False, collide ts )</pre> <p>And there's a move, which \"absorbs\" the case where the penguin is turned to face a different direction. It's not really done; the idea is that it will give back the board, basically generating a new world. For now we kind of punt on the question of how to rebuild the board out of the existing board and the modified \"slice\" -- and so the I just return a list as the first element of the tuple. In the first case where the penguin hasn't moved, that doesn't actually make sense, but it satisfies GHC for now (wow, she's kind of a harsh mistress, but you've got to love those thigh-high black leather boots!)</p> <pre>move :: Board -> Pos y x -> Dir -> Dir -><br />    ( [Tile], Pos y x, Dir, Dir )<br />move board pos move_dir penguin_dir =<br />    if move_dir /= penguin_dir<br />    then ( head board, pos, move_dir, move_dir )<br />    else ( collide $ slice board (Pos 1 0) penguin_dir,<br />        pos, penguin_dir, penguin_dir )<br /></pre> <p>Boy, that's tuple-icious... not sure I like it, but it's a start. So:</p> <pre>*Main> walkable Tree<br />True<br />*Main> :t Pos<br />Pos :: Int -> Int -> Pos y x<br />*Main> let slice = [Heart, House]<br />*Main> collide slice<br />[Empty,House]<br />*Main> let slice = [Bomb, Empty, Mountain]<br />*Main> collide slice<br />[Empty,House]<br />*Main> let board = [[Empty, Tree, Empty, Edge],<br />    [Bomb, Empty, Mountain, Edge]]<br />*Main> move board (Pos 1 0) West East<br />([Empty,Tree,Empty,Edge],Pos 1 0,West,West)<br />*Main> move board (Pos 1 0) East East<br />([Empty,Empty,Empty,Edge],Pos 1 0,East,East)</pre> <p>More tomorrow if I can manage it! Oh, and it's here, such as it is: <a href=\"https://github.com/paulrpotts/arctic-slide-haskell\">https://github.com/paulrpotts/arctic-slide-haskell</a></p>" nil nil "ed0db1108bf58437927ffc92efe503a6") (105 (20939 63903 513547) "http://blog.plover.com/prog/git-vacillation.html" "Mark Jason Dominus: Rewriting published history in Git" "mjd@plover.com (Mark Dominus)" "Wed, 26 Jun 2013 18:19:00 +0000" "<a href=\"http://blog.plover.com/prog/git-habits.html\">My earlier article about my
habits using Git</a> attracted some comment, most of which was
favorable. But one recurring comment was puzzlement about my seeming
willingness to rewrite published history.  In practice, this was not
at all a problem, I think for three reasons:<p>
</p><ol>
<li>Rewriting published history is not nearly as confusing as
people seem to think it will be.
</li><li>I worked in a very small shop with very talented developers, so
the necessary communication was easy.
</li><li>Our repository setup and workflow were very well-designed and
unusually effective, and made a lot of things easier, including this one.
</li></ol>
This article is about item 3.  Here's what they do at my previous
workplace to avoid most of the annoyances of people rewriting
published history.<p>
If there are <i>N</i> developers, there are <i>N</i>+1 repositories.</p><p>
There is a master repository to which only a few very responsible
persons can push. It is understood that history in this repository
should almost never be rewritten, only in the most exceptional
circumstances.  We usually call this master repository
<tt>gitbox</tt>.  It has only a couple of branches, typically
<tt>master</tt> and <tt>deployed</tt>.
You had better not push incomplete work to <tt>master</tt>, because
if you do someone is likely to deploy it.
When you deploy a new version
from <tt>master</tt>, you advance <tt>deployed</tt> up to
<tt>master</tt> to match.</p><p>
In addition, each developer has their own semi-public repository,
named after them, which everyone can read, but which nobody but them
can write.  Mine is <tt>mjd</tt>, and that's what we call it when
discussing it, but my personal git configuration calls it
<tt>origin</tt>. When I <tt>git push origin master</tt> I am pushing
to this semi-public repo.</p><p>
It is understood that this semi-public repository is my sandbox and I
am free to rewrite whatever history I want in it.  People building
atop my branches in this repo, therefore, know that they should be
prepared for me to rewrite the history they see there, or to contact
me if they want me to desist for some reason.</p><p></p><p>
When I get the changes in my own semi-public repository the way I want
them, <i>then</i> I push the changes up to gitbox.  Nothing is
considered truly \"published\" until it is on the master repo.</p><p>
When a junior programmer is ready to deploy to the master repository,
they can't do it themselves, because they only have read access on the
master.  Instead, they publish to their own semi-private repository,
and then notify a senior programmer to review the changes.  The senior
programmer will then push those changes to the master repository and
deploy them.</p><p>
</p><p align=\"center\"><img src=\"http://pic.blog.plover.com/prog/git-vacillation/git%20repos.png\" /></p>
The semi-public <tt>mjd</tt> repo has lots of benefits.  I can rewrite
my branches 53 times a day (and I do!) but nobody will
care. Conversely, I don't need to know or care how much my co-workers
vacillate.<p>
If I do work from three or four different machines, I can use the
<tt>mjd</tt> repo to exchange commits between them.  At the end of the
day I will push my work-in-progress up to the <tt>mjd</tt> repo, and
then if I want to look at it later that evening, I can fetch the
work-in-progress to my laptop or another home computer.</p><p></p><p>
I can create and abandon many topic branches without cluttering up the
master repository's history.  If I want to send a change or a new test
file to a co-worker, I can push it to <tt>mjd</tt> and then point them
at the branch there.</p><p>
A related note: There is a lot of FUD around the rewriting of
published history.  For example, the \"gitinfo\" robot on the #git IRC
channel has a canned message:</p><p>
</p><blockquote>
Rewriting public history is a very bad idea.  Anyone else who
may have pulled the old history will have to <tt>git pull
--rebase</tt> and even worse things if they have tagged or
branched, so you must publish your humiliation so they know
what to do.  You will need to <tt>git push -f</tt> to force the push.
The server may not allow this.  <tt>See receive.denyNonFastForwards</tt>
(git-config)<p>
</p></blockquote>
I think this grossly exaggerates the problems.  Very bad!
Humiliation!  The server may deny you!  But dealing with a rebased
upstream branch is not very hard. It is at worst annoying: you have to
rebase your subsequent work onto the rewritten branch and move any
refs that pointed to that branch.  If you don't have any subsequent
work, you might still have to move refs, if you have any that point to
it, but you might not have any.<p>
[ Thanks to Rik Signes for helping me put this together. ]</p><p></p>" nil nil "d7d7d7c6adf8a452eea524f9742e0743") (104 (20939 63903 512266) "http://blog.plover.com/prog/git-habits.html" "Mark Jason Dominus: My Git Habits" "mjd@plover.com (Mark Dominus)" "Wed, 26 Jun 2013 18:19:00 +0000" "Miles Gould asked his Twitter followers whether they used <tt>git-add
-p</tt> or <tt>git-commit -a</tt> and how often.  My reply was too
long for Twitter, so here it is.<p>
First the short version: I use <tt>git-add -p</tt> frequently, and
<tt>git-commit -a</tt> almost never. The exception is when I'm working
on the repo that holds my blog, where I rarely commit changes to more
than one or two files at a time.  Then I'll usually just
<tt>git-commit -a -m ...</tt>.</p><p>
But I use <tt>git-add -p</tt> all the time. Typically what will happen
is that I will be developing some fairly complicated feature.  It will
necessitate a bunch of changes and reshuffling elsewhere in the
system.  I'll make commits on the topic branch as I go along without
worrying too much about whether the commits are neatly packaged.</p><p>
Often I'll be in the middle of something, with a dirty work tree, when
it's time to leave for the day.  Then I'll just commit everything with
the subject <tt>WIP</tt> (\"work-in-progress\").  First thing the next
morning I'll <tt>git-reset HEAD^</tt> and continue where I left
off.</p><p>
So the model is that the current head is usually a terrible mess,
accumulating changes as it moves forward in time.  When I'm done, I
will merge the topic into master and run the tests. </p><p>
If they pass, I am not finished.  The merge I just created is only a
draft merge.  The topic branch is often full of all sorts of garbage,
commits where I tried one approach, found it didn't work later on, and
then tried a different approach, places where I committed debugging
code, and so on. So it is now time to clean up the topic branch.  Only
the cleaned-up topic branch gets published.</p><p>
</p><h3>Cleaning up messy topic branches</h3>
The core of the cleanup procedure is to reset the head back to the
last place that look good, possibly all the way back to the merge-base
if that is not too long ago.  This brings all the topic changes into
the working directory. Then:<p>
</p><ol>
<li>Compose the commits: Repeat until the working tree is clean:<br />
<ol>
<li>Eyeball the output of <tt>git-diff</tt>
</li><li>Think of an idea for an intelligible commit
</li><li>Use <tt>git-add -p</tt> to stage the planned commit
</li><li>Use <tt>git diff --cached</tt> to make sure it makes sense
</li><li>Commit it
</li></ol>
</li><li>Order the commits: Use <tt>git-rebase --interactive</tt>
</li></ol>
Notice that this separates the work of composing the commits from the
work of ordering them.  This is more important than it might appear.
It would be extremely difficult to try to do these at the same time.
I can't know the sensible order for the commits until I know what the
commits are!  But it's very hard to know what the commits are without
actually making them.<p>
By separating these tasks, I can proceed something like this: I
eyeball the diff, and the first thing I see is something about the
penguin feature.  I can immediately say \"Great, I'll make up a commit
of all the stuff related to the penguin feature\", and proceed to the
<tt>git-add -p</tt> step without worrying that there might be other
stuff that should precede the penguin feature in the commit sequence.
I can focus on just getting the penguin commit right without needing
to think about any of the other changes.</p><p>
When the time comes to put the commits in order, I can do it well
because by then I have abstracted away all the details, and reduced
each group of changes to a single atomic unit with a one-line
description.</p><p>
For the most complicated cases, I will print out the diffs, read them
over, and mark them up in six colors of highlighter: code to throw
away gets marked in orange; code that I suspect is erroneous is pink.
I make many notes in pen to remind me how I want to divide up the
changes into commits.  When a commit occurs to me I'll jot a numbered
commit message, and then mark all the related parts of the diff with
that number.  Once I have the commits planned, I'll reset the topic
ref and then run through the procedure above, using <tt>git-add
-p</tt> repeatedly to construct the commits I planned on paper. Since
I know ahead of time what they are I might do them in the right order,
but more likely I'll just do them in the order I thought of them and
then reorder them at the end, as usual.</p><p>
For simple cases I'll just do a series of <tt>git-rebase
--interactive</tt> passes, pausing at any leftover <tt>WIP</tt>
commits to run the loop above, reordering the commits to squash
related commits together, and so on.</p><p>
The very simplest cases of all require no cleanup, of course.</p><p>
For example, here's my current topic branch, called <tt>c-domain</tt>,
with the oldest commits at the top:</p><p>
</p><pre>        055a2f7 correction to bulk consumer template
d9630bd DomainActivator half of Pobox Domain consumer
ebebb4a Add HasDomain role to provide ->domain reader for domain consumers
ade6ac6 stubbed domain test
e170e77 start templates for Pobox domain consumers
067ca81 stubbed Domain::ThumbTwiddler
685a3ee cost calculations for DomainActivator
ec8b1cc test fixes; trivial domain test passes now
845b1f2 rename InvoiceCharge::CreateDomain to ..::RegisterDomain
(e)     6083a97 add durations to Domain consumers and charges
c64fda0 tests for Domain::Activator consumer
41e4292 repeat activator tests for 1-year and 3-year durations
7d68065 tests for activator's replacement
(d)     87f3b09 move days_in_year to Moonpig::Util
3cd9f3b WIP
e5063d4 add test for sent invoice in domain.t
c8dbf41 WIP
9e6ffa4 add missing MakesReplacement stuff
fc13059 bring in Net::OpenSRS module
(c)     52c18fb OpenSRS interface
893f16f notes about why domain queries might fail
(b)     f64361f rename \"croak\" method to \"fail\" to avoid conflicts
4e500ec Domain::Activator initial_invoice_charge_pairs
(a)     3c5cdd4 WIP
</pre>
3c5cdd4 (a) was the end-of-day state for yesterday; I made it and
pushed it just before I dashed out the door to go home.  Such commits
rarely survive beyond the following morning, but if I didn't make them,
I wouldn't be able to continue work from home if the mood took me to
do that.<p>
f64361f (b) is a prime candidate for later squashing.  5c218fb (c)
introduced a module with a \"croak\" method.  This turned out to be a
stupid idea, because this conflicted with the <tt>croak</tt> function
from Perl's <tt>Carp</tt> module, which we use everywhere.  I needed
to rename it.  By then, the intervening commit already existed.  I
probably should have squashed these right away, but I didn't think of
it at the time.  No problem!  Git means never having to say \"If only
I'd realized sooner.\"</p><p>
Similarly, 6083a97 (e) added a days_in_year function that I later
decided at 87f3b09 (d) should be in a utility module  in a
different repository.  87f3b09 will eventually be squashed into
6083a97 so that days_in_year never appears in this code at all.</p><p>
I don't know what is in the WIP commits c8dbf41 or 3cd9f3b, for which
I didn't invent commit messages. I don't know why those are left in
the tree, but I can figure it out later.</p><p>
</p><h3>An example cleanup</h3>
Now I'm going to clean up this branch.  First I <tt>git-checkout -b
cleanup c-domain</tt> so that if something goes awry I can start over
completely fresh by doing <tt>git-reset --hard c-domain</tt>.  That's
probably superfluous in this case because <tt>origin/c-domain</tt> is
also pointing to the same place, and <tt>origin</tt> is my private
repo, but hey, branches are cheap.<p>
The first order of business is to get rid of those <tt>WIP</tt>
commits.  I'll <tt>git-reset HEAD^</tt> to bring 3c5cdd4 into the
working directory, then use <tt>git-status</tt> to see how many
changes there are:</p><p>
</p><pre>         M lib/Pobox/Moonpig/Consumer/Domain/Activator.pm
M lib/Pobox/Moonpig/Role/HasDomain.pm
M lib/Pobox/Moonpig/TemplateSet.pm
?? bin/register_domains
M t/consumer/domain.t
?? t/lib/MockOpenSRS.pm
</pre>
(This is the output from <tt>git-status --short</tt>, for which I have
an alias, <tt>git s</tt>.  I use this probably 99 times as often as
plain <tt>git-status</tt>.)<p>
Not too bad, probably no need for a printout.  The new
<tt>bin/register-domains</tt> program can go in right away by itself:</p><p>
</p><pre>        % <b>git add bin</b>
% <b>git commit -m 'new register_domains utility program'</b>
</pre>
Next I'll deal with that new mock object class in
<tt>t/lib/MockOpenSRS.pm</tt>.  I'll add that, then use <tt>git-add
-p</tt> to add the related changes from the other files:<p>
</p><pre>        % <b>git add t/lib</b>
% <b>git add -p</b>
...
% <b>git s</b>
MM lib/Pobox/Moonpig/Consumer/Domain/Activator.pm
M lib/Pobox/Moonpig/Role/HasDomain.pm
M lib/Pobox/Moonpig/TemplateSet.pm
A  t/lib/MockOpenSRS.pm
MM t/consumer/domain.t
% <b>git ix</b>
...
</pre>
The <tt>git ix</tt> command at the end there is an alias for <tt>git diff
--cached</tt>: it displays what's staged in the index.  The output
looks good, so I'll commit it:<p>
</p><pre>        % <b>git commit -m 'mock OpenSRS object; add tests'</b>
</pre>
Now I want to see if those tests actually pass.  Maybe I forgot
something!
<pre>        % <b>git stash</b>
% <b>make test</b>
...
OK
% <b>git stash pop</b>
</pre>
The <tt>git-stash</tt> command hides the unrelated changes from the
test suite so that I can see if the tests I just put into
<tt>t/consumer/domain.t</tt> work properly.  They do, so I bring back
the stashed changes and continue.  If they didn't, I'd probably amend
the last commit with <tt>git commit --amend</tt> and try again.<p>
Continuing:</p><p>
</p><pre>        % <b>git diff</b>
...
% <b>git add -p lib/Pobox/Moonpig/Role/HasDomain.pm</b>
...
% <b>git commit -m 'Domains do not have explicit start dates'</b>
% <b>git diff</b>
...
% <b>git add -p</b>
...
% <b>git commit --fixup :/mock</b>
</pre>
That last bit should have been part of the \"mock OpenSRS object\"
commit, but I forgot it. So I make a fixup commit, which I'll merge
into the main commit later on.  A fixup commit is one whose subject
begins with <tt>fixup!</tt>. Did you know that you can name a commit
by writing <tt>:/<i>text</i></tt>, and it names the most recent commit
whose message contains that text?<p>
It goes on like that for a while:</p><p>
</p><pre>        % <b>git diff</b>
...
% <b>git add -p ...</b>
...
% <b>git commit -m 'Activator consumer can generate special charges'</b>
% <b>git diff</b>
...
% <b>git checkout lib/Pobox/Moonpig/Role/HasDomain.pm</b>
</pre>
The only uncommitted change left in <tt>HasDomain.pm</tt> was a
superfluous line, so I just threw it away.<p>
</p><pre>        % <b>git diff</b>
...
% <b>git add -u</b>
% <b>git commit -m 'separate templates for domain-registering and domain-renewing consumers'</b>
</pre>
By this time all the remaining changes belong in the same commit, so I
use <tt>git-add -u</tt> to add them all at once.  The working tree is
now clean.  The history is as I showed above, except that in place of
the final <tt>WIP</tt> commit, I have:<p>
</p><pre>        a3c0b92 new register_domains utility program
53d704d mock OpenSRS object; add tests
a24acd8 Domains do not have explicit start dates
17a915d fixup! mock OpenSRS object; add tests
86e472b Activator consumer can generate special charges
5b2ad2b separate templates for domain-registering and domain-renewing consumers
</pre>
(Again the oldest commit is first.)  Now I'll get rid of that
<tt>fixup!</tt>:<p>
</p><pre>        % <b>git rebase -i --autosquash HEAD~6</b>
</pre>
Because of <tt>--autosquash</tt>, the <tt>git-rebase</tt> menu is
reordered so that the fixup commit is put just after
the commit it fixes up, and its default action is 'fixup' instead of
'pick'.  So I don't need to edit the rebase instructions at all.  But
I might as well take the opportunity to put the commits in the right
order.  The result is:<p>
</p><pre>        a3c0b92 new register_domains utility program
ea8dacd Domains do not have explicit start dates
297366a separate templates for domain-registering and domain-renewing consumers
4ef0e28 mock OpenSRS object; add tests
c3ab1eb Activator consumer can generate special charges
</pre>
I have two tools for dealing with cleaned-up
branches like this one.  One is <a href=\"https://github.com/mjdominus/git-util/blob/master/git-vee\"><tt>git-vee</tt></a>, which compares two branches. It's
just a wrapper around the command <tt>git log --decorate --cherry-mark
--oneline --graph --boundary <i>A</i>\"...\"<i>B</i></tt>.  <p>
Here's a
comparison the original <tt>c-domain</tt> branch and my new
<tt>cleanup</tt> version:</p><p>
</p><pre>        % <b>git vee c-domain</b>
* c3ab1eb (HEAD, cleanup) Activator consumer can generate special charges
* 4ef0e28 mock OpenSRS object; add tests
* 297366a separate templates for domain-registering and domain-renewing consumer
* ea8dacd Domains do not have explicit start dates
* a3c0b92 new register_domains utility program
| * 3c5cdd4 (origin/c-domain, c-domain) WIP
|/
o 4e500ec Domain::Activator initial_invoice_charge_pairs
</pre>
This clearly shows where the original and cleaned up branches diverge,
and what the differences are.  I also use <tt>git-vee</tt> to compare
pre- and post-rebase versions of branches (with <tt>git-vee
ORIG_HEAD</tt>) and local branches with their remote tracking branches
after fetching (with <tt>git-vee remote</tt> or just plain
<tt>git-vee</tt>).<p>
A cleaned-up branch should usually have the same final tree as the
tree at the end of the original branch.  I have another tool, <a href=\"https://github.com/mjdominus/git-util/blob/master/git-treehash\"><tt>git-treehash</tt></a>,
which compares trees.  By default it compares <tt>HEAD</tt> with
<tt>ORIG_HEAD</tt>, so after I use git-rebase to squash or to split
commits, I sometimes run \"git treehash\" to make sure that the tree
hasn't changed.  In this example, I do:</p><p>
</p><pre>        % <b>git treehash c-domain HEAD</b>
d360408d1afa90e0176aaa73bf8d3cae641a0850 HEAD
f0fd6ea0de7dbe60520e2a69fbec210260370d78 c-domain
</pre>
which tells me that they are <i>not</i> the same.  Most often this
happens because I threw away all the debugging code that I put in
earlier, but this time it was because of that line of superfluous code
I eliminated from <tt>HasDomain.pm</tt>.  When the treehashes differ, I'll use
<tt>git-diff</tt> to make sure that the difference is innocuous:<p>
</p><pre>        % <b>git diff c-domain</b>
diff --git a/lib/Pobox/Moonpig/Role/HasDomain.pm b/lib/Pobox/Moonpig/Role/HasDomain.pm
index 3d8bb8c..21cb752 100644
--- a/lib/Pobox/Moonpig/Role/HasDomain.pm
+++ b/lib/Pobox/Moonpig/Role/HasDomain.pm
@@ -5,7 +5,6 @@ use Carp qw(croak confess);
use ICG::Handy qw(is_domain);
use Moonpig::Types qw(Factory Time);
use Moose::Util::TypeConstraints qw(duck_type enum subtype);
-use MooseX::SetOnce;
with (
'Moonpig::Role::StubBuild',
</pre>
Okay then.<p>
The next task is probably to deal with the older WIP commits.  This
time I'll omit all the details.  But the enclosing procedure looks
like this:</p><p>
</p><pre>        % <b>git checkout -b wip-cleanup c8dbf41</b>
% <b>git reset HEAD^</b>
% ... (a lot of git-add -p as above) ...
...
% <b>git vee c8dbf41</b>
* 4c6ff45 (wip-cleanup) get rid of unused twiddler test
* b328de5 test full payment cycle
* 201a4f2 abstract out pay_invoice operation
* 55ae45e add upper limit (default 30d) to wait_until utility
| * c8dbf41 WIP
|/
o e5063d4 add test for sent invoice in domain.t
% <b>git treehash c8dbf41 HEAD</b>
7f52ba68923e2ede8fda407ffa9c06c5c48338ae
% <b>git checkout cleanup</b>
% <b>git rebase wip-cleanup</b>
</pre>
The output of <tt>git-treehash</tt> says that the tree at the end of
the <tt>wip-cleanup</tt> branch is identical to the one in the WIP
commit it is supposed to replace, so it's perfectly safe to rebase the
rest of the <tt>cleanup</tt> branch onto it, replacing the one WIP
commit with the four new commits in <tt>wip-cleanup</tt>.  Now the
cleaned up branch looks like this:<p>
</p><pre>        % <b>git vee c-domain</b>
* a425aa1 (HEAD, cleanup) Activator consumer can generate special charges
* 2bb0932 mock OpenSRS object; add tests
* a77bfcb separate templates for domain-registering and domain-renewing consumer
* 4c44db2 Domains do not have explicit start dates
* fab500f new register_domains utility program
= 38018b6 Domain::Activator initial_invoice_charge_pairs
= aebbae6 rename \"croak\" method to \"fail\" to avoid conflicts
= 45a224d notes about why domain queries might fail
= 80e4a90 OpenSRS interface
= 27f4562 bring in Net::OpenSRS module
= f5cb624 add missing MakesReplacement stuff
* 4c6ff45 (wip-cleanup) get rid of unused twiddler test
* b328de5 test full payment cycle
* 201a4f2 abstract out pay_invoice operation
* 55ae45e add upper limit (default 30d) to wait_until utility
| * 3c5cdd4 (origin/c-domain, c-domain) WIP
| = 4e500ec Domain::Activator initial_invoice_charge_pairs
| = f64361f rename \"croak\" method to \"fail\" to avoid conflicts
| = 893f16f notes about why domain queries might fail
| = 52c18fb OpenSRS interface
| = fc13059 bring in Net::OpenSRS module
| = 9e6ffa4 add missing MakesReplacement stuff
| * c8dbf41 WIP
|/
o e5063d4 add test for sent invoice in domain.t
</pre>
<tt>git-vee</tt> marks a commit with an equal sign instead of a star
if it's equivalent to a commit in the other branch.  The commits in
the middle marked with equals signs are the ones that weren't changed.
The upper WIP was replaced with five commits, and the lower one with
four.<p>
I've been planning for a long time to write a tool to help me with
breaking up WIP commits like this, and with branch cleanup in general:
It will write each changed hunk into a file, and then let me separate
the hunk files into several subdirectories, each of which represents
one commit, and then it will create the commits automatically from the
directory contents.  This is still only partly finished, but I think
when it's done it will eliminate the six-color diff printouts.</p><p>
[ Addendum 20120404: Further observation has revealed that I almost
never use <tt>git-commit -a</tt>, even when it would be quicker to do
so.  Instead, I almost always use <tt>git-add -u</tt> and then
<tt>git-commit</tt> the resulting index. This is just an observation,
and not a claim that my practice is either better or worse than using
<tt>git-commit -a</tt>. ]</p><p>
[ Addendum 20120825: There is now <a href=\"http://blog.plover.com/prog/git-vacillation.html\">a followup article about how
to manage rewriting of published history</a>. ]</p><p></p>" nil nil "addb28ecadd04572967491ae66539ded") (103 (20939 63903 509015) "http://blog.plover.com/prog/git-commit-hook.html" "Mark Jason Dominus: How I got four errors into a one-line program" "mjd@plover.com (Mark Dominus)" "Wed, 26 Jun 2013 18:19:00 +0000" "At my current job, each task is assigned a ticket number of the form
<tt>e12345</tt>. The git history is extremely convoluted, and it's
been observed that it's easier to find things if you include the
ticket number at the front of the commit message.  I got tired of
inserting it manually, and thought I would write a <tt>prepare-commit-message</tt> hook to insert
it automatically.<p>
A <tt>prepare-commit-message</tt> hook is a program that you stick in the file
<tt>.git/hooks/prepare-commit-hook</tt>. When you run <tt>git-commit</tt>, git first
writes the commit message to a file, then invokes the <tt>prepare-commit-message</tt> program on
file; the program can modify the contents of the message, or abort the
commit if it wants to. Then git runs the editor on the message, if it
was going to do that, and creates the commit with the edited
message.</p><p>
The hook I wrote was basically a one-liner, and the reason I am
posting this note is because I found three significant programming
errors in it in the first day of use. </p><p>
Here's the first cut:</p><p>
</p><pre>case $2 in
message)
perl -i -lpe \"s/^(e\\d+:\\s+)?/$(cs -): /\" $1
;;
esac
</pre>
This is a shell script, but the main purpose is to run the perl
one-liner. The shell script gets two arguments: <tt>$1</tt> is the
path to the file that contains the proposed commit message.
The <tt>$2</tt> argument is a tag which describes the commit's
context; it's <tt>merge</tt> if the commit is a merge commit, for
example; it's <tt>template</tt> if the commit message is supplied from
a template via <tt>-t</tt> on the command line or the
<tt>commit.template</tt> configuration option.  The default is the
empty string, and <tt>message</tt>, which I have here, means that the
message was supplied with the <tt>-m</tt> command-line option.<p>
The Perl script edits the commit message file, named in <tt>$1</tt>,
in-place, looking for something like <tt>e12345: </tt> at the
beginning of a line, and replacing it with the output of the
<tt>cs -</tt> command, which is a little program I wrote to print
the current ticket number.</p><p> (<tt>cs</tt> is run by the shell, and
its output is inserted into the Perl script before <tt>perl</tt> is
run, so that the program that Perl sees is something like
<tt>s/^(e\\d+:\\s+)?/e12345: /</tt>.)  Simple enough.</p><p>
There is already an error here, although it's a design error, not an
implementation error: the Perl one-liner is only invoked when
<tt>$2</tt> is <tt>message</tt>.  For some reason I decided that I
would want it only when I supplied <tt>git-commit</tt> with the
<tt>-m message</tt> option. This belief lasted exactly until the
first time I ran <tt>git-commit</tt> in default mode it popped up the editor to
edit the commit message, and I had to insert the ticket number
manually.</p><p>
So the first change was to let the hook run in the default case as well
as the <tt>message</tt> case:</p><p>
</p><pre>case $2 in
<span class=\"emph\">\"\"|</span>message)
perl -i -lpe \"s/^(e\\d+:\\s+)?/$(cs -): /\" $1
;;
esac
</pre>
This was wrong because it inserts the ticket number at the start of
each line; I wanted it only at the start of the first line. So that
was programming error number 1:<p>
</p><pre>case $2 in
\"\"|message)
perl -i -lpe \"<span class=\"emph\">$. == 1 && </span>s/^(e\\d+:\\s+)?/$(cs -): /\" $1
;;
esac
</pre>
So far, so good.<p>
Bug #2 appeared the first time I tried a rebase. The <tt>cs</tt>
command infers the ticket number from the name of the current branch.
If it fails, it issues a warning and emits the string <tt>eXXXXX</tt>
instead.  During a rebase, the head is detached and there is no
current branch.  So the four commits I rebased all had their
formerly-correct ticket numbers replaced with the string
<tt>eXXXXX</tt>.</p><p>
There are several ways to fix this. The best way would be to make sure
that the current ticket number was stashed somewhere that <tt>cs</tt>
could always get it.  Instead, I changed the Perl script to recognize
when the commit message already began with a ticket number, and to
leave it alone if so:</p><p>
</p><pre>case $2 in
\"\"|message)
perl -i -lpe \"\\$. == 1 &&<span class=\"emph\"> !/^e\\d+:\\s+/ && s/^/</span>$(cs -): /\" $1
;;
esac
</pre>
It probably would have been a good idea to leave an escape hatch, and
have <tt>cs</tt> emit the value of <tt>$ENV{TICKET_NUMBER}</tt> if
that is set, to allow invocations like <tt>TICKER_NUMBER=e71828 git
commit -m …</tt>, but I didn't do it, yet.<p>
The third bug appeared when I did <tt>git commit --fixup</tt> for the
first time.  With <tt>--fixup</tt> you tell it which commit you are
trying to fix up, and it writes the commit message in a special form
that tells a subsequent <tt>git-rebase --interactive</tt> that this
new commit should be handled specially. (It should be applied
immediately after that other one, and should be marked as a \"fixup\",
which means that it is squashed into the other one and that its log
message is discarded in favor of the other one.)  If you are fixing up
a commit whose message was <tt>Frobulate the veeblefetzers</tt>, the
fixup commit's message is automatically generated as
<tt>fixup! Frobulate the veeblefetzers</tt>. Or it would have
been, if you were not using my <tt>prepare-commit-message</tt> hook, which would rewrite it to
<tt>e12345: fixup! Frobulate the veeblefetzers</tt>. This is not
in the right form, so it's not recognized by <tt>git-rebase
--interactive</tt> for special handling.</p><p>
So the hook became:</p><p>
</p><pre>case $2 in
\"\"|message)
perl -i -lpe \"\\$. == 1 && <span class=\"emph\">!/^(squash|fixup)! / &&</span> !/^e\\d+:\\s+/ && s/^/$(cs -): /\" $1
;;
esac
</pre>
(The exception for <tt>squash</tt> is similar to the one for
<tt>fixup</tt>. I never use <tt>squash</tt>, but it seemed foolish not
to put it in while I was thinking of it.)<p>
This is starting to look a little gross, but in a program this small I
can tolerate a little grossness.</p><p>
I thought it was remarkable that such a small program broke in so many
different ways.  Much of that is because it must interact with git,
which is very large and complicated, and partly it is that it must
interact with <tt>git</tt>, which is in many places not very well
designed.
The first bug, where the ticket number was appended to each line
instead of just the first, is not git's fault.  It was fallout from my
initial bad design decision to apply the script only to messages
supplied with <tt>-m</tt>, which are typically one-liners, so that's
what I was thinking of when I wrote the Perl script.</p><p>
But the other two errors would have been avoided had the interface to
the hook been more uniform. There seems to be no reason that rebasing
(or cherry-picking) and <tt>git-commit --fixup</tt> contexts couldn't
have been communicated to the hook via the same <tt>$2</tt> argument
that communicates other contexts.  Had this been done in a more
uniform way, my program would have worked more correctly.  But it
wasn't done, and it's probably too late to change it now, since such a
change risks breaking many existing <tt>prepare-commit-message</tt> hooks. (\"The enemy of software
is software.)  A well-written hook will of course have a catchall:</p><p>
</p><pre>case $2 in
\"\"|message)
perl -i -lpe \"\\$. == 1 && !/^(squash|fixup)! / && !/^e\\d+:\\s+/ && s/^/$(cs -): /\" $1
;;
<span class=\"emph\">
merge|template|squash|commit)
# do nothing
;;
*)      # wat
echo \"prepare-message-hook: unknown context '$2'\" 1>&2
exit 1;
;;
</span>
esac
</pre>
But mine doesn't and I bet a lot of others don't either.<p></p>" nil nil "0d8910440515212f1d4a64fc269bc053") (102 (20939 63903 477688) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_5883\"></span>, where <span id=\"tex_9577\"></span> is the number of “folds” and <span id=\"tex_2557\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_6540\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "67e0bbe944720f15cd562c1470f7cb5b") (101 (20938 62181 87869) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_9659\"></span>, where <span id=\"tex_5628\"></span> is the number of “folds” and <span id=\"tex_5419\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_4446\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "4c3a21da92e996dd30a3e583f47388d9") (100 (20938 41147 171728) "http://praisecurseandrecurse.blogspot.com/2013/06/the-polar-game-in-haskell-day-1.html" "Paul Potts: The Polar Game in Haskell, Day 1" "noreply@blogger.com (Paul Potts)" "Wed, 26 Jun 2013 00:24:00 +0000" "<p>So if you've been following recent posts, you know I've been messing with the logic for a simple sliding-tile game. In my last post I took some designs refined via a side trip into Dylan and brought them back into Objective-C, making them a little more idiomatic by pruning my tile classes that didn't hold their weight, and compensating for Objective-C's very limited method dispatch options.</p> <p>But in addition to learning Objective-C, and Apple's APIs for writing an app, I'm also trying to further my knowledge of Haskell, which is somewhere just beyond \"utter newbie.\" So I'm going to try to implement the game logic in Haskell, too. Since the game is decidedly stateful, there is a certain impedance mismatch here, at least with respect to the early chapters in most of the tutorials and guides. But I'm told that Haskell also makes a great imperative programming language, so let's give it a shot. And along the way I can try to mold my understanding of stateful versus imperative a little more.</p> <p>For day one, which was a shorter-than-usual day, I did not get into the state monad or how to model mutation of a 2-D array yet. I wanted to consider whether I could model the tile classes the way I could in Dylan, and do something useful in them. It occurred to me that each move of the penguin, and all the subsequent actions including possibly pushing an object, possibly a collision, possibly an object sliding frictionlessly as long as it can and then another collision, actually takes place in a 1-dimensional vector, not a 2-dimensional array. So it might be interesting to handle a penguin move by extracting a vector (in the form of a list) from the array, and replacing it with an updated list.  </p><p>I haven't worked that all out yet but here is the bare beginning of my experimentation. There's a way to represent tiles:</p> <pre>data Tile = Empty | Tree | Mountain | House | Ice_Block | <br />    Bomb | Heart | Edge<br />    deriving (Show)</pre> <p>Part of the confusion of learning Haskell is that, semantically, this isn't quite the equivalent of a set of enumerations, or of a set of class declarations. From what I can tell, this is more like a list of singleton factories -- constructors, where I've also derived them from Show, sort of the equivalent of mixing in a base class. But this is all an approximation, and Haskell is <i>quite</i> different than the other languages I'm most familiar with.</p> <p>My next thought was that I wanted to be able to declare \"base classes\" so that, for example, I could have a Walkable class that comprised Empty and Tree. In Dylan I would do this by using classes, but there is different way: declaring a <b>type-union</b> of singletons. I think that this Haskell solution is more like the <b>type-union</b>. I looked in vain for an explicit type union. Instead I found <b>class</b> (which, in Haskell, does not correspond to a class in the sense that I'm used to, of a template for a run-time object that consists of data members and methods to operate on it, but a <i>typeclass</i>, something I clearly need to study more):  </p><pre>class Walkable a where<br />    walkable :: a -> Bool</pre> <p>And then this: which boils down to, I think, a function to determine whether a Tile is an instance of a Walkable typeclass:</p> <pre>instance Walkable Tile where<br />    walkable Empty = True<br />    walkable Tree = True<br />    walkable _ = False</pre> <p>Now I can write something like this (just a vague thought-in-progress at the moment):</p> <pre>slide :: [Tile] -> [Tile]<br />slide [] = error \"slide empty list!\"<br />slide (t) = error \"single item list!\"<br />slide (Empty:ts) = ts ++ slide ts<br /><br />collide :: [Tile] -> [Tile]<br />collide [] = error \"traverse empty list!\"          <br />collide [Edge] = [Edge]<br />collide (Empty:ts) = ts<br />collide (Bomb:Mountain:ts) = [Empty, Empty] ++ ts          <br />collide (Heart:House:ts) = [Empty, House] ++ ts<br /><br />step :: [Tile] -> Bool<br />step [] = error \"step: empty list!\"<br />step (t:_) = if walkable t then True else False</pre> <p>Then after sticking in a dummy main I can load this into GHCI and interact with it a little:</p> <pre>*Main> :t Tree<br />Tree :: Tile<br />*Main> step [Mountain, Empty, Empty, Tree, Edge]<br />False<br />*Main> step [Tree, Empty, Empty, Tree, Edge]<br />True<br />*Main> collide [Heart, Mountain]<br />*** Exception: arctic-slide.hs:(22,1)-(26,47): Non-exhaustive patterns in function collide<br />(Um, yeah, OK, I have work to do there)<br />*Main> collide [Heart, House]<br />[Empty,House]<br />*Main> slide [Empty, Empty, Empty, Empty, Mountain]<br />*** Exception: single item list!</pre> <p>Anyway, that's not exactly what I want to do -- really, I want the functions to actually return a new list of the same length, so I'll have to build it up as I recurse down the list -- maybe in the List monad? But it's a start on the whole basic concept of matching on the \"types\" of my tiles in a \"vector,\" such as it is. That whole bit with <b>walkable</b> -- which I admit I don't quite understand yet -- seems like far too much conditional logic when I really just want to pattern-match on a type union of Tile. In other words, I want to write something like this (not valid Haskell):</p> <pre>union Walkable = Empty | Tree<br /><br />step (Walkable:_) = True</pre> <p>That's a small example, but I have several other type union classes I need to use to categorize the tiles, so I have an incentive to make that as clear and simple as possible. It seems like I'm still fighting with Haskell's idioms here. Clearly, as they say, more research is needed...</p>" nil nil "754376c0dbbd86fc5dfa8126a20aa78b") (99 (20938 41147 170673) "http://edwinb.wordpress.com/2013/06/25/sequential-decision-problems-dependently-typed-solutions/" "Edwin Brady: Sequential decision problems, dependently typed solutions" nil "Tue, 25 Jun 2013 19:44:01 +0000" "<p>We’ve just shipped the camera ready version of the following paper to <a href=\"http://www.cicm-conference.org/2013/cicm.php?event=plmms\">PLMMS 2013</a>:</p>
<p>
<a href=\"http://eb.host.cs.st-andrews.ac.uk/writings/plmms13.pdf\">Sequential decision problems, dependently typed solutions</a><br />
<a href=\"http://www.pik-potsdam.de/members/botta\">Nicola Botta</a>, <a href=\"http://www.pik-potsdam.de/members/ionescu\">Cezar Ionescu</a>, <a href=\"http://edwinb.wordpress.com/2013/06/25/sequential-decision-problems-dependently-typed-solutions/edwinb.wordpress.com\">Edwin Brady</a>
</p>
<blockquote><p>
We propose a dependently typed formalization for a simple class of sequential decision problems. For this class of problems, we implement a generic version of Bellman’s backwards induction algorithm and a machine checkable proof that the proposed implementation is correct. The formalization is generic. It is presented in Idris, but it can be easily translated to other dependently-typed programming languages. We conclude with an informal discussion of the problems we have faced in extending the formalization to generic monadic sequential decision problems.
</p></blockquote>
<p>You can find the <a href=\"http://eb.host.cs.st-andrews.ac.uk/writings/plmms13.pdf\">full paper here</a>.</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/edwinb.wordpress.com/237/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/edwinb.wordpress.com/237/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=edwinb.wordpress.com&blog=666773&post=237&subd=edwinb&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "9a80ef38fd7c4d60f44ca6b6b0de7d0b") (98 (20938 41147 170050) "http://wadler.blogspot.com/2013/06/come-for-performance-stay-for.html" "Philip Wadler: Come for the performance, stay for the correctness" "noreply@blogger.com (Philip Wadler)" "Tue, 25 Jun 2013 18:34:34 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-68rTy8Dc4fM/UcnhdnNkd9I/AAAAAAAACcc/Yj25dAU8tnc/s1600/haskell.jpeg\"><img src=\"http://1.bp.blogspot.com/-68rTy8Dc4fM/UcnhdnNkd9I/AAAAAAAACcc/Yj25dAU8tnc/s400/haskell.jpeg\" height=\"299\" border=\"0\" width=\"400\" /></a></div>An <a href=\"http://www.hpcwire.com/hpcwire/2013-06-24/lustre_founder_spots_haskell_on_hpc_horizon.html?featured=top\">article in HPC Wire</a> lists industrial uses of Haskell, several of which I hadn't heard before. The article profiles Peter Braam, founder of Parallel Scientific. Spotted by Hans Wolfgang Loidl.<br /><br /><blockquote class=\"tr_bq\">Arguably, Google and Facebook have brought more attention to Haskell  in recent years, but there are a number of other notable uses that  highlight Braam’s confidence in the functional language. For instance,  Chicago-based Allston Trading, a high frequency trading company, uses  Haskell in their trading infrastructure. AT&T is using it in their  Network Security group to automate internet abuse complaint processing.  Bank of American is using it in their backend data transformation and  loading system and Credit Suisse’s Global Modeling and Analytics Group  has been using it since 2006 to improve modeler productivity and open  access to those models across the organization.<br /><br />Biotech giant Amgen also uses Haskell for math-heavy models and to  “break developers out of their development rut by giving them a new way  to think about software. According to the company’s David Balaban, “Our  experience is that using functional programming reduces the critical  conceptual distance between thought/algorithms design and code.” But the  real value says Balaban is the level of correctness they’ve been able  to achieve.<br /><br />As Amgen’s Balaban says “we  have been able to develop code quickly and verify--to an applied  mathematician’s satisfaction--the correctness of Haskell code  straightforwardly; we have yet to achieve this with more traditional  mainstream languages.” </blockquote>" nil nil "1f57036b08a8a0bf26b1dd0f3fb340d4") (97 (20938 41147 14671) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_1502\"></span>, where <span id=\"tex_5449\"></span> is the number of “folds” and <span id=\"tex_5552\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_3773\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "0208f6a49f71e95420f6375812b67f67") (96 (20937 54164 18427) "http://parenz.wordpress.com/2013/06/12/ghcjs-build/" "Daniil Frumin: Building GHCJS" nil "Tue, 25 Jun 2013 15:45:34 +0000" "<div id=\"outline-container-sec-1\" class=\"outline-2\">
<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Intro</h2>
<div id=\"text-1\" class=\"outline-text-2\">
<p>
In this post I would like to talk about my experience with<br />
bootstrapping <a href=\"http://weblog.luite.com/wordpress/?p=14\">GHCJS</a> using the provided facilities <a href=\"https://github.com/ghcjs/ghcjs-build\">ghcjs-build</a>. I<br />
never used tools like Vagrant or Puppet before so all of this was<br />
kinda new to me.
</p>
</div>
</div>
<div id=\"outline-container-sec-2\" class=\"outline-2\">
<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Initial installation</h2>
<div id=\"text-2\" class=\"outline-text-2\">
<p>
GHCJS can’t actually work with vanilla GHC 7.* as it requires to<br />
apply some patches (in order to get JS ffi to work, it adds<br />
<code>JavaScriptFFI</code> language extension among other modifications).
</p>
<p>
<a href=\"https://github.com/ghcjs/ghcjs-build\">ghcjs-build</a> uses <a href=\"http://vagrantup.com\">Vagrant</a> (a tool for automatically building and<br />
running work environments) to mange the work environment, so prior to<br />
running GHCJS you need to install vagrant and <a href=\"http://virtualbox.org\">VirtualBox</a>. It’s actually<br />
a sensible way to tackle a project like that: everyone has similar<br />
work environments, you don’t have to mess with your local GHC<br />
installation. It also make use of <a href=\"http://puppetlabs.com\">Puppet</a> deployment system in<br />
<code>puppetlabs-vcsrepo</code> module for cloning Git repositories.
</p>
<p>
Currently, there are two ways to start up GHCJS using <code>ghcjs-build</code>
</p>
</div>
<div id=\"outline-container-sec-2-1\" class=\"outline-3\">
<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> Using the prebuilt version</h3>
<div id=\"text-2-1\" class=\"outline-text-3\">
<div class=\"org-src-container\">
<pre class=\"src src-sh\">git clone https://github.com/ghcjs/ghcjs-build.git
<span style=\"color: #D0D0FF;\">cd</span> ghcjs-build
git checkout prebuilt
vagrant up
</pre>
</div>
<p>
Using this configuration the following procedures are performed:
</p>
<ol class=\"org-ol\">
<li>Vagrant sets up a 32-bit Ubuntu Precise system (/Note: if this is<br />
your first time running Vagrant it downloads the 280Mb<br />
precise32.box file from the Vagrant site/)
</li>
<li>Vagrants does some provisioning using Puppet (downloads and<br />
installs necessary packages)
</li>
<li>A 1.4GB archive with ghcjs and other prebuilt tools are downloaded<br />
and extracted.
</li>
</ol>
</div>
</div>
<div id=\"outline-container-sec-2-2\" class=\"outline-3\">
<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> Compiling from source</h3>
<div id=\"text-2-2\" class=\"outline-text-3\">
<div class=\"org-src-container\">
<pre class=\"src src-sh\">git clone https://github.com/ghcjs/ghcjs-build.git
<span style=\"color: #D0D0FF;\">cd</span> ghcjs-build
vagrant up
</pre>
</div>
<p>
Apart from setting up the box this will
</p>
<ol class=\"org-ol\">
<li>Get the GHC sources from Git HEAD and applies the GHCJS <a href=\"http://ghcjs.github.io/patches/ghc-ghcjs.patch\">patch</a>.
</li>
<li>Get all the necessary packages for ghcjs
</li>
<li>Get the latest Cabal from Git HEAD, applies the GHCJS <a href=\"http://ghcjs.github.io/patches/cabal-ghcjs.patch\">patch</a> and<br />
build it.
</li>
<li>Compile the necessary libraries using ghcjs
</li>
<li>Compile <code>ghcjs-examples</code> and its dependencies (it appears that it<br />
can take a lot of time to compile gtk2hs and gtk2hs’s tools)
</li>
</ol>
<p>
Please note, that depending on your computer, you might want to go for<br />
a long walk, enjoy a small book or get a night sleep (assuming you are<br />
not scared by the sound of computer fans).
</p>
<p>
Apart from being slow, the process of compiling everything from<br />
source is error prone. To give you a taste, last night I was not able<br />
to reproduce a working environment myself, because of some recent<br />
changes in GHC HEAD. The prebuilt version on the other hand is<br />
guaranteed to install correctly.
</p>
<p>
Hopefully, the GHCJS patches will be merged upstream before the GHC<br />
7.8 is out. That way you won’t need to partake in building GHC from<br />
the source in order to use GHCJS.
</p>
</div>
</div>
<div id=\"outline-container-sec-2-3\" class=\"outline-3\">
<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> Communicating with the VM</h3>
<div id=\"text-2-3\" class=\"outline-text-3\">
<p>
After you’ve finished with the initial setup you should be able just<br />
to
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vagrant ssh
</pre>
</div>
<p>
in your new vm and start messing around.
</p>
<p>
<code>ghcjs</code> command is available to you and Vagrant kindly forwards the<br />
3000 port on the VM to the local 3030 port, allowing you to run web<br />
servers like <code>warp</code> on the VM and accessing them locally.
</p>
<p>
You can access your local project directory under <code>/vagrant</code> in VM:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">$ ls /vagrant
keys  manifests  modules  outputs  README.rst  Vagrantfile
</pre>
</div>
<p>
However, copying file back-and-forth is not a perfect solution. I<br />
recommend setting up a sshfs filesystem (<i>Note: if you are on OSX,<br />
don’t forget to install fuse4x kernel extension</i>):
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">$ vagrant ssh-config
Host default
HostName 127.0.0.1
User vagrant
Port 2222
UserKnownHostsFile /dev/null
StrictHostKeyChecking no
PasswordAuthentication no
IdentityFile <span style=\"color: #b5bd68;\">\"/Users/dan/.vagrant.d/insecure_private_key\"</span>
IdentitiesOnly yes
LogLevel FATAL
$ sshfs vagrant@localhost:/home/vagrant ../vm -p2222 -oreconnect,defer_permissions,negative_vncache,<span style=\"color: #cc6666;\">volname</span>=ghcjs,<span style=\"color: #cc6666;\">IdentityFile</span>=~/.vagrant.d/insecure_private_key
$ ls ../vm
</pre>
</div>
<p>
When you are done you can just <code>umount ../vm</code>
</p>
</div>
</div>
</div>
<div id=\"outline-container-sec-3\" class=\"outline-2\">
<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> Compiling other packages</h2>
<div id=\"text-3\" class=\"outline-text-2\">
<p>
Since the <code>diagrams</code> package on Hackage depends on the older version<br />
of base we are going to use the latest version from Git:
</p>
<pre class=\"example\">mkdir dia; cd dia
git clone git://github.com/diagrams/diagrams-core.git
cd diagrams-core && cabal install && cd ..
cabal unpack active
cd active-0.1*
cat >version.patch <<EOF
--- active.cabal        2013-06-12 12:58:40.082914214 +0000
+++ active.cabal.new    2013-06-12 12:58:31.029465815 +0000
@@ -19,7 +19,7 @@
library
exposed-modules:     Data.Active
-  build-depends:       base >= 4.0 && < 4.7,
+  build-depends:       base >= 4.0 && < 4.8,
array >= 0.3 && < 0.5,
semigroups >= 0.1 && < 0.10,
semigroupoids >= 1.2 && < 3.1,
@@ -31,7 +31,7 @@
test-suite active-tests
type:              exitcode-stdio-1.0
main-is:           active-tests.hs
-    build-depends:     base >= 4.0 && < 4.7,
+    build-depends:     base >= 4.0 && < 4.8,
array >= 0.3 && < 0.5,
semigroups >= 0.1 && < 0.10,
semigroupoids >= 1.2 && < 3.1,
EOF
patch active.cabal < version.patch
cabal install
cd ..
git clone git://github.com/diagrams/diagrams-lib.git
cd diagrams-lib && cabal install && cd ..
git clone git://github.com/diagrams/diagrams-svg.git
cd diagrams-svg && cabal install && cd ..
</pre>
<p>
Other packages I had to install already had their Hackage versions<br />
updated.
</p>
<p>
Now you can try to build a test diagram to see that everything works
</p>
<div class=\"org-src-container\">
<pre class=\"src src-haskell\"><span style=\"color: #b294bb;\">module</span> <span style=\"color: #f0c674;\">Main</span> <span style=\"color: #b294bb;\">where</span>
<span style=\"color: #b294bb;\">import</span> <span style=\"color: #f0c674;\">Diagrams.Prelude</span>
<span style=\"color: #b294bb;\">import</span> <span style=\"color: #f0c674;\">Diagrams.Backend.SVG.CmdLine</span>
<span style=\"color: #81a2be;\">d</span> <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Diagram</span> <span style=\"color: #f0c674;\">SVG</span> <span style=\"color: #f0c674;\">R2</span>
<span style=\"color: #81a2be;\">d</span> <span style=\"color: #cc6666;\">=</span> square 20 <span style=\"color: #cc6666;\">#</span> lw 0<span style=\"color: #cc6666;\">.</span>5
<span style=\"color: #cc6666;\">#</span> fc black
<span style=\"color: #cc6666;\">#</span> lc green
<span style=\"color: #cc6666;\">#</span> dashing [0<span style=\"color: #cc6666;\">.</span>2,0<span style=\"color: #cc6666;\">.</span>2] 0
<span style=\"color: #81a2be;\">main</span> <span style=\"color: #cc6666;\">=</span> defaultMain (pad 1<span style=\"color: #cc6666;\">.</span>1 d)
</pre>
</div>
<p>
then you can compile and run it
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">ghc --make Test.hs
./Test -w 400 -o /vagrant/test.svg
</pre>
</div>
<p><a href=\"http://parenz.files.wordpress.com/2013/06/screen-shot-2013-06-12-at-5-19-03-pm.png\"><img src=\"http://parenz.files.wordpress.com/2013/06/screen-shot-2013-06-12-at-5-19-03-pm.png?w=300&h=289\" alt=\"Screen Shot 2013-06-12 at 5.19.03 PM\" height=\"289\" class=\"alignnone size-medium wp-image-47\" width=\"300\" /></a></p>
<p>
And that’s it!
</p>
</div>
</div>
<div id=\"outline-container-sec-4\" class=\"outline-2\">
<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> Outro</h2>
<div id=\"text-4\" class=\"outline-text-2\">
<p>
I would also like to note that we are currently polishing the GHCJS<br />
build process. Luite, especially is working on making ghcjs work (and<br />
run tests) with <a href=\"https://travis-ci.org/\">Travis CI</a> (it take quite a bit of time to build ghcjs<br />
and sometimes travis is timeouting) and I am working on tidying up<br />
the build config.
</p>
<p>
Stay tuned for more updates.
</p>
</div>
</div>
<br /> Tagged: <a href=\"http://parenz.wordpress.com/tag/diagrams/\">diagrams</a>, <a href=\"http://parenz.wordpress.com/tag/ghcjs/\">ghcjs</a>, <a href=\"http://parenz.wordpress.com/tag/haskell-2/\">haskell</a>, <a href=\"http://parenz.wordpress.com/tag/soc/\">soc</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/parenz.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/parenz.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=parenz.wordpress.com&blog=26722965&post=49&subd=parenz&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "e53e69d35ed56c72c0d2b1e9ec722a17") (95 (20937 47692 637966) "http://parenz.wordpress.com/2013/06/12/ghcjs-build/" "Daniil Frumin: Building GHCJS" nil "Tue, 25 Jun 2013 15:08:38 +0000" "<div id=\"outline-container-sec-1\" class=\"outline-2\">
<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Intro</h2>
<div id=\"text-1\" class=\"outline-text-2\">
<p>
In this post I would like to talk about my experience with<br />
bootstrapping <a href=\"http://weblog.luite.com/wordpress/?p=14\">GHCJS</a> using the provided facilities <a href=\"https://github.com/ghcjs/ghcjs-build\">ghcjs-build</a>. I<br />
never used tools like Vagrant or Puppet before so all of this was<br />
kinda new to me.
</p>
</div>
</div>
<div id=\"outline-container-sec-2\" class=\"outline-2\">
<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Initial installation</h2>
<div id=\"text-2\" class=\"outline-text-2\">
<p>
GHCJS can’t actually work with vanilla GHC 7.* as it requires to<br />
apply some patches (in order to get JS ffi to work, it adds<br />
<code>JavaScriptFFI</code> language extension among other modifications).
</p>
<p>
<a href=\"https://github.com/ghcjs/ghcjs-build\">ghcjs-build</a> uses <a href=\"http://vagrantup.com\">Vagrant</a> (a tool for automatically building and<br />
running work environments) to mange the work environment, so prior to<br />
running GHCJS you need to install vagrant and <a href=\"http://virtualbox.org\">VirtualBox</a>. It’s actually<br />
a sensible way to tackle a project like that: everyone has similar<br />
work environments, you don’t have to mess with your local GHC<br />
installation. It also make use of <a href=\"http://puppetlabs.com\">Puppet</a> deployment system in<br />
<code>puppetlabs-vcsrepo</code> module for cloning Git repositories.
</p>
<p>
Currently, there are two ways to start up GHCJS using <code>ghcjs-build</code>
</p>
</div>
<div id=\"outline-container-sec-2-1\" class=\"outline-3\">
<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> Using the prebuilt version</h3>
<div id=\"text-2-1\" class=\"outline-text-3\">
<div class=\"org-src-container\">
<pre class=\"src src-sh\">git clone https://github.com/ghcjs/ghcjs-build.git
<span style=\"color: #D0D0FF;\">cd</span> ghcjs-build
git checkout prebuilt
vagrant up
</pre>
</div>
<p>
Using this configuration the following procedures are performed:
</p>
<ol class=\"org-ol\">
<li>Vagrant sets up a 32-bit Ubuntu Precise system (/Note: if this is<br />
your first time running Vagrant it downloads the 280Mb<br />
precise32.box file from the Vagrant site/)
</li>
<li>Vagrants does some provisioning using Puppet (downloads and<br />
installs necessary packages)
</li>
<li>A 1.4GB archive with ghcjs and other prebuilt tools are downloaded<br />
and extracted.
</li>
</ol>
</div>
</div>
<div id=\"outline-container-sec-2-2\" class=\"outline-3\">
<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> Compiling from source</h3>
<div id=\"text-2-2\" class=\"outline-text-3\">
<div class=\"org-src-container\">
<pre class=\"src src-sh\">git clone https://github.com/ghcjs/ghcjs-build.git
<span style=\"color: #D0D0FF;\">cd</span> ghcjs-build
vagrant up
</pre>
</div>
<p>
Apart from setting up the box this will
</p>
<ol class=\"org-ol\">
<li>Get the GHC sources from Git HEAD and applies the GHCJS <a href=\"http://ghcjs.github.io/patches/ghc-ghcjs.patch\">patch</a>.
</li>
<li>Get all the necessary packages for ghcjs
</li>
<li>Get the latest Cabal from Git HEAD, applies the GHCJS <a href=\"http://ghcjs.github.io/patches/cabal-ghcjs.patch\">patch</a> and<br />
build it.
</li>
<li>Compile the necessary libraries using ghcjs
</li>
<li>Compile <code>ghcjs-examples</code> and its dependencies (it appears that it<br />
can take a lot of time to compile gtk2hs and gtk2hs’s tools)
</li>
</ol>
<p>
Please note, that depending on your computer, you might want to go for<br />
a long walk, enjoy a small book or get a night sleep (assuming you are<br />
not scared by the sound of computer fans).
</p>
<p>
Apart from being slow, the process of compiling everything from<br />
source is error prone. To give you a taste, last night I was not able<br />
to reproduce a working environment myself, because of some recent<br />
changes in GHC HEAD. The prebuilt version on the other hand is<br />
guaranteed to install correctly.
</p>
<p>
Hopefully, the GHCJS patches will be merged upstream before the GHC<br />
7.8 is out. That way you won’t need to partake in building GHC from<br />
the source in order to use GHCJS.
</p>
</div>
</div>
<div id=\"outline-container-sec-2-3\" class=\"outline-3\">
<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> Communicating with the VM</h3>
<div id=\"text-2-3\" class=\"outline-text-3\">
<p>
After you’ve finished with the initial setup you should be able just<br />
to
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vagrant ssh
</pre>
</div>
<p>
in your new vm and start messing around.
</p>
<p>
<code>ghcjs</code> command is available to you and Vagrant kindly forwards the<br />
3000 port on the VM to the local 3030 port, allowing you to run web<br />
servers like <code>warp</code> on the VM and accessing them locally.
</p>
<p>
You can access your local project directory under <code>/vagrant</code> in VM:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">$ ls /vagrant
keys  manifests  modules  outputs  README.rst  Vagrantfile
</pre>
</div>
<p>
However, copying file back-and-forth is not a perfect solution. I<br />
recommend setting up a sshfs filesystem (<i>Note: if you are on OSX,<br />
don’t forget to install fuse4x kernel extension</i>):
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">$ vagrant ssh-config
Host default
HostName 127.0.0.1
User vagrant
Port 2222
UserKnownHostsFile /dev/null
StrictHostKeyChecking no
PasswordAuthentication no
IdentityFile <span style=\"color: #b5bd68;\">\"/Users/dan/.vagrant.d/insecure_private_key\"</span>
IdentitiesOnly yes
LogLevel FATAL
$ sshfs vagrant@localhost:/home/vagrant ../vm -p2222 -oreconnect,defer_permissions,negative_vncache,<span style=\"color: #cc6666;\">volname</span>=ghcjs,<span style=\"color: #cc6666;\">IdentityFile</span>=~/.vagrant.d/insecure_private_key
$ ls ../vm
</pre>
</div>
<p>
When you are done you can just <code>umount ../vm</code>
</p>
</div>
</div>
</div>
<div id=\"outline-container-sec-3\" class=\"outline-2\">
<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> Compiling other packages</h2>
<div id=\"text-3\" class=\"outline-text-2\">
<p>
Since the <code>diagrams</code> package on Hackage depends on the older version<br />
of base we are going to use the latest version from Git:
</p>
<pre class=\"example\">mkdir dia; cd dia
git clone git://github.com/diagrams/diagrams-core.git
cd diagrams-core && cabal install && cd ..
cabal unpack active
cd active-0.1*
cat >version.patch <<EOF
--- active.cabal        2013-06-12 12:58:40.082914214 +0000
+++ active.cabal.new    2013-06-12 12:58:31.029465815 +0000
@@ -19,7 +19,7 @@
library
exposed-modules:     Data.Active
-  build-depends:       base >= 4.0 && < 4.7,
+  build-depends:       base >= 4.0 && < 4.8,
array >= 0.3 && < 0.5,
semigroups >= 0.1 && < 0.10,
semigroupoids >= 1.2 && < 3.1,
@@ -31,7 +31,7 @@
test-suite active-tests
type:              exitcode-stdio-1.0
main-is:           active-tests.hs
-    build-depends:     base >= 4.0 && < 4.7,
+    build-depends:     base >= 4.0 && < 4.8,
array >= 0.3 && < 0.5,
semigroups >= 0.1 && < 0.10,
semigroupoids >= 1.2 && < 3.1,
EOF
patch active.cabal < version.patch
cabal install
cd ..
git clone git://github.com/diagrams/diagrams-lib.git
cd diagrams-lib && cabal install && cd ..
git clone git://github.com/diagrams/diagrams-svg.git
cd diagram-svg && cabal install && cd ..
</pre>
<p>
Other packages I had to install already had their Hackage versions<br />
updated.
</p>
<p>
Now you can try to build a test diagram to see that everything works
</p>
<div class=\"org-src-container\">
<pre class=\"src src-haskell\"><span style=\"color: #b294bb;\">module</span> <span style=\"color: #f0c674;\">Main</span> <span style=\"color: #b294bb;\">where</span>
<span style=\"color: #b294bb;\">import</span> <span style=\"color: #f0c674;\">Diagrams.Prelude</span>
<span style=\"color: #b294bb;\">import</span> <span style=\"color: #f0c674;\">Diagrams.Backend.SVG.CmdLine</span>
<span style=\"color: #81a2be;\">d</span> <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Diagram</span> <span style=\"color: #f0c674;\">SVG</span> <span style=\"color: #f0c674;\">R2</span>
<span style=\"color: #81a2be;\">d</span> <span style=\"color: #cc6666;\">=</span> square 20 <span style=\"color: #cc6666;\">#</span> lw 0<span style=\"color: #cc6666;\">.</span>5
<span style=\"color: #cc6666;\">#</span> fc black
<span style=\"color: #cc6666;\">#</span> lc green
<span style=\"color: #cc6666;\">#</span> dashing [0<span style=\"color: #cc6666;\">.</span>2,0<span style=\"color: #cc6666;\">.</span>2] 0
<span style=\"color: #81a2be;\">main</span> <span style=\"color: #cc6666;\">=</span> defaultMain (pad 1<span style=\"color: #cc6666;\">.</span>1 d)
</pre>
</div>
<p>
then you can compile and run it
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">ghc --make Test.hs
./Test -w 400 -o /vagrant/test.svg
</pre>
</div>
<p><a href=\"http://parenz.files.wordpress.com/2013/06/screen-shot-2013-06-12-at-5-19-03-pm.png\"><img src=\"http://parenz.files.wordpress.com/2013/06/screen-shot-2013-06-12-at-5-19-03-pm.png?w=300&h=289\" alt=\"Screen Shot 2013-06-12 at 5.19.03 PM\" height=\"289\" class=\"alignnone size-medium wp-image-47\" width=\"300\" /></a></p>
<p>
And that’s it!
</p>
</div>
</div>
<div id=\"outline-container-sec-4\" class=\"outline-2\">
<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> Outro</h2>
<div id=\"text-4\" class=\"outline-text-2\">
<p>
I would also like to note that we are currently polishing the GHCJS<br />
build process. Luite, especially is working on making ghcjs work (and<br />
run tests) with <a href=\"https://travis-ci.org/\">Travis CI</a> (it take quite a bit of time to build ghcjs<br />
and sometimes travis is timeouting) and I am working on tidying up<br />
the build config.
</p>
<p>
Stay tuned for more updates.
</p>
</div>
</div>
<br /> Tagged: <a href=\"http://parenz.wordpress.com/tag/diagrams/\">diagrams</a>, <a href=\"http://parenz.wordpress.com/tag/ghcjs/\">ghcjs</a>, <a href=\"http://parenz.wordpress.com/tag/haskell-2/\">haskell</a>, <a href=\"http://parenz.wordpress.com/tag/soc/\">soc</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/parenz.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/parenz.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=parenz.wordpress.com&blog=26722965&post=49&subd=parenz&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "420579aa4fa57bfef9a6b68bf4b5eb0f") (94 (20937 47692 603706) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_5189\"></span>, where <span id=\"tex_8060\"></span> is the number of “folds” and <span id=\"tex_3022\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_8517\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "26b7e866ae60e2037a2feb2c2feddceb") (93 (20937 23596 981120) "http://feedproxy.google.com/~r/ezyang/~3/qvy2VqDp6Is/" "Edward Z. Yang: (Homotopy) Type Theory: Chapter One" nil "Mon, 24 Jun 2013 22:56:27 +0000" "<div class=\"document\">
<p>In what is old news by now, the folks at the Institute for Advanced Study have released <a href=\"http://homotopytypetheory.org/book/\" class=\"reference external\">Homotopy Type Theory:
Univalent Foundations of Mathematics</a>.  There has been some (meta)commentary (<a href=\"https://plus.google.com/107913314994758123748/posts/VzWAsojiifE\" class=\"reference external\">Dan Piponi</a>, <a href=\"http://existentialtype.wordpress.com/2013/06/22/whats-the-big-deal-with-hott/\" class=\"reference external\">Bob Harper</a>, <a href=\"http://math.andrej.com/2013/06/20/the-hott-book/\" class=\"reference external\">Andrej Bauer</a>, <a href=\"http://dorais.org/archives/1425\" class=\"reference external\">François G. Dorais</a>, <a href=\"http://homotopytypetheory.org/2013/06/20/the-hott-book/\" class=\"reference external\">Steve Awodey</a>, <a href=\"http://www.carloangiuli.com/blog/homotopy-type-theory-univalent-foundations-of-mathematics/\" class=\"reference external\">Carlo Angiuli</a>, <a href=\"http://golem.ph.utexas.edu/category/2013/06/the_hott_book.html\" class=\"reference external\">Mike Shulman</a>, <a href=\"https://plus.google.com/117663015413546257905/posts/cm1sKge8qxX\" class=\"reference external\">John Baez</a>) on the Internet, though, of course, it takes time to read a math textbook, so don’t expect detailed technical commentary from non-authors for a while.</p>
<p>Of course, being a puny grad student, I was, of course, most interested in the book’s contribution of <em>yet another Martin-Löf intuitionistic type theory introduction</em>, e.g. chapter one.  The classic introduction is, of course, the papers that Martin Löf wrote (nota bene: there were many iterations of this paper, so it’s a little hard to find the right one, though it seems Giovanni Sambin’s notes are the easiest to find), but an introduction of type theory for <em>homotopy type theory</em> has to make certain adjustments, and this makes for some novel presentation.  In particular, the chapter’s discussion of <em>identity types</em> is considerably more detailed than I have seen elsewhere (this is not surprising, since identity is of central importance to homotopy type theory). There is also a considerable bit of pedantry/structure in the discussion of the types that make up the theory, reminiscent of the <a href=\"http://existentialtype.wordpress.com/2012/12/03/pfpl-is-out/\" class=\"reference external\">PFPL</a> (though I believe that this particular chapter  was mostly written by others). And, of course, there are many little variations in how the theory is actually put together, expounded upon in some detail in the chapter notes.</p>
<p>In more detail:</p>
<p><strong>Definitional and propositional equality.</strong> The chapter spends a little bit of time carefully distinguishing between definitional equality (a purely syntactic notion up to computation) and propositional equality (which involves evidence), which I appreciated. The difference between connectives which show up inside and outside the deductive system was a major point of confusion for me when I was originally learning logic.</p>
<p><strong>The general pattern of the introduction of a new kind of type.</strong> The modern style for introducing logical connectives is to classify the rules into various kinds, such as introduction rules and elimination rules, and then hew to this regularity in the presentation.  Often, readers are expected to “see it”, but this book makes a helpful remark laying out the style. I found a useful exercise was to take the rules and reorganize them so that, for example, all of the elimination rules are together and compare them.</p>
<p><strong>Recursion and induction.</strong> <a href=\"http://blog.ezyang.com/2013/04/the-difference-between-recursion-induction/\" class=\"reference external\">I’ve written about this subject before</a>, arguing that recursion and induction aren’t the same thing, since induction needs to work over indexed types.  This is true, but there is an important point I did not make: <em>induction is generalized recursion</em>. This is because when you specify your type family <em>P</em> to be the <em>constant type family</em> which ignores its index, the dependence is erased and you have an ordinary recursor.  In fact, this is a <a href=\"http://adam.chlipala.net/cpdt/html/InductiveTypes.html\" class=\"reference external\">CPDT exercise</a>; I think it clarifies things to see this in both Coq and informal mathematics, as the informal presentation makes the dimension of generalization clearer.</p>
<p><strong>Identity types.</strong> I won’t lie: I had a difficult time with this section, and I don’t think I fully understand why path induction works, even after a very long remark at the end of the section.  (Additionally, while the notes point to some prior literature about the subject, I took a look at the papers and I did not see anything that resembled their presentation of path induction.) By default, Coq thinks the inductive principle for equality types should be what is referred to in this book as the indiscernability of identicals:</p>
<pre class=\"literal-block\">> Check eq_rect.
eq_rect
: forall (A : Type) (x : A) (P : A -> Type),
P x -> forall y : A, x = y -> P y
</pre>
<p>(As a tangent, the use of family <em>C</em> is confusingly overloaded; when discussing the generalization of the previous principlem the reader is required to imagine <tt class=\"docutils literal\">C(x) <span class=\"pre\">-></span> C(y)  ===  C(x, y)</tt>—the C’s of course being distinct.) Path induction asks for more:</p>
<pre class=\"literal-block\">eq_ind
: forall (A : Type), forall (C : forall (x y : A), x = y -> Type),
(forall (x : A), C x x (eq_refl x)) -> forall (x y : A), forall (p : x = y), C x y p
</pre>
<p>This is perhaps not too surprising, since this machinery is principally motivated by homotopy type theory. Additionally, the inductive principle follows the same pattern as the other inductive principles defined for the other types. The trouble is a frustrating discussion of why this inductive principle valid, even when you might expect, in a HoTT setting, that not all equality was proven using reflexivity. My understanding of the matter is that is has to do with the placement of the <tt class=\"docutils literal\">forall (x : A)</tt> quantifier. It is permissible to move one of the x's to the top level (based path induction), but not <em>both</em>. (This is somewhat obscured by the reuse of variable names.) There is also a geometric intuition, which is that when both or one endpoints of the path are free (inner-quantification), then I can contract the path into nothingness. But I have a difficult time mapping this onto any sort of rigorous argument. Perhaps you can help me out.</p>
<blockquote>
As an aside, I have some general remarks about learning type theory from a functional programming background.  I have noticed that it is not too hard to use Coq without knowing much type theory, and even easier to miss the point of why the type theory might be helpful.  But in the end, it is really useful to understand what is going on, and so it’s well worth studying <em>why</em> dependent products and sums generalize the way they do.  It also seems that people find the pi and sigma notation confusing: it helps if you realize that they are algebraic puns. Don’t skip the definition of the inductive principles.</blockquote>
<p>I apologize if any of this post has been inaccurate or misleadingly skewed. My overall impression is that this first chapter is a very crisp introduction to type theory, but that the segments on identity types may be a little difficult to understand. Now, onwards to chapter two!</p>
</div>
<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/qvy2VqDp6Is\" height=\"1\" width=\"1\" />" nil nil "ba71d6fdc9ef485db95c3ce3a2197f73") (92 (20937 23596 978954) "http://praisecurseandrecurse.blogspot.com/2013/06/objective-c-day-6-back-from-dylan-land.html" "Paul Potts: Objective-C, Day 6 (Back from Dylan-land)" "noreply@blogger.com (Paul Potts)" "Mon, 24 Jun 2013 22:53:00 +0000" "<p>I've been a little sick -- maybe something in our water, because our tap water started tasting like hose water -- but it seems to be clearing up. There's nothing like having flu-like symptoms to celebrate the first couple of days of summer! But I'm more-or-less back on my feet, although still a little queasy. Yesterday the weather station closest to our home in Saginaw hit 93, \"feels like 100\" with the humidity. I know that's nothing compared to some of the folks out west, but it came on us pretty fast, and I'd happily trade 100 in the low-humidity desert for 90 in Saginaw. I've got the A/C unit set up in the home office, since we finally need it, and I'm pressing on with my re-engineering of the old Mac Polar game.</p> <p>The Dylan implementation I discussed last time helped focus my thinking about, if not the optimal, at least a fairly clear model for implementing game piece behavior. It also clarified what I should do with game objects in Objective-C, and that is \"nothing.\" The \"model\" class still deserves to live, but the tile pieces just don't derive any benefit from being classes. The two main reasons are (1) Objective-C doesn't really support static methods in the sense that C++ does, and (2) Objective-C's dispatch mechanism isn't sophisticated enough to help us significantly save on \"code to find code.\" So the tiles will be represented by plain old data, and we'll dispatch on their \"types\" with plain old logic.</p> <p>The Dylan code has a small infrastructure of helper functions for accessing, filling, and logging the board state. I won't include all of it, because most of what it does is pretty clear from the function name, but there are functions like this:</p> <pre>define method getTileAtPos( model :: <model>, pos :: <pos-or-false> ) =><br />    ( tile :: <tile> )<br />    if ( pos )<br />        getTileAtXY( model, pos.y-idx, pos.x-idx );<br />    else<br />        $the-edge;<br />    end if;<br />end;<br /><br />define function getAdjacentPos( pos :: <pos>, dir :: <dir> )<br />    => ( pos-or-false :: <pos-or-false> )<br />    let y-offset :: <integer> = 0;<br />    let x-offset :: <integer> = 0;<br />    if ( dir == #\"east\" )<br />        x-offset := 1;<br />    elseif ( dir == #\"south\" )<br />        y-offset := 1;<br />    elseif ( dir == #\"west\" )<br />        x-offset := -1;<br />    elseif ( dir == #\"north\" )<br />        y-offset := -1;<br />    end if;<br />    let new-y-idx :: <integer> = pos.y-idx + y-offset;<br />    let new-x-idx :: <integer> = pos.x-idx + x-offset;<br />    if ( ( ( new-y-idx >= 0 ) & ( new-y-idx < $board-dim-y ) ) & <br />         ( ( new-x-idx >= 0 ) & ( new-x-idx < $board-dim-x ) ) )<br />        make( <pos>, y-idx: new-y-idx, x-idx: new-x-idx );<br />    else<br />        #f<br />    end if;<br />end;<br /><br />define method penguinPush( model :: <model> )<br />    => ( result :: <boolean> )<br />    let target-pos :: <pos-or-false> = <br />        getAdjacentPos( model.penguin-pos, model.penguin-dir );<br />    let target-tile = getTileAtPos( model, target-pos );<br />    pushTile( model, model.penguin-dir, target-pos, target-tile );<br />end;<br /><br />define method penguinMove( model :: <model>, dir :: <dir> )<br />    if ( model.penguin-dir ~= dir )<br />        model.penguin-dir := dir;<br />        format-out( \"Penguin changed dir to %S\\n\", dir );<br />        force-output( *standard-output* );<br />    else<br />        if ( penguinPush( model ) )<br />            format-out ( \"Penguin moved to %d, %d\\n\",<br />                model.penguin-pos.y-idx, model.penguin-pos.x-idx );<br />            force-output( *standard-output* );<br />        end if;<br />        if ( model.heart-count == 0 )<br />            format-out( \"Heart count reached zero, level cleared!\\n\" );<br />            force-output( *standard-output* );<br />        end if;<br />    end if;<br />end;<br /><br />define method penguinMoveTimes( model :: <model>, dir :: <dir>,<br />    times :: <integer> )<br />    for ( count from 1 to times )<br />        penguinMove( model, dir );<br />    end for;<br />end;<br /><br />define method describe-tile( tile :: <tile> ) => ( str :: <string> )<br />    case<br />        ( tile == $the-empty     ) => \"___ \";<br />        ( tile == $the-tree      ) => \"tre \";<br />        ( tile == $the-mountain  ) => \"mtn \";<br />        ( tile == $the-house     ) => \"hou \";<br />        ( tile == $the-ice-block ) => \"ice \";<br />        ( tile == $the-heart     ) => \"hea \";<br />        ( tile == $the-bomb      ) => \"bom \";<br />        otherwise                  => \"??? \";<br />    end case;<br />end method;<br /><br />define method describe-board( model :: <model> )<br />    for ( y-idx from 0 below $board-dim-y )<br />        for ( x-idx from 0 below $board-dim-x )<br />            format-out( \"%S\", <br />                describe-tile( model.board[ y-idx, x-idx ]  ) );<br />        end for;<br />        format-out( \"\\n\" );<br />    end for;<br />    force-output( *standard-output* );<br />end;</pre> <p>In Objective-C, I'm going to get rid of the singletons and tile classes altogether. They will live on in the comments, to clarify what the pseudo-object-dispatch is doing, and vestigially in the code. The board will have the same internal representation as the raw strings of data taken from the original Polar game resources. I'll keep my three main methods from the Dylan code -- pushing a tile, colliding, and sliding -- but these will be single Objective-C methods rather than multi-methods. The tiles are just chars:</p> <pre>#define POLAR_DATA_LEN_Y 4               // 4x24 grid<br />#define POLAR_DATA_LEN_X 24<br />#define POLAR_DATA_NUM_LEVELS 6          // In the original game<br /><br />typedef char tile_t;<br /><br />enum {<br />    polar_tile_empty = '0',<br />    polar_tile_tree,<br />    polar_tile_mountain,<br />    polar_tile_house,<br />    polar_tile_ice_block,<br />    polar_tile_heart,<br />    polar_tile_bomb,<br />    polar_tile_last = polar_tile_bomb<br />};<br /><br />/*<br />    Not part of the level data; an extra flag value representing<br />    edge of board<br />*/<br />#define polar_tile_edge 'X'<br /><br />typedef const char polar_level_array_t[POLAR_DATA_NUM_LEVELS]<br />                                      [POLAR_DATA_LEN_Y]<br />                                      [POLAR_DATA_LEN_X];<br /><br />typedef char polar_board_array_t[POLAR_DATA_LEN_Y]<br />                                [POLAR_DATA_LEN_X];<br /><br />extern polar_level_array_t polar_levels;</pre> <p>Why use <b>#define</b> for array indices and our tile pieces instead of <b>const int</b> and <b>const char?</b> Because using a const integral variable (yeah... a \"const variable...\") to dimension an array, or represent a case value for a switch statement, is <a href=\"http://stackoverflow.com/questions/3988122/static-const-int-not-good-enough-for-array-size\">still not standard C</a> everywhere, although it is a common extension to allow the compiler to treat it as so in contexts like this. Enum works fine with characters. Oddly, I have a build issue when using enum values to define the array boundaries. I haven't figured out quite what that is all about -- I think it may be a Clang bug. But I'll worry about that later.</p> <p>In the implementation file:</p> <pre>polar_level_array_t polar_levels =<br />{<br />    {<br />        \"100000000000000100000400\"<br />        \"106020545000000000100100\"<br />        \"100000000000000050002300\"<br />        \"110000100000000000000000\"<br />    },<br />    // Etc., for the other five levels<br />}</pre> <p>The model class gets one as a member:</p> <pre>@interface ArcticSlideModel : NSObject<br />{<br />    polar_level_array_t board;<br />    pos_t penguinPos;<br />    dir_e penguinDir;<br />    int heartCount;<br />}</pre> <p>We'll work ourselves down from the external API to the associated implementation:</p> <pre><br />// The external API<br />- (void)penguinMoveDue:(dir_e)dir;<br />- (void)penguinMoveNTimes:(int)n<br />                      due:(dir_e)dir;</pre> <p><b>penguinMoveNTimes:due:</b> calls <b>penguinMoveDue:</b> which calls <b>penguinPushDue:</b>. In Dylan:</p> <pre>define method penguinPush( model :: <model> )<br />    => ( result :: <boolean> )<br />    let target-pos :: <pos-or-false> = <br />        getAdjacentPos( model.penguin-pos, model.penguin-dir );<br />    let target-tile = getTileAtPos( model, target-pos );<br />    pushTile( model, model.penguin-dir, target-pos, target-tile );<br />end;</pre> <p>That's not strictly translatable to C, since we're taking advantage of a <b>type-union</b> to retrieve the position or <b>#f</b> with <b>getAdjacentPos</b>. This usage extends to the lower levels of the implementation, though, so for now we're going to continue to allow getAdjacentPos to return position values that are invalid, and explicitly check for them so we don't read or write at non-existent array indices.</p> <pre>pos_t getAdjacentPos( pos_t original_pos, dir_e dir )<br />{<br />    pos_t updated_pos = original_pos;<br />    int y_offset = 0;<br />    int x_offset = 0;<br />    switch ( dir )<br />    {<br />        case dir_east:<br />            x_offset = 1;<br />            break;<br />        case dir_south:<br />            y_offset = 1;<br />            break;<br />        case dir_west:<br />            x_offset = -1;<br />            break;<br />        case dir_north:<br />            y_offset = -1;<br />            break;<br />        default:<br />            NSLog( @\"getAdjacentPos: invalid dir %d\", dir );<br />    }<br />    updated_pos.y_idx += y_offset;<br />    updated_pos.x_idx += x_offset;;<br />    return updated_pos;<br />}</pre> <p>We rely on posValid to explicitly check for invalid tile cases:</p> <pre>BOOL posValid( pos_t pos )<br />{<br />    return ( ( ( pos.y_idx >= 0 ) &&<br />               ( pos.y_idx < POLAR_DATA_LEN_Y  ) ) &&<br />             ( ( pos.x_idx >= 0 ) &&<br />               ( pos.x_idx < POLAR_DATA_LEN_X ) ) );<br />}</pre> <p>That should be pretty non-controversial. Note that BOOL in Objective-C is not a real type; it's just a #define and a typedef based on char_t. So don't get a <a href=\"http://blog.bignerdranch.com/564-bools-sharp-corners/\">false sense of security</a> -- it has the same problems that fake bool types always have, and always will have, in straight C.</p> <p>Anyway, we can now implement our pushTile function. Here is the Dylan:</p> <pre><br />define generic pushTile( model :: <model>, dir :: <dir>,<br />    pos :: <pos-or-false>, target-tile :: <tile> );<br /><br />// Handle walkable (empty or tree tile). The penguin<br />// is allowed to move onto this tile (indicated by<br />// returning #t).<br />define method pushTile( model :: <model>, dir :: <dir>,<br />    target-pos :: <pos>, target-tile :: <walkable> )<br />    => ( result :: <boolean> )<br />    model.penguin-pos := target-pos;<br />    #t;<br />end;<br /><br />// Handle movable (bomb, heart, ice block) -- call<br />// collide which specializes in various combinations.<br />define method pushTile( model :: <model>, dir :: <dir>,<br />    target-pos :: <pos>, target-tile :: <movable> )<br />    => ( result :: <boolean> )<br />    let next-pos :: <pos-or-false>  = <br />        getAdjacentPos( target-pos, dir );<br />    let next-tile = getTileAtPos ( model, next-pos );<br />    collide( model, dir, target-pos, target-tile,<br />        next-pos, next-tile );<br />    #f;<br />end;<br /><br />// Handle fixed (house, mountain, edge) -- do nothing.<br />// The GUI might play a \"fail\" beep.<br />define method pushTile( model :: <model>, dir :: <dir>,<br />    target-pos :: <pos-or-false>, target-tile :: <fixed> )<br />    => ( result :: <boolean> )<br />    #f;<br />end;<br /></pre> <p>Doing all our own dispatch logic, here is a single method in Objective-C:</p> <pre>- (BOOL)pushTile:(tile_t)target_tile<br />             due:(dir_e)dir<br />              at:(pos_t)target_pos<br />{<br />    switch ( target_tile )<br />    {<br />        /*<br />            Handle the \"walkable\" cases. The penguin is allowed to move<br />            onto these tiles, indicated by returning YES<br />        */<br />        case polar_tile_empty: /* FALL THROUGH */<br />        case polar_tile_tree:<br />            NSLog( @\"pushTile: walkable\\n\" );<br />            self->penguinPos = target_pos;<br />            return YES;<br /><br />        /*<br />            Handle \"movable\" cases. Call collide which specializes in<br />            various combinations.<br />        */<br />        case polar_tile_bomb:      /* FALL THROUGH */<br />        case polar_tile_heart:     /* FALL THROUGH */<br />        case polar_tile_ice_block:<br />            NSLog( @\"pushTile: movable\\n\" );<br />            {<br />                pos_t next_pos = getAdjacentPos( target_pos, dir );<br />                /*<br />                    Note that next-pos can be invalid, which results<br />                    in the special \"edge\" tile value.<br />                */<br />                tile_t next_tile = [ self getTileAtPos:next_pos ];<br />                [ self collideTile:target_tile atPos:target_pos<br />                    due:dir withTile:next_tile<br />                    atSecondPos:next_pos ];<br />            }<br />            return NO;<br /><br />        /*<br />            Handle \"fixed\" cases. Do nothing; the GUI might play<br />            a \"fail\" beep.<br />        */<br />        case polar_tile_mountain:   /* FALL THROUGH */<br />        case polar_tile_house:<br />            NSLog( @\"pushTile: fixed\\n\" );<br />            return NO;<br /><br />        default:<br />            NSLog( @\"pushTile: unexpected tile value %d\\n\",<br />                   target_tile );<br />            return NO;<br />    }<br />}</pre> <p>And as in the Dylan version, for interesting interactions this method defers to another method:</p> <pre>- (void)collideTile:(tile_t)first_tile<br />              atPos:(pos_t)first_pos<br />                due:(dir_e)dir<br />           withTile:(tile_t)second_tile<br />        atSecondPos:(pos_t)second_pos<br />{<br />    BOOL empty = ( second_tile == polar_tile_empty );<br />    /* Blocking includes the special edge tile value */<br />    BOOL blocking = ( second_tile != polar_tile_empty );<br />    BOOL mountain = ( second_tile == polar_tile_mountain );<br />    BOOL house = ( second_tile == polar_tile_house );<br /><br />    BOOL ice_block = ( first_tile == polar_tile_ice_block );<br />    BOOL bomb = ( first_tile == polar_tile_bomb );<br />    BOOL heart = ( first_tile == polar_tile_heart );<br />    BOOL movable = ( ice_block || bomb || heart );<br /><br />    if ( bomb && mountain )<br />    {<br />        /*<br />            When a bomb meets a mountain, both bomb and mountain blow up<br />        */<br />        NSLog( @\"collideTile: bomb / mountain\\n\" );<br />        [ self setTile:polar_tile_empty AtPos:first_pos ];<br />        [ self setTile:polar_tile_empty AtPos:second_pos ];<br />    }<br />    else if ( heart && house )<br />    {<br />        /*<br />            When a bomb heart meets a house, we are closer to winning<br />        */<br />        NSLog( @\"collideTile: heart / house\\n\" );<br />        [ self setTile:polar_tile_empty AtPos:first_pos ];<br />        [ self decrementHeartCount ];<br />    }<br />    else if ( ice_block && blocking )<br />    {<br />        /*<br />            When an ice block is pushed directly against any<br />            blocking tile (including the board edge), it is destroyed.<br />        */<br />        NSLog( @\"collideTile: ice block / blocking\\n\" );<br />        [ self setTile:polar_tile_empty AtPos:first_pos ];<br />    }<br />    else if ( movable )<br />    {<br />        if ( empty )<br />        {<br />            /*<br />                A movable tile pushed onto an empty tile will slide<br />            */<br />            NSLog( @\"collideTile: movable / empty: start slide\\n\" );<br />            [ self slideTile:first_tile atPos:first_pos due:dir<br />                   toTile:second_tile atSecondPos:second_pos ];<br />        }<br />        else if ( blocking )<br />        {<br />            /*<br />                When a generic movable piece meets any other<br />                blocking pieces not handled by a special case<br />                above, nothig happens; it stops. Maybe play<br />                a \"fail\" beep.<br />            */<br />            NSLog( @\"collideTile: movable / blocking\\n\" );<br />        }<br />    }<br />}</pre> <p>This could have been written with a bunch of ugly, redundant-looking <b>switch</b> statements, but the duplicated cases and defaults just don't seem as clear to me as making flags that precisely describe the nature of the \"double dispatch\" going on. In this program, having to spell out the logic (using code to find code) is not really onerous. But the problem comes, of course, in code where we keep having to add special cases. I could refactor this method to call some smaller methods but that doesn't seem like a real win. In the Dylan implementation if I wanted to add another special interaction, it might only require adding another generic function. That's assuming my whole class hierarchy didn't change.</p> <p>Finally, the slide method:</p> <pre>- (void)slideTile:(tile_t)first_tile<br />            atPos:(pos_t)first_pos<br />              due:(dir_e)dir<br />           toTile:(tile_t)second_tile<br />      atSecondPos:(pos_t)second_pos<br />{<br />    BOOL empty = ( second_tile == polar_tile_empty );<br />    /* Blocking includes the special edge tile value */<br />    BOOL blocking = ( second_tile != polar_tile_empty );<br />    <br />    BOOL ice_block = ( first_tile == polar_tile_ice_block );<br />    BOOL movable = ( ice_block ||<br />                     first_tile == polar_tile_bomb ||<br />                     first_tile == polar_tile_heart );<br /><br />    if ( ice_block && blocking )<br />    {<br />        // A specific movable tile, ice-block, meets a<br />        // blocking tile; don't call collide since the behavior<br />        // of a sliding ice block is different than a pushed ice<br />        // block. It just stops and doesn't break.<br />        NSLog( @\"slideTile: ice block / blocking\\n\" );       <br />    }<br />    else if ( movable && empty )<br />    {<br />        // A movable tile interacting with an empty tile --<br />        // move forward on the board and call slide again.<br />        NSLog( @\"slideTile: movable / empty\\n\" );<br />        pos_t third_pos = getAdjacentPos( second_pos, dir );<br />        tile_t third_tile = [ self getTileAtPos:third_pos ];<br />        [ self setTile:polar_tile_empty AtPos:first_pos ];<br />        [ self setTile:first_tile AtPos:second_pos ];<br />        [ self slideTile:first_tile atPos:second_pos due:dir<br />                  toTile:third_tile atSecondPos:third_pos ];<br />    }<br />    else if ( movable && blocking )<br />    {<br />        // A movable tile meets a blocking tile: call collide to<br />        // handle heart/house, bomb/mountain, edge of world, etc.<br />        NSLog( @\"slideTile: movable / blocking\\n\" );<br />        [ self collideTile:first_tile atPos:first_pos due:dir<br />                  withTile:second_tile atSecondPos:second_pos ];<br />    }<br />}</pre> <p>That's the bulk of it. Here's an excerpt from the log as it finishes up the first level:</p> <pre>ArcticSlide[2279:c07] penguinPush: tile at 2, 5 pushed<br />ArcticSlide[2279:c07] pushTile: walkable<br />ArcticSlide[2279:c07] Penguin moved to: 2, 5<br />ArcticSlide[2279:c07] Penguin direction changed to EAST<br />ArcticSlide[2279:c07] Penguin moving EAST<br />ArcticSlide[2279:c07] penguinPush: tile at 2, 6 pushed<br />ArcticSlide[2279:c07] pushTile: movable<br />ArcticSlide[2279:c07] collideTile: movable / empty: start slide<br />ArcticSlide[2279:c07] slideTile: movable / empty<br />ArcticSlide[2279:c07] collideTile: heart / house<br />ArcticSlide[2279:c07] Heart count reached zero, level cleared!<br />ArcticSlide[2279:c07] ArcticSlideModel board state:<br />tre__________________________________________treice_____________________<br />tre_________mtn_______________________________________tre______tre______<br />tre____________________________________________________________hou______<br />tretre____________treice________________________________________________<br /></pre> <p>I'll put in logic to play the remaining levels soon, as additional test cases.</p> <p>Note that I kept the recursive call to slideTile. It's not an idiom commonly used in C and Objective-C. We only recurse when the moving tile traverses more than one empty tile, and so never more than 23 times. I like to write algorithms recursively when possible while sketching out code. If direct recursion like that is <i>verboten</i>, it can be removed. I don't think my compiler is optimizing it out. But the termination logic now starts to look redundant:</p> <pre>else if ( movable && empty )<br />    {<br />        while ( NO == blocking )<br />        {<br />            pos_t third_pos = getAdjacentPos( second_pos, dir );<br />            tile_t third_tile = [ self getTileAtPos:third_pos ];<br />            [ self setTile:polar_tile_empty AtPos:first_pos ];<br />            [ self setTile:first_tile AtPos:second_pos ];<br />            first_pos = second_pos;<br />            second_pos = third_pos;<br />            second_tile = third_tile;<br />            blocking = ( third_tile != polar_tile_empty );<br />        }<br />        if ( ice_block )<br />        {<br />            NSLog( @\"slideTile: ice block / blocking\\n\" );<br />        }<br />        else<br />        {<br />            [ self collideTile:first_tile atPos:first_pos due:dir<br />                      withTile:second_tile atSecondPos:second_pos ];<br />        }<br />    }</pre> <p>And if I don't want to call back into methods in my own call chain at all -- that is, if I have to give up calling <b>collideTile</b>, well, I could do that but it would involve putting copying of the logic from collideTile into this method, and by that point this method will be badly breaking the \"DRY\" (Don't Repeat Yourself) axiom, so it might be clearer to turn <b>collideTile</b> and <b>slideTile</b> into one method.</p> <p>Anyway, the heat is building up in my office and it is about dinnertime. I think it's time to move on to some user interface, so the app can actually be played on an untethered iOS device. I also am still struggling a bit to get going on a Haskell implementation. I know it can be done -- people describe Haskell as a good imperative language too, for modeling state as safely as possible -- but let's just say that the chapters and examples I'm reading haven't quite \"gelled\" in my brain. I still feel like someone studying a foreign language who can read it and understand it when spoken, but not speak it yet -- especially the Monadic dialects. But I'm still working on that.</p> <p>UPDATE: I have put the source on GitHub, such as it is -- for now, ignore the license text; I need to pick an actual license. See: <a href=\"https://github.com/paulrpotts/arctic-slide-ios\">https://github.com/paulrpotts/arctic-slide-ios</a></p>" nil nil "4dd23d4b203effde8a79f8efa9e9a827") (91 (20937 23596 864736) "http://feedproxy.google.com/~r/FpComplete/~3/F6zWN-sWxgw/fp-haskell-center-video-blog" "FP Complete: FP Haskell Center Video Blog" nil "Mon, 24 Jun 2013 14:42:00 +0000" "<p>FP Haskell Center is approaching its beta release date for an on-time delivery, and I wanted to share with you some of the details of our product in a short video blog. You can find a link to the video below:</p><p><a href=\"http://youtu.be/3lPFg-tQaLY\">FP Haskell Center Video Blog</a></p><p>Remember, there is still plenty of time to sign-up for the <a href=\"https://www.fpcomplete.com/business/haskell-center\">FP Haskell Center beta.</a></p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=F6zWN-sWxgw:3yiTnUAVPzw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=F6zWN-sWxgw:3yiTnUAVPzw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=F6zWN-sWxgw:3yiTnUAVPzw:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=F6zWN-sWxgw:3yiTnUAVPzw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=F6zWN-sWxgw:3yiTnUAVPzw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=F6zWN-sWxgw:3yiTnUAVPzw:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/F6zWN-sWxgw\" height=\"1\" width=\"1\" />" nil nil "53b0840df6197ac5ba254f7bfca9c978") (90 (20937 23596 853594) "http://praisecurseandrecurse.blogspot.com/2013/06/dispatch-for-polar-game-in-dylan.html" "Paul Potts: Dispatch for the Polar Game in Dylan" "noreply@blogger.com (Paul Potts)" "Thu, 20 Jun 2013 04:44:00 +0000" "<p>So with some assistance from the folks on the Dylan Hackers mailing list I got enough clues to press on and get my Dylan implementation of the Polar game working, at least up through the end of the first board. I haven't verified that every possible tile interaction works yet, but it's a start. This seems like a silly problem, but it interests me because of several problems. Dispatch (or simulated dispatch) is \"double dispatch,\" based on the types of two different objects interacting. The breakdown of how to categorize the classes of objects isn't 100% clear -- there is some overlap that I can't seem to eliminate, and the compiler has to decide what methods constitute the most specific match. And finally, the logic does not seem easily fixed in either classes representing the tiles, or a single class representing the board.</p> <p>If I wrote it in C, the tile classes pretty much wouldn't exist; they'd exist only as flag enumerations in an array of tiles, and the code would consist mostly of <b>switch</b> or <b>if-else</b> logic that did the \"double dispatch\" in a fixed, predictable order, without relying on the compiler very much. Objective-C, again mostly C with a thin layer for representing classes, doesn't really give these classes enough features to make them worthwhile, so I will probably just keep the board (the model in the model/view/controller) and treat the tiles like I would in plain old C. But in Dylan they have an interesting life in terms of how they can be used to organize the code -- using generic functions -- so that I'm doing less writing of \"code to find code\" -- that is, code to look at run-time identity of objects and \"manually\" dispatch on it.</p> <p>Here are the tile classes:</p> <pre>define abstract class <tile> ( <object> ) end;<br />define abstract class <blocking> ( <tile> ) end;<br />define abstract class <walkable> ( <tile> ) end;<br />define abstract class <movable> ( <blocking> ) end;<br />define abstract class <fixed> ( <blocking> ) end;<br />define class <bomb> ( <movable> ) end;<br />define class <heart> ( <movable> ) end;<br />define class <ice-block> ( <movable> ) end;<br />define class <house> ( <fixed> ) end;<br />define class <mountain> ( <fixed> ) end;<br />define class <edge> ( <fixed> ) end;<br />define class <tree> ( <blocking>, <walkable> ) end;<br />define class <empty> ( <walkable> ) end;</pre> <p>Oy, is that a pain to replace all the angle brackets with HTML entities... there must be a better way in Blogger! Anyway, these tile classes have no state -- in Dylan, no slots -- and are used in my program solely for their types. Edge does not actually appear on the board, but is used internally when the penguin or another moving object attempts to interact with the edge of the board. We treat this just like another blocking object, as if the board was surrounded by immovable, inert objects.</p> <p>Diagramatically, like so:</p> <a href=\"http://4.bp.blogspot.com/-edliQJKZWbs/UcJyojJiJ_I/AAAAAAAADGU/HrdQeMbN914/s1600/tile-classes-v2-75-percent.png\"><img src=\"http://4.bp.blogspot.com/-edliQJKZWbs/UcJyojJiJ_I/AAAAAAAADGU/HrdQeMbN914/s1600/tile-classes-v2-75-percent.png\" border=\"0\" /></a> <p>There did not seem to be one absolute best way to represent these classes. I want to organize their abstract base classes by behavior, but their behavior does not break down with complete consistency -- for example, tiles with trees are \"blocking\" with respect to sliding objects, except for the penguin. The ice block is \"blocking\" except for the case where the penguin pushes it and it is not adjacent to an empty tile -- then it is crushed. Bombs and hearts seem to have the same interactions with mountains and houses whether they traverse an empty tile by sliding first across one or more empty tiles, while ice blocks behave differently -- if they slide first and then collide with a blocking object, they are not destroyed, they just stop. So the groupings of the concrete classes isn't going to be able to coherently divide up all their possible behaviors.</p> <p>The scheme I settled on for object interactions involves three layers, in the form of three generic functions. The first represents interactions of the player's \"avatar,\" the penguin, with tiles:</p> <pre>define generic pushTile( model :: <model>, dir :: <dir>,<br />    pos :: <pos-or-false>, target-tile :: <tile> );<br /><br />define method pushTile( model :: <model>, dir :: <dir>,<br />    target-pos :: <pos>, target-tile :: <walkable> )<br />    => ( result :: <boolean> )<br />    model.penguin-pos := target-pos;<br />    #t;<br />end;<br /><br />define method pushTile( model :: <model>, dir :: <dir>,<br />    target-pos :: <pos>, target-tile :: <movable> )<br />    => ( result :: <boolean> )<br />    let next-pos :: <pos-or-false>  = <br />        getAdjacentPos( target-pos, dir );<br />    let next-tile = getTileAtPos ( model, next-pos );<br />    collide( model, dir, target-pos, target-tile,<br />        next-pos, next-tile );<br />    #f;<br />end;<br /><br />define method pushTile( model :: <model>, dir :: <dir>,<br />    target-pos :: <pos-or-false>, target-tile :: <fixed> )<br />    => ( result :: <boolean> )<br />    #f;<br />end;</pre> <p>Dylan doesn't strictly require that I define the generic function before defining methods for it; if I just start writing methods with the same name, it will assume that I mean them to be associated with a generic function. But defining the generic function first has a benefit -- the compiler will tell me whether my methods make sense, in that their parameters are all strictly the same type or a more specific subclass of the types mentioned in the <b>define generic</b> statement. Note that <b><pos-or-false></b> is a type union of a simple <b><pos></b> class with singleton( #f ). The generic uses that type union, but one of the methods are more specific: they require an actual <b><pos></b> instance and will not accept #f.</p> <p>The first method handles the case where the penguin is pushing a <b><walkable></b> tile, and returns false to indicate that the penguin position can be updated. The pos must not be <b>#f</b>. The second method handles pushing any <b><movable></b> tiles. And the third handles the <b><fixed></b> tiles. Between the three methods, you might notice that they cover all the leaf classes (all the instantiable classes) in the graph above, in 3 separate groups with no overlapping. You could shade in the leaf nodes covered by the three different methods with three different colors, going from the abstract classes mentioned downward, and all the leaves would all be colored and none would be colored more than once:</p> <a href=\"http://1.bp.blogspot.com/-7hB-6vXpCqc/UcJ6yt9HtyI/AAAAAAAADGk/KywbId2KW4k/s1600/tile-classes-v2-color-1-75-percent.png\"><img src=\"http://1.bp.blogspot.com/-7hB-6vXpCqc/UcJ6yt9HtyI/AAAAAAAADGk/KywbId2KW4k/s1600/tile-classes-v2-color-1-75-percent.png\" border=\"0\" /></a> <p>So on the tile parameter, the coverage of the concrete classes is complete and the dispatch algorithm should not have any difficulty. Combined with the position parameter, though, the situation is slightly trickier. At runtime, a caller could call <b>pushTile</b> with <b>#f</b> for <b>pos</b> and <b><empty></b>; or <b><bomb></b> for <b>tile</b> and the dispatcher would, correctly, throw up its hands at this point and say that there was no applicable method. I could have defined a more general method to handle this case, but I didn't -- there shouldn't ever be an empty or bomb tile without a corresponding valid position, since they are real tiles on the board, and I want the runtime to help me catch that case if it ever happens. Similarly, I could have defined a method that handled <b><blocking></b> or <b><tile></b> as part of this generic function but the whole point is that I don't know what to do with those more general classes here.</p> <p>So, you may notice that the middle <b>pushTile</b> method calls <b>collide</b> with a second tile and position, adjacent to the first in a specified direction. That generic function looks like this:</p> <pre>define generic collide( model :: <model>, dir :: <dir>,<br />    tile-1-pos :: <pos>, tile-1 :: <movable>,<br />    tile-2-pos :: <pos-or-false>, tile-2 :: <blocking-or-empty> );<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    next-pos :: <pos>, next-tile :: <empty> )<br />    slide ( model, dir, movable-pos, movable-tile,<br />            next-pos, next-tile );<br />end;<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    ice-block-pos :: <pos>, ice-block-tile :: <ice-block>,<br />    icebreaking-pos :: <pos-or-false>,<br />    ice-breaking-tile :: <blocking> )<br />    setTileAtPos( model, ice-block-pos, $the-empty );<br />end;<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    heart-pos :: <pos>, heart-tile :: <heart>,<br />    house-pos :: <pos>, house-tile :: <house> )<br />    setTileAtPos( model, heart-pos, $the-empty );<br />    decrementHeartCount( model );<br />end;<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    bomb-pos :: <pos>, bomb-tile :: <bomb>,<br />    mountain-pos :: <pos>, mountain-tile :: <mountain> )<br />    setTileAtPos( model, bomb-pos, $the-empty );<br />    setTileAtPos( model, mountain-pos, $the-empty );<br />end;<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    blocking-pos :: <pos-or-false>, blocking-tile :: <blocking> )<br />end;</pre> <p>You might notice that before long you hit yet another method call you haven't seen before -- slide. This is, as you might guess, yet another generic function. (Doesn't this program every get around to <i>doing</i> anything? In fact it does, but this is the often-paradoxical-seeming logic of object-oriented design -- individual methods that seem too small and simple to get anything done can actually get a lot done together, especially when aided by a smart dispatcher that eliminates most of the need to write \"code to find code.\"</p> <p>The type-union <b><blocking-or-empty></b> allows us to specify, for our generic function, as tight a class as possible out of two otherwise disjoint sections of our class diagram. We don't have to loosen the type specification needlessly by using <b><tile></b>, which would allow <b><walkable></b> as a valid class for this parameter. Meanwhile, we can loosen <b>tile-2-pos</b> so that we make our intention to allow <b>#f</b> explicit here.</p> <p>The methods break down as follows. The first one handles any movable tile that is moving onto an empty tile, by calling a slide method to be defined later. The second one is a special case to handle the crushable <b><ice-block></b> class -- if it is pushed into the world edge, or any other object, it is destroyed (replaced with <b>$the-empty</b> class instance). The third and fourth methods handle specific interactions between hearts and houses, and bombs and mountains. And finally, to handle the case where the penguin pushes a heart against a mountain, or a bomb against the edge of the world, we have a less specific method that dispatches on <b><movable></b> and <b><blocking></b>. This prevents the runtime from generating an error in this case, but also gives us a place where we could generate some kind of feedback to the user, like a special sound to indicate failure.</p> <p>The breakdown of instantiable tile classes here is much more complex, especially given that we are dispatching on two class parameters drawn from the same hierarchy. We could try coloring them by using two copies of the diagram:</p> <div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-d-ajjIIutjI/UcM8kBSlaWI/AAAAAAAADHM/UQ5mauDpXKA/s1600/tile-classes-v2-double-dispatch-2-75-percent.png\"><img src=\"http://1.bp.blogspot.com/-d-ajjIIutjI/UcM8kBSlaWI/AAAAAAAADHM/UQ5mauDpXKA/s1600/tile-classes-v2-double-dispatch-2-75-percent.png\" border=\"0\" /></a></div> <p>Err, that's pretty, but is it helpful? I'm using colors and borders to indicate that classes are handled by specific methods, but the main thing I hope I'm illustrating is that, unlike with the first generic function, in this one there is significant overlap between the classes handled by the different methods. This is where the dispatch mechanism really has to shine. There is an ordering that makes sense from my point of view, and that is one in which the most specific matching method will be called. However, as you can see, quantifying \"most specific\" may be slightly complex when dispatching on more than one class parameter, throwing in type-unions for fun. Fortunately this code is now working, but while I was developing it I became familiar with a warning message in Open Dylan that says something like \"the method dispatch handling this set of classes is determined by arbitrary and capricious rules\" -- indicating that the dispatch logic is still considered a work in progress. I was concerned that the current version of the Open Dylan compiler wasn't quite solid enough to make this work, but it does seem to work. The backup plan was to dispatch entirely on type-unions made up of different sets of singletons, but that is longer and obscures what is meant by the abstract classes.</p> <p>I won't go to the trouble to do the same diagram on my slide method, but that code looks like this:</p> <pre>define generic slide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    next-pos :: <pos-or-false>, next-tile :: <blocking-or-empty> );<br /><br />define method slide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    next-pos :: <pos>, next-tile :: <empty> )<br />    let next-next-pos :: <pos-or-false> =<br />        getAdjacentPos( next-pos, dir );<br />    let next-next-tile = getTileAtPos( model, next-next-pos );<br />    setTileAtPos( model, next-pos, movable-tile );<br />    setTileAtPos( model, movable-pos, $the-empty );<br />    slide( model, dir, next-pos, movable-tile ),<br />           next-next-pos, next-next-tile );<br />end;<br /><br />define method slide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    next-pos :: <pos-or-false>, next-tile :: <blocking> )<br />    collide( model, dir, movable-pos, movable-tile,<br />              next-pos, next-tile );<br />end;<br /><br />define method slide( model :: <model>, dir :: <dir>,<br />    ice-block-pos :: <pos>, ice-block-tile :: <ice-block>,<br />    next-pos :: <pos-or-false>, next-tile :: <blocking> )<br />end;</pre> <p>Aaaand that's pretty much the whole of the logic for handling interaction between the penguin and the various tiles. Note that we call ourselves recursively. It looks kind of like we have no termination condition! Except note that the method isn't calling itself, it's doing the same method dispatch that found it in the first place. When we come to a termination condition for our recursions, we'll actually call a different method of the same generic function -- most likely the third one, where a sliding object encounters a blocking object. That condition can include hitting the edge of the board. And fortunately -- we already have logic for that, mostly -- in our collide generic function! So sliding hearts and bombs are handled just the same as if they were pushed instead of ending a slide.</p> <p>There's a slightly tricky part where we want to bind up the next tile beyond the two tiles we were dispatched on, then perform two set operations to move the currently sliding tile, then dispatch on the starting tile at its moved position. To figure that out I had to draw some bits of the game board with circles and arrows (but not a paragraph on the back of each one to be used as evidence against me). (If you don't get that reference, either you're too young or I'm too old!)</p> <p>This is not the whole program, obviously, but these are the key methods for encoding the collisions between tiles. If you'd like to play with the whole program, you might come and join the <a href=\"https://lists.opendylan.org/mailman/listinfo/hackers\">Dylan Hackers mailing list</a>, or leave me a note. If there is interest I'll publish it, here or elsewhere. I am now curious as to how a similar set of overlapping dispatches -- via pattern matching, perhaps? -- might look in Haskell. I might try to write that next. If you've got an idea about the clearest and most idiomatic way to do it, I welcome your comments.</p> <p>UPDATE: the code, such as it is, is on GitHub. Ignore the license for now; I have to decide on an actual license. See: <a href=\"https://github.com/paulrpotts/arctic-slide-dylan\">https://github.com/paulrpotts/arctic-slide-dylan</a></p>" nil nil "5d28564e67c8c62e90a6d534a489b240") (89 (20937 23596 830637) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_7721\"></span>, where <span id=\"tex_5519\"></span> is the number of “folds” and <span id=\"tex_2185\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_8441\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "32b8eea390b767f20e5b34c3f41c86a9") (88 (20936 19053 419988) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_2337\"></span>, where <span id=\"tex_3142\"></span> is the number of “folds” and <span id=\"tex_9560\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_7654\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "d91f496ef4dd96b3024a151682efa29c") (87 (20936 8556 647559) "http://kenta.blogspot.com/2013/06/kiwzoxbe-deep-maybe.html" "Ken T Takusagawa: [kiwzoxbe] Deep maybe" "noreply@blogger.com (Ken)" "Mon, 24 Jun 2013 08:50:00 +0000" "<p dir=\"ltr\">Given a Haskell record data type, transform it so that each of its fields becomes a Maybe type, and do this recursively into subrecords, including the top level.</p><p dir=\"ltr\">data Foo = Foo Int String ; data Bar = Bar Foo Float</p><p dir=\"ltr\">data FooM = FooM (Maybe Int) (Maybe String) ; type MFoo = Maybe FooM ; data BarM = BarM MFoo (Maybe Float) ; type MBar = Maybe BarM</p><p dir=\"ltr\">Next, transform a function that operates on the original non-Maybe type to work on the new type, inserting Nothing when there is missing needed data.  This is very similar to liftM except deep.  Simple example:</p><p dir=\"ltr\">f :: (Foo -> Bar) -> (MFoo -> MBar)</p><p dir=\"ltr\">This has some feel of reifying laziness: where Foo had a bottom value, MFoo can have a Nothing.</p><p dir=\"ltr\">Given a Nothing in one of the fields of the output, get a trace of which operation in the function, and which Nothing in the input, caused it.</p><p dir=\"ltr\">Generalize to any MonadPlus.</p><p dir=\"ltr\">Avoid confusion between Maybes inserted by this transformation and Maybes that which were present in the original data type.  Perhaps it should be a different Maybe.</p><p dir=\"ltr\">Somewhat inspired by databases which permit \"undefined\" in any field.</p><p dir=\"ltr\">No actual application in mind for this, yet.</p>" nil nil "d8755ee462a2d5e8dd1e6796f5a0eaba") (86 (20935 65032 470491) "http://theorylunch.wordpress.com/2013/05/30/when-does-an-endofunctor-derive-from-an-adjunction/" "Theory Lunch (Institute of Cybernetics, Tallinn): When does an endofunctor derive from an adjunction?" nil "Sun, 23 Jun 2013 15:23:28 +0000" "<p>This is the first of two talks based on Andrea Schalk’s very good introduction to monads, which can be retrieved <a href=\"http://www.cs.man.ac.uk/~schalk/notes/monads.pdf\" target=\"_blank\" title=\"http://www.cs.man.ac.uk/~schalk/notes/monads.pdf‎\">HERE</a></p>
<p>In the following, if <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> is a category, we indicate by <img src=\"http://s0.wp.com/latex.php?latex=%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"|\\mathcal{C}|\" class=\"latex\" title=\"|\\mathcal{C}|\" /> the collection of objects of <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />, and by <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}(A,B)\" class=\"latex\" title=\"\\mathcal{C}(A,B)\" /> the collection of morphisms in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> from <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> to <img src=\"http://s0.wp.com/latex.php?latex=B&bg=ffffff&fg=333333&s=0\" alt=\"B\" class=\"latex\" title=\"B\" />.</p>
<p>As we know, there are two basic ways of defining an adjunction: <span id=\"more-768\"></span></p>
<p><strong>Definition 1.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{D}\" class=\"latex\" title=\"\\mathcal{D}\" /> be categories; let <img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"F : \\mathcal{C} \\to \\mathcal{D}\" class=\"latex\" title=\"F : \\mathcal{C} \\to \\mathcal{D}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=G+%3A+%5Cmathcal%7BD%7D+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"G : \\mathcal{D} \\to \\mathcal{C}\" class=\"latex\" title=\"G : \\mathcal{D} \\to \\mathcal{C}\" /> be functors. An <em>adjunction</em> from <img src=\"http://s0.wp.com/latex.php?latex=F&bg=ffffff&fg=333333&s=0\" alt=\"F\" class=\"latex\" title=\"F\" /> to <img src=\"http://s0.wp.com/latex.php?latex=G&bg=ffffff&fg=333333&s=0\" alt=\"G\" class=\"latex\" title=\"G\" />, written <img src=\"http://s0.wp.com/latex.php?latex=F+%5Cdashv+G&bg=ffffff&fg=333333&s=0\" alt=\"F \\dashv G\" class=\"latex\" title=\"F \\dashv G\" />, is a quadruple <img src=\"http://s0.wp.com/latex.php?latex=%28F%2CG%2C%5Ceta%2C%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F,G,\\eta,\\varepsilon)\" class=\"latex\" title=\"(F,G,\\eta,\\varepsilon)\" /> where <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta%3A+%5Cmathrm%7BId%7D_%5Cmathcal%7BC%7D+%5Cto+GF&bg=ffffff&fg=333333&s=0\" alt=\"\\eta: \\mathrm{Id}_\\mathcal{C} \\to GF\" class=\"latex\" title=\"\\eta: \\mathrm{Id}_\\mathcal{C} \\to GF\" /> (the <em>unit</em> of the adjunction) and <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon%3A+FG+%5Cto+%5Cmathrm%7BId%7D_%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon: FG \\to \\mathrm{Id}_\\mathcal{D}\" class=\"latex\" title=\"\\varepsilon: FG \\to \\mathrm{Id}_\\mathcal{D}\" /> (the <em>counit</em>) are natural transformations such that , for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}|\" /> and <img src=\"http://s0.wp.com/latex.php?latex=S+%5Cin+%7C%5Cmathcal%7BD%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"S \\in |\\mathcal{D}|\" class=\"latex\" title=\"S \\in |\\mathcal{D}|\" />, <img src=\"http://s0.wp.com/latex.php?latex=G%5Cvarepsilon_S+%5Ccirc+%5Ceta_%7BGS%7D+%3D+%5Cmathrm%7Bid%7D_%7BGS%7D&bg=ffffff&fg=333333&s=0\" alt=\"G\\varepsilon_S \\circ \\eta_{GS} = \\mathrm{id}_{GS}\" class=\"latex\" title=\"G\\varepsilon_S \\circ \\eta_{GS} = \\mathrm{id}_{GS}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon_%7BFA%7D+%5Ccirc+F%5Ceta_%7BA%7D+%3D+%5Cmathrm%7Bid%7D_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon_{FA} \\circ F\\eta_{A} = \\mathrm{id}_{FA}\" class=\"latex\" title=\"\\varepsilon_{FA} \\circ F\\eta_{A} = \\mathrm{id}_{FA}\" />.</p>
<p><strong>Definition 2.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{D}\" class=\"latex\" title=\"\\mathcal{D}\" /> be categories. We call <em>adjunction quadruple</em> a quadruple <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, (\\cdot)^\\sharp)\" class=\"latex\" title=\"(F, G, \\eta, (\\cdot)^\\sharp)\" /> such that:</p>
<ol>
<li><img src=\"http://s0.wp.com/latex.php?latex=G+%3A+%5Cmathcal%7BD%7D+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"G : \\mathcal{D} \\to \\mathcal{C}\" class=\"latex\" title=\"G : \\mathcal{D} \\to \\mathcal{C}\" /> is a functor,</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%7C%5Cmathcal%7BC%7D%7C+%5Cto+%7C%5Cmathcal%7BD%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"F : |\\mathcal{C}| \\to |\\mathcal{D}|\" class=\"latex\" title=\"F : |\\mathcal{C}| \\to |\\mathcal{D}|\" /> is a mapping, and</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Ceta&bg=ffffff&fg=333333&s=0\" alt=\"\\eta\" class=\"latex\" title=\"\\eta\" /> associates to every object <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> a morphism <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A+%3A+A+%5Cto+GFA&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A : A \\to GFA\" class=\"latex\" title=\"\\eta_A : A \\to GFA\" /> so that</li>
<li>for every <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+GS&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to GS\" class=\"latex\" title=\"f : A \\to GS\" /> there exists a unique <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3A+FA+%5Cto+S&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp : FA \\to S\" class=\"latex\" title=\"f^\\sharp : FA \\to S\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp \\circ \\eta_A = f\" class=\"latex\" title=\"Gf^\\sharp \\circ \\eta_A = f\" />.</li>
</ol>
<p>The two definitions above are equivalent in the following sense. If <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> is an adjunction according to Definition 1, and <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3D+%5Cvarepsilon_S+%5Ccirc+Ff&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp = \\varepsilon_S \\circ Ff\" class=\"latex\" title=\"f^\\sharp = \\varepsilon_S \\circ Ff\" />, then <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, (\\cdot)^\\sharp)\" class=\"latex\" title=\"(F, G, \\eta, (\\cdot)^\\sharp)\" /> is an adjunction quadruple according to Definition 2. On the other hand, if <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"(F, G, \\eta, (\\cdot)^\\ast)\" /> is an adjunction quadruple according to Definition 2, and <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29_%5Cflat&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)_\\flat\" class=\"latex\" title=\"(\\cdot)_\\flat\" /> is the inverse operation of <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29%5E%5Csharp&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)^\\sharp\" class=\"latex\" title=\"(\\cdot)^\\sharp\" />—that is, <img src=\"http://s0.wp.com/latex.php?latex=g_%5Cflat+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"g_\\flat = f\" class=\"latex\" title=\"g_\\flat = f\" /> if and only if <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3D+g&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp = g\" class=\"latex\" title=\"f^\\sharp = g\" />—then necessarily <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A+%3D+%28%5Cmathrm%7Bid%7D_%7BFA%7D%29_%5Cflat&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A = (\\mathrm{id}_{FA})_\\flat\" class=\"latex\" title=\"\\eta_A = (\\mathrm{id}_{FA})_\\flat\" />, and by putting <img src=\"http://s0.wp.com/latex.php?latex=Ff+%3D+%28%5Ceta_B+%5Ccirc+f%29%5E%5Csharp&bg=ffffff&fg=333333&s=0\" alt=\"Ff = (\\eta_B \\circ f)^\\sharp\" class=\"latex\" title=\"Ff = (\\eta_B \\circ f)^\\sharp\" /> for <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,B)\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon_S+%3D+%28%5Cmathrm%7Bid%7D_%7BGS%7D%29%5E%5Csharp&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon_S = (\\mathrm{id}_{GS})^\\sharp\" class=\"latex\" title=\"\\varepsilon_S = (\\mathrm{id}_{GS})^\\sharp\" /> for <img src=\"http://s0.wp.com/latex.php?latex=S+%5Cin+%7C%5Cmathcal%7BD%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"S \\in |\\mathcal{D}|\" class=\"latex\" title=\"S \\in |\\mathcal{D}|\" /> we define an adjunction according to Definition 1.</p>
<p>If <img src=\"http://s0.wp.com/latex.php?latex=%28F%2CG%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F,G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F,G, \\eta, \\varepsilon)\" /> is an adjunction, then <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"T = GF : \\mathcal{C} \\to \\mathcal{C}\" class=\"latex\" title=\"T = GF : \\mathcal{C} \\to \\mathcal{C}\" /> is an endofunctor.The first question that comes to our mind is:</p>
<p style=\"text-align: center;\"><em>when does an endofunctor derive from an adjunction?</em></p>
<p>Let us check some basic properties such an endofunctor must satisfy. First of all, <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu+%3A+T%5E2+%5Cto+T&bg=ffffff&fg=333333&s=0\" alt=\"\\mu : T^2 \\to T\" class=\"latex\" title=\"\\mu : T^2 \\to T\" /> defined by <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%3D+G%5Cvarepsilon_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A = G\\varepsilon_{FA}\" class=\"latex\" title=\"\\mu_A = G\\varepsilon_{FA}\" /> is a natural transformation and satisfies</p>
<p style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+T%5Ceta_A+%3D+%5Cmu_A+%5Ccirc+%5Ceta_%7BTA%7D+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D+%5C%3B%5C%3B+%5Cforall+A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ T\\eta_A = \\mu_A \\circ \\eta_{TA} = \\mathrm{id}_{TA} \\;\\; \\forall A \\in |\\mathcal{C}|\" class=\"latex\" title=\"\\mu_A \\circ T\\eta_A = \\mu_A \\circ \\eta_{TA} = \\mathrm{id}_{TA} \\;\\; \\forall A \\in |\\mathcal{C}|\" /></p>
<p style=\"text-align: left;\">Moreover, as <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon+%3A+FG+%5Cto+%5Cmathrm%7BId%7D_%7B%5Cmathcal%7BD%7D%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon : FG \\to \\mathrm{Id}_{\\mathcal{D}}\" class=\"latex\" title=\"\\varepsilon : FG \\to \\mathrm{Id}_{\\mathcal{D}}\" /> is a natural transformation, by choosing <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+%5Cvarepsilon_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"f = \\varepsilon_{FA}\" class=\"latex\" title=\"f = \\varepsilon_{FA}\" /> we get <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon_%7BFA%7D+%5Ccirc+%5Cvarepsilon_%7BFGFA%7D+%3D+%5Cvarepsilon_%7BFA%7D+%5Ccirc+FG%5Cvarepsilon_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon_{FA} \\circ \\varepsilon_{FGFA} = \\varepsilon_{FA} \\circ FG\\varepsilon_{FA}\" class=\"latex\" title=\"\\varepsilon_{FA} \\circ \\varepsilon_{FGFA} = \\varepsilon_{FA} \\circ FG\\varepsilon_{FA}\" />, which after an application of <img src=\"http://s0.wp.com/latex.php?latex=G&bg=ffffff&fg=333333&s=0\" alt=\"G\" class=\"latex\" title=\"G\" /> yields</p>
<p style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Cmu_%7BTA%7D+%3D+%5Cmu_A+%5Ccirc+T%5Cmu_A+%5C%3B%5C%3B+%5Cforall+A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\mu_{TA} = \\mu_A \\circ T\\mu_A \\;\\; \\forall A \\in |\\mathcal{C}|\" class=\"latex\" title=\"\\mu_A \\circ \\mu_{TA} = \\mu_A \\circ T\\mu_A \\;\\; \\forall A \\in |\\mathcal{C}|\" /></p>
<p style=\"text-align: left;\">It will turn out that these two properties are precisely what we need.</p>
<p style=\"text-align: left;\"><strong>Definition 3.</strong> A <em>monad</em> on a category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> is a triple <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> where:</p>
<ol>
<li><img src=\"http://s0.wp.com/latex.php?latex=T+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"T : \\mathcal{C} \\to \\mathcal{C}\" class=\"latex\" title=\"T : \\mathcal{C} \\to \\mathcal{C}\" /> is an endofunctor,</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Ceta+%3A+%5Cmathrm%7BId%7D_%5Cmathcal%7BC%7D+%5Cto+T&bg=ffffff&fg=333333&s=0\" alt=\"\\eta : \\mathrm{Id}_\\mathcal{C} \\to T\" class=\"latex\" title=\"\\eta : \\mathrm{Id}_\\mathcal{C} \\to T\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu%3A+T%5E2+%5Cto+T&bg=ffffff&fg=333333&s=0\" alt=\"\\mu: T^2 \\to T\" class=\"latex\" title=\"\\mu: T^2 \\to T\" /> are natural transformations, and</li>
<li>for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}|\" /> we have <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Ceta_%7BTA%7D+%3D+%5Cmu_A+%5Ccirc+T%5Ceta_A+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\eta_{TA} = \\mu_A \\circ T\\eta_A = \\mathrm{id}_{TA}\" class=\"latex\" title=\"\\mu_A \\circ \\eta_{TA} = \\mu_A \\circ T\\eta_A = \\mathrm{id}_{TA}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Cmu_%7BTA%7D+%3D+%5Cmu_A+%5Ccirc+T%5Cmu_A&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\mu_{TA} = \\mu_A \\circ T\\mu_A\" class=\"latex\" title=\"\\mu_A \\circ \\mu_{TA} = \\mu_A \\circ T\\mu_A\" />,</li>
</ol>
<p>As a very basic example, the <em>free monoid</em> construction is a monad on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathbf%7BSet%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathbf{Set}\" class=\"latex\" title=\"\\mathbf{Set}\" />, where <img src=\"http://s0.wp.com/latex.php?latex=TA+%3D+A%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"TA = A^\\ast\" class=\"latex\" title=\"TA = A^\\ast\" />, <img src=\"http://s0.wp.com/latex.php?latex=Tf%28s%29+%3D+%5Bf%28a%29+%5C%3B+%5Cmathtt%7Bfor%7D+%5C%3B+a+%5C%3B+%5Cmathtt%7Bin%7D+%5C%3B+s%5D&bg=ffffff&fg=333333&s=0\" alt=\"Tf(s) = [f(a) \\; \\mathtt{for} \\; a \\; \\mathtt{in} \\; s]\" class=\"latex\" title=\"Tf(s) = [f(a) \\; \\mathtt{for} \\; a \\; \\mathtt{in} \\; s]\" />, <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A%28a%29+%3D+%5Ba%5D&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A(a) = [a]\" class=\"latex\" title=\"\\eta_A(a) = [a]\" />, and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A%28%5B%5Ba%5E1_1%2C+%5Cldots%2C+a%5E1_%7Bn_1%7D%5D%2C+%5Cldots%2C+%5Ba%5Em_1%2C+%5Cldots%2C+a%5Em_%7Bn_m%7D%5D%5D+%3D+%5Ba%5E1_1%2C+%5Cldots%2C+a%5E1_%7Bn_1%7D%2C+%5Cldots%2C+a%5Em_1%2C+%5Cldots%2C+a%5Em_%7Bn_m%7D%5D&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A([[a^1_1, \\ldots, a^1_{n_1}], \\ldots, [a^m_1, \\ldots, a^m_{n_m}]] = [a^1_1, \\ldots, a^1_{n_1}, \\ldots, a^m_1, \\ldots, a^m_{n_m}]\" class=\"latex\" title=\"\\mu_A([[a^1_1, \\ldots, a^1_{n_1}], \\ldots, [a^m_1, \\ldots, a^m_{n_m}]] = [a^1_1, \\ldots, a^1_{n_1}, \\ldots, a^m_1, \\ldots, a^m_{n_m}]\" />.</p>
<p>As a less basic example, suppose <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D+%3D+%28S%2C+%5Cleq%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C} = (S, \\leq)\" class=\"latex\" title=\"\\mathcal{C} = (S, \\leq)\" /> is a poset: what is a monad on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />? First of all, an endofunctor on a poset is a monotone function; next, if there is <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A+%3A+A+%5Cto+TA&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A : A \\to TA\" class=\"latex\" title=\"\\eta_A : A \\to TA\" />, then <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cleq+TA&bg=ffffff&fg=333333&s=0\" alt=\"A \\leq TA\" class=\"latex\" title=\"A \\leq TA\" />; finally, if there is <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%3A+T%5E2A+%5Cto+TA&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A : T^2A \\to TA\" class=\"latex\" title=\"\\mu_A : T^2A \\to TA\" />, then <img src=\"http://s0.wp.com/latex.php?latex=T%5E2A+%5Cleq+TA&bg=ffffff&fg=333333&s=0\" alt=\"T^2A \\leq TA\" class=\"latex\" title=\"T^2A \\leq TA\" />, which together with the previous inequality yields <img src=\"http://s0.wp.com/latex.php?latex=T%5E2A+%3D+TA&bg=ffffff&fg=333333&s=0\" alt=\"T^2A = TA\" class=\"latex\" title=\"T^2A = TA\" />. On the other hand, any nondecreasing idempotent is the endofunctor component of a monad: the monad equations are actually ensured by <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> being a poset, so that any two maps with same domain and same codomain are equal.</p>
<p>We then restate our original problem as follows:</p>
<p style=\"text-align: center;\"><em>given a monad <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" />, find an adjunction <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu+%3D+G+%5Cvarepsilon_F&bg=ffffff&fg=333333&s=0\" alt=\"\\mu = G \\varepsilon_F\" class=\"latex\" title=\"\\mu = G \\varepsilon_F\" /></em></p>
<p>If the adjunction <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> solves the problem above, we say that it <em>generates</em> the monad <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />.</p>
<p>The first solution to this problem was given by the Swiss mathematician Heinrich Kleisli, and is based on an alternative way of defining monads, as it is the case with adjunctions. Let us suppose <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> with <img src=\"http://s0.wp.com/latex.php?latex=F+%5Cdashv+G&bg=ffffff&fg=333333&s=0\" alt=\"F \\dashv G\" class=\"latex\" title=\"F \\dashv G\" />. If <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB+%3D+G%28FB%29&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB = G(FB)\" class=\"latex\" title=\"f : A \\to TB = G(FB)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3A+FA+%5Cto+FB&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp : FA \\to FB\" class=\"latex\" title=\"f^\\sharp : FA \\to FB\" />, so that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%3A+TA+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp : TA \\to TB\" class=\"latex\" title=\"Gf^\\sharp : TA \\to TB\" />: and we know from the definition of monad that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp \\circ \\eta_A = f\" class=\"latex\" title=\"Gf^\\sharp \\circ \\eta_A = f\" />. We can thus define an operator <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)^\\ast\" class=\"latex\" title=\"(\\cdot)^\\ast\" /> that takes <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,TB)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,TB)\" /> into <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Cin+%5Cmathcal%7BC%7D%28TA%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\in \\mathcal{C}(TA,TB)\" class=\"latex\" title=\"f^\\ast \\in \\mathcal{C}(TA,TB)\" /> in a way such that <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\circ \\eta_A = f\" class=\"latex\" title=\"f^\\ast \\circ \\eta_A = f\" /> whatever <img src=\"http://s0.wp.com/latex.php?latex=f&bg=ffffff&fg=333333&s=0\" alt=\"f\" class=\"latex\" title=\"f\" /> is. The simplest example is <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"f = \\eta_A\" class=\"latex\" title=\"f = \\eta_A\" /> itself, so that <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast \\circ \\eta_A = \\eta_A\" class=\"latex\" title=\"(\\eta_A)^\\ast \\circ \\eta_A = \\eta_A\" />, and <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" class=\"latex\" title=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" /> by uniqueness in the definition of adjunction quadruple. Moreover, if <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB\" class=\"latex\" title=\"f : A \\to TB\" /> and <img src=\"http://s0.wp.com/latex.php?latex=g+%3A+B+%5Cto+TC&bg=ffffff&fg=333333&s=0\" alt=\"g : B \\to TC\" class=\"latex\" title=\"g : B \\to TC\" />, then</p>
<p style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=g%5E%5Cast+%5Ccirc+f+%3D+Gg%5E%5Csharp+%5Ccirc+%28Gf%5E%5Csharp+%5Ccirc+%5Ceta_A%29+%3D+%28g%5E%5Cast+%5Ccirc+f%5E%5Cast%29+%5Ccirc+%5Ceta_A+%5C%3B%2C&bg=ffffff&fg=333333&s=0\" alt=\"g^\\ast \\circ f = Gg^\\sharp \\circ (Gf^\\sharp \\circ \\eta_A) = (g^\\ast \\circ f^\\ast) \\circ \\eta_A \\;,\" class=\"latex\" title=\"g^\\ast \\circ f = Gg^\\sharp \\circ (Gf^\\sharp \\circ \\eta_A) = (g^\\ast \\circ f^\\ast) \\circ \\eta_A \\;,\" /></p>
<p style=\"text-align: left;\">which implies <img src=\"http://s0.wp.com/latex.php?latex=%28g%5E%5Cast+%5Ccirc+f%29%5E%5Cast+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" class=\"latex\" title=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" /> by uniqueness.</p>
<p>This is the base of Kleisli’s solution to our problem, which we will discuss in a future talk.</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/theorylunch.wordpress.com/768/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/theorylunch.wordpress.com/768/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=theorylunch.wordpress.com&blog=43735749&post=768&subd=theorylunch&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "4973b705109d4425d10f598efdefdd61") (85 (20935 65032 467399) "http://www.yesodweb.com/blog/2013/06/first-11-chapters" "Yesod Web Framework: First 11 chapters are Yesod 1.2-compliant" nil "Sun, 23 Jun 2013 13:00:00 +0000" "<p>It's been a while since I've written a post. Besides being <a href=\"https://www.fpcomplete.com/blog/2013/06/beta-sign-up\">very busy at
work</a>, a lot of my time
has gone into getting the Yesod book up-to-date with Yesod version 1.2. And
today, I'm happy to report that the first 11 chapters, comprising the \"basics\"
section of the book, have been converted.</p><p>You can view the new content <a href=\"http://www.yesodweb.com/book-1.2\">at the 1.2
URL</a>. Once the entire book is converted, I'll
switch the URLs, but will continue hosting the 1.1 version of the book <a href=\"http://www.yesodweb.com/book-1.1\">at its
own URL</a>. I intend to continue this pattern
for any future releases as well.</p><p>I intend to continue the conversion process, but I also intend to augment the
book. In particular, I have a number of new examples to add. My current plans
are:</p><ul><li>JSON serving</li><li>Client-side development with Fay</li><li>An updated subsite example based on 1.2 features</li><li>Easy generation of streaming data</li><li>How to store some initialized data in the foundation</li><li>Getting configuration from environment variables</li><li>Writing your own Template Haskell code</li></ul><p>If anyone has suggestions for changes to this list, let me know.</p><p>As for the newly converted content: comments and pull requests are, as always,
welcome!</p>" nil nil "3c795352087b11fdabc0a4bccc2ce241") (84 (20935 65032 466886) "http://neilmitchell.blogspot.com/2013/06/building-llvm-using-shake.html" "Neil Mitchell: Building LLVM using Shake" "noreply@blogger.com (Neil Mitchell)" "Sun, 23 Jun 2013 09:33:08 +0000" "<i>Summary: You can now build LLVM using Shake, and a rebuild with nothing to do goes massively faster than make (0.8s vs 199s) and fractionally faster than Ninja (0.8s vs 0.9s).</i><br /><br />As of <a href=\"https://github.com/ndmitchell/shake\">Shake</a> 0.10.4 the <tt>shake</tt> tool can execute <a href=\"http://martine.github.io/ninja/\">Ninja</a> build files. <a href=\"http://llvm.org/\">LLVM</a> can be built with <a href=\"http://www.cmake.org/\">CMake</a>, and CMake can generate a Ninja build file, so you can compile LLVM with Shake. I've included the full steps I followed at the end of this post.<br /><br />The main thing I wanted to test was how fast a rebuild with nothing to do was using Shake vs Ninja, as Ninja prides itself on having \"a focus on speed\". When compiling LLVM on Windows with GCC, a nothing to do build using make takes 199s, Shake takes 0.8s and Ninja takes 0.9s. The CMake generator does not use one of the latest Ninja build features (the deps keyword), but if it did, Shake would be about 0.1s faster and Ninja would be at least 0.1s faster.<br /><br />Full builds with Shake and Ninja both take about the same time, but with anything higher than 2 CPUs the linker phase ends up contending heavily and the machine thrashes the disk, making robust measurements impossible. The solution would be to use <a href=\"http://neilmitchell.blogspot.co.uk/2013/02/summary-management-of-finite-resources.html\">finite resources</a> on the linkers, something that needs implementing in the CMake Ninja generator, and would then allow more CPUs to be used.<br /><br />Other than speed, why would you use Shake to compile LLVM?<br /><br /><ul><li>If you build with <tt>--report</tt> the file <tt>report.html</tt> will be generated. Open that report file and you can see numerous details about the build - how good the parallel utilisation was, what changed to cause what to rebuild, summary statistics, a dependency graph and more. See the Help page in any generated report for more details.</li><li>If you build with <tt>--progress</tt> the console titlebar will display a predicted completion time, how many seconds until your build completes. The predicted time will be fairly inaccurate the first time round, but future runs are influenced by recorded timings, and can produce useful guesses.</li><li>If your CPU has a preference for functional languages it will make the registers happier.</li></ul><br />Existing Ninja users may also be interested in <a href=\"https://github.com/ndmitchell/shake/blob/master/docs/Ninja.md\">a guide to running Ninja builds with Shake</a>, which gives a few more details on using Shake like Ninja.<br /><br /><b>Compiling LLVM with Shake</b><br /><br />These instructions are how I compiled LLVM with Shake, on Windows, with GCC. I didn't run into any significant problems, but there were two minor niggles I had to work though (both listed below). I compiled LLVM with make, then Ninja, then Shake, to check each phase as I went - but only the final Shake compile is actually necessary.<br /><br /><ul><li>Install Shake with <tt>cabal update && cabal install shake --global</tt>, if you are new to Haskell package installation, see <a href=\"https://github.com/ndmitchell/shake/blob/master/docs/Ninja.md#installing-shake\">here</a>.</li><li>Get LLVM and compile it with make, I followed the instructions at <tt>http://bencode.net/clangonwindows</tt>, which has disappeared in the last few days (I have emailed the web master to see where it went).</li><li>Install <a href=\"http://martine.github.io/ninja/\">Ninja</a>.</li><li>Run CMake over LLVM <a href=\"http://llvm.org/docs/CMake.html\">like this</a>, configuring with <tt>-G Ninja</tt>.</li><li>To build with Ninja I had to edit <tt>build.ninja</tt> line 17697 to delete <tt>lib/clang/3.4/lib/windows/libclang_rt.i386.a,</tt> which won't build on my system and isn't built at all by the make system - I suspect this is a tip/mingw issue. At this stage you can compile LLVM with Ninja.</li><li>Type <tt>touch tools/clang/lib/Basic/CMakeFiles/clang_revision_tag</tt> to create a dummy file. There is a Ninja rule to create such a file, but the rule is wrong since it doesn't actually produce the file, and Shake's sanity checking spots that.</li><li>Run <tt>shake -j2</tt> in the build directory. Come back later and you will have a build.</li><li>Run <tt>shake -j2</tt> again to enjoy the fast nothing to do build.</li></ul>" nil nil "4cfea6738477b821a9fd9630d728cda4") (83 (20935 65032 463950) "http://existentialtype.wordpress.com/2013/06/22/whats-the-big-deal-with-hott/" "Robert Harper: =?utf-8?Q?What=E2=80=99s?= the big deal with HoTT?" nil "Sun, 23 Jun 2013 00:25:39 +0000" "<p>Now that the <a href=\"http://homotopytypetheory.org/book\" target=\"_blank\" title=\"Homotopy Type Theory Book\">Homotopy Type Theory</a> book is out, a lot of people are asking “What’s the big deal?”.  The full answer lies within the book itself (or, at any rate, the fullest answer to date), but I am sure that many of us who were involved in its creation will be fielding this question in our own ways to help explain why we are so excited by it.  In fact what I think is really fascinating about HoTT is precisely that there are so many different ways to think about it, according to one’s interests and backgrounds.  For example, one might say it’s a nice way to phrase arguments in homotopy theory that avoids some of the technicalities in the classical proofs by treating spaces and paths synthetically, rather than analytically.  Or one might say that it’s a good language for mechanization of mathematics that provides for the concise formulation of proofs in a form that can be verified by a computer.  Or one might say that it points the way towards a vast extension of the concept of computation that enables us to compute with abstract geometric objects such as spheres or toruses.  Or one might say that it’s a new foundation for mathematics that subsumes set theory by generalizing types from mere sets to arbitrary infinity groupoids,  sets being but particularly simple types (those with no non-trivial higher-dimensional structure).</p>
<p>But what is it about HoTT that makes all these interpretations and applications possible?  What is the key idea that separates HoTT from other approaches that seek to achieve similar ends?  What makes HoTT so special?</p>
<p>In a word the answer is <em>constructivity.</em>  The distinctive feature of HoTT is that it is based on Per Martin-Löf’s Intuitionistic Theory of Types, which was formulated as a foundation for <em>intuitionistic mathematics</em> as originally put forth by Brouwer in the 1930′s, and further developed by Bishop, Gentzen, Heyting, Kolmogorov, Kleene, Lawvere, and Scott, among many others.  Briefly put, the idea of type theory is to codify and systematize the concept of a <em>mathematical construction</em> by characterizing the abstract properties, rather than the concrete realizations, of the objects used in everyday mathematics.  Brouwer’s key insight, which lies at the heart of HoTT, is that <em>proofs are a form of construction</em> no different in kind or character from numbers, geometric figures, spaces, mappings, groups, algebras, or any other mathematical structure.  <a href=\"http://existentialtype.wordpress.com/2012/08/11/extensionality-intensionality-and-brouwers-dictum/\" target=\"_blank\" title=\"Extensionality, Intensionality, and Brouwer’s Dictum\">Brouwer’s dictum</a>, which distinguished his approach from competing alternatives, is that <em>logic is a part of mathematics</em>, rather than <em>mathematics is an application of logic</em>.  Because for him the concept of a construction, including the concept of a proof, is prior to any other form of mathematical activity, including the study of proofs themselves (<em>i.e.</em>, logic).</p>
<p>So under Martin-Löf’s influence HoTT starts with the notion of <em>type</em> as a classification of the notion of <em>construction</em>, and builds upwards from that foundation.  Unlike competing approaches to foundations, <em>proofs are mathematical objects</em> that play a central role in the theory.  This conception is <em>central</em> to the homotopy-theoretic interpretation of type theory, which enriches types to encompass spaces with higher-dimensional structure.  Specifically, the type <img src=\"http://s0.wp.com/latex.php?latex=%5Ctextsf%7BId%7D_A%28M%2CN%29&bg=ffffff&fg=333333&s=0\" alt=\"\\textsf{Id}_A(M,N)\" class=\"latex\" title=\"\\textsf{Id}_A(M,N)\" /> is the type of <em>identifications</em> of <img src=\"http://s0.wp.com/latex.php?latex=M&bg=ffffff&fg=333333&s=0\" alt=\"M\" class=\"latex\" title=\"M\" /> and <img src=\"http://s0.wp.com/latex.php?latex=N&bg=ffffff&fg=333333&s=0\" alt=\"N\" class=\"latex\" title=\"N\" /> within the space <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" />.  Identifications may be thought of as <em>proofs</em> that <img src=\"http://s0.wp.com/latex.php?latex=M&bg=ffffff&fg=333333&s=0\" alt=\"M\" class=\"latex\" title=\"M\" /> and <img src=\"http://s0.wp.com/latex.php?latex=N&bg=ffffff&fg=333333&s=0\" alt=\"N\" class=\"latex\" title=\"N\" /> are <em>equal</em> as elements of $A$, or, equivalently, as <em>paths</em> in the space <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> between points <img src=\"http://s0.wp.com/latex.php?latex=M&bg=ffffff&fg=333333&s=0\" alt=\"M\" class=\"latex\" title=\"M\" /> and <img src=\"http://s0.wp.com/latex.php?latex=N&bg=ffffff&fg=333333&s=0\" alt=\"N\" class=\"latex\" title=\"N\" />.  The fundamental principles of abstraction at the heart of type theory ensure that <em>all constructs of the theory respect these identifications</em>, so that we may treat them as proofs of equality of two elements.  There are three main sources of identifications in HoTT:</p>
<ol>
<li>Reflexivity, stating that everything is equal to itself.</li>
<li>Higher inductive types, defining a type by giving its points, paths, paths between paths, and so on to any dimension.</li>
<li>Univalence, which states that an equivalence between types determines a path between them.</li>
</ol>
<p>I will not attempt here to explain each of these in any detail; everything you need to know is in the HoTT book.  But I will say a few things about their consequences, just to give a flavor of what these new principles give us.</p>
<p>Perhaps the most important conceptual point is that mathematics in HoTT emphasizes the <em>structure of proofs</em> rather than their mere existence.  Rather than settle for a mere logical equivalence between two types (mappings back and forth stating that each implies the other), one instead tends to examine the <em>entire space</em> of proofs of a proposition and how it relates to others.  For example, the univalence axiom itself does not merely state that every equivalence between types gives rise to a path between them, but rather that there is an <em>equivalence</em> between the type of equivalences between two types and the type of paths between them.  Familiar patterns such as “<img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> iff <img src=\"http://s0.wp.com/latex.php?latex=B&bg=ffffff&fg=333333&s=0\" alt=\"B\" class=\"latex\" title=\"B\" />” tend to become “<img src=\"http://s0.wp.com/latex.php?latex=A%5Csimeq+B&bg=ffffff&fg=333333&s=0\" alt=\"A\\simeq B\" class=\"latex\" title=\"A\\simeq B\" />“, stating that the proofs of <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> and the proofs of <img src=\"http://s0.wp.com/latex.php?latex=B&bg=ffffff&fg=333333&s=0\" alt=\"B\" class=\"latex\" title=\"B\" /> are equivalent.  Of course one may <em>choose </em>neglect this additional information, stating only weaker forms of it using, say, truncation to suppress higher-dimensional information in a type, but the tendency is to <em>embrace</em> the structure and characterize the space of proofs as fully as possible.</p>
<p>A close second in importance is the <em>axiomatic freedom</em> afforded by constructive foundations.  This point has been made many times by many authors in many different settings, but has particular bite in HoTT.   The theory does not commit to (nor does it refute) the infamous <em>Law of the Excluded Middle</em> for arbitrary types: the type <img src=\"http://s0.wp.com/latex.php?latex=A%2B%28A%5Cto+%5Ctextbf%7B0%7D%29&bg=ffffff&fg=333333&s=0\" alt=\"A+(A\\to \\textbf{0})\" class=\"latex\" title=\"A+(A\\to \\textbf{0})\" /> need not always be inhabited.  This property of HoTT is absolutely essential to its expressive power.  Not only does it admit a wider range of interpretations than are possible with the Law included, but it also allows for the <em>selective imposition</em> of the Law where it is needed to recover a classical argument, or where it is important to distinguish the implications of decidability in a given situation.  (Here again I defer to the book itself for full details.)  Similar considerations arise in connection with the many forms of Choice that can be expressed in HoTT, some of which are outright provable, others of which are independent as they are in axiomatic set theory.</p>
<p>Thus, what makes HoTT so special is that it is a<em> constructive</em> theory of mathematics.  Historically, this has meant that it has a <em>computational</em> interpretation, expressed most vividly by the <a href=\"http://existentialtype.wordpress.com/2011/03/27/the-holy-trinity/\" target=\"_blank\" title=\"The Holy Trinity\"><em>propositions as types</em></a> principle.  And yet, for all of its promise, what HoTT currently lacks is a computational interpretation!  What, exactly, does it mean to <em>compute</em> with higher-dimensional objects?  At the moment it is difficult to say for sure, though there seem to be clear intuitions in at least some cases of how to “implement” such a rich type theory.  Alternatively, one may ask whether the term “constructive”, when construed in such a general setting, must inevitably involve a notion of computation.  While it seems obvious on computational grounds that the Law of the Excluded Middle should not be considered universally valid, it becomes less clear why it is so important to omit this Law (and, essentially, no other) in order to obtain the richness of HoTT when no computational interpretation is extant.  From my point of view understanding the <em>computational </em>meaning of higher-dimensional type theory is of paramount importance, because, for me, type theory is and always has been a <em>theory of computation</em> on which the entire edifice of mathematics ought to be built.</p>
<br />Filed under: <a href=\"http://existentialtype.wordpress.com/category/research/\">Research</a> Tagged: <a href=\"http://existentialtype.wordpress.com/tag/homotopy-theory/\">homotopy theory</a>, <a href=\"http://existentialtype.wordpress.com/tag/type-theory/\">type theory</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/existentialtype.wordpress.com/819/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/existentialtype.wordpress.com/819/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=existentialtype.wordpress.com&blog=2157150&post=819&subd=existentialtype&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "802b8f1e1f327b5f631f2d746645663c") (82 (20935 65032 462214) "http://neilmitchell.blogspot.com/2013/05/three-types-of-build-system-dependency.html" "Neil Mitchell: Three types of build-system dependency" "noreply@blogger.com (Neil Mitchell)" "Sat, 22 Jun 2013 21:05:27 +0000" "<i>Summary: There are three types of dependencies you might want to express in a build system, all of which are supported by Shake.</i><br /><br />A build system, at its heart, is a system which runs commands in an order satisfying user-specified dependencies. But what kind of dependencies can be expressed? This post describes three different types of dependency, only one of which is available in Make, but all of which are available in both <a href=\"https://github.com/ndmitchell/shake#readme\">Shake</a> and <a href=\"http://martine.github.io/ninja/\">Ninja</a>.<br /><br /><b>Feature 1: Static dependencies (available in every build system)</b><br /><br />The most basic form of dependency is a static dependency, where a rule produces an output from some inputs:<br /><br /><pre>-- In Make --<br />result.tar : file1 file2<br />    tar -cf result.tar file1 file2<br /><br />-- In Shake --<br />\"result.tar\" *> \\out -> do<br />    let deps = [\"file1\",\"file2\"]<br />    need deps<br />    cmd \"tar -cf\" [out] deps<br /></pre><br />This rule says that the file <tt>result.tar</tt> depends on the inputs <tt>file1</tt> and <tt>file2</tt>, and provides a command to build <tt>result.tar</tt>. Whenever <tt>file1</tt> or <tt>file2</tt> change, the command will be run, and <tt>result.tar</tt> will be built.<br /><br />Static dependencies occur in almost every build rule, and are supported by all build tools, including Make and Shake.<br /><br /><b>Feature 2: Dynamic dependencies (available in Shake, Ninja, Redo and tup)</b><br /><br />A more advanced dependency is where the list of dependencies itself depends on the results of previous dependencies. Imagine we want to build <tt>result.tar</tt> from the list of files stored in <tt>list.txt</tt>. The dependencies of <tt>result.tar</tt> cannot be specified statically, but depend on <i>the contents</i> of <tt>list.txt</tt>. In Shake we can write:<br /><br /><pre>\"result.tar\" *> \\out -> do<br />    need [\"list.txt\"]<br />    contents <- readFileLines \"list.txt\"<br />    need contents<br />    cmd \"tar -cf\" [out] contents<br /></pre><br />This rule describes how to build <tt>result.tar</tt>. We depend on (<tt>need</tt>) the file <tt>list.txt</tt>. We read each line from <tt>list.txt</tt> into the variable <tt>contents</tt> - being a list of the files that should go into <tt>result.tar</tt>. Next, we depend on all the files in <tt>contents</tt>, and finally call the <tt>tar</tt> program. If either <tt>list.txt</tt> changes, or any of the files listed by <tt>list.txt</tt> change, then <tt>result.tar</tt> will be rebuilt.<br /><br />This feature is necessary in almost every build system, yet is shockingly lacking from most build tools - I am only aware of it being available in <a href=\"https://github.com/ndmitchell/shake#readme\">Shake</a>, <a href=\"http://martine.github.io/ninja/\">Ninja</a>, <a href=\"https://github.com/apenwarr/redo#readme\">Redo</a> and <a href=\"http://gittup.org/tup/\">tup</a>. As a common example, in Make you might write:<br /><br /><pre>result.o : result.c result_header1.h result_header2.h<br />    gcc ...<br /></pre><br />The file <tt>result.o</tt> depends on both the C source file <tt>result.c</tt> and all headers that file includes. But listing the headers both in <tt>result.c</tt> with <tt>#include</tt> directives, and in the Makefile, is a brittle form of duplication. A better approach is for the build system to run <tt>gcc -M result.c</tt> and extract the includes from there. In Shake we can write:<br /><br /><pre>\"result.o\" *> \\out -> do<br />    let src = \"result.c\"<br />    Stdout stdout <- cmd \"gcc -MM\" [src]<br />    need $ src : drop 2 (words stdout)<br />    cmd \"gcc -o\" [out] \"-c\" [src]<br /></pre><br />My experience is that about a quarter of rules require some kind of additional dependency based on previous dependencies. While you can hack round some of the issues in Make, and people have become disturbingly adept at doing so, the result often only approximates the dependencies - building either too much or too little.<br /><br /><b>Feature 3: Multiple outputs from one rule (available in Shake and Ninja)</b><br /><br />The final feature is producing multiple outputs from one command, and is used far more rarely (perhaps one or two rules in a complex build system) - but when needed, is essential. Some programs, such as GHC, can produce two outputs with one command - compiling <tt>Foo.hs</tt> produces both <tt>Foo.o</tt> and <tt>Foo.hi</tt>. As a first approximation, the <tt>.o</tt> file depends on the entire contents of the source file, while the <tt>.hi</tt> file depends only on the type signatures. A single <tt>ghc</tt> invocation needs to do all the work to produce both, but often the <tt>.hi</tt> file will be left unchanged. In Shake we can write:<br /><br /><pre>[\"Foo.hi\",\"Foo.o\"] *>> \\_ -> do<br />    need [\"Foo.hs\"]<br />    cmd \"gcc -c Foo.hs\"<br /></pre><br />While it is often possible to construct a series of dependencies to approximate a single rule producing multiple outputs, it only works in some cases, and is brittle. The only build systems I am aware of which support multiple outputs are <a href=\"https://github.com/ndmitchell/shake#readme\">Shake</a> and <a href=\"http://martine.github.io/ninja/\">Ninja</a>.<br /><br /><b>Essential features</b><br /><br />My standard advice when people ask about writing a build system is \"don't\". If some existing build system (e.g. ghc --make or Cabal) is capable of building your project, use that instead. Custom build systems are necessary for many complex projects, but many projects are not complex. If you have decided your project is complex, you should use a build tool that can express complex dependencies, both for writing the initial system and to provide the flexibility to make the inevitable changes required.<br /><br />Looking only at dependency features, I would consider it unwise to start a complex build system using a tool other than Shake or Ninja, or perhaps either Redo or tup (if you accept the absence of multiple outputs from one rule).<br /><br />Weak dependency specification in build tools, particularly Make, has left its mark on many programs. I recently talked to some OCaml hackers complaining that their tools were not \"Make friendly\" because they produced multiple output files. I wonder what lengths other tools have gone to in order to cope with weak dependency specification...<br /><br /><b>Update:</b> The relative power of tup was reported as a comment, and it appears to have the necessary power, but I haven't yet checked. Following further research into Ninja I suspect it may not be as powerful as originally stated and may not have Feature 2, but am not yet sure." nil nil "172b752395a399a74033dcef53ac2e3f") (81 (20935 65032 460717) "http://twanvl.nl/blog/agda/subst-from-cong" "Twan van Laarhoven: Substitution from congruence in univalent OTT" nil "Sat, 22 Jun 2013 14:51:00 +0000" "<p>In this post I will show that in an univalence style observational type theory, it is enough to take congruence as a primitive, rather than the more complicated substitution or J axioms. This post is literate Agda, so here are some boring import declarations
</p><pre class=\"agda\"><span class=\"keyword\">module</span> <span class=\"varid\">subst-from-cong</span> <span class=\"keyword\">where</span>
<div class=\"empty-line\"></div>
<span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Level</span>
<span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Function</span>
<span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Data.Unit</span>
<span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Data.Bool</span>
<span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Data.Empty</span>
<span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Data.Product</span>
</pre><p>I will be using the standard propositional equality as a meta equality,
</p><pre class=\"agda\"><span class=\"keyword\">open</span> <span class=\"keyword\">import</span> <span class=\"conid\">Relation.Binary.PropositionalEquality</span> <span class=\"varid\">as</span> <span class=\"conid\">Meta</span> <span class=\"varid\">using</span> (<span class=\"keyglyph\">_</span><span class=\"varop\">≡</span><span class=\"keyglyph\">_</span>)
</pre><p>while postulating a path type (equality type) and its computation rules for me to prove things about,
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span> <span class=\"conid\">Path</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>
<span class=\"keyword\">postulate</span> <span class=\"varid\">refl</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>) <span class=\"keyglyph\">→</span> (<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x</span>
</pre><p>The idea of Observational Type Theory (OTT) is that <tt><span class=\"conid\">Path</span></tt> is actually defined by case analysis on the structure of the argument type. For the finite types this is simple, there is a path if and only if the values are the same,
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span> <span class=\"conid\">Path-⊤</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> ⊤ <span class=\"varid\">tt</span> <span class=\"varid\">tt</span> <span class=\"varop\">≡</span> ⊤
<div class=\"empty-line\"></div>
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Bool00</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">Bool</span> <span class=\"varid\">false</span> <span class=\"varid\">false</span> <span class=\"varop\">≡</span> ⊤
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Bool01</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">Bool</span> <span class=\"varid\">false</span> <span class=\"varid\">true</span> <span class=\"varop\">≡</span> ⊥
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Bool10</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">Bool</span> <span class=\"varid\">true</span> <span class=\"varid\">false</span> <span class=\"varop\">≡</span> ⊥
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Bool11</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">Bool</span> <span class=\"varid\">true</span> <span class=\"varid\">true</span> <span class=\"varop\">≡</span> ⊤
</pre><p>A path for functions is a function to paths, which also means that we have functional extensionality.
</p><pre class=\"agda\"><span class=\"conid\">Π</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} (<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>) (<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> (<span class=\"varid\">a</span> ⊔ <span class=\"varid\">b</span>)
<span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span> <span class=\"keyglyph\">=</span> (<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">x</span>
<div class=\"empty-line\"></div>
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Π</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">:</span> <span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varid\">g</span> <span class=\"varop\">≡</span> ((<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">B</span> <span class=\"varid\">x</span>) (<span class=\"varid\">f</span> <span class=\"varid\">x</span>) (<span class=\"varid\">g</span> <span class=\"varid\">x</span>))
</pre><p>In their <a href=\"http://www.cs.nott.ac.uk/~txa/publ/obseqnow.pdf\">original OTT paper</a>, Alternkirch et.al. defined equality for types also by structure matching. I.e. Π types are equal to Π types with equal arguments, Σ types are equal to Σ types, etc.
But this is incompatible with the univalence axiom from Homotopy Type Theory. That axiom states that equivalent or isomorphic types are equal. So, what happens if we take isomorphism as our definition of equality between types?
</p><pre class=\"agda\"><span class=\"conid\">Iso</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">A</span> <span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>
<span class=\"conid\">Iso</span> {<span class=\"varid\">a</span>} <span class=\"conid\">A</span> <span class=\"conid\">B</span>
<span class=\"keyglyph\">=</span> <span class=\"conid\">Σ</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"keyglyph\">\\</span><span class=\"varid\">fw</span> <span class=\"keyglyph\">→</span>
<span class=\"conid\">Σ</span> (<span class=\"conid\">B</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">\\</span><span class=\"varid\">bw</span> <span class=\"keyglyph\">→</span>
(<span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> (<span class=\"varid\">bw</span> (<span class=\"varid\">fw</span> <span class=\"varid\">x</span>)) <span class=\"varid\">x</span>) ×
(<span class=\"keyglyph\">∀</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">B</span> (<span class=\"varid\">fw</span> (<span class=\"varid\">bw</span> <span class=\"varid\">y</span>)) <span class=\"varid\">y</span>)
<div class=\"empty-line\"></div>
<span class=\"varid\">id-Iso</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Iso</span> <span class=\"conid\">A</span> <span class=\"conid\">A</span>
<span class=\"varid\">id-Iso</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">=</span> (<span class=\"varid\">id</span> , <span class=\"varid\">id</span> , <span class=\"varid\">refl</span> <span class=\"conid\">A</span> , <span class=\"varid\">refl</span> <span class=\"conid\">A</span>)
<div class=\"empty-line\"></div>
<span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Type</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} (<span class=\"conid\">A</span> <span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">Set</span> <span class=\"varid\">a</span>) <span class=\"conid\">A</span> <span class=\"conid\">B</span> <span class=\"varop\">≡</span> <span class=\"conid\">Lift</span> {<span class=\"varid\">a</span>} {<span class=\"varid\">suc</span> <span class=\"varid\">a</span>} (<span class=\"conid\">Iso</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
</pre><p>Now suppose that we have a congruence, i.e. that all functions preserve paths. So from a path between <tt><span class=\"varid\">x</span></tt> and <tt><span class=\"varid\">y</span></tt>, we can construct a path between <tt class=\"complex\"><span class=\"varid\">f</span> <span class=\"varid\">x</span></tt> and <tt class=\"complex\"><span class=\"varid\">f</span> <span class=\"varid\">y</span></tt> for any function <tt><span class=\"varid\">f</span></tt>.
</p><pre class=\"agda\"><span class=\"comment\">-- we have congruence for non-dependent functions</span>
<span class=\"keyword\">postulate</span> <span class=\"varid\">cong</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">f</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>) <span class=\"keyglyph\">→</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">y</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">B</span> (<span class=\"varid\">f</span> <span class=\"varid\">x</span>) (<span class=\"varid\">f</span> <span class=\"varid\">y</span>)
</pre><p>Then this is enough to define substitution, since the paths for a type <tt class=\"complex\"><span class=\"conid\">B</span> <span class=\"varid\">x</span></tt> are isomorphisms, and we can apply these in the forward direction
</p><pre class=\"agda\"><span class=\"varid\">subst</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} (<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>) {<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">y</span>
<span class=\"varid\">subst</span> <span class=\"conid\">B</span> {<span class=\"varid\">x</span>} {<span class=\"varid\">y</span>} <span class=\"varid\">p</span> <span class=\"varid\">with</span> <span class=\"varid\">Meta.subst</span> <span class=\"varid\">id</span> (<span class=\"conid\">Path-Type</span> (<span class=\"conid\">B</span> <span class=\"varid\">x</span>) (<span class=\"conid\">B</span> <span class=\"varid\">y</span>)) (<span class=\"varid\">cong</span> <span class=\"conid\">B</span> <span class=\"varid\">p</span>)
<span class=\"varop\">...</span> <span class=\"keyglyph\">|</span> <span class=\"varid\">lift</span> (<span class=\"varid\">fw</span> , <span class=\"varid\">bw</span> , <span class=\"keyglyph\">_</span> , <span class=\"keyglyph\">_</span>) <span class=\"keyglyph\">=</span> <span class=\"varid\">fw</span>
</pre><p>With substitution we can now finally define what paths are for dependent Σ types.
A path between pairs is a pair of paths,
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span> <span class=\"conid\">Path-Σ</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">Σ</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">Σ</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>) <span class=\"varid\">x</span> <span class=\"varid\">y</span>
<span class=\"varop\">≡</span> <span class=\"conid\">Σ</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> (<span class=\"varid\">proj₁</span> <span class=\"varid\">x</span>) (<span class=\"varid\">proj₁</span> <span class=\"varid\">y</span>))
(<span class=\"keyglyph\">\\</span><span class=\"varid\">pa</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">B</span> (<span class=\"varid\">proj₁</span> <span class=\"varid\">y</span>)) (<span class=\"varid\">subst</span> <span class=\"conid\">B</span> <span class=\"varid\">pa</span> (<span class=\"varid\">proj₂</span> <span class=\"varid\">x</span>)) (<span class=\"varid\">proj₂</span> <span class=\"varid\">y</span>))
</pre><p>Substitution is not the most general eliminator for paths.
It is not enough to prove properties about paths. For that we need the general induction principle for paths, often called J
</p><pre class=\"agda\"><span class=\"conid\">J</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} <span class=\"keyglyph\">→</span> (<span class=\"conid\">B</span> <span class=\"varop\">:</span> (<span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>)
<span class=\"keyglyph\">→</span> {<span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} <span class=\"keyglyph\">→</span> (<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">x</span> (<span class=\"varid\">refl</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varid\">y</span> <span class=\"varid\">p</span>
</pre><p>Unfortunately, I was unable to prove J from just congruence. For that I needed an additional lemma,
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span> <span class=\"varid\">subst-refl</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} <span class=\"keyglyph\">→</span> (<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>)
<span class=\"keyglyph\">→</span> <span class=\"varid\">p</span> <span class=\"varop\">≡</span> <span class=\"varid\">subst</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span>) <span class=\"varid\">p</span> (<span class=\"varid\">refl</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span>)
</pre><p>Since <tt class=\"complex\"><span class=\"conid\">Path</span> <span class=\"conid\">A</span></tt> is inductively defined, I believe that <tt class=\"complex\"><span class=\"varid\">subst-refl</span></tt> should be provable by case analysis on <tt><span class=\"conid\">A</span></tt>, but I have not yet done so. We can now implement J by using <tt><span class=\"varid\">subst</span></tt> with a dependent pair.
Note that here I have to manually apply the comptuation rules for <tt class=\"complex\"><span class=\"conid\">Path</span> (<span class=\"conid\">Σ</span> <span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span>)</tt> and use the <tt class=\"complex\"><span class=\"varid\">subst-refl</span></tt> lemma.
</p><pre class=\"agda\"><span class=\"conid\">J</span> {<span class=\"conid\">A</span> <span class=\"keyglyph\">=</span> <span class=\"conid\">A</span>} {<span class=\"varid\">x</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">x</span>} <span class=\"conid\">B</span> {<span class=\"varid\">y</span>} <span class=\"varid\">p</span>
<span class=\"keyglyph\">=</span> <span class=\"varid\">subst</span> (<span class=\"varid\">uncurry</span> <span class=\"conid\">B</span>)
(<span class=\"varid\">Meta.subst</span> <span class=\"varid\">id</span> (<span class=\"varid\">Meta.sym</span> <span class=\"varop\">$</span> <span class=\"conid\">Path-Σ</span> (<span class=\"varid\">x</span> , <span class=\"varid\">refl</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span>) (<span class=\"varid\">y</span> , <span class=\"varid\">p</span>)) <span class=\"varop\">$</span>
(<span class=\"varid\">p</span> , <span class=\"varid\">Meta.subst</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">q</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) <span class=\"varid\">q</span> <span class=\"varid\">p</span>) (<span class=\"varid\">subst-refl</span> <span class=\"varid\">p</span>)
(<span class=\"varid\">refl</span> (<span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span>) <span class=\"varid\">p</span>)))
</pre><h2><a name=\"does-it-compute\"></a>Does it compute </h2>
<p>An important question to ask is whether this style of OTT is actually implementable.
We can certainly implement the definitions, but would they allow us to compute?
</p><p>The type <tt class=\"complex\"><span class=\"conid\">Path</span> <span class=\"conid\">A</span></tt> certainly reduces, by definition. Similarly, it is not hard to implemenent <tt><span class=\"varid\">refl</span></tt>.
The hard part is defining what <tt><span class=\"varid\">cong</span></tt> means for various functions, and then proving <tt class=\"complex\"><span class=\"varid\">subst-refl</span></tt>.
Somewhere in there we should put the fact that paths are transitive and symmetric, since we have not used that property so far. For what I have done up till now I could equally well have taken <tt class=\"complex\"><span class=\"conid\">Iso</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span> <span class=\"keyglyph\">=</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span></tt>.
</p><p>Here are the implementations of <tt><span class=\"varid\">refl</span></tt>,
</p><pre class=\"agda\"><span class=\"keyglyph\">_</span><span class=\"varop\">≡[</span><span class=\"keyglyph\">_</span><span class=\"varop\">]≡</span><span class=\"keyglyph\">_</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} {<span class=\"conid\">A</span> <span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"varop\">≡</span> <span class=\"conid\">B</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>
<span class=\"varid\">a</span> <span class=\"varop\">≡[</span> <span class=\"varid\">p</span> <span class=\"varop\">]≡</span> <span class=\"varid\">b</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">Meta.subst</span> <span class=\"varid\">id</span> <span class=\"varid\">p</span> <span class=\"varid\">a</span> <span class=\"varop\">≡</span> <span class=\"varid\">b</span>
<div class=\"empty-line\"></div>
<span class=\"keyword\">postulate</span>
<span class=\"varid\">refl-⊤</span>     <span class=\"varop\">:</span> <span class=\"varid\">refl</span> ⊤ <span class=\"varid\">tt</span> <span class=\"varop\">≡[</span> <span class=\"conid\">Path-⊤</span> <span class=\"varop\">]≡</span> <span class=\"varid\">tt</span>
<span class=\"varid\">refl-Bool0</span> <span class=\"varop\">:</span> <span class=\"varid\">refl</span> <span class=\"conid\">Bool</span> <span class=\"varid\">false</span> <span class=\"varop\">≡[</span> <span class=\"conid\">Path-Bool00</span> <span class=\"varop\">]≡</span> <span class=\"varid\">tt</span>
<span class=\"varid\">refl-Bool1</span> <span class=\"varop\">:</span> <span class=\"varid\">refl</span> <span class=\"conid\">Bool</span> <span class=\"varid\">true</span>  <span class=\"varop\">≡[</span> <span class=\"conid\">Path-Bool11</span> <span class=\"varop\">]≡</span> <span class=\"varid\">tt</span>
<span class=\"varid\">refl-Π</span>     <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">f</span> <span class=\"varop\">:</span> <span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"varid\">refl</span> (<span class=\"conid\">Π</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>) <span class=\"varid\">f</span> <span class=\"varop\">≡[</span> <span class=\"conid\">Path-Π</span> <span class=\"varid\">f</span> <span class=\"varid\">f</span> <span class=\"varop\">]≡</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">refl</span> (<span class=\"conid\">B</span> <span class=\"varid\">x</span>) (<span class=\"varid\">f</span> <span class=\"varid\">x</span>))
<span class=\"varid\">refl-Type</span>  <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} (<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>)
<span class=\"keyglyph\">→</span> <span class=\"varid\">refl</span> (<span class=\"conid\">Set</span> <span class=\"varid\">a</span>) <span class=\"conid\">A</span> <span class=\"varop\">≡[</span> <span class=\"conid\">Path-Type</span> <span class=\"conid\">A</span> <span class=\"conid\">A</span> <span class=\"varop\">]≡</span> <span class=\"varid\">lift</span> (<span class=\"varid\">id-Iso</span> <span class=\"conid\">A</span>)
</pre><p>For <tt class=\"complex\"><span class=\"varid\">refl</span> (<span class=\"conid\">Σ</span> <span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span>)</tt> we need yet another lemma, which is a bit a dual to <tt class=\"complex\"><span class=\"varid\">subst-refl₁</span></tt>, allowing <tt><span class=\"varid\">refl</span></tt> in the second argument instead of the third.
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span>
<span class=\"varid\">subst-refl₁</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} {<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>} {<span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">B</span> <span class=\"varid\">x</span>}
<span class=\"keyglyph\">→</span> <span class=\"varid\">y</span> <span class=\"varop\">≡</span> <span class=\"varid\">subst</span> <span class=\"conid\">B</span> (<span class=\"varid\">refl</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span>) <span class=\"varid\">y</span>
<div class=\"empty-line\"></div>
<span class=\"varid\">refl-Σ</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} (<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">Σ</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>)
<span class=\"keyglyph\">→</span> <span class=\"varid\">refl</span> (<span class=\"conid\">Σ</span> <span class=\"conid\">A</span> <span class=\"conid\">B</span>) <span class=\"varid\">x</span> <span class=\"varop\">≡[</span> <span class=\"conid\">Path-Σ</span> <span class=\"varid\">x</span> <span class=\"varid\">x</span> <span class=\"varop\">]≡</span>
(<span class=\"varid\">refl</span> <span class=\"conid\">A</span> (<span class=\"varid\">proj₁</span> <span class=\"varid\">x</span>) ,
<span class=\"varid\">Meta.subst</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">x1</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Path</span> (<span class=\"conid\">B</span> (<span class=\"varid\">proj₁</span> <span class=\"varid\">x</span>)) <span class=\"varid\">x1</span> (<span class=\"varid\">proj₂</span> <span class=\"varid\">x</span>))
(<span class=\"varid\">subst-refl₁</span> {<span class=\"conid\">B</span> <span class=\"keyglyph\">=</span> <span class=\"conid\">B</span>} {<span class=\"varid\">y</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">proj₂</span> <span class=\"varid\">x</span>})
(<span class=\"varid\">refl</span> (<span class=\"conid\">B</span> (<span class=\"varid\">proj₁</span> <span class=\"varid\">x</span>)) (<span class=\"varid\">proj₂</span> <span class=\"varid\">x</span>)))
</pre><p>And here is a start of the implementation of <tt><span class=\"varid\">cong</span></tt>,
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span>
<span class=\"varid\">cong-const</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} {<span class=\"varid\">x</span> <span class=\"varid\">x'</span>} {<span class=\"varid\">y</span>} {<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x'</span>}
<span class=\"keyglyph\">→</span> <span class=\"varid\">cong</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">y</span>) <span class=\"varid\">p</span> <span class=\"varop\">≡</span> <span class=\"varid\">refl</span> <span class=\"conid\">B</span> <span class=\"varid\">y</span>
<span class=\"varid\">cong-id</span>    <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"varid\">x</span> <span class=\"varid\">x'</span>} {<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x'</span>}
<span class=\"keyglyph\">→</span> <span class=\"varid\">cong</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span>) <span class=\"varid\">p</span> <span class=\"varop\">≡</span> <span class=\"varid\">p</span>
<span class=\"varid\">cong-∘</span>     <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span> <span class=\"varid\">c</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} {<span class=\"varid\">x</span> <span class=\"varid\">x'</span>} {<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"conid\">Path</span> <span class=\"conid\">A</span> <span class=\"varid\">x</span> <span class=\"varid\">x'</span>}
{<span class=\"conid\">B</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">b</span>} {<span class=\"conid\">C</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">c</span>} {<span class=\"varid\">f</span> <span class=\"varop\">:</span> <span class=\"conid\">B</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">C</span>} {<span class=\"varid\">g</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span>}
<span class=\"keyglyph\">→</span> <span class=\"varid\">cong</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">x</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">f</span> (<span class=\"varid\">g</span> <span class=\"varid\">x</span>)) <span class=\"varid\">p</span> <span class=\"varop\">≡</span> <span class=\"varid\">cong</span> <span class=\"varid\">f</span> (<span class=\"varid\">cong</span> <span class=\"varid\">g</span> <span class=\"varid\">p</span>)
<span class=\"comment\">-- etc.</span>
</pre><p>At some point I think you will also need a dependent <tt><span class=\"varid\">cong</span></tt>.
</p><p>But this is enough postulating for one day.
</p>" nil nil "e2662c32c877bd411c4416097504839b") (80 (20935 65032 456426) "http://wadler.blogspot.com/2013/06/a-perverted-view-of-impact.html" "Philip Wadler: A perverted view of \"impact\"" "noreply@blogger.com (Philip Wadler)" "Fri, 21 Jun 2013 16:34:31 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://3.bp.blogspot.com/-5sYTh32tOSQ/UcR-z3Eze2I/AAAAAAAACcI/9AUvZRJBo-M/s1600/impact1.jpg\"><img src=\"http://3.bp.blogspot.com/-5sYTh32tOSQ/UcR-z3Eze2I/AAAAAAAACcI/9AUvZRJBo-M/s320/impact1.jpg\" height=\"160\" border=\"0\" width=\"320\" /></a></div>I think the emphasis on impact in UK research can be counterproductive. Jeremy Gibbons alerted me to this <a href=\"http://www.sciencemag.org/content/340/6138/1265.full\">op-ed by Marc Kirschner</a> in Science, pointing out that the situation is even more severe in the US biomedical community, where the search for \"impact\" leads to focus on human medicine, to the detriment of fundamental studies.<br /><blockquote class=\"tr_bq\">One may be able to recognize good science as it happens, but significant science can only be viewed in the rearview mirror. To pretend otherwise distorts science. DNA restriction enzymes, once the province of obscure microbiological investigation, ultimately enabled the entire recombinant DNA revolution. Measurement of the ratios of heavy and light isotopes of oxygen, once a limited area of geochemistry, eventually allowed the interpretation of prior climate change. What is now promoted as high-impact science is usually a narrow extension of existing experimental designs in a program focused on a set of feasible goals. Fuzzy new directions that might fail, but could open up major new questions, are often dismissed as too speculative and considered low-impact. And in biomedical science, there is an increasing tendency to equate significance to any form of medical relevance. This causes biochemical investigations and research on nonmammalian systems to be treated as intrinsically less valuable than studies on human cells. As a result, biomedicine is losing the historically productive cross-fertilization between model systems and human biology.</blockquote><div><br /></div>" nil nil "2fd3c9e589f7201098555aecb62338a7") (79 (20935 65032 455899) "http://www.joachim-breitner.de/blog/archives/599-Haskell-and-Debian-talk-at-HaL8.html" "Joachim Breitner: Haskell and Debian talk at HaL8" "mail@joachim-breitner.de (nomeata)" "Fri, 21 Jun 2013 16:04:45 +0000" "<p>I just finished my “Haskell und Debian” talk at the Haskell-Workshop <a href=\"http://www.bioinf.uni-leipzig.de/conference-registration/13haskell/de/Start.html\">HaL8 in Leipzig</a>. Unfortunately I was thrown a off track by time constraints and since there were much less beginners and interested visitors in the audience than I had anticipated, so I skipped some parts and improvised others somewhat chaotically, so the presentation was not up to the standards that I expect from my talks. If you have attended (or if you have not) I recommend you have a look <a href=\"http://www.bioinf.uni-leipzig.de/conference-registration/13haskell/papers/paper_1.pdf\">at the extended abstract</a> (in German), which contains what I skipped and is much clearer than what I said.</p>" nil nil "90f4249df1875a89be340aa1d5866258") (78 (20935 65032 455249) "http://lambdacube3d.wordpress.com/2013/06/21/a-few-thoughts-on-geometry-shaders/" "LambdaCube: A few thoughts on geometry shaders" nil "Fri, 21 Jun 2013 08:34:03 +0000" "<p>We just added a new example to the LambdaCube repository, which shows off <a href=\"https://github.com/csabahruska/lc-dsl/tree/master/samples/cubemap\" title=\"LambdaCube cube mapping example\">cube map based reflections</a>. Reflections are rendered by sampling a cube map, which is created by rendering the world from the centre of the reflecting object in six directions. This is done in a single pass, using a geometry shader to replicate every incoming triangle six times. Here is the final result:</p>
<div style=\"width: 640px;\" id=\"attachment_334\" class=\"wp-caption aligncenter\"><a href=\"http://lambdacube3d.files.wordpress.com/2013/06/cubemap-example1.png\"><img src=\"http://lambdacube3d.files.wordpress.com/2013/06/cubemap-example1.png?w=630&h=354\" alt=\"Reflecting surface simulated with cube mapping\" height=\"354\" class=\"size-full wp-image-334\" width=\"630\" /></a><p class=\"wp-caption-text\">Reflecting surface simulated with cube mapping</p></div>
<p>While the main focus of this blog is language and API design, we need to describe the pipeline structure of the example to put the rest of the discussion into context. The high-level structure corresponds to the following data-flow graph:</p>
<div style=\"width: 640px;\" id=\"attachment_340\" class=\"wp-caption aligncenter\"><a href=\"http://lambdacube3d.files.wordpress.com/2013/06/cubemap-example-pipeline1.png\"><img src=\"http://lambdacube3d.files.wordpress.com/2013/06/cubemap-example-pipeline1.png?w=630&h=261\" alt=\"Pipeline structure for the cube map example\" height=\"261\" class=\"size-full wp-image-340\" width=\"630\" /></a><p class=\"wp-caption-text\">Pipeline structure for the cube map example</p></div>
<p>The most important observation is that several pieces of this graph are reused multiple times. For instance, all geometry goes through the model-view transformation, but sometimes this is performed in a vertex shader (VS), sometimes in a geometry shader (GS). Also, the same lighting equation is used when creating the reflection map as well as the non-reflective parts of the final rendering, so the corresponding fragment shader (FS) is shared.</p>
<h2>The Good</h2>
<p>For us, the most important result of writing this example was that we could express all the above mentioned instances of shared logic in a straightforward way. The high-level graph structure is captured by the top declarations in <strong>sceneRender</strong>’s definition:</p>
<pre style=\"padding-bottom: 0;\"><span style=\"color: #0000ff;\">sceneRender</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Accumulate</span> accCtx <span style=\"color: #228b22;\">PassAll</span> reflectFrag (<span style=\"color: #228b22;\">Rasterize</span> rastCtx reflectPrims) directRender
<span style=\"color: #a020f0;\">where</span>
directRender <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Accumulate</span> accCtx <span style=\"color: #228b22;\">PassAll</span> frag (<span style=\"color: #228b22;\">Rasterize</span> rastCtx directPrims) clearBuf
cubeMapRender <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Accumulate</span> accCtx <span style=\"color: #228b22;\">PassAll</span> frag (<span style=\"color: #228b22;\">Rasterize</span> rastCtx cubePrims) clearBuf6
accCtx <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">AccumulationContext</span> <span style=\"color: #228b22;\">Nothing</span> (<span style=\"color: #228b22;\">DepthOp</span> <span style=\"color: #228b22;\">Less</span> <span style=\"color: #228b22;\">True</span> <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ColorOp</span> <span style=\"color: #228b22;\">NoBlending</span> (one' <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">V4B</span>) <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ZT</span>)
rastCtx <span style=\"color: #a0522d;\">=</span> triangleCtx { ctxCullMode <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">CullFront</span> <span style=\"color: #228b22;\">CCW</span> }
clearBuf <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">FrameBuffer</span> (<span style=\"color: #228b22;\">DepthImage</span> n1 1000 <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ColorImage</span> n1 (<span style=\"color: #228b22;\">V4</span> 0<span style=\"color: #a0522d;\">.</span>1 0<span style=\"color: #a0522d;\">.</span>2 0<span style=\"color: #a0522d;\">.</span>6 1) <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ZT</span>)
clearBuf6 <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">FrameBuffer</span> (<span style=\"color: #228b22;\">DepthImage</span> n6 1000 <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ColorImage</span> n6 (<span style=\"color: #228b22;\">V4</span> 0<span style=\"color: #a0522d;\">.</span>05 0<span style=\"color: #a0522d;\">.</span>1 0<span style=\"color: #a0522d;\">.</span>3 1) <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ZT</span>)
worldInput <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Fetch</span> <span style=\"color: #8b2252;\">\"geometrySlot\"</span> <span style=\"color: #228b22;\">Triangles</span> (<span style=\"color: #228b22;\">IV3F</span> <span style=\"color: #8b2252;\">\"position\"</span>, <span style=\"color: #228b22;\">IV3F</span> <span style=\"color: #8b2252;\">\"normal\"</span>)
reflectInput <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Fetch</span> <span style=\"color: #8b2252;\">\"reflectSlot\"</span> <span style=\"color: #228b22;\">Triangles</span> (<span style=\"color: #228b22;\">IV3F</span> <span style=\"color: #8b2252;\">\"position\"</span>, <span style=\"color: #228b22;\">IV3F</span> <span style=\"color: #8b2252;\">\"normal\"</span>)
directPrims <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Transform</span> directVert worldInput
cubePrims <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Reassemble</span> geom (<span style=\"color: #228b22;\">Transform</span> cubeMapVert worldInput)
reflectPrims <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Transform</span> directVert reflectInput</pre>
<p>The top-level definition describes the last pass, which draws the reflective capsule – whose geometry is carried by the primitive stream <strong>reflectPrims</strong> – on top of the image emitted by a previous pass called <strong>directRender</strong>. The two preceding passes render the scene without the capsule (<strong>worldInput</strong>) on a screen-sized framebuffer as well as the cube map. We can see that the pipeline section generating the cube map has a <strong>reassemble</strong> phase, which corresponds to the geometry shader. Note that these two passes have no data dependencies between each other, so they can be executed in any order by the back-end.</p>
<p>It’s clear to see how the same fragment shader is used in the first two passes. The more interesting story is finding a way to express the model-view transformation in one place and use it both in <strong>directVert</strong> and <strong>geom</strong>. As it turns out, we can simply extract the common functionality and give it a name. The function we get this way is frequency agnostic, which is reflected in its type:</p>
<pre style=\"padding-bottom: 0;\">    transformGeometry <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Exp</span> f <span style=\"color: #228b22;\">V4F</span> <span style=\"color: #a0522d;\">-></span> <span style=\"color: #228b22;\">Exp</span> f <span style=\"color: #228b22;\">V3F</span> <span style=\"color: #a0522d;\">-></span> <span style=\"color: #228b22;\">Exp</span> f <span style=\"color: #228b22;\">M44F</span> <span style=\"color: #a0522d;\">-></span> (<span style=\"color: #228b22;\">Exp</span> f <span style=\"color: #228b22;\">V4F</span>, <span style=\"color: #228b22;\">Exp</span> f <span style=\"color: #228b22;\">V4F</span>, <span style=\"color: #228b22;\">Exp</span> f <span style=\"color: #228b22;\">V3F</span>)
transformGeometry localPos localNormal viewMatrix <span style=\"color: #a0522d;\">=</span> (viewPos, worldPos, worldNormal)
<span style=\"color: #a020f0;\">where</span>
worldPos <span style=\"color: #a0522d;\">=</span> modelMatrix <span style=\"color: #a0522d;\">@*.</span> localPos
viewPos <span style=\"color: #a0522d;\">=</span> viewMatrix <span style=\"color: #a0522d;\">@*.</span> worldPos
worldNormal <span style=\"color: #a0522d;\">=</span> normalize' (v4v3 (modelMatrix <span style=\"color: #a0522d;\">@*.</span> n3v4 localNormal))</pre>
<p>The simpler use case is <strong>directVert</strong>, which simply wraps the above functionality in a vertex shader:</p>
<pre style=\"padding-bottom: 0;\">    directVert <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Exp</span> <span style=\"color: #228b22;\">V</span> (<span style=\"color: #228b22;\">V3F</span>, <span style=\"color: #228b22;\">V3F</span>) <span style=\"color: #a0522d;\">-></span> <span style=\"color: #228b22;\">VertexOut</span> <span style=\"color: #228b22;\">()</span> (<span style=\"color: #228b22;\">V3F</span>, <span style=\"color: #228b22;\">V3F</span>, <span style=\"color: #228b22;\">V3F</span>)
directVert attr <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">VertexOut</span> viewPos (floatV 1) <span style=\"color: #228b22;\">ZT</span> (<span style=\"color: #228b22;\">Smooth</span> (v4v3 worldPos) <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">Smooth</span> worldNormal <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">Flat</span> viewCameraPosition <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ZT</span>)
<span style=\"color: #a020f0;\">where</span>
(localPos, localNormal) <span style=\"color: #a0522d;\">=</span> untup2 attr
(viewPos, worldPos, worldNormal) <span style=\"color: #a0522d;\">=</span> transformGeometry (v3v4 localPos) localNormal viewCameraMatrix</pre>
<p>As for the geometry shader…</p>
<h2>The Bad</h2>
<p>… we already mentioned in <a href=\"http://lambdacube3d.wordpress.com/2012/09/07/the-lambdacube-3d-pipeline-model/\" title=\"The LambdaCube 3D pipeline model\">the introduction of our functional pipeline model</a> that we aren’t happy with the current way of expressing geometry shaders. The current approach is a very direct mapping of two nested for loops as an initialisation function and two state transformers – essentially <em>unfold</em> kernels. The outer loop is responsible for one primitive per iteration, while the inner loop emits the individual vertices. Without further ado, here’s the geometry shader needed by the example:</p>
<pre style=\"padding-bottom: 0;\">    geom <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">GeometryShader</span> <span style=\"color: #228b22;\">Triangle</span> <span style=\"color: #228b22;\">Triangle</span> <span style=\"color: #228b22;\">()</span> <span style=\"color: #228b22;\">()</span> 6 <span style=\"color: #228b22;\">V3F</span> (<span style=\"color: #228b22;\">V3F</span>, <span style=\"color: #228b22;\">V3F</span>, <span style=\"color: #228b22;\">V3F</span>)
geom <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">GeometryShader</span> n6 <span style=\"color: #228b22;\">TrianglesOutput</span> 18 init prim vert
<span style=\"color: #a020f0;\">where</span>
init attr <span style=\"color: #a0522d;\">=</span> tup2 (primInit, intG 6)
<span style=\"color: #a020f0;\">where</span>
primInit <span style=\"color: #a0522d;\">=</span> tup2 (intG 0, attr)
prim primState <span style=\"color: #a0522d;\">=</span> tup5 (layer, layer, primState', vertInit, intG 3)
<span style=\"color: #a020f0;\">where</span>
(layer, attr) <span style=\"color: #a0522d;\">=</span> untup2 primState
primState' <span style=\"color: #a0522d;\">=</span> tup2 (layer <span style=\"color: #a0522d;\">@+</span> intG 1, attr)
vertInit <span style=\"color: #a0522d;\">=</span> tup3 (intG 0, viewMatrix, attr)
viewMatrix <span style=\"color: #a0522d;\">=</span> indexG (map cubeCameraMatrix [1<span style=\"color: #a0522d;\">..</span>6]) layer
vert vertState <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">GeometryOut</span> vertState' viewPos pointSize <span style=\"color: #228b22;\">ZT</span> (<span style=\"color: #228b22;\">Smooth</span> (v4v3 worldPos) <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">Smooth</span> worldNormal <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">Flat</span> cubeCameraPosition <span style=\"color: #228b22;\">:.</span> <span style=\"color: #228b22;\">ZT</span>)
<span style=\"color: #a020f0;\">where</span>
(index, viewMatrix, attr) <span style=\"color: #a0522d;\">=</span> untup3 vertState
vertState' <span style=\"color: #a0522d;\">=</span> tup3 (index <span style=\"color: #a0522d;\">@+</span> intG 1, viewMatrix, attr)
(attr0, attr1, attr2) <span style=\"color: #a0522d;\">=</span> untup3 attr
(localPos, pointSize, <span style=\"color: #a020f0;\">_</span>, localNormal) <span style=\"color: #a0522d;\">=</span> untup4 (indexG [attr0, attr1, attr2] index)
(viewPos, worldPos, worldNormal) <span style=\"color: #a0522d;\">=</span> transformGeometry localPos localNormal viewMatrix</pre>
<p>The <strong>init</strong> function’s sole job is to define the initial state and iteration count of the outer loop. The initial state is just a loop counter set to zero plus the input of the shader in a single tuple called <strong>attr</strong>, while the iteration count is <strong>6</strong>. The <strong>prim</strong> function takes care of increasing this counter, specifying the layer for the primitive (equal to the counter), and picking the appropriate view matrix from one of six uniforms. It defines the iteration count (<strong>3</strong>, since we’re drawing triangles) and the initial state of the inner loop, which contains another counter set at zero, the chosen view matrix, and the attribute tuple. Finally, the <strong>vert</strong> function calculates the output attributes using <strong>transformGeometry</strong>, and also its next state, which only differs from the current one in having the counter incremented.</p>
<p>On one hand, we had success in reusing the common logic between different shader stages by simply extracting it as a pure function. On the other, it is obvious at this point that directly mapping imperative loops results in really awkward code. At least it does the job!</p>
<p><span style=\"text-align: center; display: block;\" class=\"embed-youtube\"><iframe class=\"youtube-player\" frameborder=\"0\" height=\"385\" src=\"http://www.youtube.com/embed/9f5oSv1SZiE?version=3&amp;rel=1&amp;fs=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;wmode=transparent\" type=\"text/html\" width=\"630\"></iframe></span></p>
<h2>The Next Step?</h2>
<p>We’ve been thinking about alternative ways to model geometry shaders that would allow a more convenient and ‘natural’ manner of expressing our intent. One option we’ve considered lately would be to have the shader yield a list of lists. This would allow us to use scoping to access attributes in the inner loop instead of having to pass them around explicitly, not to mention doing away with explicit loop counters altogether. We could use existing techniques to generate imperative code, e.g. stream fusion. However, it is an open question how we could introduce lists or some similar structure in the language without disrupting other parts, keeping the use of the new feature appropriately constrained. One thing is clear: there has to be a better way.</p>
<br />  <img src=\"http://stats.wordpress.com/b.gif?host=lambdacube3d.wordpress.com&blog=39087425&post=331&subd=lambdacube3d&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "269a550dc6a9df0b7995ff5b17756672") (77 (20935 65032 452859) "http://existentialtype.wordpress.com/2013/06/20/the-homotopy-type-theory-book-is-out/" "Robert Harper: The Homotopy Type Theory Book is out!" nil "Thu, 20 Jun 2013 19:49:08 +0000" "<p>By now many of you have heard of the development of Homotopy Type Theory (HoTT), an extension of intuitionistic type theory that provides a natural foundation for doing synthetic homotopy theory.  Last year the <a href=\"http://ias.edu\" target=\"_blank\" title=\"Institute for Advanced Study\">Institute for Advanced Study at Princeton</a> sponsored a program on the <a href=\"http://uf-ias-2012.wikispaces.com/\" target=\"_blank\" title=\"Univalent Foundations Program\">Univalent Foundations of Mathematics</a>, which was concerned with developing these ideas.  One important outcome of the year-long program is a full-scale book presenting the main ideas of Homotopy Type Theory itself and showing how to apply them to various branches of mathematics, including homotopy theory, category theory, set theory, and constructive analysis.  The book is the product of a joint effort by dozens of participants in the program, and is intended to document the state of the art as it is known today, and to encourage its further development by the participation of others interested in the topic (i.e., you!).  Among the many directions in which one may take these ideas, the most important (to me) is to develop a constructive (computational) interpretation of HoTT.  Some partial results in this direction have already been obtained, including fascinating work by Thierry Coquand on developing a constructive version of Kan complexes in ITT, by Mike Shulman on proving homotopy canonicity for the natural numbers in a two-dimensional version of HoTT, and by Dan Licata and me on a weak definitional canonicity theorem for a similar two-dimensional theory.  Much work remains to be done to arrive at a fully satisfactory constructive interpretation, which is essential for application of these ideas to computer science.  Meanwhile, though, great progress has been made on using HoTT to formulate and formalize significant pieces of mathematics in a new, and strikingly beautiful, style, that are well-documented in the book.</p>
<p>The book is <a href=\"http://homotopytypetheory.org/book\" target=\"_blank\" title=\"Homotopy Type Theory Book\">freely available on the web</a> in various formats, including a PDF version with active references, an ebook version suitable for your reading device, and may be purchased in hard- or soft-cover from Lulu.  The book itself is open source, and is available at the <a href=\"http://github.com/hott/book\" target=\"_blank\" title=\"HoTT Book Git Hub\">Hott Book Git Hub</a>.  The book is under the Creative Commons  <a href=\"http://creativecommons.org/licenses/by-sa/3.0/\" title=\"Creative Common License\">CC BY-SA</a> license, and will be freely available in perpetuity.</p>
<p>Readers may also be interested in the posts on <a href=\"http://www.homotopytypetheory.org/2013/06/20/the-hott-book/\" target=\"_blank\" title=\"Homotopy Type Theory Book Announcement\">Homotopy Type Theory</a>, the <a href=\"http://golem.ph.utexas.edu/category/2013/06/the_hott_book.html\" title=\"n-Category Cafe Hott Book\">n-Category Cafe</a>, and <a href=\"http://math.andrej.com/2013/06/20/the-hott-book/\" title=\"Mathematics and Computation HoTT Book\">Mathematics and Computation</a> which describe more about the book and the process of its creation.</p>
<br />Filed under: <a href=\"http://existentialtype.wordpress.com/category/research/\">Research</a> Tagged: <a href=\"http://existentialtype.wordpress.com/tag/category-theory/\">category theory</a>, <a href=\"http://existentialtype.wordpress.com/tag/homotopy-theory/\">homotopy theory</a>, <a href=\"http://existentialtype.wordpress.com/tag/type-theory/\">type theory</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/existentialtype.wordpress.com/806/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/existentialtype.wordpress.com/806/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=existentialtype.wordpress.com&blog=2157150&post=806&subd=existentialtype&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "ae76362f1f9620a714075ba7c384177c") (76 (20935 65032 446274) "http://blog.moertel.com/posts/2013-06-12-recursion-to-iteration-4-trampolines.html" "Tom Moertel: Tricks of the trade: Recursion to Iteration, Part 4: The Trampoline" nil "Wed, 12 Jun 2013 00:00:00 +0000" "<div class=\"info byline\">Posted by <span><span>Tom Moertel<span></span></span></span></div>
<div class=\"info\">Posted on <time datetime=\"2013-06-12\" itemprop=\"datePublished\">June 12, 2013</time></div>
<div class=\"tags\">Tags: <span><a href=\"http://blog.moertel.com/tags/programming.html\">programming</a>, <a href=\"http://blog.moertel.com/tags/recursion.html\">recursion</a>, <a href=\"http://blog.moertel.com/tags/iteration.html\">iteration</a>, <a href=\"http://blog.moertel.com/tags/python.html\">python</a>, <a href=\"http://blog.moertel.com/tags/recursion-to-iteration series.html\">recursion-to-iteration series</a>, <a href=\"http://blog.moertel.com/tags/tail calls.html\">tail calls</a>, <a href=\"http://blog.moertel.com/tags/data structures.html\">data structures</a>, <a href=\"http://blog.moertel.com/tags/trampolines.html\">trampolines</a></span></div>
<div>
<p>This is the fourth article in <a href=\"http://blog.moertel.com/tags/recursion-to-iteration%20series.html\">a series on converting recursive algorithms into iterative algorithms</a>. If you haven’t read the earlier articles first, you may want to do so before continuing.</p>
<p>In <a href=\"http://blog.moertel.com/posts/2013-05-11-recursive-to-iterative.html\">the first article of our series</a>, we showed that if you can convert an algorithm’s recursive calls into tail calls, you can eliminate those tail calls to create an iterative version of the algorithm using The Simple Method. In this article, we’ll look at another way to eliminate tail calls: the <em>trampoline</em>.</p>
<p>The idea behind the trampoline is this: before making a tail call, manually remove the current execution frame from the stack, eliminating stack build-up.</p>
<h3 id=\"execution-frames-and-the-stack\">Execution frames and the stack</h3>
<p>To understand why we might want to manually remove an execution frame, let’s think about what happens when we call a function. The language runtime needs some place to store housekeeping information and any local variables the function may use, so it allocates a new execution frame on the stack. Then it turns control over to the function. When the function is done, it executes a <code>return</code> statement. This statement tells the runtime to remove the execution frame from the stack and to give control (and any result) back to the caller.</p>
<p>But what if the function doesn’t return right away? What if it makes another function call instead? In that case, the runtime must create a new execution frame for <em>that</em> call and push it onto the stack, on top of the current frame. If the function ends up calling itself many times recursively, each call will add another frame to the stack, and pretty soon we will have eaten up a lot of stack space.</p>
<h3 id=\"eliminating-stack-build-up\">Eliminating stack build-up</h3>
<p>To avoid this problem, some programming languages guarantee that they will recycle the current execution frame whenever a function makes a tail call. That is, if the function calls some other function (or itself recursively) and just returns that function’s result verbatim, that’s a tail call. In that case, the runtime will recycle the current function’s execution frame before transferring control to the other function, making it so that the other function will return its result directly to the original function’s caller. This process is called <em>tail-call elimination</em>.</p>
<p>But in languages like Python that don’t offer tail-call elimination, every call, even if it’s a tail call, pushes a new frame onto the stack. So if we want to prevent stack build-up, we must somehow eliminate the current frame from the stack ourselves, before making a tail call.</p>
<p>But how? The only obvious way to eliminate the current frame is to <code>return</code> to our caller. If we’re to make this work, then, the caller must be willing to help us out. That’s where the trampoline comes in. It’s our co-conspirator in the plot to eliminate stack build-up.</p>
<h3 id=\"the-trampoline\">The trampoline</h3>
<p>Here’s what the trampoline does:</p>
<ol style=\"\">
<li>It calls our function <code>f</code>, making itself the current caller.</li>
<li>When <code>f</code> wants to make a recursive tail call to itself, it returns the instruction <code>call(f)(*args, **kwds)</code>. The language runtime dutifully removes the current execution frame from the stack and returns control to the trampoline, passing it the instruction.</li>
<li>The trampoline interprets the instruction and calls <code>f</code> back, giving it the supplied arguments, and again making itself the caller.</li>
<li>This process repeats until <code>f</code> wants to return a final result <code>z</code>; then it returns the new instruction <code>result(z)</code> instead. As before, the runtime removes the current execution frame from the stack and returns control to the trampoline.</li>
<li>But now when the trampoline interprets the new instruction it will return <code>z</code> to <em>its</em> caller, ending the trampoline dance.</li>
</ol>
<p>Now you can see how the trampoline got its name. When our function uses a <code>return</code> statement to remove its own execution frame from the stack, the trampoline bounces control back to it with new arguments.</p>
<p>Here’s a simple implementation. First, we will encode our instructions to the trampoline as triples. We’ll let <code>call(f)(*args, **kwds)</code> be the triple <code>(f, args, kwds)</code>, and <code>result(z)</code> be the triple <code>(None, z, None)</code>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> call(f):
<span class=\"co\">\"\"\"Instruct trampoline to call f with the args that follow.\"\"\"</span>
<span class=\"kw\">def</span> g(*args, **kwds):
<span class=\"kw\">return</span> f, args, kwds
<span class=\"kw\">return</span> g
<span class=\"kw\">def</span> result(value):
<span class=\"co\">\"\"\"Instruct trampoline to stop iterating and return a value.\"\"\"</span>
<span class=\"kw\">return</span> <span class=\"ot\">None</span>, value, <span class=\"ot\">None</span></code></pre>
<p>Now we’ll create a decorator to wrap a function with a trampoline that will interpret the instructions that the function returns:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"ch\">import</span> functools
<span class=\"kw\">def</span> with_trampoline(f):
<span class=\"co\">\"\"\"Wrap a trampoline around a function that expects a trampoline.\"\"\"</span>
<span class=\"ot\">@functools.wraps</span>(f)
<span class=\"kw\">def</span> g(*args, **kwds):
h = f
<span class=\"co\"># the trampoline</span>
<span class=\"kw\">while</span> h is not <span class=\"ot\">None</span>:
h, args, kwds = h(*args, **kwds)
<span class=\"kw\">return</span> args
<span class=\"kw\">return</span> g</code></pre>
<p>Note that the trampoline boils down to three lines:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">while</span> h is not <span class=\"ot\">None</span>:
h, args, kwds = h(*args, **kwds)
<span class=\"kw\">return</span> args</code></pre>
<p>Basically, the trampoline keeps calling whatever function is in <code>h</code> until that function returns a <code>result(z)</code> instruction, at which time the loop exits and <code>z</code> is returned. The original recursive tail calls have been boiled down to a <code>while</code> loop. Recursion has become iteration.</p>
<h3 id=\"example-factorial\">Example: factorial</h3>
<p>To see how we might use this implementation, let’s return to the factorial example from <a href=\"http://blog.moertel.com/posts/2013-05-11-recursive-to-iterative.html\">the first article in our series</a>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> factorial(n):
<span class=\"kw\">if</span> n < <span class=\"dv\">2</span>:
<span class=\"kw\">return</span> <span class=\"dv\">1</span>
<span class=\"kw\">return</span> n * factorial(n - <span class=\"dv\">1</span>)</code></pre>
<p>Step one, as before, is to tail-convert the lone recursive call:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"> <span class=\"kw\">def</span> factorial(n, acc=<span class=\"dv\">1</span>):
<span class=\"kw\">if</span> n < <span class=\"dv\">2</span>:
<span class=\"kw\">return</span> acc
<span class=\"kw\">return</span> factorial(n - <span class=\"dv\">1</span>, acc * n)</code></pre>
<p>Now we can create an equivalent function that uses trampoline idioms:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> trampoline_factorial(n, acc=<span class=\"dv\">1</span>):
<span class=\"kw\">if</span> n < <span class=\"dv\">2</span>:
<span class=\"kw\">return</span> result(acc)
<span class=\"kw\">return</span> call(trampoline_factorial)(n - <span class=\"dv\">1</span>, n * acc)</code></pre>
<p>Note how the <code>return</code> statements have been transformed.</p>
<p>Finally, we can wrap this function with a trampoline to get a callable version that we can use just like the original:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\">factorial = with_trampoline(trampoline_factorial)</code></pre>
<p>Let’s take it for a spin:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\">>>> factorial(<span class=\"dv\">5</span>)
<span class=\"dv\">120</span></code></pre>
<p>To really see what’s going on, be sure to use the Online Python Tutor’s visualizer to step through the original, tail-recursive, and trampoline versions of the function. Just open this link: <a href=\"http://www.pythontutor.com/visualize.html#code=%23+our+trampoline+library%0A%0Aimport+functools%0A%0Adef+call(f)%3A%0A++++%22%22%22Instruct+trampoline+to+call+f+with+the+args+that+follow.%22%22%22%0A++++def+g(*args,+**kwds)%3A%0A++++++++return+f,+args,+kwds%0A++++return+g%0A%0Adef+result(value)%3A%0A++++%22%22%22Instruct+trampoline+to+stop+iterating+and+return+a+value.%22%22%22%0A++++return+None,+value,+None%0A%0Adef+with_trampoline(f)%3A%0A++++%22%22%22Wrap+a+trampoline+around+a+function+that+expects+a+trampoline.%22%22%22%0A++++%40functools.wraps(f)%0A++++def+g(*args,+**kwds)%3A%0A++++++++h+%3D+f%0A++++++++%23+the+trampoline%0A++++++++while+h+is+not+None%3A%0A++++++++++++h,+args,+kwds+%3D+h(*args,+**kwds)%0A++++++++return+args%0A++++return+g%0A%0A%0A%23+original+recursive+version+of+factorial+function%0A%0Adef+factorial(n)%3A%0A++++if+n+%3C+2%3A%0A++++++++return+1%0A++++return+n+*+factorial(n+-+1)%0A%0Aprint+factorial(5)%0A%0A%0A%23+tail-call+recursive+version%0A%0Adef+factorial(n,+acc%3D1)%3A%0A+++++if+n+%3C+2%3A%0A+++++++++return+acc%0A+++++return+factorial(n+-+1,+acc+*+n)%0A%0Aprint+factorial(5)%0A%0A%0A%23+trampoline-based+tail-call+version+(%3D+iterative)%0A%0Adef+trampoline_factorial(n,+acc%3D1)%3A%0A++++if+n+%3C+2%3A%0A++++++++return+result(acc)%0A++++return+call(trampoline_factorial)(n+-+1,+n+*+acc)%0A%0Afactorial+%3D+with_trampoline(trampoline_factorial)%0A%0Aprint+factorial(5)%0A&mode=display&cumulative=false&heapPrimitives=false&drawParentPointers=false&textReferences=false&showOnlyOutputs=false&py=2&curInstr=0\">Visualize the execution</a>. (ProTip: use a new tab.)</p>
<h3 id=\"why-use-the-trampoline\">Why use the trampoline?</h3>
<p>As I mentioned at the beginning of this article, if you can convert a function’s recursive calls into tail calls – which you must do to use a trampoline – you can also use the Simple Method on the function. For example, here’s what the Simple Method does to our original <code>factorial</code> function:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> factorial(n, acc=<span class=\"dv\">1</span>):
<span class=\"kw\">while</span> n > <span class=\"dv\">1</span>:
(n, acc) = (n - <span class=\"dv\">1</span>, acc * n)
<span class=\"kw\">return</span> acc</code></pre>
<p>This version is simpler and more efficient than the trampoline version. So why not use the Simple Method always?</p>
<p>The answer is that the Simple Method is tricky to apply to functions that make tail calls from within loops. Recall that it introduces a loop around a function’s body and replaces recursive tail calls with <code>continue</code> statements. But if the function already has its own loops, replacing a tail call within one of them with a <code>continue</code> statement will restart that inner loop instead of the whole-body loop, as desired. In that case, you must add condition flags to make sure the right loop gets restarted, and that gets old fast. Then, using a trampoline may be a win.</p>
<p>That said, I almost never use trampolines. Getting a function into tail-call form is nine tenths of the battle. If I’ve gone that far already, I’ll usually go the rest of the way to get a tight, iterative version.</p>
<p>Why, then, did we make this effort to understand the trampoline? Two reasons. First, it’s semi-common in programming lore, so it’s best to know about it. Second, it’s a stepping stone to a more-general, more-powerful technique: <em>continuation-passing-style expressions</em>. That’s our subject for next time.</p>
<p>In the meantime, if you want another take on trampolines in Python, Kyle Miller wrote a nice article on the subject: <a href=\"http://web.mit.edu/kmill/www/programming/tailcall.html\">Tail call recursion in Python</a>.</p>
<p>Thanks for reading! As always, if you have questions or comments, please leave a comment on the blog or hit me at <a href=\"https://twitter.com/tmoertel\">@tmoertel</a>.</p>
</div>" nil nil "0fbd60248f2323644ee5e1cf092bd561") (75 (20935 65032 322111) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_4888\"></span>, where <span id=\"tex_3959\"></span> is the number of “folds” and <span id=\"tex_1924\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_3966\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "04aa072f5f828ce911818ea0a1e6b4f9") (74 (20935 65032 320764) "http://blog.moertel.com/posts/2013-06-03-recursion-to-iteration-3.html" "Tom Moertel: Tricks of the trade: Recursion to Iteration, Part 3: Recursive Data Structures" nil "Mon, 03 Jun 2013 00:00:00 +0000" "<div class=\"info byline\">Posted by <span><span>Tom Moertel<span></span></span></span></div>
<div class=\"info\">Posted on <time datetime=\"2013-06-03\" itemprop=\"datePublished\">June  3, 2013</time></div>
<div class=\"tags\">Tags: <span><a href=\"http://blog.moertel.com/tags/programming.html\">programming</a>, <a href=\"http://blog.moertel.com/tags/recursion.html\">recursion</a>, <a href=\"http://blog.moertel.com/tags/iteration.html\">iteration</a>, <a href=\"http://blog.moertel.com/tags/python.html\">python</a>, <a href=\"http://blog.moertel.com/tags/recursion-to-iteration series.html\">recursion-to-iteration series</a>, <a href=\"http://blog.moertel.com/tags/tail calls.html\">tail calls</a>, <a href=\"http://blog.moertel.com/tags/data structures.html\">data structures</a></span></div>
<div>
<p>This is the third article in <a href=\"http://blog.moertel.com/tags/recursion-to-iteration%20series.html\">a series on converting recursive algorithms into iterative algorithms</a>. If any of what follows seems confusing, you may want to read the earlier articles first.</p>
<p>This is an extra article that I hadn’t planned. I’m writing it because in a comment on the previous article a reader asked me to show a less mathematical example and suggested tree traversal. So that’s the subject of this article: We’ll take a binary tree and flatten it into a list, first recursively, then iteratively.</p>
<h3 id=\"the-challenge\">The challenge</h3>
<p>First, let’s define a binary tree to be either empty or given by a node having three parts: (1) a value, (2) a left subtree, and (3) a right subtree, where both of the subtrees are themselves binary trees. In Haskell, we might define it like so:</p>
<pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><span class=\"kw\">data</span> <span class=\"dt\">BinaryTree</span> a <span class=\"fu\">=</span> <span class=\"dt\">Empty</span> <span class=\"fu\">|</span> <span class=\"dt\">Node</span> a (<span class=\"dt\">BinaryTree</span> a) (<span class=\"dt\">BinaryTree</span> a)</code></pre>
<p>In Python, which we’ll use for the rest of this article, we’ll say that <code>None</code> represents an empty tree and that the following class represents a node:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"ch\">import</span> collections
Node = collections.namedtuple(<span class=\"st\">'Node'</span>, <span class=\"st\">'val left right'</span>)
<span class=\"co\"># some sample trees having various node counts</span>
tree0 = <span class=\"ot\">None</span>  <span class=\"co\"># empty tree</span>
tree1 = Node(<span class=\"dv\">5</span>, <span class=\"ot\">None</span>, <span class=\"ot\">None</span>)
tree2 = Node(<span class=\"dv\">7</span>, tree1, <span class=\"ot\">None</span>)
tree3 = Node(<span class=\"dv\">7</span>, tree1, Node(<span class=\"dv\">9</span>, <span class=\"ot\">None</span>, <span class=\"ot\">None</span>))
tree4 = Node(<span class=\"dv\">2</span>, <span class=\"ot\">None</span>, tree3)
tree5 = Node(<span class=\"dv\">2</span>, Node(<span class=\"dv\">1</span>, <span class=\"ot\">None</span>, <span class=\"ot\">None</span>), tree3)</code></pre>
<p>Let us now define a function to flatten a tree using an <a href=\"http://en.wikipedia.org/wiki/Tree_traversal#In-order\">in-order traversal</a>. The recursive definition is absurdly simple, the data type having only two cases to consider:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten(bst):
<span class=\"co\"># empty case</span>
<span class=\"kw\">if</span> bst is <span class=\"ot\">None</span>:
<span class=\"kw\">return</span> []
<span class=\"co\"># node case</span>
<span class=\"kw\">return</span> flatten(bst.left) + [bst.val] + flatten(bst.right)</code></pre>
<p>A few tests to check that it does what we expect:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> check_flattener(f):
<span class=\"kw\">assert</span> f(tree0) == []
<span class=\"kw\">assert</span> f(tree1) == [<span class=\"dv\">5</span>]
<span class=\"kw\">assert</span> f(tree2) == [<span class=\"dv\">5</span>, <span class=\"dv\">7</span>]
<span class=\"kw\">assert</span> f(tree3) == [<span class=\"dv\">5</span>, <span class=\"dv\">7</span>, <span class=\"dv\">9</span>]
<span class=\"kw\">assert</span> f(tree4) == [<span class=\"dv\">2</span>, <span class=\"dv\">5</span>, <span class=\"dv\">7</span>, <span class=\"dv\">9</span>]
<span class=\"kw\">assert</span> f(tree5) == [<span class=\"dv\">1</span>, <span class=\"dv\">2</span>, <span class=\"dv\">5</span>, <span class=\"dv\">7</span>, <span class=\"dv\">9</span>]
<span class=\"kw\">print</span> <span class=\"st\">'ok'</span>
check_flattener(flatten)  <span class=\"co\"># ok</span></code></pre>
<p>Our challenge for today is to convert <code>flatten</code> into an iterative version. Other than a new trick – partial evaluation – the transformation is straightforward, so I’ll move quickly.</p>
<p>Let’s do this!</p>
<h3 id=\"eliminating-the-first-recursive-call\">Eliminating the first recursive call</h3>
<p>First, let’s separate the base case from the incremental work:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(bst):
<span class=\"kw\">return</span> flatten(bst.left) + [bst.val] + flatten(bst.right)
<span class=\"kw\">def</span> flatten(bst):
<span class=\"kw\">if</span> bst is <span class=\"ot\">None</span>:
<span class=\"kw\">return</span> []
<span class=\"kw\">return</span> step(bst)</code></pre>
<p>And let’s break the incremental work into smaller pieces to see what’s going on.</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(bst):
left = flatten(bst.left)
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> left
<span class=\"kw\">def</span> flatten(bst):
<span class=\"kw\">if</span> bst is <span class=\"ot\">None</span>:
<span class=\"kw\">return</span> []
<span class=\"kw\">return</span> step(bst)</code></pre>
<p>Let’s try to get rid of the first recursive call by assuming that somebody has passed us its result via a secret argument <code>left</code>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(bst, left=<span class=\"ot\">None</span>):
<span class=\"kw\">if</span> left is <span class=\"ot\">None</span>:
left = flatten(bst.left)
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> left
<span class=\"kw\">def</span> flatten(bst):
<span class=\"kw\">if</span> bst is <span class=\"ot\">None</span>:
<span class=\"kw\">return</span> []
<span class=\"kw\">return</span> step(bst)</code></pre>
<p>And now we’ll make <code>step</code> return values that parallel its input arguments:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(bst, left=<span class=\"ot\">None</span>):
<span class=\"kw\">if</span> left is <span class=\"ot\">None</span>:
left = flatten(bst.left)
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> bst, left  <span class=\"co\"># <-- add bst</span>
<span class=\"kw\">def</span> flatten(bst):
<span class=\"kw\">if</span> bst is <span class=\"ot\">None</span>:
<span class=\"kw\">return</span> []
<span class=\"kw\">return</span> step(bst)[-<span class=\"dv\">1</span>]  <span class=\"co\"># <-- note [-1]</span></code></pre>
<p>In the first recursive call, the transformation applied to <code>bst</code> is <code>.left</code>, so we want to apply the opposite transformation to <code>bst</code> in the returned values. And what’s the opposite of descending to a node’s left subtree? It’s ascending to the node’s parent. So we want something like this:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"co\"># this code does not work!</span>
<span class=\"kw\">def</span> step(bst, left=<span class=\"ot\">None</span>):
<span class=\"kw\">if</span> left is <span class=\"ot\">None</span>:
left = flatten(bst.left)
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> get_parent(bst), left  <span class=\"co\"># <-- need get_parent</span></code></pre>
<p>But we’re stuck. We can’t define <code>get_parent</code> because our tree data structure doesn’t keep track of parents, only children.</p>
<p>New plan: Maybe we can assume that someone has <em>passed us</em> the node’s parent and go from there?</p>
<p>But this plan hits the same brick wall: If we add a new argument to accept the parent, we must for parallelism add a new return value to emit the transformed parent, which is the parent of the parent. But we can’t compute the parent of the parent because, as before, we have no way of implementing <code>get_parent</code>.</p>
<p>So we do what mathematicians do when their assumptions hit a brick wall: we strengthen our assumption! Now we assume that someone has passed us <em>all of the parents</em>, right up to the tree’s root. And that assumption gives us what we need:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(bst, parents, left=<span class=\"ot\">None</span>):
<span class=\"kw\">if</span> left is <span class=\"ot\">None</span>:
left = flatten(bst.left)
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> parents[-<span class=\"dv\">1</span>], parents[:-<span class=\"dv\">1</span>], left</code></pre>
<p>Note that we’re using the Python stack convention for <code>parents</code>; thus the immediate parent of <code>bst</code> is given by the final element <code>parents[-1]</code>.</p>
<p>As a simplification, we can eliminate the <code>bst</code> argument by considering it the final parent pushed onto the stack:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left=<span class=\"ot\">None</span>):
bst = parents.pop()  <span class=\"co\"># <-- bst = top of parents stack</span>
<span class=\"kw\">if</span> left is <span class=\"ot\">None</span>:
left = flatten(bst.left)
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> parents, left</code></pre>
<p>Now that <code>step</code> requires the <code>parents</code> stack as an argument, the base function must provide it:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten(bst):
<span class=\"kw\">if</span> bst is <span class=\"ot\">None</span>:
<span class=\"kw\">return</span> []
parents = [bst]
<span class=\"kw\">return</span> step(parents)[-<span class=\"dv\">1</span>]</code></pre>
<p>But we still haven’t eliminated the first recursive call. To do that, we’ll need to pass the <code>step</code> function a value for its <code>left</code> argument, which will cause the recursive call to be skipped.</p>
<p>But we only know what that value should be for one case, the base case, when <code>bst</code> is <code>None</code>; then <code>left</code> must be <code>[]</code>. To get to that case from the tree’s root, where <code>bst</code> is definitely not <code>None</code>, we must iteratively replicate the normal recursive calls on <code>bst.left</code> until we hit the leftmost leaf node. And then, to compute the desired result, we must reverse the trip, iterating the <code>step</code> function until we have returned to the tree’s root, where the <code>parents</code> stack must be empty:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten(bst):
<span class=\"co\"># find initial conditions for secret-feature \"left\"</span>
left = []
parents = []
<span class=\"kw\">while</span> bst is not <span class=\"ot\">None</span>:
parents.append(bst)
bst = bst.left
<span class=\"co\"># iterate to compute the result</span>
<span class=\"kw\">while</span> parents:
parents, left = step(parents, left)
<span class=\"kw\">return</span> left</code></pre>
<p>And just like that, one of the recursive calls has been transformed into iteration. We’re halfway to the finish line!</p>
<h3 id=\"eliminating-the-second-recursive-call\">Eliminating the second recursive call</h3>
<p>But we still have to eliminate that final recursive call to <code>flatten</code>, now sequestered in <code>step</code>. Let’s take a closer look at that function after we make its <code>left</code> argument required since it always gets called with a value now:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> parents, left</code></pre>
<p>To get rid of the recursive call to <code>flatten</code>, we’re going to use a new trick: partial evaluation. Basically, we’re going to replace the call to <code>flatten</code> with the function body of <code>flatten</code>, after we rename all its variables to prevent conflicts. So let’s make a copy of <code>flatten</code> and suffix all its variables with <code>1</code>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten1(bst1):
left1 = []
parents1 = []
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents1.append(bst1)
bst1 = bst1.left
<span class=\"kw\">while</span> parents1:
parents1, left1 = step(parents1, left1)
<span class=\"kw\">return</span> left1</code></pre>
<p>And then let’s make its arguments and return values explicit:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\">    (bst1, ) = ARGUMENTS
left1 = []
parents1 = []
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents1.append(bst1)
bst1 = bst1.left
<span class=\"kw\">while</span> parents1:
parents1, left1 = step(parents1, left1)
RETURNS = (left1, )</code></pre>
<p>And then we’ll drop this expansion into <code>step</code>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
<span class=\"co\"># -- begin partial evaluation --</span>
(bst1, ) = (bst.right, )
left1 = []
parents1 = []
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents1.append(bst1)
bst1 = bst1.left
<span class=\"kw\">while</span> parents1:
parents1, left1 = step(parents1, left1)
(right, ) = (left1, )
<span class=\"co\"># -- end partial evaluation --</span>
left.extend(right)
<span class=\"kw\">return</span> parents, left</code></pre>
<p>Now we can eliminate code by fusion across the partial-evaluation boundary.</p>
<p>First up: <code>left1</code>. We can now see that this variable accumulates values that, in the end, get appended to <code>left</code> (via the return variable <code>right</code>). But we can just as well append those values to <code>left</code> directly, eliminating <code>left1</code> within the boundary and the call to <code>left.extend(right)</code> without:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
<span class=\"co\"># -- begin partial evaluation --</span>
(bst1, ) = (bst.right, )
<span class=\"co\"># left1 = []  # <-- eliminate and use left instead</span>
parents1 = []
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents1.append(bst1)
bst1 = bst1.left
<span class=\"kw\">while</span> parents1:
parents1, left = step(parents1, left)
<span class=\"co\"># (right, ) = (left, )  # <-- eliminated</span>
<span class=\"co\"># -- end partial evaluation --</span>
<span class=\"co\"># left.extend(right)  # <-- eliminated</span>
<span class=\"kw\">return</span> parents, left</code></pre>
<p>For this next fusion, we’re going to need to recall our base function to get the necessary outside scope:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
<span class=\"co\"># -- begin partial evaluation --</span>
(bst1, ) = (bst.right, )
parents1 = []
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents1.append(bst1)
bst1 = bst1.left
<span class=\"kw\">while</span> parents1:
parents1, left = step(parents1, left)
<span class=\"co\"># -- end partial evaluation --</span>
<span class=\"kw\">return</span> parents, left
<span class=\"kw\">def</span> flatten(bst):
left = []
parents = []
<span class=\"kw\">while</span> bst is not <span class=\"ot\">None</span>:
parents.append(bst)
bst = bst.left
<span class=\"kw\">while</span> parents:
parents, left = step(parents, left)
<span class=\"kw\">return</span> left</code></pre>
<p>When <code>flatten</code> calls <code>step</code> and the code within the partially evaluated region executes, it builds up a stack of nodes <code>parents1</code> and then calls <code>step</code> iteratively to pop values off of that stack and process them. When it’s finished, control returns to <code>step</code> proper, which then returns to its caller, <code>flatten</code>, with the values (<code>parents</code>, <code>left</code>). But look at what <code>flatten</code> then does with <code>parents</code>: it calls <code>step</code> iteratively to pop values off of that stack and process them in exactly the same way.</p>
<p>So we can eliminate the <code>while</code> loop in <code>step</code> – and the recursive call! – by returning not <code>parents</code> but <code>parents + parents1</code>, which will make the <code>while</code> loop in <code>flatten</code> do the exact same work.</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
<span class=\"co\"># -- begin partial evaluation --</span>
(bst1, ) = (bst.right, )
parents1 = []
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents1.append(bst1)
bst1 = bst1.left
<span class=\"co\"># while parents1:                            # <-- eliminated</span>
<span class=\"co\">#     parents1, left = step(parents1, left)  #</span>
<span class=\"co\"># -- end partial evaluation --</span>
<span class=\"kw\">return</span> parents + parents1, left  <span class=\"co\"># parents -> parents + parents1</span></code></pre>
<p>And then we can eliminate <code>parents1</code> completely by taking the values we would have appended to it and appending them directly to <code>parents</code>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
<span class=\"co\"># -- begin partial evaluation --</span>
(bst1, ) = (bst.right, )
<span class=\"co\"># parents1 = []  # <-- eliminated</span>
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents.append(bst1)  <span class=\"co\"># parents1 -> parents</span>
bst1 = bst1.left
<span class=\"co\"># -- end partial evaluation --</span>
<span class=\"kw\">return</span> parents, left  <span class=\"co\"># parents + parents1 -> parents</span></code></pre>
<p>And now, once we remove our partial-evaluation scaffolding, our <code>step</code> function is looking simple again:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
bst1 = bst.right
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents.append(bst1)
bst1 = bst1.left
<span class=\"kw\">return</span> parents, left</code></pre>
<p>For the final leg of our journey – simplification – let’s inline the <code>step</code> logic back into the base function:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten(bst):
left = []
parents = []
<span class=\"kw\">while</span> bst is not <span class=\"ot\">None</span>:
parents.append(bst)
bst = bst.left
<span class=\"kw\">while</span> parents:
parents, left = parents, left
bst = parents.pop()
left.append(bst.val)
bst1 = bst.right
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents.append(bst1)
bst1 = bst1.left
parents, left = parents, left
<span class=\"kw\">return</span> left</code></pre>
<p>Let’s eliminate the trivial argument-binding and return-value assignments:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten(bst):
left = []
parents = []
<span class=\"kw\">while</span> bst is not <span class=\"ot\">None</span>:
parents.append(bst)
bst = bst.left
<span class=\"kw\">while</span> parents:
<span class=\"co\"># parents, left = parents, left  # = no-op</span>
bst = parents.pop()
left.append(bst.val)
bst1 = bst.right
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents.append(bst1)
bst1 = bst1.left
<span class=\"co\"># parents, left = parents, left  # = no-op</span>
<span class=\"kw\">return</span> left</code></pre>
<p>And, finally, factor out the duplicated <code>while</code> loop into a local function:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten(bst):
left = []
parents = []
<span class=\"kw\">def</span> descend_left(bst):
<span class=\"kw\">while</span> bst is not <span class=\"ot\">None</span>:
parents.append(bst)
bst = bst.left
descend_left(bst)
<span class=\"kw\">while</span> parents:
bst = parents.pop()
left.append(bst.val)
descend_left(bst.right)
<span class=\"kw\">return</span> left</code></pre>
<p>And that’s it! We now have a tight, efficient, and iterative version of our original function. Further, the code is close to idiomatic.</p>
<p>That’s it for this time. If you have any questions or comments, just hit me at <a href=\"https://twitter.com/tmoertel\">@tmoertel</a> or use the comment form below.</p>
<p>Thanks for reading!</p>
</div>" nil nil "e430c69f5361c2bfd98d3a7979ea7cdf") (73 (20935 65032 307805) "http://blog.moertel.com/posts/2013-05-26-python-lazy-merge.html" "Tom Moertel: Lazy merging in Python using streams" nil "Sun, 26 May 2013 00:00:00 +0000" "<div class=\"info byline\">Posted by <span><span>Tom Moertel<span></span></span></span></div>
<div class=\"info\">Posted on <time datetime=\"2013-05-26\" itemprop=\"datePublished\">May 26, 2013</time></div>
<div class=\"tags\">Tags: <span><a href=\"http://blog.moertel.com/tags/programming.html\">programming</a>, <a href=\"http://blog.moertel.com/tags/python.html\">python</a>, <a href=\"http://blog.moertel.com/tags/iterators.html\">iterators</a>, <a href=\"http://blog.moertel.com/tags/streams.html\">streams</a>, <a href=\"http://blog.moertel.com/tags/SICP.html\">SICP</a>, <a href=\"http://blog.moertel.com/tags/functional programming.html\">functional programming</a></span></div>
<div>
<p>Recently while solving a programming puzzle in Python, I needed to merge a series of <em>N</em> iterators, each yielding values in sorted order, into a single iterator over the sorted values. The trick is that, when asked for a value from the merged series, to determine which iterator should contribute that value, you must extract all <em>N</em> iterators’ next values. And then, of course, you can emit only one. So what do you do with the remaining <em>N</em> – 1 values you’ve extracted?</p>
<p>Rather than think about that question too hard, I just converted the iterators into an equivalent form in which the next value was always exposed and hence available for making decisions <em>before</em> extraction. This form is basically the <a href=\"http://mitpress.mit.edu/sicp/full-text/sicp/book/node69.html\"><em>stream</em> of SICP fame</a>.</p>
<p>The idea is to convert each <a href=\"http://www.python.org/dev/peps/pep-0234/\">Python iterator</a> into either <code>None</code> (representing an empty stream) or a pair containing the iterator’s next value and the iterator itself:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> iterator_to_stream(iterator):
<span class=\"co\">\"\"\"Convert an iterator into a stream (None if the iterator is empty).\"\"\"</span>
<span class=\"kw\">try</span>:
<span class=\"kw\">return</span> iterator.<span class=\"dt\">next</span>(), iterator
<span class=\"kw\">except</span> <span class=\"ot\">StopIteration</span>:
<span class=\"kw\">return</span> <span class=\"ot\">None</span></code></pre>
<p>Then to extract values from the stream, you just apply <code>stream_next</code> to it, and it will hand you back the next value and the updated state of the stream:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> stream_next(stream):
<span class=\"co\">\"\"\"Get (next_value, next_stream) from a stream.\"\"\"</span>
val, iterator = stream
<span class=\"kw\">return</span> val, iterator_to_stream(iterator)</code></pre>
<p>Since streams expose their next value, they can be ordered by that value. And for my task that was the property that made all the difference:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"ch\">import</span> heapq
<span class=\"kw\">def</span> merge(iterators):
<span class=\"co\">\"\"\"Make a lazy sorted iterator that merges lazy sorted iterators.\"\"\"</span>
streams = <span class=\"dt\">map</span>(iterator_to_stream, <span class=\"dt\">map</span>(<span class=\"dt\">iter</span>, iterators))
heapq.heapify(streams)
<span class=\"kw\">while</span> streams:
stream = heapq.heappop(streams)
<span class=\"kw\">if</span> stream is not <span class=\"ot\">None</span>:
val, stream = stream_next(stream)
heapq.heappush(streams, stream)
<span class=\"kw\">yield</span> val</code></pre>
<p>An example use:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\">>>> xs = merge([<span class=\"dt\">xrange</span>(<span class=\"dv\">3</span>), <span class=\"dt\">xrange</span>(<span class=\"dv\">2</span>, <span class=\"dv\">9</span>), <span class=\"dt\">xrange</span>(<span class=\"dv\">5</span>)])
>>> xs
<generator <span class=\"dt\">object</span> merge at <span class=\"bn\">0x7fea07c9d320</span>>
>>> <span class=\"dt\">list</span>(xs)
[<span class=\"dv\">0</span>, <span class=\"dv\">0</span>, <span class=\"dv\">1</span>, <span class=\"dv\">1</span>, <span class=\"dv\">2</span>, <span class=\"dv\">2</span>, <span class=\"dv\">2</span>, <span class=\"dv\">3</span>, <span class=\"dv\">3</span>, <span class=\"dv\">4</span>, <span class=\"dv\">4</span>, <span class=\"dv\">5</span>, <span class=\"dv\">6</span>, <span class=\"dv\">7</span>, <span class=\"dv\">8</span>]</code></pre>
</div>" nil nil "1db31a35ebfdd9189112b89fb68fe903") (72 (20935 65032 305863) "http://twanvl.nl/blog/agda/sorting" "Twan van Laarhoven: The complete correctness of sorting" nil "Thu, 23 May 2013 12:43:33 +0000" "<p>A while ago I set out to prove the correctness of <a href=\"http://en.wikipedia.org/wiki/Merge_sort\">merge sort</a> in Agda.
Of course this has been done before.
But <a href=\"http://mazzo.li/posts/AgdaSort.html\">most</a> <a href=\"http://www.iis.sinica.edu.tw/~scm/2007/agda-exercise-proving-that-mergesort-returns-ordered-list/\">proofs</a> you find are far from complete.
All they prove is a lemma such as
</p><pre class=\"agda\"><span class=\"varid\">is-sorted</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> (<span class=\"varid\">xs</span> <span class=\"varop\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">IsSortedList</span> (<span class=\"varid\">sort</span> <span class=\"varid\">xs</span>)
</pre><p>Maybe even restricted to lists of natural numbers.
While it is nice that a sort function indeed produces a sorted output, that is only half of the story.
Consider this function:
</p><pre class=\"agda\"><span class=\"varid\">cheat-sort</span> <span class=\"varop\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span>
<span class=\"varid\">cheat-sort</span> <span class=\"keyglyph\">_</span> <span class=\"keyglyph\">=</span> <span class=\"varop\">[]</span>
</pre><p>Clearly the empty list is sorted. So we are done.
What is missing is the second half of correctness of sorting: that the output is a permutation of the input.
You want something like:
</p><pre class=\"agda\"><span class=\"varid\">sort</span> <span class=\"varop\">:</span> (<span class=\"varid\">xs</span> <span class=\"varop\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Sorted'</span> <span class=\"conid\">A</span>
<span class=\"keyword\">record</span> <span class=\"conid\">Sorted'</span> (<span class=\"varid\">xs</span> <span class=\"varop\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span>) <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"keyword\">where</span>
<span class=\"keyword\">field</span>
<span class=\"varid\">ys</span>       <span class=\"varop\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span>
<span class=\"varid\">isSorted</span> <span class=\"varop\">:</span> <span class=\"conid\">IsSorted</span> <span class=\"varid\">ys</span>
<span class=\"varid\">isPerm</span>   <span class=\"varop\">:</span> <span class=\"conid\">IsPermutation</span> <span class=\"varid\">ys</span> <span class=\"varid\">xs</span>
</pre><p>While I was at it, I decided to add the third half of correctness: a bound on the runtime or computational complexity.
In the end I was able to define:
</p><pre class=\"agda\"><span class=\"varid\">insertion-sort</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> (<span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span>) <span class=\"varop\">in-time</span> (<span class=\"varid\">length</span> <span class=\"varid\">xs</span> <span class=\"varop\">*</span> <span class=\"varid\">length</span> <span class=\"varid\">xs</span>)
<span class=\"varid\">selection-sort</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> (<span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span>) <span class=\"varop\">in-time</span> (<span class=\"varid\">length</span> <span class=\"varid\">xs</span> <span class=\"varop\">*</span> <span class=\"varid\">length</span> <span class=\"varid\">xs</span>)
<span class=\"varid\">merge-sort</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> (<span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span>) <span class=\"varop\">in-time</span> (<span class=\"varid\">length</span> <span class=\"varid\">xs</span> <span class=\"varop\">*</span> <span class=\"varop\">⌈log₂</span> <span class=\"varid\">length</span> <span class=\"varid\">xs</span> <span class=\"varop\">⌉</span>)
</pre><p>This was not as easy as I would have hoped.
In this post I will not bore you with all the details, I'll just go over some of the highlights. The <a href=\"https://gist.github.com/twanvl/5635740\">full code is on github</a>.
</p><h2><a name=\"what-it-means-to-be-sorted\"></a>What it means to be sorted </h2>
<p>There are roughly two ways to define sorted lists that I know of:
</p><ol><li> Parametrize the sorted list by a lower bound on the values it contains. For a cons cell the head should be smaller than the lower bound, and the tail should be larger than the head. This requires the type to have a smallest element, but you can adjoin -∞ with a new datatype.</li>
<li> Parametrize the sorted list by a list of all values in it. For a cons cell require that the head is smaller than all the values in the tail.</li>
</ol><p>Since I already need to parametrize by all values in the list to show that the sorted list contains a permutation of them, I went with the second approach:
</p><pre class=\"agda\"><span class=\"comment\">-- A proof that x is less than all values in xs</span>
<span class=\"keyword\">data</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≤*</span><span class=\"keyglyph\">_</span> (<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"varop\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"keyword\">where</span>
<span class=\"varop\">[]</span>  <span class=\"varop\">:</span> <span class=\"varid\">x</span> <span class=\"varop\">≤*</span> <span class=\"varop\">[]</span>
<span class=\"keyglyph\">_</span>∷<span class=\"keyglyph\">_</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">y</span> <span class=\"varid\">ys</span>} <span class=\"keyglyph\">→</span> (<span class=\"varid\">x</span> <span class=\"varop\">≤</span> <span class=\"varid\">y</span>) <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≤*</span> <span class=\"varid\">ys</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≤*</span> (<span class=\"varid\">y</span> ∷ <span class=\"varid\">ys</span>)
<div class=\"empty-line\"></div>
<span class=\"comment\">-- Proof that a list is sorted</span>
<span class=\"keyword\">data</span> <span class=\"conid\">IsSorted</span> <span class=\"varop\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"keyword\">where</span>
<span class=\"varop\">[]</span>  <span class=\"varop\">:</span> <span class=\"conid\">IsSorted</span> <span class=\"varop\">[]</span>
<span class=\"keyglyph\">_</span>∷<span class=\"keyglyph\">_</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">xs</span>} <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≤*</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">IsSorted</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">IsSorted</span> (<span class=\"varid\">x</span> ∷ <span class=\"varid\">xs</span>)
</pre><h2><a name=\"what-it-means-to-be-a-permutation\"></a>What it means to be a permutation </h2>
<p>To show that one list is a permutation of another I again used two data types.
Suppose that we know that <tt><span class=\"varid\">xs</span></tt> is a permutation of <tt><span class=\"varid\">ys</span></tt>. Then when is <tt class=\"complex\"><span class=\"varid\">x</span> ∷ <span class=\"varid\">xs</span></tt> a permutation of some list <tt><span class=\"varid\">xys</span></tt>? Well, we can permute <tt><span class=\"varid\">xs</span></tt> to <tt><span class=\"varid\">ys</span></tt>, and insert <tt><span class=\"varid\">x</span></tt> anywhere. I used <tt class=\"complex\"><span class=\"varop\">◂</span></tt> to denote this insertion,
</p><pre class=\"agda\"><span class=\"comment\">-- x ◂ xs ≡ xys means that xys is equal to xs with x inserted somewhere</span>
<span class=\"keyword\">data</span> <span class=\"keyglyph\">_</span><span class=\"varop\">◂</span><span class=\"keyglyph\">_</span><span class=\"varop\">≡</span><span class=\"keyglyph\">_</span> (<span class=\"varid\">x</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"varop\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span> <span class=\"keyword\">where</span>
<span class=\"varid\">here</span>  <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">xs</span>}           <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">◂</span> <span class=\"varid\">xs</span> <span class=\"varop\">≡</span> (<span class=\"varid\">x</span> ∷ <span class=\"varid\">xs</span>)
<span class=\"varid\">there</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">y</span>} {<span class=\"varid\">xs</span>} {<span class=\"varid\">xys</span>} <span class=\"keyglyph\">→</span> (<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"varid\">x</span> <span class=\"varop\">◂</span> <span class=\"varid\">xs</span> <span class=\"varop\">≡</span> <span class=\"varid\">xys</span>) <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">◂</span> (<span class=\"varid\">y</span> ∷ <span class=\"varid\">xs</span>) <span class=\"varop\">≡</span> (<span class=\"varid\">y</span> ∷ <span class=\"varid\">xys</span>)
</pre><pre class=\"agda\"><span class=\"comment\">-- Proof that a list is a permutation of another one</span>
<span class=\"keyword\">data</span> <span class=\"conid\">IsPermutation</span> <span class=\"varop\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span> <span class=\"keyword\">where</span>
<span class=\"varop\">[]</span>  <span class=\"varop\">:</span> <span class=\"conid\">IsPermutation</span> <span class=\"varop\">[]</span> <span class=\"varop\">[]</span>
<span class=\"keyglyph\">_</span>∷<span class=\"keyglyph\">_</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">xs</span> <span class=\"varid\">ys</span> <span class=\"varid\">xys</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"varid\">x</span> <span class=\"varop\">◂</span> <span class=\"varid\">ys</span> <span class=\"varop\">≡</span> <span class=\"varid\">xys</span>)
<span class=\"keyglyph\">→</span> (<span class=\"varid\">ps</span> <span class=\"varop\">:</span> <span class=\"conid\">IsPermutation</span> <span class=\"varid\">xs</span> <span class=\"varid\">ys</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">IsPermutation</span> (<span class=\"varid\">x</span> ∷ <span class=\"varid\">xs</span>) <span class=\"varid\">xys</span>
</pre><p>Now the <tt><span class=\"conid\">Sorted</span></tt> data type has three components: the sorted list, a proof that it is sorted, and a proof that it is a permutation of the input. These parts are either all <tt class=\"complex\"><span class=\"varop\">[]</span></tt>, or they are all <tt class=\"complex\"><span class=\"keyglyph\">_</span>∷<span class=\"keyglyph\">_</span></tt>.
It turns out to be much nicer to combine the parts together,
</p><pre class=\"agda\"><span class=\"comment\">-- Sorted permutations of a list</span>
<span class=\"keyword\">data</span> <span class=\"conid\">Sorted</span> <span class=\"varop\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span>  <span class=\"keyword\">where</span>
<span class=\"varop\">[]</span>   <span class=\"varop\">:</span> <span class=\"conid\">Sorted</span> <span class=\"varop\">[]</span>
<span class=\"varid\">cons</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> {<span class=\"varid\">xs</span> <span class=\"varid\">xxs</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">p</span> <span class=\"varop\">:</span> <span class=\"varid\">x</span> <span class=\"varop\">◂</span> <span class=\"varid\">xs</span> <span class=\"varop\">≡</span> <span class=\"varid\">xxs</span>) <span class=\"comment\">-- inserting x somewhere into xs gives xxs</span>
<span class=\"keyglyph\">→</span> (<span class=\"varid\">least</span> <span class=\"varop\">:</span> <span class=\"varid\">x</span> <span class=\"varop\">≤*</span> <span class=\"varid\">xs</span>)  <span class=\"comment\">-- x is the smallest element of the list</span>
<span class=\"keyglyph\">→</span> (<span class=\"varid\">rest</span> <span class=\"varop\">:</span> <span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span>) <span class=\"comment\">-- and we have also sorted xs</span>
<span class=\"keyglyph\">→</span> <span class=\"conid\">Sorted</span> <span class=\"varid\">xxs</span>
</pre><p>Of course <tt><span class=\"conid\">Sorted</span></tt> and <tt class=\"complex\"><span class=\"conid\">Sorted'</span></tt> are equivalent.
</p><p>As an aside, these are all the ingredients necessary for proving
</p><pre class=\"agda\"><span class=\"varid\">sorted-unique</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">xs</span>} <span class=\"keyglyph\">→</span> (<span class=\"varid\">ys</span> <span class=\"varid\">zs</span> <span class=\"varop\">:</span> <span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span>)
<span class=\"keyglyph\">→</span> <span class=\"varid\">sorted-to-List</span> <span class=\"varid\">ys</span> <span class=\"varop\">≡</span> <span class=\"varid\">sorted-to-List</span> <span class=\"varid\">zs</span>
</pre><h2><a name=\"a-monad-for-keeping-track-of-the-runtime\"></a>A monad for keeping track of the runtime </h2>
<p>To be able to reason about the runtime, as measured in the number of comparisons performed, I decided to use a monad. The type is simply
</p><pre class=\"agda\"><span class=\"keyword\">data</span> <span class=\"keyglyph\">_</span><span class=\"varop\">in-time</span><span class=\"keyglyph\">_</span> (<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span>) (<span class=\"varid\">n</span> <span class=\"varop\">:</span> <span class=\"conop\">ℕ</span>) <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span> <span class=\"keyword\">where</span>
<span class=\"varid\">box</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">C</span> <span class=\"conid\">A</span> <span class=\"varid\">n</span>
</pre><p>the constructor <tt><span class=\"varid\">box</span></tt> is private, and it can only be accessed through the standard monad operations,
</p><pre class=\"agda\"><span class=\"varid\">return</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"conid\">A</span> <span class=\"varid\">n</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"varop\">in-time</span> <span class=\"varid\">n</span>
<div class=\"empty-line\"></div>
<span class=\"keyglyph\">_</span><span class=\"varop\">>>=</span><span class=\"keyglyph\">_</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"conid\">A</span> <span class=\"conid\">B</span>} {<span class=\"varid\">m</span> <span class=\"varid\">n</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"varop\">in-time</span> <span class=\"varid\">n</span> <span class=\"keyglyph\">→</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varop\">in-time</span> <span class=\"varid\">m</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varop\">in-time</span> (<span class=\"varid\">n</span> <span class=\"varop\">+</span> <span class=\"varid\">m</span>)
</pre><p>Then the sorting functions will be parametrized by a function that for some partial order decides between <tt class=\"complex\"><span class=\"varid\">x</span> <span class=\"varop\">≤</span> <span class=\"varid\">y</span></tt> and <tt class=\"complex\"><span class=\"varid\">y</span> <span class=\"varop\">≤</span> <span class=\"varid\">x</span></tt> in one step, using the monad we defined above:
</p><pre class=\"agda\"><span class=\"keyword\">module</span> <span class=\"conid\">Sorting</span>
{<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span>} {<span class=\"varid\">l</span>} {<span class=\"keyglyph\">_</span><span class=\"varop\">≤</span><span class=\"keyglyph\">_</span> <span class=\"varop\">:</span> <span class=\"conid\">Rel</span> <span class=\"conid\">A</span> <span class=\"varid\">l</span>}
(<span class=\"varid\">isPartialOrder</span> <span class=\"varop\">:</span> <span class=\"conid\">IsPartialOrder</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≡</span><span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≤</span><span class=\"keyglyph\">_</span>)
(<span class=\"keyglyph\">_</span><span class=\"varop\">≤?</span><span class=\"keyglyph\">_</span> <span class=\"varop\">:</span> (<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> (<span class=\"varid\">x</span> <span class=\"varop\">≤</span> <span class=\"varid\">y</span> <span class=\"conop\">⊎</span> <span class=\"varid\">y</span> <span class=\"varop\">≤</span> <span class=\"varid\">x</span>) <span class=\"varop\">in-time</span> <span class=\"num\">1</span>)
<span class=\"keyword\">where</span> <span class=\"varop\">...</span>
</pre><p>Note that I specify that <tt class=\"complex\"><span class=\"keyglyph\">_</span><span class=\"varop\">≤</span><span class=\"keyglyph\">_</span></tt> is a <em>partial</em> order,
because the Agda standard library definition of a total order actually comes with a function
</p><pre class=\"agda\"><span class=\"varid\">total</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> (<span class=\"varid\">x</span> <span class=\"varop\">≤</span> <span class=\"varid\">y</span>) <span class=\"conop\">⊎</span> (<span class=\"varid\">y</span> <span class=\"varop\">≤</span> <span class=\"varid\">x</span>)
</pre><p>which would defeat the whole prupose of <tt class=\"complex\"><span class=\"keyglyph\">_</span><span class=\"varop\">≤?</span><span class=\"keyglyph\">_</span></tt>.
In fact, the standard <tt><span class=\"conid\">TotalOrder</span></tt>s are decidable up to base equality, and if the base equality is propositional equality, then they are decidable. I.e.
</p><pre class=\"agda\"><span class=\"varid\">total-decidable</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">r</span>} {<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} <span class=\"keyglyph\">→</span> (<span class=\"keyglyph\">_</span><span class=\"varop\">≤</span><span class=\"keyglyph\">_</span> <span class=\"varop\">:</span> <span class=\"conid\">Rel</span> <span class=\"conid\">A</span> <span class=\"varid\">r</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">IsTotalOrder</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≡</span><span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≤</span><span class=\"keyglyph\">_</span>
<span class=\"keyglyph\">→</span> <span class=\"conid\">IsDecTotalOrder</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≡</span><span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≤</span><span class=\"keyglyph\">_</span>
</pre><p>See the source for the proof of this side theorem. It relies on a trick to show that <tt class=\"complex\"><span class=\"varid\">total</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span></tt> can only be different from <tt class=\"complex\"><span class=\"varid\">total</span> <span class=\"varid\">y</span> <span class=\"varid\">x</span></tt> if <tt class=\"complex\"><span class=\"varid\">x</span> <span class=\"varop\">≢</span> <span class=\"varid\">y</span></tt>. Which holds for propositional equality, but not in general.
</p><h2><a name=\"logarithms\"></a>Logarithms </h2>
<p>To be able to complete the specification of merge sort, we still need to add some missing functions on natural numbers. In particular, we need a logarithm.
This logarithm turns out to be surprisingly tricky to define in Agda.
Why? Because the usual definition uses non-structural recursion. In haskell you would write
</p><pre class=\"haskell\"><span class=\"comment\">-- @log n@ calculates ⌊log₂ (n+1)⌋</span>
<span class=\"varid\">log</span> <span class=\"num\">0</span> <span class=\"keyglyph\">=</span> <span class=\"num\">0</span>
<span class=\"varid\">log</span> <span class=\"varid\">n</span> <span class=\"keyglyph\">=</span> <span class=\"num\">1</span> <span class=\"varop\">+</span> <span class=\"varid\">log</span> (<span class=\"varid\">n</span> `<span class=\"varid\">div`</span> <span class=\"num\">2</span>)
</pre><p>But Agda is not able to see that <tt class=\"complex\"><span class=\"varid\">n</span> `<span class=\"varid\">div`</span> <span class=\"num\">2</span></tt> (or in agda notation, <tt class=\"complex\"><span class=\"varop\">⌊</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌋</span></tt>) is smaller than <tt><span class=\"varid\">n</span></tt>.
There are two approaches to circumvent this problem:
</p><ol><li> Use a different algorithm: Convert <tt><span class=\"varid\">n</span></tt> to a binary representation, and count the number of digits.</li>
<li> Use well-founded recursion, manually supplying a proof that <tt class=\"complex\"><span class=\"varop\">⌊</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌋</span> <span class=\"varop\"><</span> <span class=\"varid\">n</span></tt>.</li>
</ol><p>I went with the second option, because I will also be using the same shape of recursion inside merge sort itself.
The standard way to use well-founded recursion is through the function <tt class=\"complex\"><span class=\"keyglyph\"><-</span><span class=\"varid\">rec</span></tt>, which works a bit like <tt><span class=\"varid\">fix</span></tt> in haskell, except that you need to pass in a proof that the argument is smaller. The code would look like this:
</p><pre class=\"agda\"><span class=\"varid\">log</span> <span class=\"keyglyph\">=</span> <span class=\"keyglyph\"><-</span><span class=\"varid\">rec</span> <span class=\"varid\">log'</span>
<span class=\"keyword\">where</span>
<span class=\"varid\">log′</span> <span class=\"varid\">self</span> <span class=\"num\">0</span> <span class=\"keyglyph\">=</span> <span class=\"num\">0</span>
<span class=\"varid\">log′</span> <span class=\"varid\">self</span> (<span class=\"varid\">suc</span> <span class=\"varid\">n</span>) <span class=\"keyglyph\">=</span> <span class=\"num\">1</span> <span class=\"varop\">+</span> <span class=\"varid\">self</span> <span class=\"varop\">⌊</span> <span class=\"varid\">suc</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌋</span> (<span class=\"comment\">{-proof ommitted-}</span>)
</pre><p>But this leads to a problem as soon as you want to prove a property of logarithms. For example, you would think that <tt class=\"complex\"><span class=\"varid\">log</span> (<span class=\"varid\">suc</span> <span class=\"varid\">n</span>) <span class=\"varop\">≡</span> <span class=\"num\">1</span> <span class=\"varop\">+</span> (<span class=\"varid\">log</span> <span class=\"varop\">⌊</span> <span class=\"varid\">suc</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌋</span>)</tt>. But that is not definitionally true, since one <tt class=\"complex\"><span class=\"keyglyph\"><-</span><span class=\"varid\">rec</span></tt> is not like another. I found that the well-founded recursion library was in general a pain to work with, especially because it uses so many type synonyms. My solution was to use the slightly lower level accessibility relation. A value of type <tt class=\"complex\"><span class=\"conid\">Acc</span> <span class=\"keyglyph\">_</span><span class=\"varop\"><′</span><span class=\"keyglyph\">_</span> <span class=\"varid\">n</span></tt> allows you to do recursion with any <tt class=\"complex\"><span class=\"varid\">m</span> <span class=\"varop\"><′</span> <span class=\"varid\">n</span></tt>. Now I can use actual recursion:
</p><pre class=\"agda\"><span class=\"varid\">log-acc</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">n</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Acc</span> <span class=\"keyglyph\">_</span><span class=\"varop\"><′</span><span class=\"keyglyph\">_</span> <span class=\"varid\">n</span> <span class=\"keyglyph\">→</span> <span class=\"conop\">ℕ</span>
<span class=\"varid\">log-acc</span> <span class=\"num\">0</span> <span class=\"keyglyph\">_</span> <span class=\"keyglyph\">=</span> <span class=\"num\">0</span>
<span class=\"varid\">log-acc</span> (<span class=\"varid\">suc</span> <span class=\"varid\">n</span>) (<span class=\"varid\">acc</span> <span class=\"varid\">more</span>) <span class=\"keyglyph\">=</span> <span class=\"num\">1</span> <span class=\"varop\">+</span> <span class=\"varid\">log-acc</span> <span class=\"varop\">⌊</span> <span class=\"varid\">suc</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌋</span> (<span class=\"varid\">more</span> <span class=\"keyglyph\">_</span> <span class=\"comment\">{-proof ommitted-}</span>)
</pre><p>And use the well-foundedness of ℕ to get an <tt><span class=\"conid\">Acc</span></tt> for any number:
</p><pre class=\"agda\"><span class=\"varid\">log</span> <span class=\"varop\">:</span> <span class=\"conop\">ℕ</span> <span class=\"keyglyph\">→</span> <span class=\"conop\">ℕ</span>
<span class=\"varid\">log</span> <span class=\"varid\">n</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">log-acc</span> <span class=\"varid\">n</span> (<span class=\"keyglyph\"><-</span><span class=\"varid\">well-founded</span> <span class=\"varid\">n</span>)
<div class=\"empty-line\"></div>
<span class=\"varop\">⌈log₂</span><span class=\"keyglyph\">_</span><span class=\"varop\">⌉</span> <span class=\"varop\">:</span> <span class=\"conop\">ℕ</span> <span class=\"keyglyph\">→</span> <span class=\"conop\">ℕ</span>
<span class=\"varop\">⌈log₂</span> <span class=\"varid\">n</span> <span class=\"varop\">⌉</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">log</span> (<span class=\"varid\">pred</span> <span class=\"varid\">n</span>)
</pre><p>There is still a snag when proving properties of <tt><span class=\"varid\">log</span></tt> or <tt class=\"complex\"><span class=\"varid\">log-acc</span></tt>, namely that you need to prove that <tt class=\"complex\">(<span class=\"varid\">more</span> <span class=\"varid\">n</span> <span class=\"varop\">...</span>) <span class=\"varop\">≡</span> <span class=\"keyglyph\"><-</span><span class=\"varid\">well-founded</span> <span class=\"varid\">n</span></tt>. But the accessibility relation doesn't actually matter for the computation, so I decided to just postulate
</p><pre class=\"agda\"><span class=\"keyword\">postulate</span> <span class=\"varid\">acc-irrelevance</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">n</span> <span class=\"varop\">:</span> <span class=\"conop\">ℕ</span>} <span class=\"keyglyph\">→</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span> <span class=\"varop\">:</span> <span class=\"conid\">Acc</span> <span class=\"keyglyph\">_</span><span class=\"varop\"><′</span><span class=\"keyglyph\">_</span> <span class=\"varid\">n</span>} <span class=\"keyglyph\">→</span> <span class=\"varid\">a</span> <span class=\"varop\">≡</span> <span class=\"varid\">b</span>
<span class=\"comment\">-- this also follows from function extensionality</span>
</pre><p>If anyone knows a better way to prove properties of functions defined with well-founded recursion, I am open to suggestions.
</p><h2><a name=\"vectors-versus-lists\"></a>Vectors versus lists </h2>
<p>While working on the proofs I had to choose: Do I use fixed length <tt><span class=\"conid\">Vec</span></tt>s or variable length <tt><span class=\"conid\">List</span></tt>s? Both have their pros and cons.
</p><p>On the one hand, the sorting functions with vectors look a bit nicer, because we can use <tt><span class=\"varid\">n</span></tt> instead of <tt class=\"complex\"><span class=\"varid\">length</span> <span class=\"varid\">xs</span></tt>:
</p><pre class=\"agda\"><span class=\"varid\">merge-sort</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">n</span>} (<span class=\"varid\">xs</span> <span class=\"varop\">:</span> <span class=\"conid\">Vec</span> <span class=\"conid\">A</span> <span class=\"varid\">n</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span> <span class=\"varop\">in-time</span> (<span class=\"varid\">n</span> <span class=\"varop\">*</span> <span class=\"varop\">⌈log₂</span> <span class=\"varid\">n</span> <span class=\"varop\">⌉</span>)
</pre><p>Additionally, with lists we can only do recursion on the input list, with vectors we can do recursion on the length of the list. The former works fine for insertion sort, where in each step you do something with the head element of the list; but it fails for selection and merge sort.
</p><p>On the other hand, with vectors you sometimes can't even <em>state</em> the property that one vector is equal to another.
For the term <tt class=\"complex\"><span class=\"varid\">xs</span> <span class=\"varop\">≡</span> <span class=\"varid\">ys</span> <span class=\"varop\">++</span> <span class=\"varid\">zs</span></tt> to be well-typed, <tt><span class=\"varid\">xs</span></tt> must have the type <tt class=\"complex\"><span class=\"conid\">Vec</span> <span class=\"conid\">A</span> (<span class=\"varid\">m</span> <span class=\"varop\">+</span> <span class=\"varid\">n</span>)</tt>.
</p><p>I went back and forth a couple of times between vectors and lists.
In the end I settled for using vectors only when needed, and specifying properties in terms of lists.
For example the split function for merge sort has the type
</p><pre class=\"agda\"><span class=\"varid\">splitHalf</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">n</span>} <span class=\"keyglyph\">→</span> (<span class=\"varid\">xs</span> <span class=\"varop\">:</span> <span class=\"conid\">Vec</span> <span class=\"conid\">A</span> <span class=\"varid\">n</span>)
<span class=\"keyglyph\">→</span> ∃₂ <span class=\"keyglyph\">\\</span>(<span class=\"varid\">ys</span> <span class=\"varop\">:</span> <span class=\"conid\">Vec</span> <span class=\"conid\">A</span> <span class=\"varop\">⌈</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌉</span>) (<span class=\"varid\">zs</span> <span class=\"varop\">:</span> <span class=\"conid\">Vec</span> <span class=\"conid\">A</span> <span class=\"varop\">⌊</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌋</span>)
<span class=\"keyglyph\">→</span> <span class=\"varid\">toList</span> <span class=\"varid\">ys</span> <span class=\"varop\">++</span> <span class=\"varid\">toList</span> <span class=\"varid\">zs</span> <span class=\"varop\">≡</span> <span class=\"varid\">toList</span> <span class=\"varid\">xs</span>
</pre><p>So instead of using <tt class=\"complex\">Vec<span class=\"varop\">.</span><span class=\"keyglyph\">_</span><span class=\"varop\">++</span><span class=\"keyglyph\">_</span></tt>, I use <tt class=\"complex\">List<span class=\"varop\">.</span><span class=\"keyglyph\">_</span><span class=\"varop\">++</span><span class=\"keyglyph\">_</span></tt>.
In this style 'select' from selection sort looks like
</p><pre class=\"agda\"><span class=\"varid\">select</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">n</span>} (<span class=\"varid\">xs</span> <span class=\"varop\">:</span> <span class=\"conid\">Vec</span> <span class=\"conid\">A</span> (<span class=\"varid\">suc</span> <span class=\"varid\">n</span>))
<span class=\"keyglyph\">→</span> (∃₂ <span class=\"keyglyph\">\\</span><span class=\"varid\">y</span> <span class=\"varid\">ys</span> <span class=\"keyglyph\">→</span> (<span class=\"varid\">y</span> <span class=\"varop\">◂</span> <span class=\"varid\">toList</span> <span class=\"varid\">ys</span> <span class=\"varop\">≡</span> <span class=\"varid\">toList</span> <span class=\"varid\">xs</span>) × (<span class=\"varid\">y</span> <span class=\"varop\">≤*</span> <span class=\"varid\">toList</span> <span class=\"varid\">ys</span>)) <span class=\"varop\">in-time</span> <span class=\"varid\">n</span>
</pre><p>I.e. given a <em>vector</em> <tt><span class=\"varid\">xs</span></tt> with <tt class=\"complex\"><span class=\"varid\">n+1</span></tt> elements, return a vector <tt><span class=\"varid\">ys</span></tt> with <tt><span class=\"varid\">n</span></tt> elements, such that inserting <tt><span class=\"varid\">y</span></tt> into it gives us back <tt><span class=\"varid\">xs</span></tt>. And this item <tt><span class=\"varid\">y</span></tt> should be the smallest one.
</p><h2><a name=\"extension-expected-runtime\"></a>Extension: expected runtime </h2>
<p>An extension of this post would be to look at randomized sorting algorithms. In particular, quick sort with a randomly chosen pivot has expected runtime <tt class=\"complex\"><span class=\"conid\">O</span>(<span class=\"varid\">n</span> <span class=\"varop\">*</span> <span class=\"varid\">log</span> <span class=\"varid\">n</span>)</tt>. At first I thought that all that would be needed is a function
</p><pre class=\"agda\"><span class=\"varid\">expected</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"conid\">P</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">ns</span> <span class=\"varop\">:</span> <span class=\"conid\">List</span> <span class=\"conop\">ℕ</span>)             <span class=\"comment\">-- A list of numbers</span>
<span class=\"keyglyph\">→</span> <span class=\"conid\">All</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">n</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">P</span> <span class=\"varop\">in-time</span> <span class=\"varid\">n</span>) <span class=\"varid\">ns</span> <span class=\"comment\">-- for each n we have P in-time n</span>
<span class=\"keyglyph\">→</span> <span class=\"conid\">P</span> <span class=\"varop\">in-time</span> <span class=\"varop\">⌈mean</span> <span class=\"varid\">ns</span> <span class=\"varop\">⌉</span>      <span class=\"comment\">-- then expect time is mean of ns</span>
</pre><p>But that is not quite right, since if we actually knew the runtimes <tt><span class=\"varid\">ns</span></tt> we could just pick the fastest one.
With the randomized quicksort you will end up in a situation where you have two or more computations to choose from, and you know that some are faster than the others, but you don't yet know which one. That sounds a bit classical. A second idea is to return the runtimes at a later time, something like
</p><pre class=\"agda\"><span class=\"varid\">expected</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"conid\">P</span>} {<span class=\"varid\">long-time</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">xs</span> <span class=\"varop\">:</span> <span class=\"conid\">List</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">ex</span> <span class=\"varid\">n</span> <span class=\"conid\">P</span> <span class=\"varop\">in-time</span> <span class=\"varid\">n</span>) <span class=\"varop\">in-time</span> <span class=\"varid\">long-time</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">P</span> <span class=\"varop\">in-time</span> <span class=\"varop\">⌈mean</span> <span class=\"varid\">map</span> <span class=\"varid\">proj1</span> <span class=\"varid\">xs</span> <span class=\"varop\">⌉</span>
</pre><p>But this is not quite right either, since after <tt class=\"complex\"><span class=\"varid\">long-time</span></tt> computing <tt><span class=\"conid\">P</span></tt> (i.e. a sorting) can be done in 0 time.
Rather, we need to decouple the proof about the runtime from the computation.
This is not possible with the <tt class=\"complex\"><span class=\"keyglyph\">_</span><span class=\"varop\">in-time</span><span class=\"keyglyph\">_</span></tt> monad. We would need to get rid of the runtime from the type, and store it as a value instead.
</p><p>I have tried redoing the proofs in this post with the monad
</p><pre class=\"agda\"><span class=\"keyword\">data</span> <span class=\"conid\">Timed</span> (<span class=\"conid\">A</span> <span class=\"varop\">:</span> <span class=\"conid\">Set</span>) <span class=\"varop\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span> <span class=\"keyword\">where</span>
<span class=\"keyglyph\">_</span><span class=\"varop\">in-time</span><span class=\"keyglyph\">_</span> <span class=\"varop\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conop\">ℕ</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Timed</span> <span class=\"conid\">A</span>
<span class=\"varid\">runtime</span> <span class=\"varop\">:</span> <span class=\"conid\">Timed</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conop\">ℕ</span>
</pre><p>But I didn't succeed; I ended up with the baffling error message
</p><pre class=\"agda\"><span class=\"varid\">runtime</span> (<span class=\"varid\">big-lambda-term</span> (<span class=\"varid\">unbox</span> (<span class=\"varid\">x</span> <span class=\"varop\">≤?</span> <span class=\"varid\">u</span>)))
<span class=\"varop\">!=</span>
<span class=\"varid\">runtime</span> (<span class=\"varid\">big-lambda-term</span> (<span class=\"varid\">unbox</span> (<span class=\"varid\">x</span> <span class=\"varop\">≤?</span> <span class=\"varid\">u</span>)))
</pre><h2><a name=\"another-extension-lower-bound-on-runtime\"></a>Another extension: lower bound on runtime </h2>
<p>So far I have proved that you can sort a list in time <tt class=\"complex\"><span class=\"varid\">n</span> <span class=\"varop\">*</span> <span class=\"varid\">log</span> <span class=\"varid\">n</span></tt>.
It would also be interesting to look at the well known <a href=\"http://planetmath.org/LowerBoundForSorting\">lower bound on the runtime of sorting</a>, and prove a theorem such as
</p><pre class=\"agda\"><span class=\"varid\">can't-sort-in-linear-time</span> <span class=\"varop\">:</span> ¬ ∃ <span class=\"keyglyph\">\\</span><span class=\"varid\">k</span> <span class=\"keyglyph\">→</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span> <span class=\"varop\">in-time</span> <span class=\"varid\">k</span> <span class=\"varop\">*</span> <span class=\"varid\">length</span> <span class=\"varid\">xs</span>
</pre><p>unfortunately this statement is not actually true for all types. For finite sets you actually <em>can</em> sort in linear time with counting sort.
It also fails if we happen to have some decidable total order for that type lying around. But it might be possible to prove
</p><pre class=\"agda\"><span class=\"varid\">can't-sort-in-linear-time</span>
<span class=\"varop\">:</span> (<span class=\"varid\">no-fast-compare</span> <span class=\"varop\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> (<span class=\"varid\">x</span> <span class=\"varop\">≤</span> <span class=\"varid\">y</span> <span class=\"conop\">⊎</span> <span class=\"varid\">y</span> <span class=\"varop\">≤</span> <span class=\"varid\">x</span>) <span class=\"varop\">in-time</span> <span class=\"num\">0</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">y</span>)
<span class=\"keyglyph\">→</span> ¬ ∃ <span class=\"keyglyph\">\\</span><span class=\"varid\">k</span> <span class=\"keyglyph\">→</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span> <span class=\"varop\">in-time</span> <span class=\"varid\">k</span> <span class=\"varop\">*</span> <span class=\"varid\">length</span> <span class=\"varid\">xs</span>
</pre><p>But you have to be really careful with a term like <tt class=\"complex\"><span class=\"varid\">no-fast-compare</span></tt>, because inside the runtime monad we do have values of type <tt class=\"complex\">(<span class=\"varid\">x</span> <span class=\"varop\">≤</span> <span class=\"varid\">y</span> <span class=\"conop\">⊎</span> <span class=\"varid\">y</span> <span class=\"varop\">≤</span> <span class=\"varid\">x</span>)</tt>. And so you can derive <tt class=\"complex\"><span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">y</span> <span class=\"varop\">in-time</span> <span class=\"num\">1</span></tt>, and therefore also <tt class=\"complex\">⊥ <span class=\"varop\">in-time</span> <span class=\"num\">1</span></tt> for non trivial types. Which certainly looks wrong to me.
</p><p>I don't know a way around this problem, but it might be related to the same issue as expected runtime.
I.e. the problem is that all information about the runtime is bundled together with the return value.
The lower bound proof essentially asks to sort a 'random' list, and by a counting argument shows that at least a certain number of comparisons are needed to be able to produce all outputs.
</p>" nil nil "d60485021a474624a737a1ff17f5f98a") (71 (20931 19033 40279) "http://praisecurseandrecurse.blogspot.com/2013/06/dispatch-for-polar-game-in-dylan.html" "Paul Potts: Dispatch for the Polar Game in Dylan" "noreply@blogger.com (Paul Potts)" "Thu, 20 Jun 2013 04:44:00 +0000" "<p>So with some assistance from the folks on the Dylan Hackers mailing list I got enough clues to press on and get my Dylan implementation of the Polar game working, at least up through the end of the first board. I haven't verified that every possible tile interaction works yet, but it's a start. This seems like a silly problem, but it interests me because of several problems. Dispatch (or simulated dispatch) is \"double dispatch,\" based on the types of two different objects interacting. The breakdown of how to categorize the classes of objects isn't 100% clear -- there is some overlap that I can't seem to eliminate, and the compiler has to decide what methods constitute the most specific match. And finally, the logic does not seem easily fixed in either classes representing the tiles, or a single class representing the board.</p> <p>If I wrote it in C, the tile classes pretty much wouldn't exist; they'd exist only as flag enumerations in an array of tiles, and the code would consist mostly of <b>switch</b> or <b>if-else</b> logic that did the \"double dispatch\" in a fixed, predictable order, without relying on the compiler very much. Objective-C, again mostly C with a thin layer for representing classes, doesn't really give these classes enough features to make them worthwhile, so I will probably just keep the board (the model in the model/view/controller) and treat the tiles like I would in plain old C. But in Dylan they have an interesting life in terms of how they can be used to organize the code -- using generic functions -- so that I'm doing less writing of \"code to find code\" -- that is, code to look at run-time identity of objects and \"manually\" dispatch on it.</p> <p>Here are the tile classes:</p> <pre>define abstract class <tile> ( <object> ) end;<br />define abstract class <blocking> ( <tile> ) end;<br />define abstract class <walkable> ( <tile> ) end;<br />define abstract class <movable> ( <blocking> ) end;<br />define abstract class <fixed> ( <blocking> ) end;<br />define class <bomb> ( <movable> ) end;<br />define class <heart> ( <movable> ) end;<br />define class <ice-block> ( <movable> ) end;<br />define class <house> ( <fixed> ) end;<br />define class <mountain> ( <fixed> ) end;<br />define class <edge> ( <fixed> ) end;<br />define class <tree> ( <blocking>, <walkable> ) end;<br />define class <empty> ( <walkable> ) end;</pre> <p>Oy, is that a pain to replace all the angle brackets with HTML entities... there must be a better way in Blogger! Anyway, these tile classes have no state -- in Dylan, no slots -- and are used in my program solely for their types. Edge does not actually appear on the board, but is used internally when the penguin or another moving object attempts to interact with the edge of the board. We treat this just like another blocking object, as if the board was surrounded by immovable, inert objects.</p> <p>Diagramatically, like so:</p> <a href=\"http://4.bp.blogspot.com/-edliQJKZWbs/UcJyojJiJ_I/AAAAAAAADGU/HrdQeMbN914/s1600/tile-classes-v2-75-percent.png\"><img src=\"http://4.bp.blogspot.com/-edliQJKZWbs/UcJyojJiJ_I/AAAAAAAADGU/HrdQeMbN914/s1600/tile-classes-v2-75-percent.png\" border=\"0\" /></a> <p>There did not seem to be one absolute best way to represent these classes. I want to organize their abstract base classes by behavior, but their behavior does not break down with complete consistency -- for example, tiles with trees are \"blocking\" with respect to sliding objects, except for the penguin. The ice block is \"blocking\" except for the case where the penguin pushes it and it is not adjacent to an empty tile -- then it is crushed. Bombs and hearts seem to have the same interactions with mountains and houses whether they traverse an empty tile by sliding first across one or more empty tiles, while ice blocks behave differently -- if they slide first and then collide with a blocking object, they are not destroyed, they just stop. So the groupings of the concrete classes isn't going to be able to coherently divide up all their possible behaviors.</p> <p>The scheme I settled on for object interactions involves three layers, in the form of three generic functions. The first represents interactions of the player's \"avatar,\" the penguin, with tiles:</p> <pre>define generic pushTile( model :: <model>, dir :: <dir>,<br />    pos :: <pos-or-false>, target-tile :: <tile> );<br /><br />define method pushTile( model :: <model>, dir :: <dir>,<br />    target-pos :: <pos>, target-tile :: <walkable> )<br />    => ( result :: <boolean> )<br />    model.penguin-pos := target-pos;<br />    #t;<br />end;<br /><br />define method pushTile( model :: <model>, dir :: <dir>,<br />    target-pos :: <pos>, target-tile :: <movable> )<br />    => ( result :: <boolean> )<br />    let next-pos :: <pos-or-false>  = <br />        getAdjacentPos( target-pos, dir );<br />    let next-tile = getTileAtPos ( model, next-pos );<br />    collide( model, dir, target-pos, target-tile,<br />        next-pos, next-tile );<br />    #f;<br />end;<br /><br />define method pushTile( model :: <model>, dir :: <dir>,<br />    target-pos :: <pos-or-false>, target-tile :: <fixed> )<br />    => ( result :: <boolean> )<br />    #f;<br />end;</pre> <p>Dylan doesn't strictly require that I define the generic function before defining methods for it; if I just start writing methods with the same name, it will assume that I mean them to be associated with a generic function. But defining the generic function first has a benefit -- the compiler will tell me whether my methods make sense, in that their parameters are all strictly the same type or a more specific subclass of the types mentioned in the <b>define generic</b> statement. Note that <b><pos-or-false></b> is a type union of a simple <b><pos></b> class with singleton( #f ). The generic uses that type union, but one of the methods are more specific: they require an actual <b><pos></b> instance and will not accept #f.</p> <p>The first method handles the case where the penguin is pushing a <b><walkable></b> tile, and returns false to indicate that the penguin position can be updated. The pos must not be <b>#f</b>. The second method handles pushing any <b><movable></b> tiles. And the third handles the <b><fixed></b> tiles. Between the three methods, you might notice that they cover all the leaf classes (all the instantiable classes) in the graph above, in 3 separate groups with no overlapping. You could shade in the leaf nodes covered by the three different methods with three different colors, going from the abstract classes mentioned downward, and all the leaves would all be colored and none would be colored more than once:</p> <a href=\"http://1.bp.blogspot.com/-7hB-6vXpCqc/UcJ6yt9HtyI/AAAAAAAADGk/KywbId2KW4k/s1600/tile-classes-v2-color-1-75-percent.png\"><img src=\"http://1.bp.blogspot.com/-7hB-6vXpCqc/UcJ6yt9HtyI/AAAAAAAADGk/KywbId2KW4k/s1600/tile-classes-v2-color-1-75-percent.png\" border=\"0\" /></a> <p>So on the tile parameter, the coverage of the concrete classes is complete and the dispatch algorithm should not have any difficulty. Combined with the position parameter, though, the situation is slightly trickier. At runtime, a caller could call <b>pushTile</b> with <b>#f</b> for <b>pos</b> and <b><empty></b>; or <b><bomb></b> for <b>tile</b> and the dispatcher would, correctly, throw up its hands at this point and say that there was no applicable method. I could have defined a more general method to handle this case, but I didn't -- there shouldn't ever be an empty or bomb tile without a corresponding valid position, since they are real tiles on the board, and I want the runtime to help me catch that case if it ever happens. Similarly, I could have defined a method that handled <b><blocking></b> or <b><tile></b> as part of this generic function but the whole point is that I don't know what to do with those more general classes here.</p> <p>So, you may notice that the middle <b>pushTile</b> method calls <b>collide</b> with a second tile and position, adjacent to the first in a specified direction. That generic function looks like this:</p> <pre>define generic collide( model :: <model>, dir :: <dir>,<br />    tile-1-pos :: <pos>, tile-1 :: <movable>,<br />    tile-2-pos :: <pos-or-false>, tile-2 :: <blocking-or-empty> );<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    next-pos :: <pos>, next-tile :: <empty> )<br />    slide ( model, dir, movable-pos, movable-tile,<br />            next-pos, next-tile );<br />end;<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    ice-block-pos :: <pos>, ice-block-tile :: <ice-block>,<br />    icebreaking-pos :: <pos-or-false>,<br />    ice-breaking-tile :: <blocking> )<br />    setTileAtPos( model, ice-block-pos, $the-empty );<br />end;<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    heart-pos :: <pos>, heart-tile :: <heart>,<br />    house-pos :: <pos>, house-tile :: <house> )<br />    setTileAtPos( model, heart-pos, $the-empty );<br />    decrementHeartCount( model );<br />end;<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    bomb-pos :: <pos>, bomb-tile :: <bomb>,<br />    mountain-pos :: <pos>, mountain-tile :: <mountain> )<br />    setTileAtPos( model, bomb-pos, $the-empty );<br />    setTileAtPos( model, mountain-pos, $the-empty );<br />end;<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    blocking-pos :: <pos-or-false>, blocking-tile :: <blocking> )<br />end;</pre> <p>You might notice that before long you hit yet another method call you haven't seen before -- slide. This is, as you might guess, yet another generic function. (Doesn't this program every get around to <i>doing</i> anything? In fact it does, but this is the often-paradoxical-seeming logic of object-oriented design -- individual methods that seem too small and simple to get anything done can actually get a lot done together, especially when aided by a smart dispatcher that eliminates most of the need to write \"code to find code.\"</p> <p>The type-union <b><blocking-or-empty></b> allows us to specify, for our generic function, as tight a class as possible out of two otherwise disjoint sections of our class diagram. We don't have to loosen the type specification needlessly by using <b><tile></b>, which would allow <b><walkable></b> as a valid class for this parameter. Meanwhile, we can loosen <b>tile-2-pos</b> so that we make our intention to allow <b>#f</b> explicit here.</p> <p>The methods break down as follows. The first one handles any movable tile that is moving onto an empty tile, by calling a slide method to be defined later. The second one is a special case to handle the crushable <b><ice-block></b> class -- if it is pushed into the world edge, or any other object, it is destroyed (replaced with <b>$the-empty</b> class instance). The third and fourth methods handle specific interactions between hearts and houses, and bombs and mountains. And finally, to handle the case where the penguin pushes a heart against a mountain, or a bomb against the edge of the world, we have a less specific method that dispatches on <b><movable></b> and <b><blocking></b>. This prevents the runtime from generating an error in this case, but also gives us a place where we could generate some kind of feedback to the user, like a special sound to indicate failure.</p> <p>The breakdown of instantiable tile classes here is much more complex, especially given that we are dispatching on two class parameters drawn from the same hierarchy. We could try coloring them by using two copies of the diagram:</p> <div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-d-ajjIIutjI/UcM8kBSlaWI/AAAAAAAADHM/UQ5mauDpXKA/s1600/tile-classes-v2-double-dispatch-2-75-percent.png\"><img src=\"http://1.bp.blogspot.com/-d-ajjIIutjI/UcM8kBSlaWI/AAAAAAAADHM/UQ5mauDpXKA/s1600/tile-classes-v2-double-dispatch-2-75-percent.png\" border=\"0\" /></a></div> <p>Err, that's pretty, but is it helpful? I'm using colors and borders to indicate that classes are handled by specific methods, but the main thing I hope I'm illustrating is that, unlike with the first generic function, in this one there is significant overlap between the classes handled by the different methods. This is where the dispatch mechanism really has to shine. There is an ordering that makes sense from my point of view, and that is one in which the most specific matching method will be called. However, as you can see, quantifying \"most specific\" may be slightly complex when dispatching on more than one class parameter, throwing in type-unions for fun. Fortunately this code is now working, but while I was developing it I became familiar with a warning message in Open Dylan that says something like \"the method dispatch handling this set of classes is determined by arbitrary and capricious rules\" -- indicating that the dispatch logic is still considered a work in progress. I was concerned that the current version of the Open Dylan compiler wasn't quite solid enough to make this work, but it does seem to work. The backup plan was to dispatch entirely on type-unions made up of different sets of singletons, but that is longer and obscures what is meant by the abstract classes.</p> <p>I won't go to the trouble to do the same diagram on my slide method, but that code looks like this:</p> <pre>define generic slide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    next-pos :: <pos-or-false>, next-tile :: <blocking-or-empty> );<br /><br />define method slide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    next-pos :: <pos>, next-tile :: <empty> )<br />    let next-next-pos :: <pos-or-false> =<br />        getAdjacentPos( next-pos, dir );<br />    let next-next-tile = getTileAtPos( model, next-next-pos );<br />    setTileAtPos( model, next-pos, movable-tile );<br />    setTileAtPos( model, movable-pos, $the-empty );<br />    slide( model, dir, next-pos, getTileAtPos( model, next-pos ),<br />           next-next-pos, next-next-tile );<br />end;<br /><br />define method slide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    next-pos :: <pos-or-false>, next-tile :: <blocking> )<br />    collide( model, dir, movable-pos, movable-tile,<br />              next-pos, next-tile );<br />end;<br /><br />define method slide( model :: <model>, dir :: <dir>,<br />    ice-block-pos :: <pos>, ice-block-tile :: <ice-block>,<br />    next-pos :: <pos-or-false>, next-tile :: <blocking> )<br />end;</pre> <p>Aaaand that's pretty much the whole of the logic for handling interaction between the penguin and the various tiles. Note that we call ourselves recursively. It looks kind of like we have no termination condition! Except note that the method isn't calling itself, it's doing the same method dispatch that found it in the first place. When we come to a termination condition for our recursions, we'll actually call a different method of the same generic function -- most likely the third one, where a sliding object encounters a blocking object. That condition can include hitting the edge of the board. And fortunately -- we already have logic for that, mostly -- in our collide generic function! So sliding hearts and bombs are handled just the same as if they were pushed instead of ending a slide.</p> <p>There's a slightly tricky part where we want to bind up the next tile beyond the two tiles we were dispatched on, then perform two set operations to move the currently sliding tile, then dispatch on the new second and third tiles we've set, rather than the original incoming second tile and the new third one. That required drawing a few little diagrams when I wrote it, but it works just fine.</p> <p>This is not the whole program, obviously, but these are the key methods for encoding the collisions between tiles. If you'd like to play with the whole program, you might come and join the <a href=\"https://lists.opendylan.org/mailman/listinfo/hackers\">Dylan Hackers mailing list</a>, or leave me a note. If there is interest I'll publish it, here or elsewhere. I am now curious as to how a similar set of overlapping dispatches -- via pattern matching, perhaps? -- might look in Haskell. I might try to write that next. If you've got an idea about the clearest and most idiomatic way to do it, I welcome your comments.</p>" nil nil "2fa9a721affc32d924d7825e2d0c26e1") (70 (20931 1847 380202) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_5229\"></span>, where <span id=\"tex_6636\"></span> is the number of “folds” and <span id=\"tex_2370\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_1643\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "d0221aaf10a18cf04f56ca656a15aa70") (69 (20930 47228 365799) "http://praisecurseandrecurse.blogspot.com/2013/06/dispatch-for-polar-game-in-dylan.html" "Paul Potts: Dispatch for the Polar Game in Dylan" "noreply@blogger.com (Paul Potts)" "Thu, 20 Jun 2013 04:44:00 +0000" "<p>So with some assistance from the folks on the Dylan Hackers mailing list I got enough clues to press on and get my Dylan implementation of the Polar game working, at least up through the end of the first board. I haven't verified that every possible tile interaction works yet, but it's a start. This seems like a silly problem, but it interests me because of several problems. Dispatch (or simulated dispatch) is \"double dispatch,\" based on the types of two different objects interacting. The breakdown of how to categorize the classes of objects isn't 100% clear -- there is some overlap that I can't seem to eliminate, and the compiler has to decide what methods constitute the most specific match. And finally, the logic does not seem easily fixed in either classes representing the tiles, or a single class representing the board.</p> <p>If I wrote it in C, the tile classes pretty much wouldn't exist; they'd exist only as flag enumerations in an array of tiles, and the code would consist mostly of <b>switch</b> or <b>if-else</b> logic that did the \"double dispatch\" in a fixed, predictable order, without relying on the compiler very much. Objective-C, again mostly C with a thin layer for representing classes, doesn't really give these classes enough features to make them worthwhile, so I will probably just keep the board (the model in the model/view/controller) and treat the tiles like I would in plain old C. But in Dylan they have an interesting life in terms of how they can be used to organize the code -- methods into generic functions -- so that I'm doing less writing of \"code to find code\" -- that is, code to look at run-time identity of objects and \"manually\" dispatch on it.</p> <p>Here are the tile classes:</p> <pre>define abstract class <tile> ( <object> ) end;<br />define abstract class <blocking> ( <tile> ) end;<br />define abstract class <walkable> ( <tile> ) end;<br />define abstract class <movable> ( <blocking> ) end;<br />define abstract class <fixed> ( <blocking> ) end;<br />define class <bomb> ( <movable> ) end;<br />define class <heart> ( <movable> ) end;<br />define class <ice-block> ( <movable> ) end;<br />define class <house> ( <fixed> ) end;<br />define class <mountain> ( <fixed> ) end;<br />define class <edge> ( <fixed> ) end;<br />define class <tree> ( <blocking>, <walkable> ) end;<br />define class <empty> ( <walkable> ) end;</pre> <p>Oy, is that a pain to replace all the angle brackets with HTML entities... there must be a better way in Blogger! Anyway, these tile classes have no state -- in Dylan, no slots -- and are used in my program solely for their types. Edge does not actually appear on the board, but is used internally when the penguin or another moving object attempts to interact with the edge of the board. We treat this just like another blocking object, as if the board was surrounded by immovable, inert objects.</p> <p>Diagramatically, like so:</p> <a href=\"http://4.bp.blogspot.com/-edliQJKZWbs/UcJyojJiJ_I/AAAAAAAADGU/HrdQeMbN914/s1600/tile-classes-v2-75-percent.png\"><img src=\"http://4.bp.blogspot.com/-edliQJKZWbs/UcJyojJiJ_I/AAAAAAAADGU/HrdQeMbN914/s1600/tile-classes-v2-75-percent.png\" border=\"0\" /></a> <p>There did not seem to be one absolute best way to represent these classes. I want to organize their abstract base classes by behavior, but their behavior does not break down with complete consistency -- for example, tiles with trees are \"blocking\" with respect to sliding objects, except for the penguin. The ice block is \"blocking\" except for the case where the penguin pushes it and it is not adjacent to an empty tile -- then it is crushed. Bombs and hearts seem to have the same interactions with mountains and houses whether they traverse an empty tile by sliding first across one or more empty tiles, while ice blocks behave differently -- if they slide first and then collide with a blocking object, they are not destroyed, they just stop. So the groupings of the concrete classes isn't going to be able to coherently divide up all their possible behaviors.</p> <p>The scheme I settled on for object interactions involves three layers, in the form of three generic functions. The first represents interactions of the player's \"avatar,\" the penguin, with tiles:</p> <pre>define generic pushTile( model :: <model>, dir :: <dir>,<br />    pos :: <pos-or-false>, target-tile :: <tile> );<br /><br />define method pushTile( model :: <model>, dir :: <dir>,<br />    target-pos :: <pos>, target-tile :: <walkable> )<br />    => ( result :: <boolean> )<br />    model.penguin-pos := target-pos;<br />    #t;<br />end;<br /><br />define method pushTile( model :: <model>, dir :: <dir>,<br />    target-pos :: <pos>, target-tile :: <movable> )<br />    => ( result :: <boolean> )<br />    let next-pos :: <pos-or-false>  = <br />        getAdjacentPos( target-pos, dir );<br />    let next-tile = getTileAtPos ( model, next-pos );<br />    collide( model, dir, target-pos, target-tile,<br />        next-pos, next-tile );<br />    #f;<br />end;<br /><br />define method pushTile( model :: <model>, dir :: <dir>,<br />    target-pos :: <pos-or-false>, target-tile :: <fixed> )<br />    => ( result :: <boolean> )<br />    #f;<br />end;</pre> <p>Dylan doesn't strictly require that I define the generic function before defining methods for it; if I just start writing methods with the same name, it will assume that I mean them to be associated with a generic function. But defining the generic function first has a benefit -- the compiler will tell me whether my methods make sense, in that their parameters are all strictly the same type or a more specific subclass of the types mentioned in the <b>define generic</b> statement. Note that <b><pos-or-false></b> is a type union of a simple <b><pos></b> class with singleton( #f ). The generic uses that type union, but one of the methods are more specific: they require an actual <b><pos></b> instance and will not accept #f.</p> <p>The first method handles the case where the penguin is pushing a <b><walkable></b> tile, and returns false to indicate that the penguin position can be updated. The pos must not be <b>#f</b>. The second method handles pushing any <b><movable></b> tiles. And the third handles the <b><fixed></b> tiles. Between the three methods, you might notice that they cover all the leaf classes (all the instantiable classes) in the graph above, in 3 separate groups with no overlapping. You could shade in the leaf nodes covered by the three different methods with three different colors, going from the abstract classes mentioned downward, and all the leaves would all be colored and none would be left un-colored:</p> <a href=\"http://1.bp.blogspot.com/-7hB-6vXpCqc/UcJ6yt9HtyI/AAAAAAAADGk/KywbId2KW4k/s1600/tile-classes-v2-color-1-75-percent.png\"><img src=\"http://1.bp.blogspot.com/-7hB-6vXpCqc/UcJ6yt9HtyI/AAAAAAAADGk/KywbId2KW4k/s1600/tile-classes-v2-color-1-75-percent.png\" border=\"0\" /></a> <p>So on the tile parameter, the coverage is complete and the dispatch algorithm should not have any difficulty. Combined with the position parameter, though, the situation is slightly trickier. At runtime, a caller could call <b>pushTile</b> with <b>#f</b> for <b>pos</b> and <b><empty></b>; or <b><bomb></b> for <b>tile</b> and the dispatcher would, correctly, throw up its hands at this point and say that there was no applicable method. I could have defined a more general method to handle this case, but I didn't -- there shouldn't ever be an empty or bomb tile without a corresponding valid position, since they are real tiles on the board, and I wanted the runtime to consider that a failure if it ever happened. Similarly, I could have defined a method that handled <b><blocking></b> or <b><tile></b> as part of this generic function but the whole point is that I don't know what to do with those more general classes here.</p> <p>So, you may notice that the middle <b>pushTile</b> method calls <b>collide</b> with a second tile and position, adjacent to the first in a specified direction. That generic function looks like this:</p> <pre>define generic collide( model :: <model>, dir :: <dir>,<br />    tile-1-pos :: <pos>, tile-1 :: <movable>,<br />    tile-2-pos :: <pos-or-false>, tile-2 :: <blocking-or-empty> );<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    next-pos :: <pos>, next-tile :: <empty> )<br />    slide ( model, dir, movable-pos, movable-tile,<br />            next-pos, next-tile );<br />end;<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    ice-block-pos :: <pos>, ice-block-tile :: <ice-block>,<br />    icebreaking-pos :: <pos-or-false>,<br />    ice-breaking-tile :: <blocking> )<br />    setTileAtPos( model, ice-block-pos, $the-empty );<br />end;<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    heart-pos :: <pos>, heart-tile :: <heart>,<br />    house-pos :: <pos>, house-tile :: <house> )<br />    setTileAtPos( model, heart-pos, $the-empty );<br />    decrementHeartCount( model );<br />end;<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    bomb-pos :: <pos>, bomb-tile :: <bomb>,<br />    mountain-pos :: <pos>, mountain-tile :: <mountain> )<br />    setTileAtPos( model, bomb-pos, $the-empty );<br />    setTileAtPos( model, mountain-pos, $the-empty );<br />end;<br /><br />define method collide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    blocking-pos :: <pos-or-false>, blocking-tile :: <blocking> )<br />end;</pre> <p>You might notice that before long you hit yet another method call you haven't seen before -- slide. This is, as you might guess, yet another generic function. (Doesn't this program every get around to <i>doing</i> anything? In fact it does, but this is the often-paradoxical-seeming logic of object-oriented design -- individual methods that seem too small and simple to get anything done can actually get a lot done together, especially when aided by a smart dispatcher that eliminates most of the need to write \"code to find code.\"</p> <p>The type-union <b><blocking-or-empty></b> allows us to specify, for our generic function, as tight a class as possible out of two otherwise disjoint sections of our class diagram. We don't have to loosen the type specification needlessly by using <b><tile></b>, which would allow <b><tree></b> as a valid class for this parameter. Meanwhile, we can loosen <b>tile-2-pos</b> so that we make our intention to allow <b>#f</b> explicit here.</p> <p>The methods break down as follows. The first one handles any movable tile that is moving onto an empty tile, by calling a slide method to be defined later. The second one is a special case to handle the crushable <b><ice-block></b> class -- if it is pushed into the world edge, or any other object, it is destroyed (replaced with <b>$the-empty</b> class instance). The third and fourth methods handle specific interactions between hearts and houses, and bombs and mountains. And finally, to handle the case where the penguin pushes a heart against a mountain, or a bomb against the edge of the world, we have a less specific method that dispatches on <b><movable></b> and <b>>blocking></b>. This prevents the runtime from generating an error in this case, but also gives us a place where we could generate some kind of feedback to the user, like a special sound to indicate failure.</p> <p>The breakdown of instantiable tile classes here is much more complex, especially given that we are dispatching on two class parameters drawn from the same hierarchy. We could try coloring them by using two copies of the diagram:</p> <a href=\"http://1.bp.blogspot.com/-3R6WI_O9ZlE/UcKC6aKUpHI/AAAAAAAADG8/-SF4ddZ9rSo/s1600/tile-classes-v2-double-dispatch-2.png\"><img src=\"http://1.bp.blogspot.com/-3R6WI_O9ZlE/UcKC6aKUpHI/AAAAAAAADG8/-SF4ddZ9rSo/s1600/tile-classes-v2-double-dispatch-2.png\" border=\"0\" /></a> <p>Err, that's pretty, but is it helpful? I'm using colors and borders to indicate that classes are handled by specific methods, but the main thing I hope I'm illustrating is that, unlike with the first generic function, in this one there is significant overlap between the classes handled by the different methods. This is where the dispatch mechanism really has to shine. There is an ordering that makes sense from my point of view, and that is one in which the most specific matching method will be called. However, as you can see, quantifying \"most specific\" may be slightly complex when dispatching on more than one class parameter, throwing in type-unions for fun. Fortunately this code is now working, but while I was developing it I became familiar with a warning message in Open Dylan that says something like \"the method dispatch handling this set of classes is determined by arbitrary and capricious rules\" -- indicating that the dispatch logic is still considered a work in progress. I was concerned that the current version of the Open Dylan compiler wasn't quite solid enough to make this work, but it does seem to work. The backup plan was to dispatch entirely on type-unions made up of different sets of singletons, but that is longer and obscures what is meant by the abstract classes.</p> <p>I won't go to the trouble to do the same diagram on my slide method, but that code looks like this:</p> <pre>define generic slide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    next-pos :: <pos-or-false>, next-tile :: <blocking-or-empty> );<br /><br />define method slide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    next-pos :: <pos>, next-tile :: <empty> )<br />    let next-next-pos :: <pos-or-false> =<br />        getAdjacentPos( next-pos, dir );<br />    let next-next-tile = getTileAtPos( model, next-next-pos );<br />    setTileAtPos( model, next-pos, movable-tile );<br />    setTileAtPos( model, movable-pos, $the-empty );<br />    slide( model, dir, next-pos, getTileAtPos( model, next-pos ),<br />           next-next-pos, next-next-tile );<br />end;<br /><br />define method slide( model :: <model>, dir :: <dir>,<br />    movable-pos :: <pos>, movable-tile :: <movable>,<br />    next-pos :: <pos-or-false>, next-tile :: <blocking> )<br />    collide( model, dir, movable-pos, movable-tile,<br />              next-pos, next-tile );<br />end;<br /><br />define method slide( model :: <model>, dir :: <dir>,<br />    ice-block-pos :: <pos>, ice-block-tile :: <ice-block>,<br />    next-pos :: <pos-or-false>, next-tile :: <blocking> )<br />end;</pre> <p>Aaaand that's pretty much the whole of the logic for handling interaction between the penguin and the various tiles. Note that we call ourselves recursively. It looks kind of like we have no termination condition! Except note that the method isn't calling itself, it's doing the same method dispatch that found it in the first place. When we come to a termination condition for our recursions, we'll actually call a different method of the same generic function -- most likely the third one, where a sliding object encounters a blocking object. That condition can include hitting the edge of the board. There's a slightly tricky part where we want to bind up the next tile beyond the two tiles we were dispatched on, then perform two set operations to move the currently sliding tile, then dispatch on the new second and third tiles we've set, rather than the original incoming second tile and the new third one. That required drawing a few little diagrams when I wrote it, but it works just fine.</p> <p>This is not the whole program, obviously, but these are the key methods for encoding the collisions between tiles. If you'd like to play with the whole program, you might come and join the <a href=\"https://lists.opendylan.org/mailman/listinfo/hackers\">Dylan Hackers mailing list</a>, or leave me a note. If there is interest I'll publish it, here or elsewhere. I am now curious as to how a similar set of overlapping dispatches -- via pattern matching, perhaps? -- might look in Haskell. I might try to write that next. If you've got an idea about the best and most idiomatic way to do it, I welcome your comments.</p>" nil nil "d89319ed504813740a02f2dd6c3a9ce2") (68 (20930 47228 218771) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_1154\"></span>, where <span id=\"tex_5820\"></span> is the number of “folds” and <span id=\"tex_510\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_6562\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "e79874e777906d15718aef9a3e26e79f") (67 (20929 34232 569356) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_7479\"></span>, where <span id=\"tex_3881\"></span> is the number of “folds” and <span id=\"tex_4131\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_1491\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "445ab0d961e9d1fe1c3ac00f67ae9041") (66 (20929 26150 86717) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_4521\"></span>, where <span id=\"tex_6707\"></span> is the number of “folds” and <span id=\"tex_7456\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_9435\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "91848bbb4998fede065141f372e9acdd") (65 (20928 39045 928766) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_3888\"></span>, where <span id=\"tex_7057\"></span> is the number of “folds” and <span id=\"tex_9970\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_2530\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "fde7b9cf0f2e97c4e97ce09b0e5f73c5") (64 (20928 31806 522965) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_4982\"></span>, where <span id=\"tex_7154\"></span> is the number of “folds” and <span id=\"tex_4863\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_361\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "8918c7a9ba85201de96c6bddf7ebe466") (63 (20928 25599 231659) "http://functionaljobs.com/jobs/154-senior-software-developer-functional-programmer-at-vector-fabrics" "Functional Jobs: Senior software developer/Functional programmer at Vector Fabrics (Full-time)" nil "Tue, 18 Jun 2013 12:44:48 +0000" "<p>Vector Fabrics is hiring: we are looking for a top-notch programmer to extend our program-analysis and parallelization products. You design and implement algorithms to assist the programmer to create a parallel design from a sequential C or C++ program. You work with our international team of world-class computer scientists and experts in the Haskell / OCaml functional programming languages.</p>
<p>Your work is at the forefront of technology, giving you the opportunity to publish your work in major conferences and directly cooperate with processor design companies and domain-specific application vendors.</p>
<p>As we are a startup company, you will quickly have a major impact on our products and get to know all aspects of product creation. You will be part of a strongly committed development team and contribute to our agile development process and automated test suites. Interested? Send your CV, GitHub account or other proof of what you can do to <span class=\"spam-protect\"><span class=\"user\">jobs</span> [at] <span class=\"host\">vectorfabrics [dot] com</span></span>.</p>
<h3>Responsibilities</h3>
<ul>
<li>Design and implement software
optimization (e.g. parallelization)
algorithms for CPUs and GPUs;</li>
<li>Thoroughly test your code, create
automated test suites;</li>
<li>Contribute to our agile development
planning and process;</li>
<li>Analyze complex customer applications
for optimization opportunities and
translate this to new analysis
algorithms.</li>
</ul>
<h3>Profile</h3>
<ul>
<li>Your friends and colleagues describe
you as a superb programmer; your
programming ability is way above
average;</li>
<li>Demonstrable experience in design and
implementation of complex software
applications; prior experience in
functional programming languages is
preferred;</li>
<li>You continuously surprise us with
your creative yet pragmatic solutions
for complex software problems;</li>
<li>You are strongly committed to deliver
working software as early as
possible;</li>
<li>You work against very high quality
standards. Refactoring is your bread
and butter, pair-programming is how
you prefer to review your code;</li>
<li>Whatever technologies, languages, or
development environments you've been
using, we expect you have mastered
them in depth, and we expect that you
will be able to master any
technology, language, or development
environment that we need in the
future;</li>
<li>Excellent command of written and
spoken English.</li>
</ul>
<h3>Education</h3>
<p>MSc, MEng or PhD in Computer Science or significant relevant experience.</p>
<h3>About Vector Fabrics</h3>
<p>Vector Fabrics is a high-tech software company, developing tools for embedded multicore programming. Its technology and expertise is getting widespread recognition in the industry as being innovative and unique in their ability to address heterogeneous multicore application-specific silicon platforms. Due to the advanced nature of its tools, Vector Fabrics operates at the forefront of the next generation of embedded platforms for diverse markets ranging from supercomputers to automotive to cell phones.</p>
<p>Vector Fabrics puts absolute priority on hiring top class individuals in key positions. Vector Fabrics’ team profile is exceptional and its ambition is to hire only individuals that match or surpass that profile. The company pays top salary and offers a challenging, engaging and stimulating work environment with a high degree of responsibility.</p>
<p>Get information on <a href=\"http://functionaljobs.com/jobs/154-senior-software-developer-functional-programmer-at-vector-fabrics\">how to apply</a> for this position.</p>" nil nil "ac7959e4e864069a84c92bb6ccf120f4") (62 (20928 25599 88477) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_3351\"></span>, where <span id=\"tex_5054\"></span> is the number of “folds” and <span id=\"tex_5672\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_4270\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "ed76cce3976710dfc5817371da90a533") (61 (20928 15494 157269) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_9344\"></span>, where <span id=\"tex_487\"></span> is the number of “folds” and <span id=\"tex_4228\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_4829\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "308f77fdbe934750b58a084421010d6d") (60 (20928 8813 828404) "http://feedproxy.google.com/~r/FpComplete/~3/o-o2AKSmDZc/beta-sign-up" "FP Complete: FP Haskell Center Beta Sign-Up" nil "Mon, 17 Jun 2013 14:42:00 +0000" "<h4>Beta sign-up Blog</h4><p>It’s almost here!  After months of hard work by our engineers, I am pleased to announce that we’ve opened up sign-up for <a href=\"http://feeds.feedburner.com/business/designer-ide\">beta of FP Haskell Center</a>, the world's first commercial Haskell IDE and deployment platform.  The beta will be released by the end of the month, and we are eager to have your active testing and feedback so we can deliver a great product that the market needs in early September.  As an appreciation and reward for being in the beta program, we will offer special incentives to the finished product when available.  Details of the offer will be announced in late July/early August.</p><p>The IDE includes a Haskell compiler and a continually updated set of vetted, tested and supported libraries and code templates.  There is no need to run Cabal or other installers.  The FP Haskell Application Server is used to deploy and run Haskell applications directly in the cloud with no additional effort.  A free shared instance is included with every account. Larger and dedicated instances are available for active project deployments at a reasonable monthly charge.</p><h4>FP Haskell Center’s key features and benefits are:</h4><ul><li>Simplifies the writing and deploying of Haskell applications from a single online dashboard.</li><li>Cloud-based development frees you to move among multiple devices without needing your own functioning Haskell environment.</li><li>Integrated deployment frees you from needing to run a specific OS to match build and production environments.</li><li>A hierarchical module tree for:</li><li>convenient management (renaming, moving, deleting modules or whole trees)</li><li>navigation (much easier to read, expand/collapse)</li><li>Regular, automatic parsing and type checking as feedback inside the editor and unobtrusive error output below.</li><li>Type and documentation inspection of names.</li><li>Integrated access to sample code, School of Haskell tutorials, Haddock documentation service, and Hoogle resource database.</li></ul><p>Sign-up for <a href=\"http://feeds.feedburner.com/business/haskell-center\">beta of FP Haskell Center</a>.</p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=o-o2AKSmDZc:zpOQ0FhJErU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=o-o2AKSmDZc:zpOQ0FhJErU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=o-o2AKSmDZc:zpOQ0FhJErU:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=o-o2AKSmDZc:zpOQ0FhJErU:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=o-o2AKSmDZc:zpOQ0FhJErU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=o-o2AKSmDZc:zpOQ0FhJErU:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/o-o2AKSmDZc\" height=\"1\" width=\"1\" />" nil nil "a9a3b01db0317af1d0dbfe3b2234c283") (59 (20928 8813 827819) "http://feedproxy.google.com/~r/FpComplete/~3/YGZb2pYnjPw/interim-web-site" "FP Complete: Interim Web Site" nil "Mon, 17 Jun 2013 12:42:00 +0000" "<h4>Interim Site blog</h4><p>Welcome to our updated website! FP Complete is evolving into a full-fledged commercial developer of Haskell tools and services, as called for in our original plans.  The previous site showcased the School of Haskell. We have been delighted to see it used by thousands of Haskell learners and teachers, including some authors who’ve taken advantage of its unique Active Code features to help people learn.  Now that we are about to release the FP Haskell Center beta, the School remains an integral part of our offering as a place to teach and learn, but we are even more excited by the new full-powered commercial features.</p><p>This site is an interim redesign, and will be completed when we release FP Haskell Center, the world’s first commercial Haskell IDE and deployment platform, in early September.  The site, and our strategy, are based on 3 pillars:</p><ol><li>We must produce products and services needed by developers who are already using Haskell tools in their work. This is our base.</li><li>At the same time, we need to promote Haskell to the vastly larger non-Haskeller market which on the whole is unaware of Haskell’s existence.  This is a long-term effort that’s absolutely necessary if Haskell is going to have meaningful adoption in the mainstream market.  That’s why you see us putting a lot of effort into high-level discussions and information about what Haskell is, its feature advantages and strategic benefits.  The target audience is business management, engineering management and developers who need to be converted into Haskell supporters and users.  </li><li>In all our efforts, we are always working with the Haskell community.  FP Complete was started in 2012 with the help of some of the leaders of the community and is committed to continue working with the entire community to advance the technology and expand Haskell adoption in the commercial market.  This follows a well-proven model of success for companies commercializing open-source technologies starting with Red Hat.</li></ol><p>In the coming months, we will be continually adding more content to fulfill our goal to be a major resource for all things Haskell.  Things like more whitepapers, case studies, video testimonials, tutorials and sample codes.  If you have any suggestions or things to contribute, be sure to let us know.  As always, we welcome constructive comments from the community.</p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=YGZb2pYnjPw:Cjpscs1vI9g:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=YGZb2pYnjPw:Cjpscs1vI9g:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=YGZb2pYnjPw:Cjpscs1vI9g:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=YGZb2pYnjPw:Cjpscs1vI9g:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=YGZb2pYnjPw:Cjpscs1vI9g:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=YGZb2pYnjPw:Cjpscs1vI9g:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/YGZb2pYnjPw\" height=\"1\" width=\"1\" />" nil nil "3f18d89ca1e9a92fcb26aaa7bfc6a4d3") (58 (20928 8813 827057) "http://logicaltypes.blogspot.com/2013/06/thoughts-on-kleisli-arrows-in-java-wip.html" "Douglas M. Auclair (geophf): Thoughts on Kleisli Arrows in Java (WIP)" "noreply@blogger.com (geophf)" "Mon, 17 Jun 2013 12:39:32 +0000" "Here are some ramblings as I puzzle my way through on how to represent Kleisli arrows in Java (and why I would want to do that, anyway). This is very much a work in progress, so no solid conclusions from this posting.<br /><br /><br />Categories are abstractions. They have objects and morphisms. The thing of Category theory is that the objects can be anything, as they are atomic, and the morphisms aren't necessarily functions. So, the objects can be numbers, not that we care, or they could be arrows (another term for morphisms), or they could be categories themselves, so the morphisms become morphisms between categories. Or if the objects are arrows then the morphisms are higher-order functions.<br /><br />Neat-o!<br /><br />So, John Baez did some wonderful pieces on higher-order categories in the direction of physical math: topologies and groups and such, and this was replicated in Edward Kmett's work with ... what are they called? Ah, yes: semigroupoids (how could I forget), where the monoids have no zero bases and so identity functions aren't necessary, I suppose.<br /><br />Interesting! Half-monoids!<br /><br />But if we look at Categories as simply that: objects and morphisms, and we look at morphisms as simply arrows from a to b, then does that simplify my implementation of my categories library?<br /><br />Monads no longer are generically typeful but now use inheritance to describe the type families:<br /><br />Monad<a> is the interface and Maybe<a> extends Monad<a> instead of<br /><br />Monad<M extends Monad, a> being the interface as Maybe<a> extends Monad<Maybe, a>.<br /><br />The problem is in the generic functions, how does one grab the 'm' in the monadic type? Or is it as simple as using inheritance and forgetting the thorny problem of genericity, or passing that problem off to the inheritance structure?<br /><br />Same thing for Arrow ...<br /><br />instead of Arrow<a, b, c><br /><br />we have Arrow<b, c><br /><br />and then the Kleisli arrow becomes more simple, perhaps? Because<br /><br />KleisliArrow<m, b, c> extends Arrow<b, m c><br /><br />... but how does that work? Can it work? I don't see how that works.<br /><br />for first :: a b c -> a (b, d) (c, d)<br /><br />how does that work for the KleisliArrow, and for chaining the monadic computation?<br /><br />It appears further research is necessary for me to get a solid grasp of this to be able to implement this properly in Java (as opposed to writing a haskell parser on top of Java, which is also a viable way of going about it, except for the fact that there is political resistance to learning a domain-specific language from devs brought on to code 'only' in language-of-choice X).<br /><br />So that's my problem, because in my 'Monads in Java' article I concluded with a:<br /><br />So you see we can now do the following:<br /><br />f.apply(m).bind(g).bind(h)<br /><br />and I now know that f.apply(m) is a weakness in coding. This should all be strung together with Kleisli arrows and the resulting morphism be run through the Kleisli computer.<br /><br />\"The (explicit) use of apply considered harmful\"?<br /><br />I mean, Gah! How bold! How daring! How so against the grain!<br /><br />And it isn't even really 'harmful' either. More like obtuse or obnoxious. And not even that, more like: inelegant. That's the word: inelegant. And we're not even 'using' apply in the above computation. I mean, we are, but we are always using apply. It's so inherent that now just juxtaposition is now apply, so it's not the '(explicit) use' of apply, it's the '(explicit) call' or '(explicit) invocation' of apply that's inelegant.<br /><br />I mean, when I see the above formulation, I now shudder, whereas before I might've said, with a pause so slight it didn't even register, 'What do we do here? Oh, use apply!' knowing, at the back of my mind, that this didn't sit perfectly right, but what else was there to do?<br /><br />Well, with Kleisli composition, there is nothing to do at all, but just do it<br /><br />runKleisli (f <+> g <+> h) m<br /><br />and we're done.<br /><br />Now, how to represent that in Java, ... well, I do have a KleisliArrow type that does return the underlying arrow, but what about composition ... it probably has that, too:<br /><br />f >>> g >>> h<br /><br />But the gnawing problem there is that KleisliArrow is not related to Arrow, because, properly, it isn't: KleisliArrow on a specific monadic type m IS related to Arrow.<br /><br />And I don't know how to represent that in Java.<br /><br />Yet.<br />" nil nil "b3a90bbcae05b6f71b74fb61a566d254") (57 (20928 8813 826103) "http://hyperq.github.io/blog/trading-a-hacker-approach.html" "hyperq: Trading: a hacker approach?" nil "Mon, 17 Jun 2013 08:19:00 +0000" "<blockquote>
<p>
You are startled by the sound of an alarm. It is followed by an urgent voice
which warns that the Arcada has been boarded by unknown intruders. It ends
abruptly. <br />
> <br />
<a href=\"http://sarien.net/spacequest#anotherhallway\">start of Space Quest I</a>
</p>
</blockquote>
<p>
Most hackers involved in the world of trading enter from the technology side
of the business. And there's two main gateways are via trader enhancement or
trader replacement. Making traders smarter and faster using technology is one
well worn road. There's lots of room to streamline the human trading process:
automation of regular tasks, expansion of back-testing capabilities and easy
gains to be had in better trader dashboards to get information when and where
needed.
</p>
<p>
Trader replacement is a little harder but also hackable. There's plenty of
tricks out there to shave a few msecs of computation and execution time, and
bringing bigdata testing and conversion of a sometimes fuzzy human rule-set
into a more rigorous computational exercise.
</p>
<p>
Either way, a trading runtime ends up paving the cow-paths of institutional
finance which look somewhat like this:
</p>
<img src=\"http://hyperq.github.io/assets/ats_features_diagram.png\" alt=\"design\" width=\"100%\" />
<p>
Over at <a href=\"http://hyperq.github.io\">hyperq</a>, we've been thinking about the above diagram and how to get
together a decent trading runtime. Now when a wildly ambitious objective meets
a meager resource base you have two options:
</p>
<ul class=\"org-ul\">
<li>go on a <a href=\"http://hyperq.github.io/../blog/trading-a-hacker-approach/ENOxd.jpg\">kamikaze</a> death march
</li>
<li>take the team on a <a href=\"http://www.qt.com.au/news/abolish-fringe-benefits-tax-bring-back-long-lunch-/1895360/\">long lunch</a> and redefine
</li>
</ul>
<p>
Since this is all open source, our long lunch redefinitional musings led us to
computer sciencing the bejesus out of the trading problem domain.
</p>
<p>
Here's the alternative design specification document we wrote on one of the
drink coasters:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-haskell\"><span class=\"org-function-name\">trade</span> <span class=\"org-variable-name\">::</span> [<span class=\"org-type\">MarketData</span> a] <span class=\"org-variable-name\">-></span> <span class=\"org-type\">Book</span> b <span class=\"org-variable-name\">-></span> <span class=\"org-type\">IO</span> [<span class=\"org-type\">Order</span> b]
<span class=\"org-function-name\">main</span> <span class=\"org-variable-name\">=</span> forever <span class=\"org-variable-name\">.</span> <span class=\"org-keyword\">do</span> <span class=\"org-variable-name\">.</span> trade
</pre>
</div>
<p>
Having just cut 3 months out of our critical path we even had time for some
Zork:
</p>
<blockquote>
<p>
You are in an open field west of a big white house with a boarded
front door.
There is a small mailbox here.<br />
> <br />
<a href=\"http://thcnet.net/error/index.php\">Zork</a>
</p>
</blockquote>
<p>
Long lunch over and the new specs still seem sweet. Some immediate ideas:
</p>
<ul class=\"org-ul\">
<li>the concept of market data becomes naturally abstractable.  Data can
include multiple sources, news flow or whatever universe observation you
can think of. Do you need the Market prefix?
</li>
<li>there is an immediate reminder of real world interaction with the IO monad.
</li>
<li>subsequent functions scan more easily and can be categorized - often as a
matter of taste.  For example, a complex event process (CEP), a fashionable
big deal in trading system circles, seems logically to have this type:
<div class=\"org-src-container\">
<pre class=\"src src-haskell\"><span class=\"org-function-name\">cep</span> <span class=\"org-variable-name\">::</span> [<span class=\"org-type\">MarketData</span> a] <span class=\"org-variable-name\">-></span> <span class=\"org-type\">MarketData</span> a
</pre>
</div>
<p>
Whether to put this prior to or inside the trade function then becomes a
matter of taste.
</p>
</li>
<li>Should the input be [Maybe MarketData a]? This puts the real world
likelihood of the data feed being down front and center, rather than
designing a system assuming an idealized world and then panicking when
something breaks.
</li>
</ul>
<p>
More generally, a more hacker approach leads you away from bigdata phd
solutions that dominate hft and algorithmic trading and towards the important,
small and obvious stuff (that may not lend themselves to a phd dissertation).
The market is closed (unexpectedly) - I better not try and trade, or I had
better try and trade elsewhere given the sorry state of Book a. Gee, there's a
lot of volatility out and about today - is it a big news day? The last news
piece of note was a facebook announcement. Wow, facebook really tanked but but
zygna didn't - what gives there? Someone must have forgot to turn the market
feed on. etc etc
</p>
<p>
And I suspect this approach leads further to a big, big gap in the market.
Imagine on a busy day in the market you could slow down time. The e-mini
suddenly drops by 1% in the space of a few heartbeats. What just happened?
Rewind the video tape and look more carefully at the last few minutes. Look
back at the news-flow over the last 10 minutes and look for keywords. Check
other markets - are they all tanking or is it just a local event? Or did some
human just enter an extra zero or three again?
</p>
<p>
If you can do all of that in a few seconds your process is way ahead of the
competition. The HFT guys have already panicked and run away to hide behind
their statistical order flow models. Algorithmic trades are pinging their stop
loss instructions blindly creating what may be a forecastable trend.
Meanwhile, discretionary day traders have just noticed a small section of one
of their screen is flashing red…
</p>
<p>
In this zone, a hacker trader with a hacker-like trading process can find all
sorts of edges and market tells.
</p>
<p>
So do we want our trading process to look and feel like a big finance
organizational structure? Or should for hyperq to have a Roger Wilco attitude:
</p>
<blockquote>
<p>
Anyway, I aborted the launch and jetted out of there in an escape pod. I
crawled into the sleep chamber, and the next thing I knew, I woke up in a
trash freighter! Yeah, things didn't look too good, but I blasted out of the
freighter in an old jalopy I resurrected from the rubble.
~ <a href=\"http://spacequest.wikia.com/wiki/Roger's_Dialogue\">Roger Wilco</a>
</p>
</blockquote>
<p>
Much more fun than a death march to pave the cow-paths.
</p>" nil nil "cea78f3aad7d936f75cfe8d1504da9b8") (56 (20928 8813 824998) "http://justtesting.org/post/53175916852" "Manuel M T Chakravarty: Data Flow Fusion with Series Expressions in Haskell" nil "Mon, 17 Jun 2013 05:39:34 +0000" "<p>We are currently exploring <em>flow fusion</em>, a new fusion method for purely functional array code that overcomes the main limitation of stream fusion, namely stream fusion’s inability to fuse branching streams. Our current flow-fusion prototype in the Glasgow Haskell Compiler manages to achieve a twofold speedup over stream fusion for computing convex hulls of 2D points using the <a href=\"http://en.wikipedia.org/wiki/QuickHull\">QuickHull</a> algorithm. In fact, the code generated by flow fusion is only a few percent points away from hand-written C code. We have summarised all the details in a draft paper <a href=\"http://www.cse.unsw.edu.au/~chak/papers/BCKR13.html\">Data Flow Fusion with Series Expressions in Haskell</a>.</p>" nil nil "864c81abdaf0011c73371c118ba4fa69") (55 (20928 8813 824459) "http://praisecurseandrecurse.blogspot.com/2013/06/objective-dylan-or-perhaps-subjective-c.html" "Paul Potts: Objective-Dylan, or Perhaps Subjective-C?" "noreply@blogger.com (Paul Potts)" "Mon, 17 Jun 2013 01:09:00 +0000" "<p>Yesterday my wife took the kids with her on an overnight trip to Ann Arbor so I've had a bit of extra quiet time. How am I making use of this bounty? Getting on with some minor home repairs? Cleaning my office from top to bottom? Er, no... porting the game logic I've written so far in Objective-C back to Dylan, so that I can do some more thinking about it.</p> <p>So after a phone job interview yesterday (which went well, I thought -- I'm optimistic about this possibility!) I started working on this task, and then about twelve hours later, around 2 a.m., I had the basic setup and population of the game board working. It's embarrassing to admit how long it took. I started on my Mac, and when I began encountering constant runtime errors switched over to my Ubuntu box, thinking that the Mac version of Open Dylan might just be broken (it isn't; I got the identical behavior on the Linux build). I finally figured out workarounds -- it's funny how taking a break clears my head far better than pressing on ever does -- then read a little Gene Wolfe (I'm working my way through <i>In Green's Jungles</i>, one of his books I've repeatedly tried and failed to finish), and fell asleep with no children in the bed to kick or otherwise interfere with a good night's sleep. I'm back up this morning, had a bath, and I'm drinking a large coffee with soy creamer and stevia and trying to hold off on a lunch break until I have some more done. It's about 10 a.m. and I'm expecting my family back in about six hours, so the race is on!</p> <p>This has taken far longer than I hoped; I lost quite a bit of time stumbling across things in Open Dylan that still seem just plain broken. I had to start working on a smaller and smaller program to figure out exactly what was broken. These things I've flagged in comments, as places where, basically, I wish Dylan worked a certain way, and it doesn't. I may just be asking for something that doesn't quite match the original spec or isn't quite possible, but I'll share those with the Dylan Hackers team and see if it seems like I can help with them. The biggest thing that was broken, though, was me -- my brain, that is -- since it's been a long time since I've worked with Dylan's <b>type-union</b> and <b>singleton</b> pseudo-classes and I had forgotten the details. The compiler was not a big help with this, since it is such a <i>dynamic</i> language and leaves an awful lot of things to the runtime to figure out, which it does by throwing an error message that may or may not help much. The documentation is a bit scanty, but it does contain everything you need to know, if you re-read and squint at the scanty examples that are out there hard enough.</p> <p>The good news is that the port is working and I'd like to share it. Dylan is still up there with Scheme (and now Haskell) as one of my favorite languages for <i>designing</i> programs -- yes, even though Dylan is quite old as languages go. I like to see what it can do especially with generic functions and its sophisticated model for object-oriented <i>dispatch</i>. I've been a little stymied as to how to express the design best in Objective-C. If it was a complicated game design, I wouldn't feel bad about having a program that looked complex. But it's really an elegantly simple game, and so I feel like the implementation should reflect that. My Objective-C implementation has been feeling more and more bloated and pointlessly complex, although it works, so my thought was to get it down to a simple implementation that takes full advantage of Dylan's object-oriented programming features, largely borrowed from CLOS, and then port that back to Objective-C, adding whatever minimalist support is needed to fake up some of the features that Dylan gives me that Objective-C doesn't have. This might be by way of also writing a Haskell or Scala implementation later, for yet more learning and language comparison, although really what I should focus on is getting the iOS GUI up and working so that I have something to show people.</p> <p>Anyway, I've got a Dylan program that plays the Polar game, using singletons to represent tile types, and methods dispatched on singletons to handle specific kinds of collisions. The classes -- which are empty, pretty much used <i>only</i> for their usefulness as types, for driving dispatch -- are like so:</p> <div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-PiK8rgZXxVo/Ubx_P2ZZKtI/AAAAAAAADGA/N3msDgs2kPQ/s1600/tile-classes-75-percent.png\"><img src=\"http://2.bp.blogspot.com/-PiK8rgZXxVo/Ubx_P2ZZKtI/AAAAAAAADGA/N3msDgs2kPQ/s1600/tile-classes-75-percent.png\" border=\"0\" /></a></div> <p>In Dylan you can create some instances, and create something called a <b>type-union</b>, which is something that is a type, I think, but not a class. You can use it to define a slot type or a parameter type. But you can't make one:</p> <pre>define constant $the-bomb = make(<bomb>);<br />define constant $the-empty = make(<empty>);<br />define constant $the-heart = make(<heart>);<br />define constant $the-house = make(<house>);<br />define constant $the-ice-block = make(<ice-block>);<br />define constant $the-mountain = make(<mountain>);<br />define constant $the-tree = make(<tree>);<br /><br />define constant <tile-or-false> = type-union(<br />    singleton( $the-bomb ), singleton( $the-empty ),<br />    singleton( $the-heart ), singleton( $the-house ),<br />    singleton( $the-ice-block ), singleton( $the-mountain ),<br />    singleton( $the-tree ), singleton( #f ) );</pre> <p>And eventually dispatch on singletons -- meaning that a given method will be called with it is called with references to the exact objects that you specify:</p> <pre>define method collide( model :: <model>, dir :: <dir>,<br />    heart-pos :: <pos>, heart-tile == $the-heart,<br />    house-pos :: <pos>, house-tile == $the-house )<br />    format-out( \"collide: $the-heart / $the-house\\n\" );<br />    setTileAtPos( model, heart-pos, $the-empty );<br />    model.decrementHeartCount();<br />end;</pre> <p>That gives you an idea of how some of the code in the Dylan program is organized. I have it mostly working, however, I'm not going to present the full code quite yet because I have a crashing bug, and I haven't yet been able to figure out if it is a dumb mistake on my part or a compiler or runtime bug in Open Dylan. I've also asked the Dylan hackers to take a look at my design and see what they think -- if they can find, as I put it, \"a simpler design struggling to get out.\" Which is always the challenge, when trying to write not just functional, but <i>model</i> code, isn't it?</p>" nil nil "ad22292acb04a9ab92001802cff43d97") (54 (20928 8813 823309) "http://gentoohaskell.wordpress.com/2013/06/16/call-for-help-wiki-gentoo-org-documentation/" "The Gentoo Haskell Team: Call for help: wiki.gentoo.org documentation" nil "Sun, 16 Jun 2013 19:30:25 +0000" "<p>I’d like to ask gentoo-haskell community for help. We have a nice <a href=\"http://wiki.gentoo.org\">wiki</a> and our project page have moved <a href=\"http://wiki.gentoo.org/wiki/Project:Haskell\">there</a>. But it seems that we don’t have enough documentation quality for end-user application. As a developers we support proper builds and tests for that packages but we are not expert users for many of them. So I’d like to ask community to add some docs and tips for applications you use. This basically means installation, advanced config (examples), interesting use cases, links to external resources (blog posts/documentation) and so on. It can help a lot for new Gentoo users.</p>
<p>The most interesting projects are:</p>
<ul>
<li><a href=\"http://wiki.gentoo.org/wiki/Pandoc\">pandoc</a></li>
<li><a href=\"http://wiki.gentoo.org/wiki/Git-annex\">git-annex</a></li>
<li><a href=\"http://wiki.gentoo.org/wiki/Gitit\">gitit</a></li>
<li><a href=\"http://wiki.gentoo.org/wiki/yi\">yi</a></li>
<li><a href=\"http://wiki.gentoo.org/wiki/Xmonad\">xmonad</a></li>
</ul>
<p>Thanks!</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/gentoohaskell.wordpress.com/86/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/gentoohaskell.wordpress.com/86/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=gentoohaskell.wordpress.com&blog=7667502&post=86&subd=gentoohaskell&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "ec6ce914662995bca5ac9daad6770581") (53 (20928 8813 822818) "http://lambda.jstolarek.com/2013/06/getting-friendly-with-stg/" "Jan Stolarek: Getting friendly with STG" nil "Thu, 13 Jun 2013 20:45:46 +0000" "<p style=\"text-align: justify;\">I’ve been spending last months on developing GHC. No rocket science so far, just a bit of hacking here and there. The biggest thing I am working on is <a href=\"http://hackage.haskell.org/trac/ghc/ticket/6135\">ticket #6135</a>, which is about changing some of the existing <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Commentary/PrimOps\">PrimOps</a> to return unboxed <code>Int#</code> instead of <code>Bool</code>. This means that the result of comparing two unboxed values will be either an unboxed <code>0#</code> or unboxed <code>1#</code>, instead of a tagged pointer to statically allocated object representing <code>True</code> or <code>False</code>. This modification will allow to write branchless algorithms in Haskell. I promise to write about this one day, but today I want to blog about a different topic.</p>
<p style=\"text-align: justify;\">It so happens that things I’ve been doing in GHC require me to make changes in the code generator. This is a bit challenging for me, because the code generator is something that didn’t interest me much when I started to learn about compilers. Probably the main reason for this is that code generation means dealing with assembly. I’ve been programming for about 16 years and only two languages caused me problems when I tried to learn them. Assembly is one of them<sup><a title=\" In case you’re interested, the other one is Io\" href=\"http://lambda.jstolarek.com/2013/06/getting-friendly-with-stg/#footnote_0_1210\" id=\"identifier_0_1210\" class=\"footnote-link footnote-identifier-link\">1</a></sup>. I have been learning it for one year during my studies and, although I had no problems with understanding the idea behind assembly and writing short snippets of code, writing a larger piece of code always ended up in a headache.</p>
<p style=\"text-align: justify;\">It looks that the time has come to overcome my fear. During last months I’ve been reading a lot of assembly generated by GHC and I even made some attempts at writing assembly code by myself (well, using intrinsics, but I guess that counts). But between Haskell source code and the generated executable there are many intermediate steps. From my observations it seems that many Haskellers have basic knowledge of Core – GHC’s intermediate language. Most have also heard about other two intermediate representations used by GHC – STG and Cmm – but it seems that few people know them, unless they hack the compiler. And since I’m hacking the compiler I should probably have more knowledge about these two representations, right?</p>
<p style=\"text-align: justify;\">There’s a classic paper by Simon Peyton-Jones “Implementing lazy functional languages on stock hardware: the Spineless Tagless G-machine”. It is quite long – 87 pages total – and, being published in 1992, it is mostly out of date. These two things kept me from reading it, although I think that being out of date was only a pretext for me to avoid reading almost 90 pages of text. But, since I need to learn about STG, I finally decided to give it a shot. Reading the paper took my four days. Paper is very well written and in general is an easy read. I was afraid that I might not understand formal description of operational semantics of STG, but it turned out to be well explained so I had no problem with that. The major problem turned out to be the amount of knowledge I had to learn while reading. This resulted in problems with fully understanding last sections of the paper. Not because they are more difficult than the initial ones, but because I didn’t fully remember all the details that were discussed earlier. An important question is which information is not up to date. I’m not yet familiar with the existing implementation, but it seems that many things have changed: the Spineless Tagless G-machine is not tagless any more since the introduction of pointer tagging; curried function are now evaluated using eval/apply convention, while the paper describes push/enter; the paper discusses only compilation to C, while currently C back-end is becoming deprecated in favour of native code generator and LLVM; and finally the layout of closures is now slightly different than the one presented in the paper. I am almost certain that garbage collection is also performed differently. These are the differences that I noticed, which means that really a lot has changed since the publication over 20 years ago. Surprisingly, this doesn’t seem like a big problem, because the most important thing is that the paper presents an idea of how STG works, while the mentioned changes are only not so important details.</p>
<p style=\"text-align: justify;\">So, now that I have a basic idea of how STG works, what comes next? There are a few follow up papers:</p>
<ul>
<li style=\"text-align: justify;\">“The STG runtime system (revised)” – an updated description of STG written in 1999 by Simon Peyton Jones and Simon Marlow. I guess it’s also outdated, but still probably worth reading. It has only 65 pages :)</li>
<li style=\"text-align: justify;\">“Making a Fast Curry. Push-Enter vs. Eval-Apply for Higher-order Languages” – this described the mentioned eval/apply and push/enter strategies. Already read this one.</li>
<li style=\"text-align: justify;\">“Faster Laziness Using Dynamic Pointer Tagging” – this will tell you why STG is not tagless. Read this one also.</li>
</ul>
<p>And once I’ll deal with STG I’ll have to learn about Cmm.</p>
<ol class=\"footnotes\"><li id=\"footnote_0_1210\" class=\"footnote\"> In case you’re interested, the other one is <a href=\"http://iolanguage.org/\">Io</a></li></ol>" nil nil "803bc25112ad69a512cffafe934a7851") (52 (20928 8813 702665) "http://parenz.wordpress.com/2013/06/12/ghcjs-build/" "Daniil Frumin: Building GHCJS" nil "Thu, 13 Jun 2013 06:05:11 +0000" "<div id=\"outline-container-sec-1\" class=\"outline-2\">
<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Intro</h2>
<div id=\"text-1\" class=\"outline-text-2\">
<p>
In this post I would like to talk about my experience with<br />
bootstrapping <a href=\"http://weblog.luite.com/wordpress/?p=14\">GHCJS</a> using the provided facilities <a href=\"https://github.com/ghcjs/ghcjs-build\">ghcjs-build</a>. I<br />
never used tools like Vagrant or Puppet before so all of this was<br />
kinda new to me.
</p>
</div>
</div>
<div id=\"outline-container-sec-2\" class=\"outline-2\">
<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Initial installation</h2>
<div id=\"text-2\" class=\"outline-text-2\">
<p>
GHCJS can’t actually work with vanilla GHC 7.* as it requires to<br />
apply some patches (in order to get JS ffi to work, it adds<br />
<code>JavaScriptFFI</code> language extension among other modifications).
</p>
<p>
<a href=\"https://github.com/ghcjs/ghcjs-build\">ghcjs-build</a> uses <a href=\"http://vagrantup.com\">Vagrant</a> (a tool for automatically building and<br />
running work environments) to mange the work environment, so prior to<br />
running GHCJS you need to install vagrant and <a href=\"http://virtualbox.org\">VirtualBox</a>. It’s actually<br />
a sensible way to tackle a project like that: everyone has similar<br />
work environments, you don’t have to mess with your local GHC<br />
installation. It also make use of <a href=\"http://puppetlabs.com\">Puppet</a> deployment system in<br />
<code>puppetlabs-vcsrepo</code> module for cloning Git repositories.
</p>
<p>
Currently, there are two ways to start up GHCJS using <code>ghcjs-build</code>
</p>
</div>
<div id=\"outline-container-sec-2-1\" class=\"outline-3\">
<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> Using the prebuilt version</h3>
<div id=\"text-2-1\" class=\"outline-text-3\">
<div class=\"org-src-container\">
<pre class=\"src src-sh\">git clone https://github.com/ghcjs/ghcjs-build.git
<span style=\"color: #D0D0FF;\">cd</span> ghcjs-build
git checkout prebuilt
vagrant up
</pre>
</div>
<p>
Using this configuration the following procedures are performed:
</p>
<ol class=\"org-ol\">
<li>Vagrant sets up a 32-bit Ubuntu Precise system (/Note: if this is<br />
your first time running Vagrant it downloads the 280Mb<br />
precise32.box file from the Vagrant site/)
</li>
<li>Vagrants does some provisioning using Puppet (downloads and<br />
installs necessary packages)
</li>
<li>A 1.4GB archive with ghcjs and other prebuilt tools are downloaded<br />
and extracted.
</li>
</ol>
</div>
</div>
<div id=\"outline-container-sec-2-2\" class=\"outline-3\">
<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> Compiling from source</h3>
<div id=\"text-2-2\" class=\"outline-text-3\">
<div class=\"org-src-container\">
<pre class=\"src src-sh\">git clone https://github.com/ghcjs/ghcjs-build.git
<span style=\"color: #D0D0FF;\">cd</span> ghcjs-build
vagrant up
</pre>
</div>
<p>
Apart from setting up the box this will
</p>
<ol class=\"org-ol\">
<li>Get the GHC sources from Git HEAD and applies the GHCJS <a href=\"http://ghcjs.github.io/patches/ghc-ghcjs.patch\">patch</a>.
</li>
<li>Get all the necessary packages for ghcjs
</li>
<li>Get the latest Cabal from Git HEAD, applies the GHCJS <a href=\"http://ghcjs.github.io/patches/cabal-ghcjs.patch\">patch</a> and<br />
build it.
</li>
<li>Compile the necessary libraries using ghcjs
</li>
<li>Compile <code>ghcjs-examples</code> and its dependencies (it appears that it<br />
can take a lot of time to compile gtk2hs and gtk2hs’s tools)
</li>
</ol>
<p>
Please note, that depending on your computer, you might want to go for<br />
a long walk, enjoy a small book or get a night sleep (assuming you are<br />
not scared by the sound of computer fans).
</p>
<p>
Apart from being slow, the process of compiling everything from<br />
source is error prone. To give you a taste, last night I was not able<br />
to reproduce a working environment myself, because of some recent<br />
changes in GHC HEAD. The prebuilt version on the other hand is<br />
guaranteed to install correctly.
</p>
<p>
Hopefully, the GHCJS patches will be merged upstream before the GHC<br />
7.8 is out. That way you won’t need to partake in building GHC from<br />
the source in order to use GHCJS.
</p>
</div>
</div>
<div id=\"outline-container-sec-2-3\" class=\"outline-3\">
<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> Communicating with the VM</h3>
<div id=\"text-2-3\" class=\"outline-text-3\">
<p>
After you’ve finished with the initial setup you should be able just<br />
to
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">vagrant ssh
</pre>
</div>
<p>
in your new vm and start messing around.
</p>
<p>
<code>ghcjs</code> command is available to you and Vagrant kindly forwards the<br />
3000 port on the VM to the local 3030 port, allowing you to run web<br />
servers like <code>warp</code> on the VM and accessing them locally.
</p>
<p>
You can access your local project directory under <code>/vagrant</code> in VM:
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">$ ls /vagrant
keys  manifests  modules  outputs  README.rst  Vagrantfile
</pre>
</div>
<p>
However, copying file back-and-forth is not a perfect solution. I<br />
recommend setting up a sshfs filesystem (<i>Note: if you are on OSX,<br />
don’t forget to install fuse4x kernel extension</i>):
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">$ vagrant ssh-config
Host default
HostName 127.0.0.1
User vagrant
Port 2222
UserKnownHostsFile /dev/null
StrictHostKeyChecking no
PasswordAuthentication no
IdentityFile <span style=\"color: #b5bd68;\">\"/Users/dan/.vagrant.d/insecure_private_key\"</span>
IdentitiesOnly yes
LogLevel FATAL
$ sshfs vagrant@localhost:/home/vagrant ../vm -p2222 -oreconnect,defer_permissions,negative_vncache,<span style=\"color: #cc6666;\">volname</span>=ghcjs,<span style=\"color: #cc6666;\">IdentityFile</span>=~/.vagrant.d/insecure_private_key
$ ls ../vm
</pre>
</div>
<p>
When you are done you can just <code>umount ../vm</code>
</p>
</div>
</div>
</div>
<div id=\"outline-container-sec-3\" class=\"outline-2\">
<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> Compiling other packages</h2>
<div id=\"text-3\" class=\"outline-text-2\">
<p>
Since the <code>diagrams</code> package on Hackage depends on the older version<br />
of base we are going to use the latest version from Git:
</p>
<pre class=\"example\">mkdir dia; cd dia
git clone git://github.com/diagrams/diagrams-core.git
cd diagram-core && cabal install && cd ..
cabal unpack active
cd active-0.1*
cat >version.patch <<EOF
--- active.cabal        2013-06-12 12:58:40.082914214 +0000
+++ active.cabal.new    2013-06-12 12:58:31.029465815 +0000
@@ -19,7 +19,7 @@
library
exposed-modules:     Data.Active
-  build-depends:       base >= 4.0 && < 4.7,
+  build-depends:       base >= 4.0 && < 4.8,
array >= 0.3 && < 0.5,
semigroups >= 0.1 && < 0.10,
semigroupoids >= 1.2 && < 3.1,
@@ -31,7 +31,7 @@
test-suite active-tests
type:              exitcode-stdio-1.0
main-is:           active-tests.hs
-    build-depends:     base >= 4.0 && < 4.7,
+    build-depends:     base >= 4.0 && < 4.8,
array >= 0.3 && < 0.5,
semigroups >= 0.1 && < 0.10,
semigroupoids >= 1.2 && < 3.1,
EOF
patch active.cabal < version.patch
cabal install
cd ..
git clone git://github.com/diagrams/diagrams-lib.git
cd diagrams-lib && cabal install && cd ..
git clone git://github.com/diagrams/diagrams-svg.git
cd diagram-svg && cabal install && cd ..
</pre>
<p>
Other packages I had to install already had their Hackage versions<br />
updated.
</p>
<p>
Now you can try to build a test diagram to see that everything works
</p>
<div class=\"org-src-container\">
<pre class=\"src src-haskell\"><span style=\"color: #b294bb;\">module</span> <span style=\"color: #f0c674;\">Main</span> <span style=\"color: #b294bb;\">where</span>
<span style=\"color: #b294bb;\">import</span> <span style=\"color: #f0c674;\">Diagrams.Prelude</span>
<span style=\"color: #b294bb;\">import</span> <span style=\"color: #f0c674;\">Diagrams.Backend.SVG.CmdLine</span>
<span style=\"color: #81a2be;\">d</span> <span style=\"color: #cc6666;\">::</span> <span style=\"color: #f0c674;\">Diagram</span> <span style=\"color: #f0c674;\">SVG</span> <span style=\"color: #f0c674;\">R2</span>
<span style=\"color: #81a2be;\">d</span> <span style=\"color: #cc6666;\">=</span> square 20 <span style=\"color: #cc6666;\">#</span> lw 0<span style=\"color: #cc6666;\">.</span>5
<span style=\"color: #cc6666;\">#</span> fc black
<span style=\"color: #cc6666;\">#</span> lc green
<span style=\"color: #cc6666;\">#</span> dashing [0<span style=\"color: #cc6666;\">.</span>2,0<span style=\"color: #cc6666;\">.</span>2] 0
<span style=\"color: #81a2be;\">main</span> <span style=\"color: #cc6666;\">=</span> defaultMain (pad 1<span style=\"color: #cc6666;\">.</span>1 d)
</pre>
</div>
<p>
then you can compile and run it
</p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">ghc --make Test.hs
./Test -w 400 -o /vagrant/test.svg
</pre>
</div>
<p><a href=\"http://parenz.files.wordpress.com/2013/06/screen-shot-2013-06-12-at-5-19-03-pm.png\"><img src=\"http://parenz.files.wordpress.com/2013/06/screen-shot-2013-06-12-at-5-19-03-pm.png?w=300&h=289\" alt=\"Screen Shot 2013-06-12 at 5.19.03 PM\" height=\"289\" class=\"alignnone size-medium wp-image-47\" width=\"300\" /></a></p>
<p>
And that’s it!
</p>
</div>
</div>
<div id=\"outline-container-sec-4\" class=\"outline-2\">
<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> Outro</h2>
<div id=\"text-4\" class=\"outline-text-2\">
<p>
I would also like to note that we are currently polishing the GHCJS<br />
build process. Luite, especially is working on making ghcjs work (and<br />
run tests) with <a href=\"https://travis-ci.org/\">Travis CI</a> (it take quite a bit of time to build ghcjs<br />
and sometimes travis is timeouting) and I am working on tidying up<br />
the build config.
</p>
<p>
Stay tuned for more updates.
</p>
</div>
</div>
<br /> Tagged: <a href=\"http://parenz.wordpress.com/tag/diagrams/\">diagrams</a>, <a href=\"http://parenz.wordpress.com/tag/ghcjs/\">ghcjs</a>, <a href=\"http://parenz.wordpress.com/tag/haskell-2/\">haskell</a>, <a href=\"http://parenz.wordpress.com/tag/soc/\">soc</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/parenz.wordpress.com/49/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/parenz.wordpress.com/49/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=parenz.wordpress.com&blog=26722965&post=49&subd=parenz&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "fbb67a5fcb9b5d5721283c237da01f6c") (51 (20928 8813 701006) "http://parenz.wordpress.com/2013/06/10/soc-2013/" "Daniil Frumin: Summer of Code" nil "Wed, 12 Jun 2013 14:17:57 +0000" "<p>Hello, everyone!</p>
<p>I’ve decided to reinstate this blog since I’ve got accepted to this year’s Google Summer of Code program. I’ll blog about my updates, stuff that I’ve been working on and bottlenecks and problems I’ve encountered.</p>
<p>My project is a pastebin site using diagrams and <a href=\"http://weblog.luite.com/wordpress/?p=14\">GHCJS</a> to generate embeddable interactive widgets and static images/text in case when the pasted code does not require additional interaction. My mentor is Luite Stegeman, and Brent Yorgey and other nice people from the diagrams community has agreed to help.</p>
<p>I am very excited about this and happy that I’ve got a whole bunch of smart people to help me with this.</p>
<p>Unfortunately, as we haven’t sorted out a completely safe way to evaluate code coming from 3rd parties, there is no public version hosted anywhere yet. Meanwhile, there is a <a href=\"https://github.com/co-dan/interactive-diagrams\">project on GitHub</a>.</p>
<p>Hopefully, soon I’ll be able to publish a post about my experience with bootstrapping GHCJS.<br />
Until then, stay tuned!</p>
<br /> Tagged: <a href=\"http://parenz.wordpress.com/tag/diagrams/\">diagrams</a>, <a href=\"http://parenz.wordpress.com/tag/ghcjs/\">ghcjs</a>, <a href=\"http://parenz.wordpress.com/tag/haskell-2/\">haskell</a>, <a href=\"http://parenz.wordpress.com/tag/interactive-diagrams/\">interactive-diagrams</a>, <a href=\"http://parenz.wordpress.com/tag/soc/\">soc</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/parenz.wordpress.com/42/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/parenz.wordpress.com/42/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=parenz.wordpress.com&blog=26722965&post=42&subd=parenz&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "433a0620a71d0a3cfa284d636f3e6bc1") (50 (20928 8813 700321) "http://blog.moertel.com/posts/2013-06-12-recursion-to-iteration-4-trampolines.html" "Tom Moertel: Tricks of the trade: Recursion to Iteration, Part 4: The Trampoline" nil "Wed, 12 Jun 2013 00:00:00 +0000" "<div class=\"info\">Posted on June 12, 2013</div>
<div class=\"tags\">Tags: <a href=\"http://blog.moertel.com/tags/programming.html\">programming</a>, <a href=\"http://blog.moertel.com/tags/recursion.html\">recursion</a>, <a href=\"http://blog.moertel.com/tags/iteration.html\">iteration</a>, <a href=\"http://blog.moertel.com/tags/python.html\">python</a>, <a href=\"http://blog.moertel.com/tags/recursion-to-iteration series.html\">recursion-to-iteration series</a>, <a href=\"http://blog.moertel.com/tags/tail calls.html\">tail calls</a>, <a href=\"http://blog.moertel.com/tags/data structures.html\">data structures</a>, <a href=\"http://blog.moertel.com/tags/trampolines.html\">trampolines</a></div>
<p>This is the fourth article in <a href=\"http://blog.moertel.com/tags/recursion-to-iteration%20series.html\">a series on converting recursive algorithms into iterative algorithms</a>. If you haven’t read the earlier articles first, you may want to do so before continuing.</p>
<p>In <a href=\"http://blog.moertel.com/posts/2013-05-11-recursive-to-iterative.html\">the first article of our series</a>, we showed that if you can convert an algorithm’s recursive calls into tail calls, you can eliminate those tail calls to create an iterative version of the algorithm using The Simple Method. In this article, we’ll look at another way to eliminate tail calls: the <em>trampoline</em>.</p>
<p>The idea behind the trampoline is this: before making a tail call, manually remove the current execution frame from the stack, eliminating stack build-up.</p>
<h3 id=\"execution-frames-and-the-stack\">Execution frames and the stack</h3>
<p>To understand why we might want to manually remove an execution frame, let’s back up and think about what happens when we call a function. The language runtime needs some place to store housekeeping information and any local variables the function may use, so it allocates a new execution frame on the stack. Then it turns control over to the function. When the function is done, it executes a <code>return</code> statement. This statement tells the runtime to remove the execution frame from the stack and to give control (and any result) back to the caller.</p>
<p>But what if the function doesn’t return right away? What if it makes another function call instead? In that case, the runtime must create a new execution frame for <em>that</em> call and push it onto the stack, on top of the current frame. If the function ends up calling itself many times recursively, each call will add another frame to the stack, and pretty soon we will have eaten up a lot of stack space.</p>
<h3 id=\"eliminating-stack-build-up\">Eliminating stack build-up</h3>
<p>To avoid this problem, some programming languages guarantee that they will recycle the current execution frame whenever a function makes a tail call. That is, if the function calls some other function (or itself recursively) and just returns that function’s result verbatim, that’s a tail call. In that case, the runtime will recycle the current function’s execution frame before transferring control to the other function, making it so that the other function will return its result directly to the original function’s caller. This process is called <em>tail-call elimination</em>.</p>
<p>But in languages like Python that don’t offer tail-call elimination, every call, even if it’s a tail call, pushes a new frame onto the stack. So if we want to prevent stack build-up, we must somehow eliminate the current frame from the stack ourselves, before making a tail call.</p>
<p>But how? The only obvious way to eliminate the current frame is to <code>return</code> to our caller. If we’re to make this work, then, the caller must be willing to help us out. That’s where the trampoline comes in. It’s our co-conspirator in the plot to eliminate stack build-up.</p>
<h3 id=\"the-trampoline\">The trampoline</h3>
<p>Here’s what the trampoline does:</p>
<ol style=\"\">
<li>It calls our function <code>f</code>, making itself the current caller.</li>
<li>When <code>f</code> wants to make a recursive tail call to itself, it returns the instruction <code>call(f)(*args, **kwds)</code>. The language runtime dutifully removes the current execution frame from the stack and returns control to the trampoline, passing it the instruction.</li>
<li>The trampoline interprets the instruction and calls <code>f</code> back, giving it the supplied arguments, and again making itself the caller.</li>
<li>This process repeats until <code>f</code> wants to return a final result <code>z</code>; then it returns the new instruction <code>result(z)</code> instead. As before, the runtime removes the current execution frame from the stack and returns control to the trampoline.</li>
<li>But now when the trampoline interprets the new instruction it will return <code>z</code> to <em>its</em> caller, ending the trampoline dance.</li>
</ol>
<p>Now you can see how the trampoline got its name. When our function uses a <code>return</code> statement to remove its own execution frame from the stack, the trampoline bounces control back to it with new arguments.</p>
<p>Here’s a simple implementation. First, we will encode our instructions to the trampoline as triples. We’ll let <code>call(f)(*args, **kwds)</code> be the triple <code>(f, args, kwds)</code>, and <code>result(z)</code> be the triple <code>(None, z, None)</code>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> call(f):
<span class=\"co\">\"\"\"Instruct trampoline to call f with the args that follow.\"\"\"</span>
<span class=\"kw\">def</span> g(*args, **kwds):
<span class=\"kw\">return</span> f, args, kwds
<span class=\"kw\">return</span> g
<span class=\"kw\">def</span> result(value):
<span class=\"co\">\"\"\"Instruct trampoline to stop iterating and return a value.\"\"\"</span>
<span class=\"kw\">return</span> <span class=\"ot\">None</span>, value, <span class=\"ot\">None</span></code></pre>
<p>Now we’ll create a decorator to wrap a function with a trampoline that will interpret the instructions that the function returns:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"ch\">import</span> functools
<span class=\"kw\">def</span> with_trampoline(f):
<span class=\"co\">\"\"\"Wrap a trampoline around a function that expects a trampoline.\"\"\"</span>
<span class=\"ot\">@functools.wraps</span>(f)
<span class=\"kw\">def</span> g(*args, **kwds):
h = f
<span class=\"co\"># the trampoline</span>
<span class=\"kw\">while</span> h is not <span class=\"ot\">None</span>:
h, args, kwds = h(*args, **kwds)
<span class=\"kw\">return</span> args
<span class=\"kw\">return</span> g</code></pre>
<p>Note that the trampoline boils down to three lines:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">while</span> h is not <span class=\"ot\">None</span>:
h, args, kwds = h(*args, **kwds)
<span class=\"kw\">return</span> args</code></pre>
<p>Basically, the trampoline keeps calling whatever function is in <code>h</code> until that function returns a <code>result(z)</code> instruction, at which time the loop exits and <code>z</code> is returned. The original recursive tail calls have been boiled down to a <code>while</code> loop. Recursion has become iteration.</p>
<h3 id=\"example-factorial\">Example: factorial</h3>
<p>To see how we might use this implementation, let’s return to the factorial example from <a href=\"http://blog.moertel.com/posts/2013-05-11-recursive-to-iterative.html\">the first article in our series</a>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> factorial(n):
<span class=\"kw\">if</span> n < <span class=\"dv\">2</span>:
<span class=\"kw\">return</span> <span class=\"dv\">1</span>
<span class=\"kw\">return</span> n * factorial(n - <span class=\"dv\">1</span>)</code></pre>
<p>Step one, as before, is to tail-convert the lone recursive call:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"> <span class=\"kw\">def</span> factorial(n, acc=<span class=\"dv\">1</span>):
<span class=\"kw\">if</span> n < <span class=\"dv\">2</span>:
<span class=\"kw\">return</span> acc
<span class=\"kw\">return</span> factorial(n - <span class=\"dv\">1</span>, acc * n)</code></pre>
<p>Now we can create an equivalent function that uses trampoline idioms:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> trampoline_factorial(n, acc=<span class=\"dv\">1</span>):
<span class=\"kw\">if</span> n < <span class=\"dv\">2</span>:
<span class=\"kw\">return</span> result(acc)
<span class=\"kw\">return</span> call(trampoline_factorial)(n - <span class=\"dv\">1</span>, n * acc)</code></pre>
<p>Note how the <code>return</code> statements have been transformed.</p>
<p>Finally, we can wrap this function with a trampoline to get a callable version that we can use just like the original:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\">factorial = with_trampoline(trampoline_factorial)</code></pre>
<p>Let’s take it for a spin:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\">>>> factorial(<span class=\"dv\">5</span>)
<span class=\"dv\">120</span></code></pre>
<p>To really see what’s going on, be sure to use the Online Python Tutor’s visualizer to step through the original, tail-recursive, and trampoline versions of the function. Just open this link: <a href=\"http://www.pythontutor.com/visualize.html#code=%23+our+trampoline+library%0A%0Aimport+functools%0A%0Adef+call(f)%3A%0A++++%22%22%22Instruct+trampoline+to+call+f+with+the+args+that+follow.%22%22%22%0A++++def+g(*args,+**kwds)%3A%0A++++++++return+f,+args,+kwds%0A++++return+g%0A%0Adef+result(value)%3A%0A++++%22%22%22Instruct+trampoline+to+stop+iterating+and+return+a+value.%22%22%22%0A++++return+None,+value,+None%0A%0Adef+with_trampoline(f)%3A%0A++++%22%22%22Wrap+a+trampoline+around+a+function+that+expects+a+trampoline.%22%22%22%0A++++%40functools.wraps(f)%0A++++def+g(*args,+**kwds)%3A%0A++++++++h+%3D+f%0A++++++++%23+the+trampoline%0A++++++++while+h+is+not+None%3A%0A++++++++++++h,+args,+kwds+%3D+h(*args,+**kwds)%0A++++++++return+args%0A++++return+g%0A%0A%0A%23+original+recursive+version+of+factorial+function%0A%0Adef+factorial(n)%3A%0A++++if+n+%3C+2%3A%0A++++++++return+1%0A++++return+n+*+factorial(n+-+1)%0A%0Aprint+factorial(5)%0A%0A%0A%23+tail-call+recursive+version%0A%0Adef+factorial(n,+acc%3D1)%3A%0A+++++if+n+%3C+2%3A%0A+++++++++return+acc%0A+++++return+factorial(n+-+1,+acc+*+n)%0A%0Aprint+factorial(5)%0A%0A%0A%23+trampoline-based+tail-call+version+(%3D+iterative)%0A%0Adef+trampoline_factorial(n,+acc%3D1)%3A%0A++++if+n+%3C+2%3A%0A++++++++return+result(acc)%0A++++return+call(trampoline_factorial)(n+-+1,+n+*+acc)%0A%0Afactorial+%3D+with_trampoline(trampoline_factorial)%0A%0Aprint+factorial(5)%0A&mode=display&cumulative=false&heapPrimitives=false&drawParentPointers=false&textReferences=false&showOnlyOutputs=false&py=2&curInstr=0\">Visualize the execution</a>. (ProTip: use a new tab.)</p>
<h3 id=\"why-use-the-trampoline\">Why use the trampoline?</h3>
<p>As I mentioned at the beginning of this article, if you can convert a function’s recursive calls into tail calls – which you must do to use a trampoline – you can also use the Simple Method on the function. For example, here’s what the Simple Method does to our original <code>factorial</code> function:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> factorial(n, acc=<span class=\"dv\">1</span>):
<span class=\"kw\">while</span> n > <span class=\"dv\">1</span>:
(n, acc) = (n - <span class=\"dv\">1</span>, acc * n)
<span class=\"kw\">return</span> acc</code></pre>
<p>This version is simpler and more efficient than the trampoline version. So why not use the Simple Method always?</p>
<p>The answer is that the Simple Method is tricky to apply to functions that make tail calls from within loops. Recall that it introduces a loop around a function’s body and replaces recursive tail calls with <code>continue</code> statements. But if the function already has its own loops, replacing a tail call within one of them with a <code>continue</code> statement will restart that inner loop instead of the whole-body loop, as desired. In that case, you must add condition flags to make sure the right loop gets restarted, and that gets old fast. Then, using a trampoline may be a win.</p>
<p>That said, I almost never use trampolines. Getting a function into tail-call form is nine tenths of the battle. If I’ve gone that far already, I’ll usually go the rest of the way to get a tight, iterative version.</p>
<p>Why, then, did we make this effort to understand the trampoline? Two reasons. First, it’s semi-common in programming lore, so it’s best to know about it. Second, it’s a stepping stone to a more-general, more-powerful technique: <em>continuation-passing-style expressions</em>. That’s our subject for next time.</p>
<p>In the meantime, if you want another take on trampolines in Python, Kyle Miller wrote a nice article on the subject: <a href=\"http://web.mit.edu/kmill/www/programming/tailcall.html\">Tail call recursion in Python</a>.</p>
<p>Thanks for reading! As always, if you have questions or comments, please leave a comment on the blog or hit me at <a href=\"https://twitter.com/tmoertel\">@tmoertel</a>.</p>" nil nil "d82d170f531ae2a3660a73071218b9f1") (49 (20928 8813 694800) "http://izbicki.me/blog/hlearns-code-is-shorter-and-clearer-than-wekas?utm_source=rss&utm_medium=rss&utm_campaign=hlearns-code-is-shorter-and-clearer-than-wekas" "Mike Izbicki: =?utf-8?Q?HLearn=E2=80=99s?= code is shorter and clearer than =?utf-8?Q?Weka=E2=80=99s?=" nil "Tue, 11 Jun 2013 17:50:09 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /></p>
<p>Haskell code is expressive.  The <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn library</a> uses 6 lines of Haskell to define a function for training a Bayesian classifier; the equivalent code in the <a href=\"http://www.cs.waikato.ac.nz/ml/weka/\">Weka library</a> uses over 100 lines of Java.  That’s a big difference!  In this post, we’ll look at the actual code and see why the Haskell is so much more concise.</p>
<p><strong>But first, a disclaimer:</strong>  It is really hard to fairly compare two code bases this way.  In both libraries, there is a lot of supporting code that goes into defining each classifier, and it’s not obvious what code to include and not include.  For example, both libraries implement interfaces to a number of probability distributions, and this code is not contained in the source count.  The Haskell code takes more advantage of this abstraction, so this is one language-agnostic reason why the Haskell code is shorter.  If you think I’m not doing a fair comparison, here’s some links to the full repositories so you can do it yourself:</p>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\"><a href=\"https://github.com/mikeizbicki/HLearn/blob/master/HLearn-classification/src/HLearn/Models/Classifiers/Bayes.hs\">HLearn’s bayesian classifier source code</a> (74 lines of code)</span></li>
<li><a href=\"https://svn.cms.waikato.ac.nz/svn/weka/trunk/weka/src/main/java/weka/classifiers/bayes/NaiveBayes.java\">Weka’s naive bayes source code</a> (946 lines of code)</li>
</ul>
<p><span id=\"more-2520\"></span></p>
<h3>The HLearn code</h3>
<p>HLearn implements training for a <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">bayesian classifier</a> with these six lines of Haskell:</p>
<pre>newtype Bayes labelIndex dist = Bayes dist
deriving (Read,Show,Eq,Ord,Monoid,Abelian,Group)
instance (Monoid dist, HomTrainer dist) => HomTrainer (Bayes labelIndex dist) where
type Datapoint (Bayes labelIndex dist) = Datapoint dist
train1dp dp = Bayes $ train1dp dp</pre>
<p>This code elegantly captures how to train a Bayesian classifier—just train a probability distribution.  Here’s an explanation:</p>
<ul>
<li>The first two lines define the Bayes data type as a wrapper around a distribution.</li>
<li>The fourth line says that we’re implementing the Bayesian classifier using the HomTrainer type class.  We do this because <strong>the Haskell compiler automatically generates a parallel batch training function, an online training function, and a fast cross-validation function for all HomTrainer instances.</strong></li>
<li>The fifth line says that our data points have the same type as the underlying distribution.</li>
<li>The sixth line says that in order to train, just train the corresponding distribution.</li>
</ul>
<p>We only get the benefits of the HomTrainer type class because the bayesian classifier is a monoid.  But we didn’t even have to specify what the monoid instance for bayesian classifiers looks like!  In this case, it’s automatically derived from the monoid instances for the base distributions using a language extension called <a href=\"http://www.haskell.org/ghc/docs/7.6.1/html/users_guide/deriving.html\">GeneralizedNewtypeDeriving</a>.  For examples of these monoid structures, check out the algebraic structure of the <a href=\"http://izbicki.me/blog/gausian-distributions-are-monoids\">normal</a> and <a href=\"http://izbicki.me/blog/the-categorical-distributions-algebraic-structure\">categorical</a> distributions, or more complex distributions using <a href=\"http://izbicki.me/blog/markov-networks-monoids-and-futurama\">Markov networks</a>.</p>
<h3>The Weka code</h3>
<p>Look for these differences between the HLearn and Weka source:</p>
<ul>
<li>In Weka we must separately define the online and batch trainers, whereas Haskell derived these for us automatically.</li>
<li>Weka must perform a variety of error handling that Haskell’s type system takes care of in HLearn.</li>
<li>The Weka code is tightly coupled to the underlying probability distribution, whereas the Haskell code was generic enough to handle any distribution. This means that while Weka must make the “naive bayes assumption” that all attributes are independent of each other, HLearn can support any dependence structure.</li>
<li>Weka’s code is made more verbose by for loops and if statements that aren’t necessary for HLearn.</li>
<li>The Java code requires extensive comments to maintain readability, but the Haskell code is simple enough to be self-documenting (at least once you know how to read Haskell).</li>
<li>Weka does not have parallel training, fast cross-validation, data point subtraction, or weighted data points, but HLearn does.</li>
</ul>
<pre>/**
* Generates the classifier.
*
* @param instances set of instances serving as training data
* @exception Exception if the classifier has not been generated
* successfully
*/
public void buildClassifier(Instances instances) throws Exception {
// can classifier handle the data?
getCapabilities().testWithFail(instances);
// remove instances with missing class
instances = new Instances(instances);
instances.deleteWithMissingClass();
m_NumClasses = instances.numClasses();
// Copy the instances
m_Instances = new Instances(instances);
// Discretize instances if required
if (m_UseDiscretization) {
m_Disc = new weka.filters.supervised.attribute.Discretize();
m_Disc.setInputFormat(m_Instances);
m_Instances = weka.filters.Filter.useFilter(m_Instances, m_Disc);
} else {
m_Disc = null;
}
// Reserve space for the distributions
m_Distributions = new Estimator[m_Instances.numAttributes() - 1]
[m_Instances.numClasses()];
m_ClassDistribution = new DiscreteEstimator(m_Instances.numClasses(),
true);
int attIndex = 0;
Enumeration enu = m_Instances.enumerateAttributes();
while (enu.hasMoreElements()) {
Attribute attribute = (Attribute) enu.nextElement();
// If the attribute is numeric, determine the estimator
// numeric precision from differences between adjacent values
double numPrecision = DEFAULT_NUM_PRECISION;
if (attribute.type() == Attribute.NUMERIC) {
m_Instances.sort(attribute);
if ( (m_Instances.numInstances() > 0)
    && !m_Instances.instance(0).isMissing(attribute)) {
  double lastVal = m_Instances.instance(0).value(attribute);
  double currentVal, deltaSum = 0;
  int distinct = 0;
  for (int i = 1; i < m_Instances.numInstances(); i++) { 	
Instance currentInst = m_Instances.instance(i); 	
if (currentInst.isMissing(attribute)) {
break; 	
}
	    currentVal = currentInst.value(attribute);
	    if (currentVal != lastVal) {
	      deltaSum += currentVal - lastVal;
	      lastVal = currentVal;
	      distinct++;
	    }
	  }
	  if (distinct > 0) {
    numPrecision = deltaSum / distinct;
  }
}
}
for (int j = 0; j < m_Instances.numClasses(); j++) {
switch (attribute.type()) {
case Attribute.NUMERIC:
  if (m_UseKernelEstimator) {
    m_Distributions[attIndex][j] =
      new KernelEstimator(numPrecision);
  } else {
    m_Distributions[attIndex][j] =
      new NormalEstimator(numPrecision);
  }
  break;
case Attribute.NOMINAL:
  m_Distributions[attIndex][j] =
    new DiscreteEstimator(attribute.numValues(), true);
  break;
default:
  throw new Exception(\"Attribute type unknown to NaiveBayes\");
}
}
attIndex++;
}
// Compute counts
Enumeration enumInsts = m_Instances.enumerateInstances();
while (enumInsts.hasMoreElements()) {
Instance instance =
(Instance) enumInsts.nextElement();
updateClassifier(instance);
}
// Save space
m_Instances = new Instances(m_Instances, 0);
}</pre>
<p>And the code for online learning is:</p>
<pre>/**
* Updates the classifier with the given instance.
*
* @param instance the new training instance to include in the model
* @exception Exception if the instance could not be incorporated in
* the model.
*/
public void updateClassifier(Instance instance) throws Exception {
if (!instance.classIsMissing()) {
Enumeration enumAtts = m_Instances.enumerateAttributes();
int attIndex = 0;
while (enumAtts.hasMoreElements()) {
Attribute attribute = (Attribute) enumAtts.nextElement();
if (!instance.isMissing(attribute)) {
  m_Distributions[attIndex][(int)instance.classValue()].
addValue(instance.value(attribute), instance.weight());
}
attIndex++;
}
m_ClassDistribution.addValue(instance.classValue(),
instance.weight());
}
}</pre>
<h3>Conclusion</h3>
<p>Every algorithm implemented in HLearn uses similarly concise code.  I invite you to <a href=\"https://github.com/mikeizbicki/HLearn/\">browse the repository</a> and see for yourself.  The most complicated algorithm is for Markov chains which use only <a href=\"https://github.com/mikeizbicki/HLearn/blob/master/HLearn-markov/src/HLearn/Models/Markov/MarkovChain.hs\">6 lines for training, and about 20 for defining the Monoid</a>.</p>
<p>You can expect lots of tutorials on how to incorporate the HLearn library into Haskell programs over the next few months.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned!</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2520\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "41828f6897d8b5596cca8a40ad1a51a4") (48 (20928 8813 693013) "http://wadler.blogspot.com/2013/06/iain-banks.html" "Philip Wadler: Iain Banks" "noreply@blogger.com (Philip Wadler)" "Tue, 11 Jun 2013 08:24:56 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-0cLAVwyWSKU/Ubbaw7r7N9I/AAAAAAAACKI/DItsN5fXHQE/s1600/scotsbanks-003.jpg\"><img src=\"http://1.bp.blogspot.com/-0cLAVwyWSKU/Ubbaw7r7N9I/AAAAAAAACKI/DItsN5fXHQE/s400/scotsbanks-003.jpg\" title=\"Writer Iain Banks seen in front of the Scottish Parliament Building at Holyrood in Edinburgh. Photograph: Murdo MacLeod (Observer)\" height=\"240\" width=\"400\" alt=\"Writer Iain Banks seen in front of the Scottish Parliament Building at Holyrood in Edinburgh. Photograph: Murdo MacLeod (Observer)\" border=\"0\" /></a></div>In April, Iain Banks discovered he had cancer of the gall bladder, and proposed to his girl friend by requesting she `do me the honour of becoming my widow'.  Yesterday his death was announced.  In his honour, here is something he <a href=\"http://www.guardian.co.uk/culture/2011/aug/28/scottish-independence-snp-iain-banks?INTCMP=SRCH\">wrote for the Observer</a>.  See also this <a href=\"http://www.guardian.co.uk/books/2013/jun/10/iain-banks-ken-macleod-science-fiction\">tribute from Ken McLeod</a>.<br /><blockquote class=\"tr_bq\"><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-0cLAVwyWSKU/Ubbaw7r7N9I/AAAAAAAACKI/DItsN5fXHQE/s1600/scotsbanks-003.jpg\"></a></div>These days, I support the idea of an independent Scotland. It's with a  heavy heart in some ways; I think I'd still sacrifice an independent  Scotland for a socialist UK, but… I can't really see that happening.  What I can imagine is England continuing to turn to the right and  eventually leaving the EU altogether.<br /><br />Scotland, though, could have  a viable future either as a completely independent country or – more  likely – within Europe. The European ideal is taking a battering right  now, certainly, and the gloss has come off comparing our prospects to  Ireland's or Iceland's, but it remains both possible and plausible that  Scotland could become a transparent, low-inequality society on the  Scandinavian model, with fair, non-regressive taxes, strong unions, a  nuclear-free policy, a non-punitive tertiary education system,  enlightened social policies in general and long-term support for green  energy programmes.<br /><br />We'd need to make sure our banks were small  enough to fail, and there are problems of poverty, ill health and  religious tribalism that will take decades to overcome. But with the  advantages and attractions that Scotland already has, and, more  importantly, taking into account the morale boost, the sheer  energisation of a whole people that would come about because we would  finally have our destiny at least largely back in our own hands again – I  think we could do it.<br /><br />And that we should.</blockquote>" nil nil "2d477fa106186a0bb1b16af182212152") (47 (20928 8813 691305) "http://theorylunch.wordpress.com/2013/05/30/when-does-an-endofunctor-derive-from-an-adjunction/" "Theory Lunch (Institute of Cybernetics, Tallinn): When does an endofunctor derive from an adjunction?" nil "Mon, 10 Jun 2013 11:27:39 +0000" "<p>This is the first of two talks based on Andrea Schalk’s very good introduction to monads, which can be retrieved <a href=\"http://www.cs.man.ac.uk/~schalk/notes/monads.pdf\" target=\"_blank\" title=\"http://www.cs.man.ac.uk/~schalk/notes/monads.pdf‎\">HERE</a></p>
<p>In the following, if <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> is a category, we indicate by <img src=\"http://s0.wp.com/latex.php?latex=%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"|\\mathcal{C}|\" class=\"latex\" title=\"|\\mathcal{C}|\" /> the collection of objects of <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />, and by <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}(A,B)\" class=\"latex\" title=\"\\mathcal{C}(A,B)\" /> the collection of morphisms in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> from <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> to <img src=\"http://s0.wp.com/latex.php?latex=B&bg=ffffff&fg=333333&s=0\" alt=\"B\" class=\"latex\" title=\"B\" />.</p>
<p>As we know, there are two basic ways of defining an adjunction: <span id=\"more-768\"></span></p>
<p><strong>Definition 1.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{D}\" class=\"latex\" title=\"\\mathcal{D}\" /> be categories; let <img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"F : \\mathcal{C} \\to \\mathcal{D}\" class=\"latex\" title=\"F : \\mathcal{C} \\to \\mathcal{D}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%5Cmathcal%7BD%7D+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"F : \\mathcal{D} \\to \\mathcal{C}\" class=\"latex\" title=\"F : \\mathcal{D} \\to \\mathcal{C}\" /> be functors. An <em>adjunction</em> from <img src=\"http://s0.wp.com/latex.php?latex=F&bg=ffffff&fg=333333&s=0\" alt=\"F\" class=\"latex\" title=\"F\" /> to <img src=\"http://s0.wp.com/latex.php?latex=G&bg=ffffff&fg=333333&s=0\" alt=\"G\" class=\"latex\" title=\"G\" />, written <img src=\"http://s0.wp.com/latex.php?latex=F+%5Cdashv+G&bg=ffffff&fg=333333&s=0\" alt=\"F \\dashv G\" class=\"latex\" title=\"F \\dashv G\" />, is a quadruple <img src=\"http://s0.wp.com/latex.php?latex=%28F%2CG%2C%5Ceta%2C%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F,G,\\eta,\\varepsilon)\" class=\"latex\" title=\"(F,G,\\eta,\\varepsilon)\" /> where <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta%3A+%5Cmathrm%7BId%7D_%5Cmathcal%7BC%7D+%5Cto+GF&bg=ffffff&fg=333333&s=0\" alt=\"\\eta: \\mathrm{Id}_\\mathcal{C} \\to GF\" class=\"latex\" title=\"\\eta: \\mathrm{Id}_\\mathcal{C} \\to GF\" /> (the <em>unit</em> of the adjunction) and <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon%3A+FG+%5Cto+%5Cmathrm%7BId%7D_%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon: FG \\to \\mathrm{Id}_\\mathcal{D}\" class=\"latex\" title=\"\\varepsilon: FG \\to \\mathrm{Id}_\\mathcal{D}\" /> (the <em>counit</em>) are natural transformations such that , for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}|\" /> and <img src=\"http://s0.wp.com/latex.php?latex=S+%5Cin+%7C%5Cmathcal%7BD%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"S \\in |\\mathcal{D}|\" class=\"latex\" title=\"S \\in |\\mathcal{D}|\" />, <img src=\"http://s0.wp.com/latex.php?latex=G%5Cvarepsilon_S+%5Ccirc+%5Ceta_%7BGS%7D+%3D+%5Cmathrm%7Bid%7D_%7BGS%7D&bg=ffffff&fg=333333&s=0\" alt=\"G\\varepsilon_S \\circ \\eta_{GS} = \\mathrm{id}_{GS}\" class=\"latex\" title=\"G\\varepsilon_S \\circ \\eta_{GS} = \\mathrm{id}_{GS}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon_%7BFA%7D+%5Ccirc+F%5Ceta_%7BA%7D+%3D+%5Cmathrm%7Bid%7D_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon_{FA} \\circ F\\eta_{A} = \\mathrm{id}_{FA}\" class=\"latex\" title=\"\\varepsilon_{FA} \\circ F\\eta_{A} = \\mathrm{id}_{FA}\" />.</p>
<p><strong>Definition 2.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{D}\" class=\"latex\" title=\"\\mathcal{D}\" /> be categories. We call <em>adjunction quadruple</em> a quadruple <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, (\\cdot)^\\sharp)\" class=\"latex\" title=\"(F, G, \\eta, (\\cdot)^\\sharp)\" /> such that:</p>
<ol>
<li><img src=\"http://s0.wp.com/latex.php?latex=G+%3A+%5Cmathcal%7BD%7D+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"G : \\mathcal{D} \\to \\mathcal{C}\" class=\"latex\" title=\"G : \\mathcal{D} \\to \\mathcal{C}\" /> is a functor,</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%7C%5Cmathcal%7BC%7D%7C+%5Cto+%7C%5Cmathcal%7BD%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"F : |\\mathcal{C}| \\to |\\mathcal{D}|\" class=\"latex\" title=\"F : |\\mathcal{C}| \\to |\\mathcal{D}|\" /> is a mapping, and</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Ceta&bg=ffffff&fg=333333&s=0\" alt=\"\\eta\" class=\"latex\" title=\"\\eta\" /> associates to every object <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> a morphism <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A+%3A+A+%5Cto+GFA&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A : A \\to GFA\" class=\"latex\" title=\"\\eta_A : A \\to GFA\" /> so that</li>
<li>for every <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+GS&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to GS\" class=\"latex\" title=\"f : A \\to GS\" /> there exists a unique <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3A+FA+%5Cto+S&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp : FA \\to S\" class=\"latex\" title=\"f^\\sharp : FA \\to S\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp \\circ \\eta_A = f\" class=\"latex\" title=\"Gf^\\sharp \\circ \\eta_A = f\" />.</li>
</ol>
<p>The two definitions above are equivalent in the following sense. If <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> is an adjunction according to Definition 1, and <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3D+%5Cvarepsilon_S+%5Ccirc+Ff&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp = \\varepsilon_S \\circ Ff\" class=\"latex\" title=\"f^\\sharp = \\varepsilon_S \\circ Ff\" />, then <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, (\\cdot)^\\sharp)\" class=\"latex\" title=\"(F, G, \\eta, (\\cdot)^\\sharp)\" /> is an adjunction quadruple according to Definition 2. On the other hand, if <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"(F, G, \\eta, (\\cdot)^\\ast)\" /> is an adjunction quadruple according to Definition 2, and <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29_%5Cflat&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)_\\flat\" class=\"latex\" title=\"(\\cdot)_\\flat\" /> is the inverse operation of <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29%5E%5Csharp&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)^\\sharp\" class=\"latex\" title=\"(\\cdot)^\\sharp\" />—that is, <img src=\"http://s0.wp.com/latex.php?latex=g_%5Cflat+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"g_\\flat = f\" class=\"latex\" title=\"g_\\flat = f\" /> if and only if <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3D+g&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp = g\" class=\"latex\" title=\"f^\\sharp = g\" />—then necessarily <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A+%3D+%28%5Cmathrm%7Bid%7D_%7BFA%7D%29_%5Cflat&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A = (\\mathrm{id}_{FA})_\\flat\" class=\"latex\" title=\"\\eta_A = (\\mathrm{id}_{FA})_\\flat\" />, and by putting <img src=\"http://s0.wp.com/latex.php?latex=Ff+%3D+%28%5Ceta_B+%5Ccirc+f%29%5E%5Csharp&bg=ffffff&fg=333333&s=0\" alt=\"Ff = (\\eta_B \\circ f)^\\sharp\" class=\"latex\" title=\"Ff = (\\eta_B \\circ f)^\\sharp\" /> for <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,B)\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon_S+%3D+%28%5Cmathrm%7Bid%7D_%7BGS%7D%29%5E%5Csharp&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon_S = (\\mathrm{id}_{GS})^\\sharp\" class=\"latex\" title=\"\\varepsilon_S = (\\mathrm{id}_{GS})^\\sharp\" /> for <img src=\"http://s0.wp.com/latex.php?latex=S+%5Cin+%7C%5Cmathcal%7BD%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"S \\in |\\mathcal{D}|\" class=\"latex\" title=\"S \\in |\\mathcal{D}|\" /> we define an adjunction according to Definition 1.</p>
<p>If <img src=\"http://s0.wp.com/latex.php?latex=%28F%2CG%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F,G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F,G, \\eta, \\varepsilon)\" /> is an adjunction, then <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"T = GF : \\mathcal{C} \\to \\mathcal{C}\" class=\"latex\" title=\"T = GF : \\mathcal{C} \\to \\mathcal{C}\" /> is an endofunctor.The first question that comes to our mind is:</p>
<p style=\"text-align: center;\"><em>when does an endofunctor derive from an adjunction?</em></p>
<p>Let us check some basic properties such an endofunctor must satisfy. First of all, <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu+%3A+T%5E2+%5Cto+T&bg=ffffff&fg=333333&s=0\" alt=\"\\mu : T^2 \\to T\" class=\"latex\" title=\"\\mu : T^2 \\to T\" /> defined by <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%3D+G%5Cvarepsilon_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A = G\\varepsilon_{FA}\" class=\"latex\" title=\"\\mu_A = G\\varepsilon_{FA}\" /> is a natural transformation and satisfies</p>
<p style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+T%5Ceta_A+%3D+%5Cmu_A+%5Ccirc+%5Ceta_%7BTA%7D+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D+%5C%3B%5C%3B+%5Cforall+A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ T\\eta_A = \\mu_A \\circ \\eta_{TA} = \\mathrm{id}_{TA} \\;\\; \\forall A \\in |\\mathcal{C}|\" class=\"latex\" title=\"\\mu_A \\circ T\\eta_A = \\mu_A \\circ \\eta_{TA} = \\mathrm{id}_{TA} \\;\\; \\forall A \\in |\\mathcal{C}|\" /></p>
<p style=\"text-align: left;\">Moreover, as <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon+%3A+FG+%5Cto+%5Cmathrm%7BId%7D_%7B%5Cmathcal%7BD%7D%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon : FG \\to \\mathrm{Id}_{\\mathcal{D}}\" class=\"latex\" title=\"\\varepsilon : FG \\to \\mathrm{Id}_{\\mathcal{D}}\" /> is a natural transformation, by choosing <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+%5Cvarepsilon_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"f = \\varepsilon_{FA}\" class=\"latex\" title=\"f = \\varepsilon_{FA}\" /> we get <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon_%7BFA%7D+%5Ccirc+%5Cvarepsilon_%7BFGFA%7D+%3D+%5Cvarepsilon_%7BFA%7D+%5Ccirc+FG%5Cvarepsilon_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon_{FA} \\circ \\varepsilon_{FGFA} = \\varepsilon_{FA} \\circ FG\\varepsilon_{FA}\" class=\"latex\" title=\"\\varepsilon_{FA} \\circ \\varepsilon_{FGFA} = \\varepsilon_{FA} \\circ FG\\varepsilon_{FA}\" />, which after an application of <img src=\"http://s0.wp.com/latex.php?latex=G&bg=ffffff&fg=333333&s=0\" alt=\"G\" class=\"latex\" title=\"G\" /> yields</p>
<p style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Cmu_%7BTA%7D+%3D+%5Cmu_A+%5Ccirc+T%5Cmu_A+%5C%3B%5C%3B+%5Cforall+A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\mu_{TA} = \\mu_A \\circ T\\mu_A \\;\\; \\forall A \\in |\\mathcal{C}|\" class=\"latex\" title=\"\\mu_A \\circ \\mu_{TA} = \\mu_A \\circ T\\mu_A \\;\\; \\forall A \\in |\\mathcal{C}|\" /></p>
<p style=\"text-align: left;\">It will turn out that these two properties are precisely what we need.</p>
<p style=\"text-align: left;\"><strong>Definition 3.</strong> A <em>monad</em> on a category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> is a triple <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> where:</p>
<ol>
<li><img src=\"http://s0.wp.com/latex.php?latex=T+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"T : \\mathcal{C} \\to \\mathcal{C}\" class=\"latex\" title=\"T : \\mathcal{C} \\to \\mathcal{C}\" /> is an endofunctor,</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Ceta+%3A+%5Cmathrm%7BId%7D_%5Cmathcal%7BC%7D+%5Cto+T&bg=ffffff&fg=333333&s=0\" alt=\"\\eta : \\mathrm{Id}_\\mathcal{C} \\to T\" class=\"latex\" title=\"\\eta : \\mathrm{Id}_\\mathcal{C} \\to T\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu%3A+T%5E2+%5Cto+T&bg=ffffff&fg=333333&s=0\" alt=\"\\mu: T^2 \\to T\" class=\"latex\" title=\"\\mu: T^2 \\to T\" /> are natural transformations, and</li>
<li>for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}|\" /> we have <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Ceta_%7BTA%7D+%3D+%5Cmu_A+%5Ccirc+T%5Ceta_A+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\eta_{TA} = \\mu_A \\circ T\\eta_A = \\mathrm{id}_{TA}\" class=\"latex\" title=\"\\mu_A \\circ \\eta_{TA} = \\mu_A \\circ T\\eta_A = \\mathrm{id}_{TA}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Cmu_%7BTA%7D+%3D+%5Cmu_A+%5Ccirc+T%5Cmu_A&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\mu_{TA} = \\mu_A \\circ T\\mu_A\" class=\"latex\" title=\"\\mu_A \\circ \\mu_{TA} = \\mu_A \\circ T\\mu_A\" />,</li>
</ol>
<p>As a very basic example, the <em>free monoid</em> construction is a monad on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathbf%7BSet%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathbf{Set}\" class=\"latex\" title=\"\\mathbf{Set}\" />, where <img src=\"http://s0.wp.com/latex.php?latex=TA+%3D+A%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"TA = A^\\ast\" class=\"latex\" title=\"TA = A^\\ast\" />, <img src=\"http://s0.wp.com/latex.php?latex=Tf%28s%29+%3D+%5Bf%28a%29+%5C%3B+%5Cmathtt%7Bfor%7D+%5C%3B+a+%5C%3B+%5Cmathtt%7Bin%7D+%5C%3B+s%5D&bg=ffffff&fg=333333&s=0\" alt=\"Tf(s) = [f(a) \\; \\mathtt{for} \\; a \\; \\mathtt{in} \\; s]\" class=\"latex\" title=\"Tf(s) = [f(a) \\; \\mathtt{for} \\; a \\; \\mathtt{in} \\; s]\" />, <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A%28a%29+%3D+%5Ba%5D&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A(a) = [a]\" class=\"latex\" title=\"\\eta_A(a) = [a]\" />, and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A%28%5B%5Ba%5E1_1%2C+%5Cldots%2C+a%5E1_%7Bn_1%7D%5D%2C+%5Cldots%2C+%5Ba%5Em_1%2C+%5Cldots%2C+a%5Em_%7Bn_m%7D%5D%5D+%3D+%5Ba%5E1_1%2C+%5Cldots%2C+a%5E1_%7Bn_1%7D%2C+%5Cldots%2C+a%5Em_1%2C+%5Cldots%2C+a%5Em_%7Bn_m%7D%5D&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A([[a^1_1, \\ldots, a^1_{n_1}], \\ldots, [a^m_1, \\ldots, a^m_{n_m}]] = [a^1_1, \\ldots, a^1_{n_1}, \\ldots, a^m_1, \\ldots, a^m_{n_m}]\" class=\"latex\" title=\"\\mu_A([[a^1_1, \\ldots, a^1_{n_1}], \\ldots, [a^m_1, \\ldots, a^m_{n_m}]] = [a^1_1, \\ldots, a^1_{n_1}, \\ldots, a^m_1, \\ldots, a^m_{n_m}]\" />.</p>
<p>As a less basic example, suppose <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D+%3D+%28S%2C+%5Cleq%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C} = (S, \\leq)\" class=\"latex\" title=\"\\mathcal{C} = (S, \\leq)\" /> is a poset: what is a monad on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />? First of all, an endofunctor on a poset is a monotone function; next, if there is <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A+%3A+A+%5Cto+TA&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A : A \\to TA\" class=\"latex\" title=\"\\eta_A : A \\to TA\" />, then <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cleq+TA&bg=ffffff&fg=333333&s=0\" alt=\"A \\leq TA\" class=\"latex\" title=\"A \\leq TA\" />; finally, if there is <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%3A+T%5E2A+%5Cto+TA&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A : T^2A \\to TA\" class=\"latex\" title=\"\\mu_A : T^2A \\to TA\" />, then <img src=\"http://s0.wp.com/latex.php?latex=T%5E2A+%5Cleq+TA&bg=ffffff&fg=333333&s=0\" alt=\"T^2A \\leq TA\" class=\"latex\" title=\"T^2A \\leq TA\" />, which together with the previous inequality yields <img src=\"http://s0.wp.com/latex.php?latex=T%5E2A+%3D+TA&bg=ffffff&fg=333333&s=0\" alt=\"T^2A = TA\" class=\"latex\" title=\"T^2A = TA\" />. On the other hand, any nondecreasing idempotent is the endofunctor component of a monad: the monad equations are actually ensured by <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> being a poset, so that any two maps with same domain and same codomain are equal.</p>
<p>We then restate our original problem as follows:</p>
<p style=\"text-align: center;\"><em>given a monad <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" />, find an adjunction <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu+%3D+G+%5Cvarepsilon_F&bg=ffffff&fg=333333&s=0\" alt=\"\\mu = G \\varepsilon_F\" class=\"latex\" title=\"\\mu = G \\varepsilon_F\" /></em></p>
<p>If the adjunction <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> solves the problem above, we say that it <em>generates</em> the monad <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />.</p>
<p>The first solution to this problem was given by the Swiss mathematician Heinrich Kleisli, and is based on an alternative way of defining monads, as it is the case with adjunctions. Let us suppose <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> with <img src=\"http://s0.wp.com/latex.php?latex=F+%5Cdashv+G&bg=ffffff&fg=333333&s=0\" alt=\"F \\dashv G\" class=\"latex\" title=\"F \\dashv G\" />. If <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB+%3D+G%28FB%29&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB = G(FB)\" class=\"latex\" title=\"f : A \\to TB = G(FB)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3A+FA+%5Cto+FB&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp : FA \\to FB\" class=\"latex\" title=\"f^\\sharp : FA \\to FB\" />, so that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%3A+TA+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp : TA \\to TB\" class=\"latex\" title=\"Gf^\\sharp : TA \\to TB\" />: and we know from the definition of monad that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp \\circ \\eta_A = f\" class=\"latex\" title=\"Gf^\\sharp \\circ \\eta_A = f\" />. We can thus define an operator <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)^\\ast\" class=\"latex\" title=\"(\\cdot)^\\ast\" /> that takes <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,TB)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,TB)\" /> into <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Cin+%5Cmathcal%7BC%7D%28TA%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\in \\mathcal{C}(TA,TB)\" class=\"latex\" title=\"f^\\ast \\in \\mathcal{C}(TA,TB)\" /> in a way such that <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\circ \\eta_A = f\" class=\"latex\" title=\"f^\\ast \\circ \\eta_A = f\" /> whatever <img src=\"http://s0.wp.com/latex.php?latex=f&bg=ffffff&fg=333333&s=0\" alt=\"f\" class=\"latex\" title=\"f\" /> is. The simplest example is <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"f = \\eta_A\" class=\"latex\" title=\"f = \\eta_A\" /> itself, so that <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast \\circ \\eta_A = \\eta_A\" class=\"latex\" title=\"(\\eta_A)^\\ast \\circ \\eta_A = \\eta_A\" />, and <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" class=\"latex\" title=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" /> by uniqueness in the definition of adjunction quadruple. Moreover, if <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB\" class=\"latex\" title=\"f : A \\to TB\" /> and <img src=\"http://s0.wp.com/latex.php?latex=g+%3A+B+%5Cto+TC&bg=ffffff&fg=333333&s=0\" alt=\"g : B \\to TC\" class=\"latex\" title=\"g : B \\to TC\" />, then</p>
<p style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=g%5E%5Cast+%5Ccirc+f+%3D+Gg%5E%5Csharp+%5Ccirc+%28Gf%5E%5Csharp+%5Ccirc+%5Ceta_A%29+%3D+%28g%5E%5Cast+%5Ccirc+f%5E%5Cast%29+%5Ccirc+%5Ceta_A+%5C%3B%2C&bg=ffffff&fg=333333&s=0\" alt=\"g^\\ast \\circ f = Gg^\\sharp \\circ (Gf^\\sharp \\circ \\eta_A) = (g^\\ast \\circ f^\\ast) \\circ \\eta_A \\;,\" class=\"latex\" title=\"g^\\ast \\circ f = Gg^\\sharp \\circ (Gf^\\sharp \\circ \\eta_A) = (g^\\ast \\circ f^\\ast) \\circ \\eta_A \\;,\" /></p>
<p style=\"text-align: left;\">which implies <img src=\"http://s0.wp.com/latex.php?latex=%28g%5E%5Cast+%5Ccirc+f%29%5E%5Cast+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" class=\"latex\" title=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" /> by uniqueness.</p>
<p>This is the base of Kleisli’s solution to our problem, which we will discuss in a future talk.</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/theorylunch.wordpress.com/768/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/theorylunch.wordpress.com/768/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=theorylunch.wordpress.com&blog=43735749&post=768&subd=theorylunch&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "b8ba9aeb3d90febcf3f2b4138d1ad02f") (46 (20928 8813 685039) "http://theorylunch.wordpress.com/2013/06/06/an-initial-solution-to-the-monad-problem-and-then-some-more/" "Theory Lunch (Institute of Cybernetics, Tallinn): An initial solution to the monad problem, and then some more" nil "Mon, 10 Jun 2013 11:27:02 +0000" "<p>This is the second of two talks about monads, based on <a href=\"http://www.cs.man.ac.uk/~schalk/notes/monads.pdf\" target=\"_blank\" title=\"http://www.cs.man.ac.uk/~schalk/notes/monads.pdf\">the very good notes by Andrea Schalk</a> and continuing <a href=\"http://theorylunch.wordpress.com/2013/05/30/when-does-an-endofunctor-derive-from-an-adjunction/\" target=\"_blank\" title=\"http://theorylunch.wordpress.com/2013/05/30/when-does-an-endofunctor-derive-from-an-adjunction/\">the one I gave on the 30th of May</a>. Recall that we are trying to solve the following problem:</p>
<p style=\"text-align: center;\"><em>given a monad <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" />, find an adjunction <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu+%3D+G+%5Cvarepsilon_F&bg=ffffff&fg=333333&s=0\" alt=\"\\mu = G \\varepsilon_F\" class=\"latex\" title=\"\\mu = G \\varepsilon_F\" /></em></p>
<p>If the adjunction <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> solves the problem above, we say that it <em>generates</em> the monad <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />.</p>
<p>The first solution to this problem was given by the Swiss mathematician Heinrich Kleisli, and is based on an alternative way of defining monads, as it is the case with adjunctions. <span id=\"more-885\"></span> Let us suppose <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> with <img src=\"http://s0.wp.com/latex.php?latex=F+%5Cdashv+G&bg=ffffff&fg=333333&s=0\" alt=\"F \\dashv G\" class=\"latex\" title=\"F \\dashv G\" />. If <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB+%3D+G%28FB%29&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB = G(FB)\" class=\"latex\" title=\"f : A \\to TB = G(FB)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3A+FA+%5Cto+FB&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp : FA \\to FB\" class=\"latex\" title=\"f^\\sharp : FA \\to FB\" />, so that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%3A+TA+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp : TA \\to TB\" class=\"latex\" title=\"Gf^\\sharp : TA \\to TB\" />: and we know from the definition of monad that <img src=\"http://s0.wp.com/latex.php?latex=Gf%5E%5Csharp+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"Gf^\\sharp \\circ \\eta_A = f\" class=\"latex\" title=\"Gf^\\sharp \\circ \\eta_A = f\" />. We can thus define an operator <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)^\\ast\" class=\"latex\" title=\"(\\cdot)^\\ast\" /> that takes <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,TB)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,TB)\" /> into <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%3D+Gf%5E%5Csharp+%5Cin+%5Cmathcal%7BC%7D%28TA%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast = Gf^\\sharp \\in \\mathcal{C}(TA,TB)\" class=\"latex\" title=\"f^\\ast = Gf^\\sharp \\in \\mathcal{C}(TA,TB)\" /> so that <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\circ \\eta_A = f\" class=\"latex\" title=\"f^\\ast \\circ \\eta_A = f\" /> whatever <img src=\"http://s0.wp.com/latex.php?latex=f&bg=ffffff&fg=333333&s=0\" alt=\"f\" class=\"latex\" title=\"f\" /> is. The simplest example is <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"f = \\eta_A\" class=\"latex\" title=\"f = \\eta_A\" /> itself, which yields <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast \\circ \\eta_A = \\eta_A\" class=\"latex\" title=\"(\\eta_A)^\\ast \\circ \\eta_A = \\eta_A\" />, so that <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Csharp+%3D+%5Cmathrm%7Bid%7D_%7BFA%7D&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\sharp = \\mathrm{id}_{FA}\" class=\"latex\" title=\"(\\eta_A)^\\sharp = \\mathrm{id}_{FA}\" /> by uniqueness in the definition of adjunction quadruple, and <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" class=\"latex\" title=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" />. Moreover, if <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB\" class=\"latex\" title=\"f : A \\to TB\" /> and <img src=\"http://s0.wp.com/latex.php?latex=g+%3A+B+%5Cto+TC&bg=ffffff&fg=333333&s=0\" alt=\"g : B \\to TC\" class=\"latex\" title=\"g : B \\to TC\" />, then <img src=\"http://s0.wp.com/latex.php?latex=g%5E%5Cast+%5Ccirc+f+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast+%5Ccirc+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"g^\\ast \\circ f = g^\\ast \\circ f^\\ast \\circ \\eta_A\" class=\"latex\" title=\"g^\\ast \\circ f = g^\\ast \\circ f^\\ast \\circ \\eta_A\" />, which implies <img src=\"http://s0.wp.com/latex.php?latex=%28g%5E%5Cast+%5Ccirc+f%29%5E%5Cast+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" class=\"latex\" title=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" /> by uniqueness.</p>
<p><strong>Definition 4.</strong> A <em>Kleisli triple</em> on a category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> is a triple <img src=\"http://s0.wp.com/latex.php?latex=%28T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"(T, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"(T, \\eta, (\\cdot)^\\ast)\" /> where:</p>
<ol>
<li><img src=\"http://s0.wp.com/latex.php?latex=T+%3A+%7C%5Cmathcal%7BC%7D%7C+%5Cto+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"T : |\\mathcal{C}| \\to |\\mathcal{C}|\" class=\"latex\" title=\"T : |\\mathcal{C}| \\to |\\mathcal{C}|\" /> is a function,</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A+%5Cin+%5Cmathcal%7BC%7D%28A%2C+TA%29&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A \\in \\mathcal{C}(A, TA)\" class=\"latex\" title=\"\\eta_A \\in \\mathcal{C}(A, TA)\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}|\" />, and</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Cin+%5Cmathcal%7BC%7D%28TA%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\in \\mathcal{C}(TA,TB)\" class=\"latex\" title=\"f^\\ast \\in \\mathcal{C}(TA,TB)\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,TB)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,TB)\" /></li>
</ol>
<p>such that the following equations are satisfied:</p>
<ol>
<li><img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\circ \\eta_A = f\" class=\"latex\" title=\"f^\\ast \\circ \\eta_A = f\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB\" class=\"latex\" title=\"f : A \\to TB\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" class=\"latex\" title=\"(\\eta_A)^\\ast = \\mathrm{id}_{TA}\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%28g%5E%5Cast+%5Ccirc+f%29%5E%5Cast+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" class=\"latex\" title=\"(g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB\" class=\"latex\" title=\"f : A \\to TB\" />, <img src=\"http://s0.wp.com/latex.php?latex=g+%3A+B+%5Cto+TC&bg=ffffff&fg=333333&s=0\" alt=\"g : B \\to TC\" class=\"latex\" title=\"g : B \\to TC\" />.</li>
</ol>
<p>If <img src=\"http://s0.wp.com/latex.php?latex=%28F%2CG%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(F,G, \\eta, (\\cdot)^\\sharp)\" class=\"latex\" title=\"(F,G, \\eta, (\\cdot)^\\sharp)\" /> is an adjunction quadruple then <img src=\"http://s0.wp.com/latex.php?latex=%28GF%2C+%5Ceta%2C+G%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(GF, \\eta, G(\\cdot)^\\sharp)\" class=\"latex\" title=\"(GF, \\eta, G(\\cdot)^\\sharp)\" /> is a Kleisli triple.</p>
<p><strong>Theorem 1.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> be a category.</p>
<ol>
<li>If <img src=\"http://s0.wp.com/latex.php?latex=%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"(T, \\eta, \\mu)\" class=\"latex\" title=\"(T, \\eta, \\mu)\" /> is a monad on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />, and if <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%3D+%5Cmu_B+%5Ccirc+Tf&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast = \\mu_B \\circ Tf\" class=\"latex\" title=\"f^\\ast = \\mu_B \\circ Tf\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+TB&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to TB\" class=\"latex\" title=\"f : A \\to TB\" />, then <img src=\"http://s0.wp.com/latex.php?latex=%28T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"(T, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"(T, \\eta, (\\cdot)^\\ast)\" /> is a Kleisli triple on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />.</li>
<li>If <img src=\"http://s0.wp.com/latex.php?latex=%28T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"(T, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"(T, \\eta, (\\cdot)^\\ast)\" /> is a Kleisli triple on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />, and if <img src=\"http://s0.wp.com/latex.php?latex=Tf+%3D+%28%5Ceta_B+%5Ccirc+f%29%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"Tf = (\\eta_B \\circ f)^\\ast\" class=\"latex\" title=\"Tf = (\\eta_B \\circ f)^\\ast\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+A+%5Cto+B&bg=ffffff&fg=333333&s=0\" alt=\"f : A \\to B\" class=\"latex\" title=\"f : A \\to B\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%3D+%28%5Cmathrm%7Bid%7D_%7BTA%7D%29%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A = (\\mathrm{id}_{TA})^\\ast\" class=\"latex\" title=\"\\mu_A = (\\mathrm{id}_{TA})^\\ast\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" />, then <img src=\"http://s0.wp.com/latex.php?latex=%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"(T, \\eta, \\mu)\" class=\"latex\" title=\"(T, \\eta, \\mu)\" /> is a monad on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />.</li>
<li>The two operations from the previous points are each other’s converse.</li>
</ol>
<p><em>Proof:</em> Point 1 follows from naturality of <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta&bg=ffffff&fg=333333&s=0\" alt=\"\\eta\" class=\"latex\" title=\"\\eta\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu&bg=ffffff&fg=333333&s=0\" alt=\"\\mu\" class=\"latex\" title=\"\\mu\" /> and the three monad laws:</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+%5Cmu_B+%5Ccirc+Tf+%5Ccirc+%5Ceta_A+%3D+%5Cmu_B+%5Ccirc+%5Ceta_%7BTB%7D+%5Ccirc+f+%3D+%5Cmathrm%7Bid%7D_%7BTB%7D+%5Ccirc+f+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast \\circ \\eta_A = \\mu_B \\circ Tf \\circ \\eta_A = \\mu_B \\circ \\eta_{TB} \\circ f = \\mathrm{id}_{TB} \\circ f = f\" class=\"latex\" title=\"f^\\ast \\circ \\eta_A = \\mu_B \\circ Tf \\circ \\eta_A = \\mu_B \\circ \\eta_{TB} \\circ f = \\mathrm{id}_{TB} \\circ f = f\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmu_%7BTA%7D+%5Ccirc+%5Ceta_A+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"(\\eta_A)^\\ast = \\mu_{TA} \\circ \\eta_A = \\mathrm{id}_{TA}\" class=\"latex\" title=\"(\\eta_A)^\\ast = \\mu_{TA} \\circ \\eta_A = \\mathrm{id}_{TA}\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%28g%5E%5Cast+%5Ccirc+f%29%5E%5Cast+%3D+%5Cmu_C+%5Ccirc+T%5Cmu_C+%5Ccirc+T%5E2g+%5Ccirc+Tf+%3D+%5Cmu_C+%5Ccirc+%5Cmu_%7BTC%7D+%5Ccirc+T%5E2g+%5Ccirc+Tf+%3D+%5Cmu_C+%5Ccirc+Tg+%5Ccirc+%5Cmu_B+%5Ccirc+Tf+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"(g^\\ast \\circ f)^\\ast = \\mu_C \\circ T\\mu_C \\circ T^2g \\circ Tf = \\mu_C \\circ \\mu_{TC} \\circ T^2g \\circ Tf = \\mu_C \\circ Tg \\circ \\mu_B \\circ Tf = g^\\ast \\circ f^\\ast\" class=\"latex\" title=\"(g^\\ast \\circ f)^\\ast = \\mu_C \\circ T\\mu_C \\circ T^2g \\circ Tf = \\mu_C \\circ \\mu_{TC} \\circ T^2g \\circ Tf = \\mu_C \\circ Tg \\circ \\mu_B \\circ Tf = g^\\ast \\circ f^\\ast\" /></li>
</ul>
<p>For point 2, functoriality of <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />, naturality of <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta&bg=ffffff&fg=333333&s=0\" alt=\"\\eta\" class=\"latex\" title=\"\\eta\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu&bg=ffffff&fg=333333&s=0\" alt=\"\\mu\" class=\"latex\" title=\"\\mu\" />, and monad laws follow from Kleisli laws:</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=T%28g+%5Ccirc+f%29+%3D+%28%5Ceta_C+%5Ccirc+g+%5Ccirc+f%29%5E%5Cast+%3D+%28%28%5Ceta_C+%5Ccirc+g%29%5E%5Cast+%5Ccirc+%5Ceta_B+%5Ccirc+f%29%5E%5Cast+%3D+%28%5Ceta_C+%5Ccirc+g%29%5E%5Cast+%5Ccirc+%28%5Ceta_B+%5Ccirc+f%29%5E%5Cast+Tg+%5Ccirc+Tf&bg=ffffff&fg=333333&s=0\" alt=\"T(g \\circ f) = (\\eta_C \\circ g \\circ f)^\\ast = ((\\eta_C \\circ g)^\\ast \\circ \\eta_B \\circ f)^\\ast = (\\eta_C \\circ g)^\\ast \\circ (\\eta_B \\circ f)^\\ast Tg \\circ Tf\" class=\"latex\" title=\"T(g \\circ f) = (\\eta_C \\circ g \\circ f)^\\ast = ((\\eta_C \\circ g)^\\ast \\circ \\eta_B \\circ f)^\\ast = (\\eta_C \\circ g)^\\ast \\circ (\\eta_B \\circ f)^\\ast Tg \\circ Tf\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=T%5Cmathrm%7Bid%7D_A+%3D+%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"T\\mathrm{id}_A = (\\eta_A)^\\ast = \\mathrm{id}_{TA}\" class=\"latex\" title=\"T\\mathrm{id}_A = (\\eta_A)^\\ast = \\mathrm{id}_{TA}\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=Tf+%5Ccirc+%5Ceta_A+%3D+%28%5Ceta_B+%5Ccirc+f%29%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+%5Ceta_B+%5Ccirc+f&bg=ffffff&fg=333333&s=0\" alt=\"Tf \\circ \\eta_A = (\\eta_B \\circ f)^\\ast \\circ \\eta_A = \\eta_B \\circ f\" class=\"latex\" title=\"Tf \\circ \\eta_A = (\\eta_B \\circ f)^\\ast \\circ \\eta_A = \\eta_B \\circ f\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_B+%5Ccirc+T%5E2f+%3D+%28%5Cmathrm%7Bid%7D_%7BTB%7D%5E%5Cast+%5Ccirc+%5Ceta_%7BTB%7D+%5Ccirc+%28%5Ceta_B+%5Ccirc+f%29%5E%5Cast%29%5E%5Cast+%3D+%28%5Ceta_B+%5Ccirc+Tf%29%5E%7B%5Cast%5Cast%7D+%3D+%28%28%5Ceta_B+%5Ccirc+f%29%5E%5Cast+%5Ccirc+%5Cmathrm%7Bid%7D_%7BTA%7D%29%5E%5Cast+%3D+Tf+%5Ccirc+%5Cmu_A&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_B \\circ T^2f = (\\mathrm{id}_{TB}^\\ast \\circ \\eta_{TB} \\circ (\\eta_B \\circ f)^\\ast)^\\ast = (\\eta_B \\circ Tf)^{\\ast\\ast} = ((\\eta_B \\circ f)^\\ast \\circ \\mathrm{id}_{TA})^\\ast = Tf \\circ \\mu_A\" class=\"latex\" title=\"\\mu_B \\circ T^2f = (\\mathrm{id}_{TB}^\\ast \\circ \\eta_{TB} \\circ (\\eta_B \\circ f)^\\ast)^\\ast = (\\eta_B \\circ Tf)^{\\ast\\ast} = ((\\eta_B \\circ f)^\\ast \\circ \\mathrm{id}_{TA})^\\ast = Tf \\circ \\mu_A\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Ceta_%7BTA%7D+%3D+%28%5Cmathrm%7Bid%7D_%7BTA%7D%29%5E%5Cast+%5Ccirc+%5Ceta_%7BTA%7D+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D+%3D+%28%5Cmathrm%7Bid%7D_%7BTA%7D+%5Ccirc+%5Ceta_A%29%5E%5Cast+%3D+%28%28%5Cmathrm%7Bid%7D_%7BTA%7D%29%5E%5Cast+%5Ccirc+%5Ceta_%7BTA%7D+%5Ccirc+%5Ceta_A%29%5E%5Cast+%3D+%5Cmu_A+%5Ccirc+T%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\eta_{TA} = (\\mathrm{id}_{TA})^\\ast \\circ \\eta_{TA} = \\mathrm{id}_{TA} = (\\mathrm{id}_{TA} \\circ \\eta_A)^\\ast = ((\\mathrm{id}_{TA})^\\ast \\circ \\eta_{TA} \\circ \\eta_A)^\\ast = \\mu_A \\circ T\\eta_A\" class=\"latex\" title=\"\\mu_A \\circ \\eta_{TA} = (\\mathrm{id}_{TA})^\\ast \\circ \\eta_{TA} = \\mathrm{id}_{TA} = (\\mathrm{id}_{TA} \\circ \\eta_A)^\\ast = ((\\mathrm{id}_{TA})^\\ast \\circ \\eta_{TA} \\circ \\eta_A)^\\ast = \\mu_A \\circ T\\eta_A\" /></li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%5Ccirc+%5Cmu_%7BTA%7D+%3D+%28%5Cmathrm%7Bid%7D_%7BTA%7D%5E%5Cast+%5Ccirc+%5Cmathrm%7Bid%7D_%7BT%5E2A%7D%29%5E%5Cast+%3D+%28%5Cmathrm%7Bid%7D_A+%5Ccirc+%5Cmathrm%7Bid%7D_%7BTA%7D%5E%5Cast%29%5E%5Cast+%3D+%28%5Cmathrm%7Bid%7D_%7BTA%7D%5E%5Cast+%5Ccirc+%5Ceta_%7BTA%7D+%5Ccirc+%5Cmathrm%7Bid%7D_%7BTA%7D%5E%5Cast%29%5E%5Cast+%3D+%5Cmu_A+%5Ccirc+T%5Cmu_A&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A \\circ \\mu_{TA} = (\\mathrm{id}_{TA}^\\ast \\circ \\mathrm{id}_{T^2A})^\\ast = (\\mathrm{id}_A \\circ \\mathrm{id}_{TA}^\\ast)^\\ast = (\\mathrm{id}_{TA}^\\ast \\circ \\eta_{TA} \\circ \\mathrm{id}_{TA}^\\ast)^\\ast = \\mu_A \\circ T\\mu_A\" class=\"latex\" title=\"\\mu_A \\circ \\mu_{TA} = (\\mathrm{id}_{TA}^\\ast \\circ \\mathrm{id}_{T^2A})^\\ast = (\\mathrm{id}_A \\circ \\mathrm{id}_{TA}^\\ast)^\\ast = (\\mathrm{id}_{TA}^\\ast \\circ \\eta_{TA} \\circ \\mathrm{id}_{TA}^\\ast)^\\ast = \\mu_A \\circ T\\mu_A\" /></li>
</ul>
<p>Point 3 is straightforward. <img src=\"http://s0.wp.com/latex.php?latex=%5CBox&bg=ffffff&fg=333333&s=0\" alt=\"\\Box\" class=\"latex\" title=\"\\Box\" /></p>
<p>Considering again the free monoid example, the corresponding Kleisli triple has</p>
<p style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Cast%28s%29+%3D+%5B+x+%5C%3B+%5Cmathtt%7Bfor%7D+%5C%3B+x+%5C%3B+%5Cmathtt%7Bin%7D+%5C%3B+f%28a%29+%5C%3B+%5Cmathtt%7Bfor%7D+%5C%3B+a+%5C%3B+%5Cmathtt%7Bin%7D+%5C%3B+s+%5D&bg=ffffff&fg=333333&s=0\" alt=\"f^\\ast(s) = [ x \\; \\mathtt{for} \\; x \\; \\mathtt{in} \\; f(a) \\; \\mathtt{for} \\; a \\; \\mathtt{in} \\; s ]\" class=\"latex\" title=\"f^\\ast(s) = [ x \\; \\mathtt{for} \\; x \\; \\mathtt{in} \\; f(a) \\; \\mathtt{for} \\; a \\; \\mathtt{in} \\; s ]\" /></p>
<p>Theorem 1 says that we can restate our problem as follows:</p>
<p style=\"text-align: center;\"><em>given a Kleisli triple <img src=\"http://s0.wp.com/latex.php?latex=%28T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"(T, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"(T, \\eta, (\\cdot)^\\ast)\" />,</em><em> find an adjunction quadruple <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, (\\cdot)^\\sharp)\" class=\"latex\" title=\"(F, G, \\eta, (\\cdot)^\\sharp)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%28%5Ccdot%29%5E%5Cast+%3D+G%28%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(\\cdot)^\\ast = G((\\cdot)^\\sharp)\" class=\"latex\" title=\"(\\cdot)^\\ast = G((\\cdot)^\\sharp)\" /></em></p>
<p>If <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+GF&bg=ffffff&fg=333333&s=0\" alt=\"T = GF\" class=\"latex\" title=\"T = GF\" /> with <img src=\"http://s0.wp.com/latex.php?latex=F+%5Cdashv+G&bg=ffffff&fg=333333&s=0\" alt=\"F \\dashv G\" class=\"latex\" title=\"F \\dashv G\" />, then for every <img src=\"http://s0.wp.com/latex.php?latex=A%2CB+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A,B \\in |\\mathcal{C}|\" class=\"latex\" title=\"A,B \\in |\\mathcal{C}|\" /> there is an isomorphism <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D%28FA%2CFB%29+%5Ccong+%5Cmathcal%7BC%7D%28A%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{D}(FA,FB) \\cong \\mathcal{C}(A,TB)\" class=\"latex\" title=\"\\mathcal{D}(FA,FB) \\cong \\mathcal{C}(A,TB)\" />: this observation is at the base of Kleisli’s construction.</p>
<p><strong>Definition 5.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"T = (T, \\eta, (\\cdot)^\\ast)\" /> be a Kleisli triple on a category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />. The <em>Kleisli category </em>of <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" /> is the category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T\" class=\"latex\" title=\"\\mathcal{C}_T\" /> defined as follows:</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=%7C%5Cmathcal%7BC%7D_T%7C+%3D+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"|\\mathcal{C}_T| = |\\mathcal{C}|\" class=\"latex\" title=\"|\\mathcal{C}_T| = |\\mathcal{C}|\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T%28A%2CB%29+%3D+%5Cmathcal%7BC%7D%28A%2CTB%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T(A,B) = \\mathcal{C}(A,TB)\" class=\"latex\" title=\"\\mathcal{C}_T(A,B) = \\mathcal{C}(A,TB)\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Cmathrm%7Bid%7D_%7BA%7D%5E%7B%5Cmathcal%7BC%7D_T%7D+%3D+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"\\mathrm{id}_{A}^{\\mathcal{C}_T} = \\eta_A\" class=\"latex\" title=\"\\mathrm{id}_{A}^{\\mathcal{C}_T} = \\eta_A\" />, that is, the identity of <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T\" class=\"latex\" title=\"\\mathcal{C}_T\" /> is <img src=\"http://s0.wp.com/latex.php?latex=%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"\\eta_A\" class=\"latex\" title=\"\\eta_A\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=g+%5Cbullet+f+%3D+g%5E%5Cast+%5Ccirc+f&bg=ffffff&fg=333333&s=0\" alt=\"g \\bullet f = g^\\ast \\circ f\" class=\"latex\" title=\"g \\bullet f = g^\\ast \\circ f\" />, that is, the composition of <img src=\"http://s0.wp.com/latex.php?latex=f&bg=ffffff&fg=333333&s=0\" alt=\"f\" class=\"latex\" title=\"f\" /> and <img src=\"http://s0.wp.com/latex.php?latex=g&bg=ffffff&fg=333333&s=0\" alt=\"g\" class=\"latex\" title=\"g\" /> in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T\" class=\"latex\" title=\"\\mathcal{C}_T\" /> is the composition of <img src=\"http://s0.wp.com/latex.php?latex=f&bg=ffffff&fg=333333&s=0\" alt=\"f\" class=\"latex\" title=\"f\" /> and <img src=\"http://s0.wp.com/latex.php?latex=g%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"g^\\ast\" class=\"latex\" title=\"g^\\ast\" /> in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />.</li>
</ul>
<p><strong>Theorem 2.</strong> <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T\" class=\"latex\" title=\"\\mathcal{C}_T\" /> is a category.</p>
<p><em>Proof:</em> If <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(A,B)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cbullet+%5Cmathrm%7Bid%7D_%7BA%7D%5E%7B%5Cmathcal%7BC%7D_T%7D+%3D+f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f \\bullet \\mathrm{id}_{A}^{\\mathcal{C}_T} = f^\\ast \\circ \\eta_A = f\" class=\"latex\" title=\"f \\bullet \\mathrm{id}_{A}^{\\mathcal{C}_T} = f^\\ast \\circ \\eta_A = f\" /> and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathrm%7Bid%7D_%7BB%7D%5E%7B%5Cmathcal%7BC%7D_T%7D+%5Cbullet+f+%3D+%28%5Ceta_B%29%5E%5Cast+%5Ccirc+f+%3D+%5Cmathrm%7Bid%7D_%7BTB%7D+%5Ccirc+f+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"\\mathrm{id}_{B}^{\\mathcal{C}_T} \\bullet f = (\\eta_B)^\\ast \\circ f = \\mathrm{id}_{TB} \\circ f = f\" class=\"latex\" title=\"\\mathrm{id}_{B}^{\\mathcal{C}_T} \\bullet f = (\\eta_B)^\\ast \\circ f = \\mathrm{id}_{TB} \\circ f = f\" /> by the Kleisli laws. If <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(A,B)\" />, <img src=\"http://s0.wp.com/latex.php?latex=g+%5Cin+%5Cmathcal%7BC%7D_T%28B%2CC%29&bg=ffffff&fg=333333&s=0\" alt=\"g \\in \\mathcal{C}_T(B,C)\" class=\"latex\" title=\"g \\in \\mathcal{C}_T(B,C)\" />, and <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28C%2CD%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(C,D)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(C,D)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=%28h+%5Cbullet+g%29+%5Cbullet+f+%3D+%28h%5E%5Cast+%5Ccirc+g%29%5E%5Cast+%5Ccirc+f+%3D+h%5E%5Cast+%5Ccirc+g%5E%5Cast+%5Ccirc+f+%3D+h+%5Cbullet+%28g+%5Cbullet+f%29.&bg=ffffff&fg=333333&s=0\" alt=\"(h \\bullet g) \\bullet f = (h^\\ast \\circ g)^\\ast \\circ f = h^\\ast \\circ g^\\ast \\circ f = h \\bullet (g \\bullet f).\" class=\"latex\" title=\"(h \\bullet g) \\bullet f = (h^\\ast \\circ g)^\\ast \\circ f = h^\\ast \\circ g^\\ast \\circ f = h \\bullet (g \\bullet f).\" /> <img src=\"http://s0.wp.com/latex.php?latex=%5CBox&bg=ffffff&fg=333333&s=0\" alt=\"\\Box\" class=\"latex\" title=\"\\Box\" /></p>
<p>Our plan is to construct an adjunction quadruple <img src=\"http://s0.wp.com/latex.php?latex=%28F_T%2C+G_T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Csharp%29&bg=ffffff&fg=333333&s=0\" alt=\"(F_T, G_T, \\eta, (\\cdot)^\\sharp)\" class=\"latex\" title=\"(F_T, G_T, \\eta, (\\cdot)^\\sharp)\" />, with <img src=\"http://s0.wp.com/latex.php?latex=F_T+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D_T&bg=ffffff&fg=333333&s=0\" alt=\"F_T : \\mathcal{C} \\to \\mathcal{C}_T\" class=\"latex\" title=\"F_T : \\mathcal{C} \\to \\mathcal{C}_T\" /> and <img src=\"http://s0.wp.com/latex.php?latex=G_T+%3A+%5Cmathcal%7BC%7D_T+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"G_T : \\mathcal{C}_T \\to \\mathcal{C}\" class=\"latex\" title=\"G_T : \\mathcal{C}_T \\to \\mathcal{C}\" />, such that <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+G_T+F_T&bg=ffffff&fg=333333&s=0\" alt=\"T = G_T F_T\" class=\"latex\" title=\"T = G_T F_T\" /> and <img src=\"http://s0.wp.com/latex.php?latex=G_T+f%5E%5Csharp+%3D+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"G_T f^\\sharp = f^\\ast\" class=\"latex\" title=\"G_T f^\\sharp = f^\\ast\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(A,B)\" />. We do this as follows:</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=F_T+A+%3D+A&bg=ffffff&fg=333333&s=0\" alt=\"F_T A = A\" class=\"latex\" title=\"F_T A = A\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}|\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=G_T+A+%3D+TA&bg=ffffff&fg=333333&s=0\" alt=\"G_T A = TA\" class=\"latex\" title=\"G_T A = TA\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D_T%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}_T|\" class=\"latex\" title=\"A \\in |\\mathcal{C}_T|\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=G_T+f+%3D+f%5E%5Cast&bg=ffffff&fg=333333&s=0\" alt=\"G_T f = f^\\ast\" class=\"latex\" title=\"G_T f = f^\\ast\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(A,B)\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp = f\" class=\"latex\" title=\"f^\\sharp = f\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2C+G_T+B%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A, G_T B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A, G_T B)\" />.</li>
</ul>
<p>Let us quickly check that <img src=\"http://s0.wp.com/latex.php?latex=G_T&bg=ffffff&fg=333333&s=0\" alt=\"G_T\" class=\"latex\" title=\"G_T\" /> is indeed a functor.<em></em> If <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D_T%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}_T|\" class=\"latex\" title=\"A \\in |\\mathcal{C}_T|\" /> then <img src=\"http://s0.wp.com/latex.php?latex=G_T+%5Cmathrm%7Bid%7D_%7BA%7D%5E%7B%5Cmathcal%7BC%7D_T%7D+%3D+%28%5Ceta_A%29%5E%5Cast+%3D+%5Cmathrm%7Bid%7D_%7BTA%7D+%3D+%5Cmathrm%7Bid%7D_%7BG_T+A%7D&bg=ffffff&fg=333333&s=0\" alt=\"G_T \\mathrm{id}_{A}^{\\mathcal{C}_T} = (\\eta_A)^\\ast = \\mathrm{id}_{TA} = \\mathrm{id}_{G_T A}\" class=\"latex\" title=\"G_T \\mathrm{id}_{A}^{\\mathcal{C}_T} = (\\eta_A)^\\ast = \\mathrm{id}_{TA} = \\mathrm{id}_{G_T A}\" />. If <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(A,B)\" /> and <img src=\"http://s0.wp.com/latex.php?latex=g+%5Cin+%5Cmathcal%7BC%7D_T%28B%2CC%29&bg=ffffff&fg=333333&s=0\" alt=\"g \\in \\mathcal{C}_T(B,C)\" class=\"latex\" title=\"g \\in \\mathcal{C}_T(B,C)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=G_T%28g+%5Cbullet+f%29+%3D+%28g%5E%5Cast+%5Ccirc+f%29%5E%5Cast+%3D+g%5E%5Cast+%5Ccirc+f%5E%5Cast+%3D+G_Tg+%5Ccirc+G_Tf&bg=ffffff&fg=333333&s=0\" alt=\"G_T(g \\bullet f) = (g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast = G_Tg \\circ G_Tf\" class=\"latex\" title=\"G_T(g \\bullet f) = (g^\\ast \\circ f)^\\ast = g^\\ast \\circ f^\\ast = G_Tg \\circ G_Tf\" />. We are only left to determine, for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2C+G_T+B%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A, G_T B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A, G_T B)\" />, a unique <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%5Cin+%5Cmathcal%7BC%7D_T%28F_T+A%2C+B%29&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp \\in \\mathcal{C}_T(F_T A, B)\" class=\"latex\" title=\"f^\\sharp \\in \\mathcal{C}_T(F_T A, B)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=G_T+f%5E%5Csharp+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"G_T f^\\sharp \\circ \\eta_A = f\" class=\"latex\" title=\"G_T f^\\sharp \\circ \\eta_A = f\" />: but the entire construction leads to the choice <img src=\"http://s0.wp.com/latex.php?latex=f%5E%5Csharp+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"f^\\sharp = f\" class=\"latex\" title=\"f^\\sharp = f\" />! Indeed, <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T%28F_T+A%2C+B%29+%3D+%5Cmathcal%7BC%7D_T%28A%2CB%29+%3D+%5Cmathcal%7BC%7D%28A%2CTB%29+%3D+%5Cmathcal%7BC%7D%28A%2C+G_T+B%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T(F_T A, B) = \\mathcal{C}_T(A,B) = \\mathcal{C}(A,TB) = \\mathcal{C}(A, G_T B)\" class=\"latex\" title=\"\\mathcal{C}_T(F_T A, B) = \\mathcal{C}_T(A,B) = \\mathcal{C}(A,TB) = \\mathcal{C}(A, G_T B)\" />, and <img src=\"http://s0.wp.com/latex.php?latex=G_Tf+%5Ccirc+%5Ceta_A+%3D+f%5E%5Cast+%5Ccirc+%5Ceta_A+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"G_Tf \\circ \\eta_A = f^\\ast \\circ \\eta_A = f\" class=\"latex\" title=\"G_Tf \\circ \\eta_A = f^\\ast \\circ \\eta_A = f\" /> by the Kleisli laws. Observe that the functor <img src=\"http://s0.wp.com/latex.php?latex=G_T&bg=ffffff&fg=333333&s=0\" alt=\"G_T\" class=\"latex\" title=\"G_T\" /> is the one that does all the work, while the function <img src=\"http://s0.wp.com/latex.php?latex=F_T&bg=ffffff&fg=333333&s=0\" alt=\"F_T\" class=\"latex\" title=\"F_T\" /> is little more than a placeholder.</p>
<p>By our identification of adjunctions with adjunction quadruples (see the previous talk) we also get <img src=\"http://s0.wp.com/latex.php?latex=F_T+f+%3D+%28%5Ceta_B+%5Ccirc+f%29%5E%5Csharp+%3D+%5Ceta_B+%5Ccirc+f&bg=ffffff&fg=333333&s=0\" alt=\"F_T f = (\\eta_B \\circ f)^\\sharp = \\eta_B \\circ f\" class=\"latex\" title=\"F_T f = (\\eta_B \\circ f)^\\sharp = \\eta_B \\circ f\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,B)\" />, and <img src=\"http://s0.wp.com/latex.php?latex=%28%5Cvarepsilon_T%29_S+%3D+%28%5Cmathrm%7Bid%7D_%7BG_T+S%7D%5E%7B%5Cmathcal%7BC%7D%7D%29%5E%5Csharp+%3D+%5Cmathrm%7Bid%7D_%7BTS%7D+%5Cin+%5Cmathcal%7BC%7D%28G_TF_TS%2C+TS%29+%3D+%5Cmathcal%7BC%7D_T%28F_TG_TS%2C+S%29&bg=ffffff&fg=333333&s=0\" alt=\"(\\varepsilon_T)_S = (\\mathrm{id}_{G_T S}^{\\mathcal{C}})^\\sharp = \\mathrm{id}_{TS} \\in \\mathcal{C}(G_TF_TS, TS) = \\mathcal{C}_T(F_TG_TS, S)\" class=\"latex\" title=\"(\\varepsilon_T)_S = (\\mathrm{id}_{G_T S}^{\\mathcal{C}})^\\sharp = \\mathrm{id}_{TS} \\in \\mathcal{C}(G_TF_TS, TS) = \\mathcal{C}_T(F_TG_TS, S)\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=S+%5Cin+%7C%5Cmathcal%7BC%7D_T%7C+%3D+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"S \\in |\\mathcal{C}_T| = |\\mathcal{C}|\" class=\"latex\" title=\"S \\in |\\mathcal{C}_T| = |\\mathcal{C}|\" />.</p>
<p>Kleisli’s solution is not the only one, but just one among many: and, in a sense that will be clear later, the “simplest” one. Another solution was constructed by Eilenberg and Moore, and is based on a completely different approach: instead of keeping the objects and specializing the morphisms, one expands the objects and redefines the morphisms.</p>
<p><strong>Definition 6.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> be a category and let <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> be a monad on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />.</p>
<ol>
<li>A <em><img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebra</em> on <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> is a pair <img src=\"http://s0.wp.com/latex.php?latex=a+%3D+%28A%2Ca%29&bg=ffffff&fg=333333&s=0\" alt=\"a = (A,a)\" class=\"latex\" title=\"a = (A,a)\" /> where <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> is an object in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=a+%3A+TA+%5Cto+A&bg=ffffff&fg=333333&s=0\" alt=\"a : TA \\to A\" class=\"latex\" title=\"a : TA \\to A\" /> is such that <img src=\"http://s0.wp.com/latex.php?latex=a+%5Ccirc+%5Ceta_A+%3D+%5Cmathrm%7Bid%7D_A&bg=ffffff&fg=333333&s=0\" alt=\"a \\circ \\eta_A = \\mathrm{id}_A\" class=\"latex\" title=\"a \\circ \\eta_A = \\mathrm{id}_A\" /> and <img src=\"http://s0.wp.com/latex.php?latex=a+%5Ccirc+%5Cmu_A+%3D+a+%5Ccirc+Ta&bg=ffffff&fg=333333&s=0\" alt=\"a \\circ \\mu_A = a \\circ Ta\" class=\"latex\" title=\"a \\circ \\mu_A = a \\circ Ta\" />.</li>
<li>A morphism of <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras from a <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebra <img src=\"http://s0.wp.com/latex.php?latex=a+%3D+%28A%2Ca%29&bg=ffffff&fg=333333&s=0\" alt=\"a = (A,a)\" class=\"latex\" title=\"a = (A,a)\" /> to a <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebra <img src=\"http://s0.wp.com/latex.php?latex=b+%3D+%28B%2Cb%29&bg=ffffff&fg=333333&s=0\" alt=\"b = (B,b)\" class=\"latex\" title=\"b = (B,b)\" /> is an arrow <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,B)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=b+%5Ccirc+Tf+%3D+f+%5Ccirc+a&bg=ffffff&fg=333333&s=0\" alt=\"b \\circ Tf = f \\circ a\" class=\"latex\" title=\"b \\circ Tf = f \\circ a\" />.</li>
<li>The category of <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras on <img src=\"http://s0.wp.com/latex.php?latex=C&bg=ffffff&fg=333333&s=0\" alt=\"C\" class=\"latex\" title=\"C\" /> is the category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D%5ET&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}^T\" class=\"latex\" title=\"\\mathcal{C}^T\" /> which has <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras as objects, morphisms of <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras as morphisms, and where identities and composition are defined as in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />.</li>
</ol>
<p>If <img src=\"http://s0.wp.com/latex.php?latex=T%3DM&bg=ffffff&fg=333333&s=0\" alt=\"T=M\" class=\"latex\" title=\"T=M\" /> is the free monoid construction, then an <img src=\"http://s0.wp.com/latex.php?latex=M&bg=ffffff&fg=333333&s=0\" alt=\"M\" class=\"latex\" title=\"M\" />-algebra is a function <img src=\"http://s0.wp.com/latex.php?latex=a+%3A+A%5E%5Cast+%5Cto+A&bg=ffffff&fg=333333&s=0\" alt=\"a : A^\\ast \\to A\" class=\"latex\" title=\"a : A^\\ast \\to A\" /> such that</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=a%5Bx%5D+%3D+x&bg=ffffff&fg=333333&s=0\" alt=\"a[x] = x\" class=\"latex\" title=\"a[x] = x\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=x+%5Cin+A&bg=ffffff&fg=333333&s=0\" alt=\"x \\in A\" class=\"latex\" title=\"x \\in A\" />, and</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=a%5Bu%5E1_1+%5Ccdots+u%5E1_%7Bn_1%7D+%5Ccdots+u%5Em_1+%5Ccdots+u%5Em_%7Bn_m%7D%5D+%3D+a%5Ba%5Bu%5E1_1+%5Ccdots+u%5E1_%7Bn_1%7D%5D+%5Ccdots+a%5Bu%5Em_1+%5Ccdots+u%5Em_%7Bn_m%7D%5D%5D&bg=ffffff&fg=333333&s=0\" alt=\"a[u^1_1 \\cdots u^1_{n_1} \\cdots u^m_1 \\cdots u^m_{n_m}] = a[a[u^1_1 \\cdots u^1_{n_1}] \\cdots a[u^m_1 \\cdots u^m_{n_m}]]\" class=\"latex\" title=\"a[u^1_1 \\cdots u^1_{n_1} \\cdots u^m_1 \\cdots u^m_{n_m}] = a[a[u^1_1 \\cdots u^1_{n_1}] \\cdots a[u^m_1 \\cdots u^m_{n_m}]]\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=u%5E1_1%2C+%5Cldots%2C+u%5E1_%7Bn_1%7D%2C+%5Cldots%2C+u%5Em_1%2C+%5Cldots%2C+u%5Em_%7Bn_m%7D+%5Cin+A&bg=ffffff&fg=333333&s=0\" alt=\"u^1_1, \\ldots, u^1_{n_1}, \\ldots, u^m_1, \\ldots, u^m_{n_m} \\in A\" class=\"latex\" title=\"u^1_1, \\ldots, u^1_{n_1}, \\ldots, u^m_1, \\ldots, u^m_{n_m} \\in A\" />.</li>
</ul>
<p>As <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" /> is a monad, for every object <img src=\"http://s0.wp.com/latex.php?latex=A&bg=ffffff&fg=333333&s=0\" alt=\"A\" class=\"latex\" title=\"A\" /> of <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> there is a <em>free <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebra</em> <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%3D+%28TA%2C+%5Cmu_A%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A = (TA, \\mu_A)\" class=\"latex\" title=\"\\mu_A = (TA, \\mu_A)\" />, and every arrow <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}(A,B)\" class=\"latex\" title=\"f \\in \\mathcal{C}(A,B)\" /> induces a morphism of free <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras <img src=\"http://s0.wp.com/latex.php?latex=Tf+%5Cin+%5Cmathcal%7BC%7D%5ET%28%5Cmu_A%2C+%5Cmu_B%29&bg=ffffff&fg=333333&s=0\" alt=\"Tf \\in \\mathcal{C}^T(\\mu_A, \\mu_B)\" class=\"latex\" title=\"Tf \\in \\mathcal{C}^T(\\mu_A, \\mu_B)\" />. Moreover, <em>any</em> <img src=\"http://s0.wp.com/latex.php?latex=a+%5Cin+%5Cmathcal%7BC%7D%28TA%2CA%29&bg=ffffff&fg=333333&s=0\" alt=\"a \\in \\mathcal{C}(TA,A)\" class=\"latex\" title=\"a \\in \\mathcal{C}(TA,A)\" /><em></em> is, by definition, also a morphism from <img src=\"http://s0.wp.com/latex.php?latex=%28TA%2C+%5Cmu_A%29&bg=ffffff&fg=333333&s=0\" alt=\"(TA, \\mu_A)\" class=\"latex\" title=\"(TA, \\mu_A)\" /> to <img src=\"http://s0.wp.com/latex.php?latex=%28TA%2C+a%29&bg=ffffff&fg=333333&s=0\" alt=\"(TA, a)\" class=\"latex\" title=\"(TA, a)\" /> in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D%5ET&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}^T\" class=\"latex\" title=\"\\mathcal{C}^T\" />.</p>
<p>This time, our plan is to construct an adjunction <img src=\"http://s0.wp.com/latex.php?latex=%28F%5ET%2C+G%5ET%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"(F^T, G^T, \\eta, \\mu)\" class=\"latex\" title=\"(F^T, G^T, \\eta, \\mu)\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=F%5ET+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D%5ET&bg=ffffff&fg=333333&s=0\" alt=\"F^T : \\mathcal{C} \\to \\mathcal{C}^T\" class=\"latex\" title=\"F^T : \\mathcal{C} \\to \\mathcal{C}^T\" />, <img src=\"http://s0.wp.com/latex.php?latex=G%5ET+%3A+%5Cmathcal%7BC%7D%5ET+%5Cto+%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"G^T : \\mathcal{C}^T \\to \\mathcal{C}\" class=\"latex\" title=\"G^T : \\mathcal{C}^T \\to \\mathcal{C}\" />, <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+G%5ET+F%5ET&bg=ffffff&fg=333333&s=0\" alt=\"T = G^T F^T\" class=\"latex\" title=\"T = G^T F^T\" />, and <img src=\"http://s0.wp.com/latex.php?latex=%5Cmu_A+%3D+G%5ET+%5Cvarepsilon_%7BF%5ET+A%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mu_A = G^T \\varepsilon_{F^T A}\" class=\"latex\" title=\"\\mu_A = G^T \\varepsilon_{F^T A}\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}|\" />. We do this as follows:</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=F%5ET+A+%3D+%5Cmu_A+%3D+%28TA%2C+%5Cmu_A%29&bg=ffffff&fg=333333&s=0\" alt=\"F^T A = \\mu_A = (TA, \\mu_A)\" class=\"latex\" title=\"F^T A = \\mu_A = (TA, \\mu_A)\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=F%5ET+f+%3D+Tf&bg=ffffff&fg=333333&s=0\" alt=\"F^T f = Tf\" class=\"latex\" title=\"F^T f = Tf\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=G%5ET+a+%3D+A&bg=ffffff&fg=333333&s=0\" alt=\"G^T a = A\" class=\"latex\" title=\"G^T a = A\" /> if <img src=\"http://s0.wp.com/latex.php?latex=a+%3A+TA+%5Cto+A&bg=ffffff&fg=333333&s=0\" alt=\"a : TA \\to A\" class=\"latex\" title=\"a : TA \\to A\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=G%5ET+f+%3D+f&bg=ffffff&fg=333333&s=0\" alt=\"G^T f = f\" class=\"latex\" title=\"G^T f = f\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon%5ET_a+%3D+a&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon^T_a = a\" class=\"latex\" title=\"\\varepsilon^T_a = a\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=a+%3D+%28A%2Ca%29+%5Cin+%7C%5Cmathcal%7BC%7D%5ET%7C&bg=ffffff&fg=333333&s=0\" alt=\"a = (A,a) \\in |\\mathcal{C}^T|\" class=\"latex\" title=\"a = (A,a) \\in |\\mathcal{C}^T|\" />.</li>
</ul>
<p>Then clearly <img src=\"http://s0.wp.com/latex.php?latex=G%5ET+F%5ET+%3D+T&bg=ffffff&fg=333333&s=0\" alt=\"G^T F^T = T\" class=\"latex\" title=\"G^T F^T = T\" />, while naturality of <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon\" class=\"latex\" title=\"\\varepsilon\" /> follows from the properties of free <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras with respect to <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebra morphisms. In addition, if <img src=\"http://s0.wp.com/latex.php?latex=S+%3D+a+%3D+%28A%2Ca%29+%5Cin+%7C%5Cmathcal%7BC%7D%5ET%7C&bg=ffffff&fg=333333&s=0\" alt=\"S = a = (A,a) \\in |\\mathcal{C}^T|\" class=\"latex\" title=\"S = a = (A,a) \\in |\\mathcal{C}^T|\" /> then <img src=\"http://s0.wp.com/latex.php?latex=G%5ET+%5Cvarepsilon%5ET_S+%5Ccirc+%5Ceta_%7BG%5ET+S%7D+%3D+a+%5Ccirc+%5Ceta_A+%3D+%5Cmathrm%7Bid%7D_%7BG%5ET+S%7D&bg=ffffff&fg=333333&s=0\" alt=\"G^T \\varepsilon^T_S \\circ \\eta_{G^T S} = a \\circ \\eta_A = \\mathrm{id}_{G^T S}\" class=\"latex\" title=\"G^T \\varepsilon^T_S \\circ \\eta_{G^T S} = a \\circ \\eta_A = \\mathrm{id}_{G^T S}\" />, and if <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%5Cmathrm%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"A \\in \\mathrm{C}\" class=\"latex\" title=\"A \\in \\mathrm{C}\" /> then <img src=\"http://s0.wp.com/latex.php?latex=%5Cvarepsilon%5ET_%7BF%5ET+A%7D+%5Ccirc+F%5ET+%5Ceta_A+%3D+%5Cmu_A+%5Ccirc+T%5Ceta_A+%5Cmathrm%7Bid%7D_%7BTA%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\varepsilon^T_{F^T A} \\circ F^T \\eta_A = \\mu_A \\circ T\\eta_A \\mathrm{id}_{TA}\" class=\"latex\" title=\"\\varepsilon^T_{F^T A} \\circ F^T \\eta_A = \\mu_A \\circ T\\eta_A \\mathrm{id}_{TA}\" />. We thus have a full-featured adjunction: this time, <img src=\"http://s0.wp.com/latex.php?latex=F%5ET&bg=ffffff&fg=333333&s=0\" alt=\"F^T\" class=\"latex\" title=\"F^T\" /> is doing all the work, and <img src=\"http://s0.wp.com/latex.php?latex=G%5ET&bg=ffffff&fg=333333&s=0\" alt=\"G^T\" class=\"latex\" title=\"G^T\" /> is just a forgetful functor.</p>
<p><strong>Theorem 3.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> be a monad on a <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" />. Identify the monad <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" /> with the corresponding Kleisli triple <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%28%5Ccdot%29%5E%5Cast%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, (\\cdot)^\\ast)\" class=\"latex\" title=\"T = (T, \\eta, (\\cdot)^\\ast)\" />. The Kleisli category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D_T&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}_T\" class=\"latex\" title=\"\\mathcal{C}_T\" /> is equivalent to the full subcategory of <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D%5ET&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}^T\" class=\"latex\" title=\"\\mathcal{C}^T\" /> generated by the free <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras.</p>
<p><em>Proof:</em> Define a functor <img src=\"http://s0.wp.com/latex.php?latex=J+%3A+%5Cmathcal%7BC%7D_T+%5Cto+%5Cmathcal%7BC%7D%5ET&bg=ffffff&fg=333333&s=0\" alt=\"J : \\mathcal{C}_T \\to \\mathcal{C}^T\" class=\"latex\" title=\"J : \\mathcal{C}_T \\to \\mathcal{C}^T\" /> by setting <img src=\"http://s0.wp.com/latex.php?latex=JA+%3D+%5Cmu_A+%3D+%28TA%2C+%5Cmu_A%29&bg=ffffff&fg=333333&s=0\" alt=\"JA = \\mu_A = (TA, \\mu_A)\" class=\"latex\" title=\"JA = \\mu_A = (TA, \\mu_A)\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=A+%5Cin+%7C%5Cmathcal%7BC%7D_T%7C+%3D+%7C%5Cmathcal%7BC%7D%7C&bg=ffffff&fg=333333&s=0\" alt=\"A \\in |\\mathcal{C}_T| = |\\mathcal{C}|\" class=\"latex\" title=\"A \\in |\\mathcal{C}_T| = |\\mathcal{C}|\" />, and <img src=\"http://s0.wp.com/latex.php?latex=Jf+%3D+%5Cmu_B+%5Ccirc+Tf+%3D+f%5E%5Cast+%5Cin+%5Cmathcal%7BC%7D%5ET%28JA%2C+JB%29&bg=ffffff&fg=333333&s=0\" alt=\"Jf = \\mu_B \\circ Tf = f^\\ast \\in \\mathcal{C}^T(JA, JB)\" class=\"latex\" title=\"Jf = \\mu_B \\circ Tf = f^\\ast \\in \\mathcal{C}^T(JA, JB)\" /> for every <img src=\"http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29+%3D+%5Cmathcal%7BC%7D%28A%2C+TB%29&bg=ffffff&fg=333333&s=0\" alt=\"f \\in \\mathcal{C}_T(A,B) = \\mathcal{C}(A, TB)\" class=\"latex\" title=\"f \\in \\mathcal{C}_T(A,B) = \\mathcal{C}(A, TB)\" />. Then <img src=\"http://s0.wp.com/latex.php?latex=J&bg=ffffff&fg=333333&s=0\" alt=\"J\" class=\"latex\" title=\"J\" /> is a faithful functor, because if <img src=\"http://s0.wp.com/latex.php?latex=f%2Cg+%5Cin+%5Cmathcal%7BC%7D_T%28A%2CB%29&bg=ffffff&fg=333333&s=0\" alt=\"f,g \\in \\mathcal{C}_T(A,B)\" class=\"latex\" title=\"f,g \\in \\mathcal{C}_T(A,B)\" />, then <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+%5Cmu_B+%5Ccirc+%5Ceta_%7BTB%7D+%5Ccirc+f+%3D+%5Cmu_B+%5Ccirc+Tf+%5Ccirc+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"f = \\mu_B \\circ \\eta_{TB} \\circ f = \\mu_B \\circ Tf \\circ \\eta_A\" class=\"latex\" title=\"f = \\mu_B \\circ \\eta_{TB} \\circ f = \\mu_B \\circ Tf \\circ \\eta_A\" /> and similarly <img src=\"http://s0.wp.com/latex.php?latex=g+%3D+%5Cmu_B+%5Ccirc+%5Ceta_%7BTB%7D+%5Ccirc+g+%3D+%5Cmu_B+%5Ccirc+Tg+%5Ccirc+%5Ceta_A&bg=ffffff&fg=333333&s=0\" alt=\"g = \\mu_B \\circ \\eta_{TB} \\circ g = \\mu_B \\circ Tg \\circ \\eta_A\" class=\"latex\" title=\"g = \\mu_B \\circ \\eta_{TB} \\circ g = \\mu_B \\circ Tg \\circ \\eta_A\" />, so that <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+g&bg=ffffff&fg=333333&s=0\" alt=\"f = g\" class=\"latex\" title=\"f = g\" /> if <img src=\"http://s0.wp.com/latex.php?latex=Jf+%3D+Jg&bg=ffffff&fg=333333&s=0\" alt=\"Jf = Jg\" class=\"latex\" title=\"Jf = Jg\" />. But <img src=\"http://s0.wp.com/latex.php?latex=J&bg=ffffff&fg=333333&s=0\" alt=\"J\" class=\"latex\" title=\"J\" /> is also full, because if <img src=\"http://s0.wp.com/latex.php?latex=f+%3A+%28TA%2C+%5Cmu_A%29+%5Cto+%28TB%2C+%5Cmu_B%29&bg=ffffff&fg=333333&s=0\" alt=\"f : (TA, \\mu_A) \\to (TB, \\mu_B)\" class=\"latex\" title=\"f : (TA, \\mu_A) \\to (TB, \\mu_B)\" /> is a morphism of free <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-algebras, then from the laws of monads follows that <img src=\"http://s0.wp.com/latex.php?latex=f+%3D+J%28f+%5Ccirc+%5Ceta_A%29&bg=ffffff&fg=333333&s=0\" alt=\"f = J(f \\circ \\eta_A)\" class=\"latex\" title=\"f = J(f \\circ \\eta_A)\" />. <img src=\"http://s0.wp.com/latex.php?latex=%5CBox&bg=ffffff&fg=333333&s=0\" alt=\"\\Box\" class=\"latex\" title=\"\\Box\" /></p>
<p>But things get even more interesting than this! Let <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> be a monad: let us consider <em>all</em> the adjunctions <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> that generate <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />. What can be a <em>morphism</em> of such adjunctions? First, if <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> is a solution with <img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"F : \\mathcal{C} \\to \\mathcal{D}\" class=\"latex\" title=\"F : \\mathcal{C} \\to \\mathcal{D}\" />, and <img src=\"http://s0.wp.com/latex.php?latex=%28F%27%2C+G%27%2C+%5Ceta%2C+%5Cvarepsilon%27%29&bg=ffffff&fg=333333&s=0\" alt=\"(F', G', \\eta, \\varepsilon')\" class=\"latex\" title=\"(F', G', \\eta, \\varepsilon')\" /> is a solution with <img src=\"http://s0.wp.com/latex.php?latex=F%27+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D%27&bg=ffffff&fg=333333&s=0\" alt=\"F' : \\mathcal{C} \\to \\mathcal{D}'\" class=\"latex\" title=\"F' : \\mathcal{C} \\to \\mathcal{D}'\" />, we may consider a functor <img src=\"http://s0.wp.com/latex.php?latex=L+%3A+%5Cmathcal%7BD%7D+%5Cto+%5Cmathcal%7BD%27%7D&bg=ffffff&fg=333333&s=0\" alt=\"L : \\mathcal{D} \\to \\mathcal{D'}\" class=\"latex\" title=\"L : \\mathcal{D} \\to \\mathcal{D'}\" /> as a morphism from <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> to <img src=\"http://s0.wp.com/latex.php?latex=%28F%27%2C+G%27%2C+%5Ceta%2C+%5Cvarepsilon%27%29&bg=ffffff&fg=333333&s=0\" alt=\"(F', G', \\eta, \\varepsilon')\" class=\"latex\" title=\"(F', G', \\eta, \\varepsilon')\" />. Next, we want that the equalities <img src=\"http://s0.wp.com/latex.php?latex=GF+%3D+T+%3D+G%27F%27&bg=ffffff&fg=333333&s=0\" alt=\"GF = T = G'F'\" class=\"latex\" title=\"GF = T = G'F'\" /> are not affected by mid-way application of <img src=\"http://s0.wp.com/latex.php?latex=L&bg=ffffff&fg=333333&s=0\" alt=\"L\" class=\"latex\" title=\"L\" />: this translates into the two conditions <img src=\"http://s0.wp.com/latex.php?latex=L+%5Ccirc+F+%3D+F%27&bg=ffffff&fg=333333&s=0\" alt=\"L \\circ F = F'\" class=\"latex\" title=\"L \\circ F = F'\" /> and <img src=\"http://s0.wp.com/latex.php?latex=G%27+%5Ccirc+L+%3D+G&bg=ffffff&fg=333333&s=0\" alt=\"G' \\circ L = G\" class=\"latex\" title=\"G' \\circ L = G\" />. Finally, as the previous point yields <img src=\"http://s0.wp.com/latex.php?latex=LFG+%3D+F%27G%27L&bg=ffffff&fg=333333&s=0\" alt=\"LFG = F'G'L\" class=\"latex\" title=\"LFG = F'G'L\" />, we want that <img src=\"http://s0.wp.com/latex.php?latex=L&bg=ffffff&fg=333333&s=0\" alt=\"L\" class=\"latex\" title=\"L\" /> does not interfere with the counits: that is, <img src=\"http://s0.wp.com/latex.php?latex=L%5Cvarepsilon+%3D+%5Cvarepsilon%27_L&bg=ffffff&fg=333333&s=0\" alt=\"L\\varepsilon = \\varepsilon'_L\" class=\"latex\" title=\"L\\varepsilon = \\varepsilon'_L\" />.</p>
<p><strong>Definition 7.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> be a monad on a category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BC%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{C}\" class=\"latex\" title=\"\\mathcal{C}\" /> and let <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" />, <img src=\"http://s0.wp.com/latex.php?latex=%28F%27%2C+G%27%2C+%5Ceta%2C+%5Cvarepsilon%27%29&bg=ffffff&fg=333333&s=0\" alt=\"(F', G', \\eta, \\varepsilon')\" class=\"latex\" title=\"(F', G', \\eta, \\varepsilon')\" /> be two adjunctions that generate <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />, with <img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"F : \\mathcal{C} \\to \\mathcal{D}\" class=\"latex\" title=\"F : \\mathcal{C} \\to \\mathcal{D}\" /> and <img src=\"http://s0.wp.com/latex.php?latex=F%27+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D%27&bg=ffffff&fg=333333&s=0\" alt=\"F' : \\mathcal{C} \\to \\mathcal{D}'\" class=\"latex\" title=\"F' : \\mathcal{C} \\to \\mathcal{D}'\" />, respectively. A <em><img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-preserving functor</em> from <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> to <img src=\"http://s0.wp.com/latex.php?latex=%28F%27%2C+G%27%2C+%5Ceta%2C+%5Cvarepsilon%27%29&bg=ffffff&fg=333333&s=0\" alt=\"(F', G', \\eta, \\varepsilon')\" class=\"latex\" title=\"(F', G', \\eta, \\varepsilon')\" /> is a functor <img src=\"http://s0.wp.com/latex.php?latex=L+%3A+%5Cmathcal%7BD%7D+%5Cto+%5Cmathcal%7BD%7D%27&bg=ffffff&fg=333333&s=0\" alt=\"L : \\mathcal{D} \\to \\mathcal{D}'\" class=\"latex\" title=\"L : \\mathcal{D} \\to \\mathcal{D}'\" /> such that <img src=\"http://s0.wp.com/latex.php?latex=L+%5Ccirc+F+%3D+F%27&bg=ffffff&fg=333333&s=0\" alt=\"L \\circ F = F'\" class=\"latex\" title=\"L \\circ F = F'\" />, <img src=\"http://s0.wp.com/latex.php?latex=G%27+%5Ccirc+L+%3D+G&bg=ffffff&fg=333333&s=0\" alt=\"G' \\circ L = G\" class=\"latex\" title=\"G' \\circ L = G\" />, and <img src=\"http://s0.wp.com/latex.php?latex=L%5Cvarepsilon+%3D+%5Cvarepsilon%27_L&bg=ffffff&fg=333333&s=0\" alt=\"L\\varepsilon = \\varepsilon'_L\" class=\"latex\" title=\"L\\varepsilon = \\varepsilon'_L\" />.</p>
<p>It is straightforward to see that <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-generating adjunctions together with <img src=\"http://s0.wp.com/latex.php?latex=T&bg=ffffff&fg=333333&s=0\" alt=\"T\" class=\"latex\" title=\"T\" />-preserving functors form a category <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathrm%7BAdj%7D%28T%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathrm{Adj}(T)\" class=\"latex\" title=\"\\mathrm{Adj}(T)\" />: composition is provided by the usual composition of functors, while the identity of <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathrm%7BAdj%7D%28T%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathrm{Adj}(T)\" class=\"latex\" title=\"\\mathrm{Adj}(T)\" /> is the identity functor of <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\mathcal{D}\" class=\"latex\" title=\"\\mathcal{D}\" /> if <img src=\"http://s0.wp.com/latex.php?latex=F+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&bg=ffffff&fg=333333&s=0\" alt=\"F : \\mathcal{C} \\to \\mathcal{D}\" class=\"latex\" title=\"F : \\mathcal{C} \\to \\mathcal{D}\" />.</p>
<p>To confirm that our intuition is correct, let us verify that <img src=\"http://s0.wp.com/latex.php?latex=J&bg=ffffff&fg=333333&s=0\" alt=\"J\" class=\"latex\" title=\"J\" /> satisfies the three given equations:</p>
<ul>
<li><img src=\"http://s0.wp.com/latex.php?latex=J+F_T+A+%3D+JA+%3D+%28T_A%2C+%5Cmu_A%29+%3D+F%5ET+A&bg=ffffff&fg=333333&s=0\" alt=\"J F_T A = JA = (T_A, \\mu_A) = F^T A\" class=\"latex\" title=\"J F_T A = JA = (T_A, \\mu_A) = F^T A\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=J+F_T+f+%3D+%5Cmu_B+%5Ccirc+T%28%5Ceta_B+%5Ccirc+f%29+%3D+%5Cmu_B+%5Ccirc+T%5Ceta_B+%5Ccirc+Tf+%3D+%5Cmathrm%7Bid%7D_%7BTB%7D+%5Ccirc+Tf+%3D+F%5ETf&bg=ffffff&fg=333333&s=0\" alt=\"J F_T f = \\mu_B \\circ T(\\eta_B \\circ f) = \\mu_B \\circ T\\eta_B \\circ Tf = \\mathrm{id}_{TB} \\circ Tf = F^Tf\" class=\"latex\" title=\"J F_T f = \\mu_B \\circ T(\\eta_B \\circ f) = \\mu_B \\circ T\\eta_B \\circ Tf = \\mathrm{id}_{TB} \\circ Tf = F^Tf\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=G%5ET+J+A+%3D+G%5ET+%28TA%2C+%5Cmu_A%29+%3D+TA+%3D+G_T+A&bg=ffffff&fg=333333&s=0\" alt=\"G^T J A = G^T (TA, \\mu_A) = TA = G_T A\" class=\"latex\" title=\"G^T J A = G^T (TA, \\mu_A) = TA = G_T A\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=G%5ET+J+f+%3D+G%5ET+%28%5Cmu_B+%5Ccirc+Tf%29+%3D+%5Cmu_B+%5Ccirc+Tf+%3D+f%5E%5Cast+%3D+G_T+f&bg=ffffff&fg=333333&s=0\" alt=\"G^T J f = G^T (\\mu_B \\circ Tf) = \\mu_B \\circ Tf = f^\\ast = G_T f\" class=\"latex\" title=\"G^T J f = G^T (\\mu_B \\circ Tf) = \\mu_B \\circ Tf = f^\\ast = G_T f\" />;</li>
<li><img src=\"http://s0.wp.com/latex.php?latex=J%28%5Cvarepsilon_T%29_S+%3D+J%5Cmathrm%7Bid%7D_%7BTS%7D%3D+%5Cmu_S+%5Ccirc+T%5Cmathrm%7Bid%7D_%7BTS%7D+%3D+%5Cmu_S+%3D+%5Cvarepsilon%5ET_%7B%28TS%2C+%5Cmu_S%29%7D+%3D+%5Cvarepsilon%5ET_%7BJS%7D&bg=ffffff&fg=333333&s=0\" alt=\"J(\\varepsilon_T)_S = J\\mathrm{id}_{TS}= \\mu_S \\circ T\\mathrm{id}_{TS} = \\mu_S = \\varepsilon^T_{(TS, \\mu_S)} = \\varepsilon^T_{JS}\" class=\"latex\" title=\"J(\\varepsilon_T)_S = J\\mathrm{id}_{TS}= \\mu_S \\circ T\\mathrm{id}_{TS} = \\mu_S = \\varepsilon^T_{(TS, \\mu_S)} = \\varepsilon^T_{JS}\" />.</li>
</ul>
<p><strong>Theorem 4.</strong> Let <img src=\"http://s0.wp.com/latex.php?latex=T+%3D+%28T%2C+%5Ceta%2C+%5Cmu%29&bg=ffffff&fg=333333&s=0\" alt=\"T = (T, \\eta, \\mu)\" class=\"latex\" title=\"T = (T, \\eta, \\mu)\" /> be a monad. Then the Kleisli adjunction is the initial object of <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathrm%7BAdj%7D%28T%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathrm{Adj}(T)\" class=\"latex\" title=\"\\mathrm{Adj}(T)\" />, the Eilenberg-Moore adjunction is the final object. In particular, <img src=\"http://s0.wp.com/latex.php?latex=J&bg=ffffff&fg=333333&s=0\" alt=\"J\" class=\"latex\" title=\"J\" /> is the only arrow in <img src=\"http://s0.wp.com/latex.php?latex=%5Cmathrm%7BAdj%7D%28T%29&bg=ffffff&fg=333333&s=0\" alt=\"\\mathrm{Adj}(T)\" class=\"latex\" title=\"\\mathrm{Adj}(T)\" /> from the former to the latter.</p>
<p><em>Proof:</em> If <img src=\"http://s0.wp.com/latex.php?latex=%28F%2C+G%2C+%5Ceta%2C+%5Cvarepsilon%29&bg=ffffff&fg=333333&s=0\" alt=\"(F, G, \\eta, \\varepsilon)\" class=\"latex\" title=\"(F, G, \\eta, \\varepsilon)\" /> is the Kleisli adjunction, then the only choice for <img src=\"http://s0.wp.com/latex.php?latex=L&bg=ffffff&fg=333333&s=0\" alt=\"L\" class=\"latex\" title=\"L\" /> is <img src=\"http://s0.wp.com/latex.php?latex=LA+%3D+F%27A&bg=ffffff&fg=333333&s=0\" alt=\"LA = F'A\" class=\"latex\" title=\"LA = F'A\" /> and <img src=\"http://s0.wp.com/latex.php?latex=Lf+%3D+%5Cvarepsilon%27_%7BF%27B%7D+%5Ccirc+F%27+f&bg=ffffff&fg=333333&s=0\" alt=\"Lf = \\varepsilon'_{F'B} \\circ F' f\" class=\"latex\" title=\"Lf = \\varepsilon'_{F'B} \\circ F' f\" />. If <img src=\"http://s0.wp.com/latex.php?latex=%28F%27%2C+G%27%2C+%5Ceta%2C+%5Cvarepsilon%27%29&bg=ffffff&fg=333333&s=0\" alt=\"(F', G', \\eta, \\varepsilon')\" class=\"latex\" title=\"(F', G', \\eta, \\varepsilon')\" /> is the Eilenberg-Moore adjunction, then the only choice for <img src=\"http://s0.wp.com/latex.php?latex=L&bg=ffffff&fg=333333&s=0\" alt=\"L\" class=\"latex\" title=\"L\" /> is <img src=\"http://s0.wp.com/latex.php?latex=LS+%3D+%28GS%2C+G+%5Cvarepsilon_S%29&bg=ffffff&fg=333333&s=0\" alt=\"LS = (GS, G \\varepsilon_S)\" class=\"latex\" title=\"LS = (GS, G \\varepsilon_S)\" /> and <img src=\"http://s0.wp.com/latex.php?latex=Lf+%3D+Gf&bg=ffffff&fg=333333&s=0\" alt=\"Lf = Gf\" class=\"latex\" title=\"Lf = Gf\" />. <img src=\"http://s0.wp.com/latex.php?latex=%5CBox&bg=ffffff&fg=333333&s=0\" alt=\"\\Box\" class=\"latex\" title=\"\\Box\" /></p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/theorylunch.wordpress.com/885/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/theorylunch.wordpress.com/885/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=theorylunch.wordpress.com&blog=43735749&post=885&subd=theorylunch&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "ac0dd757f3a558396792ce36528f4a1d") (45 (20928 8813 677256) "http://kenta.blogspot.com/2013/06/sjhltpdo-unscope-symbol.html" "Ken T Takusagawa: [sjhltpdo] Unscope symbol" "noreply@blogger.com (Ken)" "Mon, 10 Jun 2013 08:49:00 +0000" "<p dir=\"ltr\"><code>let { foo = ... } in let { hide foo } in foo</code></p><p dir=\"ltr\">This should cause the compiler to signal an error.  We wish to assert that a certain symbol is not used within an inner scope, perhaps to avoid programmer typos of similar symbols.  \"hide foo\" can also be a statement in <code>do</code> notation.</p><p dir=\"ltr\">If we have <a href=\"http://kenta.blogspot.com/2013/04/isjnkupe-local-types-and-imports.html\">local imports</a>, then perhaps syntax like <code>let { import OUTER-SCOPE hiding (foo) }</code>, where <code>OUTER-SCOPE</code> is a new keyword.</p><p dir=\"ltr\">We could also hide everything in the outer scope except a few symbols.  <code>let { import OUTER-SCOPE(foo); import Prelude }</code>.</p>" nil nil "ee14afb90b62307826c2fe7bffc4fc2f") (44 (20928 8813 676875) "http://winterkoninkje.dreamwidth.org/84469.html" "wren ng thornton: Dungeon World: Assassin class" nil "Sun, 09 Jun 2013 00:32:03 +0000" "<p>After far too long, I've finally found a new roleplaying group. We're using <a href=\"http://www.dungeon-world.com/\">Dungeon World</a>, a lightweight system I've never used before. It's a class-based system, which I've never been too fond of, but it does seem like it gets rid of most of the things I hate about class-based systems. The core book only gives the standard D&D-style classes, but they give some guidelines on making up your own classes. For my character I worked with the GM to come up with a new <a href=\"http://llama.freegeek.org/~wren/resources/blog/assassin.pdf\">Assassin</a> class which combines some of the traits of the Thief and the Fighter. I tried to make sure it's balanced against the other classes and doesn't obviate the Thief/Fighter, but not having used DW before it's hard to be sure. If you've used DW and have any comments, I'd be interested in hearing them.</p>
<p><i>Edit:</i> I've posted a new version which adjusts the damage option for the Death Dealer and Assassin's Strike moves. Also included is a discussion about how different ways of doing DD/AS would affect DPS, which is necessary for doing a fair comparison against other classes. If you run a game with this class, let me know how it goes.</p><br /><br /><img src=\"http://www.dreamwidth.org/tools/commentcount?user=winterkoninkje&ditemid=84469\" alt=\"comment count unavailable\" height=\"12\" style=\"vertical-align: middle;\" width=\"30\" /> comments" nil nil "d35578c59936a1dfeb4121d32d3adbe9") (43 (20928 8813 676154) "http://praisecurseandrecurse.blogspot.com/2013/06/objective-c-day-5.html" "Paul Potts: Objective-C, Day 5" "noreply@blogger.com (Paul Potts)" "Fri, 07 Jun 2013 23:17:00 +0000" "<p>(Warning: non-FP content). (I've been including this for the benefit of any \"Planet X\" aggregators who are including my feed, where X is a functional language like Haskell. I'm assuming you've got that by now and either don't care or are unsubscribing/ignoring this series if it bothers you. I expect to get back to more functional language code at some point, maybe even implementing the same problem. But I dabble in different languages and sometimes the digressions go on for a while...)</p> <p>So, today's topic is <b>dispatch</b>. I'm starting to design and implement the logic for pieces interacting on the board. The key in object-oriented designs is always to determine who (which object) manages which state. The design I've come up with is a sort of hybrid design, where position on the board is not actually a property of the board tiles. Instead, there's a board which keeps track of them. The instances of, say, a tree on the board don't have any unique state, so I'm not instantiating different objects for each one; they all point to a singleton (which I should properly enforce with a singleton factory method at some point).</p> <p>There are trade-offs. On paper, my design involved adding a \"push\" method to the classes for tile pieces. In a language like Dylan, this \"push\" method would be a generic function, and dispatch on multiple parameter types, so that I could write some very short methods and use the method dispatcher, instead of explicit <b>if-then</b> or <b>switch</b> logic to find the right bit of code at run-time according to the types of the interacting objects (either their literal types or an enum, or some such). I could even do this in C++ because it has method overloading based on the parameters -- as long as this is <a href=\"http://stackoverflow.com/questions/6897662/matching-an-overloaded-function-to-its-polymorphic-argument\">based on their static type known at compile-time</a>. Which... isn't true in this case. I miss Dylan's generic function dispatch! <a href=\"http://stackoverflow.com/questions/2286312/method-overloading-in-objective-c\">Objective-C is a underpowered</a> in this respect even compared to C++. For example, I'd like to be able to write methods like this for the bomb class (this is pseudocode):</p> <pre>bomb::push(mountain)<br />{<br />    // blow up the mountain<br />}<br /><br />bomb::push(empty)<br />{<br />    // slide the bomb onto the tile<br />}</pre> <p>But I can't. I can't just use the class construct to organize methods to call without an instance -- there doesn't seem to be the equivalent of C++ static methods. There also is no equivalent of a pure virtual function; I can't declare the need for a push() method in the common base class of the tile pieces and have the compiler demand that I implement in any subclasses to make them instantiable. The closest I can come, I think, is to create a method that generates an error if it itself is called instead of being overridden in a subclass. That seems to lack semantic clarity.  So maybe I could do this, with <a href=\"http://en.wikipedia.org/wiki/Double_dispatch\">double dispatch</a>, but it doesn't seem worth the trouble for a small number of collision behaviors, when the behavior isn't simply supported by the language. I keep telling myself \"thin layer on top of C... thin layer on top of C...\"</p> <p>So last night I had my Mac running upstairs in the office, and I used my iPad downstairs to connect to it via VNC, and write some code, running it on the iPad simulator, which I then viewed and controlled with a real iPad (mad scientist laugh). It needs a little tweaking this morning but here's more-or-less what I came up with. Note that I have started using some different naming conventions for file-scope and local variables. I'm not sure they are very standard Objective-C but they are closer to what I've grown comfortable with over the years in C and C++.</p> <pre>typedef struct {<br />    int x_idx;<br />    int y_idx;<br />} pos_t;<br /><br />typedef enum {<br />    dir_east,<br />    dir_west,<br />    dir_south,<br />    dir_north<br />} dir_e;<br /><br />// A straight C function to return a pos_t updated with a dir_e;<br />// the result may be out of bounds<br />pos_t getUpdatedPos( pos_t original_pos, dir_e dir );<br />BOOL posValid( pos_t pos );<br /><br />static const int board_width = 24, board_height = 4;<br />// The short board design is part of what makes it so<br />// easy to get sliding objects stuck against the edges<br />// of the world or in corners where you can't get the<br />// penguin avatar around to the other side to push them.<br />// We could consider a bigger board later and maybe<br />// implement the original puzzles surrounded by water,<br />// or something like that.<br /><br />// Equivalent of C++ class forward declaration<br />@class ArcticSlideTile;<br />@class ArcticSlideBomb;<br />@class ArcticSlideEmpty;<br />@class ArcticSlideHeart;<br />@class ArcticSlideHouse;<br />@class ArcticSlideIceBlock;<br />@class ArcticSlideMountain;<br />@class ArcticSlideTree;<br /><br />@interface ArcticSlideModel : NSObject<br />{<br />    ArcticSlideTile* board[board_height][board_width];<br />}<br /><br />- (id)init;<br />- (id)initWithLevelIndex:(int)level_idx;<br />- (NSString*) description;<br />- (ArcticSlideTile*)getTileFromPosition:(pos_t)pos<br />                            inDirection:(dir_e)dir;<br />- (void)setTileAtPosition:(pos_t)pos<br />                       to:(ArcticSlideTile*)type;<br /><br />@end<br /><br />@interface ArcticSlideTile : NSObject<br /><br />- (BOOL)pushFromPosition:(pos_t)pos inDirection:(dir_e)dir;<br /><br />@end<br /><br /><br />@interface ArcticSlideBomb : ArcticSlideTile<br />// Bombs can be pushed and will slide until they hit an<br />// object and stop. If the object is a mountain, both bomb<br />// and mountain are destroyed. If another object hits a bomb<br />// it stops (I think -- I'm not sure it is possible to set <br />// up a board such that you can slide something into a bomb).<br /><br />// push is called when the penguin pushes against a tile.<br />// It returns YES if the penguin can move onto the tile with<br />// this action. This is only ever the case for a tree or empty<br />// tile.<br />- (BOOL)pushFromPosition:(pos_t)pos inDirection:(dir_e)dir;<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlideEmpty : ArcticSlideTile<br />// The penguin can always step onto an empty tile<br />- (BOOL)pushFromPosition:(pos_t)pos inDirection:(dir_e)dir;<br />- (BOOL)slideFromPosition:(pos_t)pos inDirection:(dir_e)dir;<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlideHeart : ArcticSlideTile<br />// When a heart hits a house the heart disappears (getting<br />// all the hearts into the house is how you win the game).<br />// Otherwise they cannot be destroyed, and slide like other<br />// slidable items.<br />- (BOOL)pushFromPosition:(pos_t)pos inDirection:(dir_e)dir;<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlideHouse : ArcticSlideTile<br />// Houses cannot be pushed and stop other objects except<br />// hearts. When a heart hits a house the heart disappears<br />// (getting the hearts into the house is how you win the game).<br />// So the model should keep track of the number of hearts<br />// on the board and trigger a \"win the level\" behavior when<br />// the last heart is removed.<br />- (BOOL)pushFromPosition:(pos_t)pos inDirection:(dir_e)dir;<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlideIceBlock : ArcticSlideTile<br />// Ice blocks can be pushed and will slide until they hit<br />// an object and stop. If they are pushed directly against<br />// an object they will be crushed (there should be an animation)<br />// and disappear.<br />- (BOOL)pushFromPosition:(pos_t)pos inDirection:(dir_e)dir;<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlideMountain : ArcticSlideTile<br />// Mountains cannot be moved and are destroyed by bombs.<br />- (BOOL)pushFromPosition:(pos_t)pos inDirection:(dir_e)dir;<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlideTree : ArcticSlideTile<br />// Trees cannot be pushed or destroyed and stop all sliding<br />// objects, but the penguin avatar character can walk through<br />// them.<br />- (BOOL)pushFromPosition:(pos_t)pos inDirection:(dir_e)dir;<br />- (NSString*) description;<br />@end</pre> <p>Here's part of the implementation. It seems way too wordy; I need to rethink the amount of code required for each step. At the least, some refactoring seems to be in order. As I mentioned earlier, I'm not sure the tile classes are really earning their keep. I got rid of the singleton instantiation machinery but now there are order of initialization dependencies. I'll need to do further thinking as I consider what communication needs to happen between the \"model\" part and \"controller\" part -- how to interact with the GUI, how to indicate that tiles need to be redrawn, or animated transitions should play, or sound effects should play, or that the score is changed, and what to do when a level is completed. There is lots more to think about for such a simple little game! And of course I haven't really even begun to implement the \"view\" parts.</p> <pre>static ArcticSlideEmpty* empty_p;<br />static ArcticSlideTree* tree_p;<br />static ArcticSlideMountain* mountain_p;<br />static ArcticSlideHouse* house_p;<br />static ArcticSlideIceBlock* ice_block_p;<br />static ArcticSlideHeart* heart_p;<br />static ArcticSlideBomb* bomb_p;<br /><br />static ArcticSlideModel* model_p;<br /><br />pos_t getUpdatedPos( pos_t original_pos, dir_e dir )<br />{<br />    pos_t updated_pos = original_pos;<br />    int x_offset = 0;<br />    int y_offset = 0;<br />    if ( dir_east == dir )<br />    {<br />        x_offset = 1;<br />        y_offset = 0;<br />    }<br />    else if ( dir_west == dir )<br />    {<br />        x_offset = -1;<br />        y_offset = 0;<br />    }<br />    else if ( dir_north == dir )<br />    {<br />        x_offset = 0;<br />        y_offset = -1;<br />    }<br />    else if ( dir_south == dir )<br />    {<br />        x_offset = 0;<br />        y_offset = +1;<br />    }<br />    updated_pos.x_idx += x_offset;;<br />    updated_pos.y_idx += y_offset;<br />    return updated_pos;<br />}<br /><br />BOOL posValid( pos_t pos )<br />{<br />    return ( ( ( pos.x_idx >= 0 ) ||<br />               ( pos.x_idx < board_width  ) ) ||<br />             ( ( pos.y_idx >= 0 ) ||<br />               ( pos.y_idx < board_height ) ) );<br />}<br /><br />@implementation ArcticSlideTile<br /><br />- (BOOL)pushFromPosition:(pos_t)pos inDirection:(dir_e)dir<br />{<br />    // Should be implemented in subclass<br />    return NO;<br />}<br /><br />@end<br /><br />@implementation ArcticSlideBomb<br /><br />- (BOOL)pushFromPosition:(pos_t)pos inDirection:(dir_e)dir<br />{<br />    // Penguin has pushed bomb in the given direction.<br />    // Get our own position:<br />    pos_t bomb_pos = getUpdatedPos( pos, dir );<br />    // What are we being pushed into?<br />    ArcticSlideTile *target_tile_p =<br />    [model_p getTileFromPosition:bomb_pos<br />                     inDirection:dir];<br />    <br />    if ( nil == target_tile_p )<br />    {<br />        // Edge of the world. TODO:<br />        // queue a \"boop\" sound effect<br />    }<br />    else if ( mountain_p == target_tile_p )<br />    {<br />        // bomb pushed into mountain<br />        // TODO: queue animation of bomb moving onto<br />        // mountain, animate explosion<br />        // remove bomb and mountain<br />        pos_t new_bomb_pos = getUpdatedPos( bomb_pos, dir );<br />        [model_p setTileAtPosition:new_bomb_pos<br />                                to:empty_p];<br />        new_bomb_pos = getUpdatedPos( new_bomb_pos, dir );<br />        [model_p setTileAtPosition:new_bomb_pos<br />                                to:empty_p];<br />    }<br />    else if ( empty_p == target_tile_p )<br />    {<br />        // TODO: queue bomb moving into space<br />        pos_t new_bomb_pos = getUpdatedPos( bomb_pos, dir );<br />        // Set bomb at new position<br />        [model_p setTileAtPosition:new_bomb_pos<br />                                to:bomb_p];<br />        // Remove bomb from old position<br />        [model_p setTileAtPosition:bomb_pos<br />                                to:empty_p];<br /><br />        // Bombs will continue to slide until stopped<br />        ArcticSlideTile *target_tile_p =<br />        [model_p getTileFromPosition:new_bomb_pos<br />                         inDirection:dir];<br /><br />        while ( empty_p == target_tile_p )<br />        {<br />            // TODO: animate bomb moving into space<br />            pos_t new_bomb_pos = getUpdatedPos( bomb_pos, dir );<br />            // set bomb at new position<br />            [model_p setTileAtPosition:new_bomb_pos<br />                                    to:bomb_p];<br />            // remove bomb from old position<br />            [model_p setTileAtPosition:bomb_pos<br />                                    to:empty_p];<br />        }<br /><br />        if ( mountain_p == target_tile_p )<br />        {<br />            // bomb pushed into mountain<br />            // TODO: queue animation of bomb moving<br />            // onto mountain, animate explosion<br />            // remove bomb and mountain<br />            [model_p setTileAtPosition:new_bomb_pos<br />                                    to:empty_p];<br />            new_bomb_pos = getUpdatedPos( new_bomb_pos, dir );<br />            [model_p setTileAtPosition:new_bomb_pos<br />                                    to:empty_p];<br />        }<br />    }<br />    // The penguin cannot actually move in this turn<br />    return NO;<br />}<br /><br />- (NSString*) description<br />{<br />    return @\"Bomb  \";<br />}<br /><br />@end<br /><br />@implementation ArcticSlideEmpty<br />- (BOOL)pushFromPosition:(pos_t)pos inDirection:(dir_e)dir<br />{<br />    // If the penguin pushes onto an empty tile, he can always<br />    // move there<br />    return YES;<br />}<br /><br />- (NSString*) description<br />{<br />    return @\"      \";<br />}<br />@end</pre> <p>I'm leaving out unfinished tile classes for clarity, but here is the model implementation:</p> <pre>@implementation ArcticSlideModel<br /><br />- (id)init<br />{<br />    // Initialize the global tile objects. I messed around<br />    // with singleton factory methods for creating a single<br />    // instance of each of these and accessing it everywhere<br />    // but the resulting code was too wordy to justify this.<br /><br />    empty_p = [[ArcticSlideEmpty alloc] init];<br />    tree_p = [[ArcticSlideTree alloc] init];<br />    mountain_p = [[ArcticSlideMountain alloc] init];<br />    house_p = [[ArcticSlideHouse alloc] init];<br />    ice_block_p = [[ArcticSlideIceBlock alloc] init];<br />    heart_p = [[ArcticSlideHeart alloc] init];<br />    bomb_p = [[ArcticSlideBomb alloc] init];<br /><br />    self = [super init];<br /><br />    for ( unsigned int idx_y = 0;<br />         idx_y < board_height; idx_y++ )<br />    {<br />        for ( unsigned int idx_x = 0;<br />             idx_x < board_width; idx_x++ )<br />        {<br />            board[idx_y][idx_x] = empty_p;<br />        }<br />    }<br /><br />    return self;<br />}<br /><br />- (id)initWithLevelIndex:(int)level_idx<br />{<br />    self = [self init];<br /><br />    // Lookup table to decode the original Polar resource<br />    // data as strings<br />    ArcticSlideTile *<br />        polar_data_tile_map[POLAR_DATA_NUM_TILE_VALS] =<br />    {<br />        empty_p, tree_p, mountain_p, house_p, ice_block_p,<br />        heart_p, bomb_p<br />    };<br /><br />    if ( level_idx > ( num_polar_levels - 1) )<br />    {<br />        NSLog(@\"initWithLevelIndex: bad level_idx %d!\\n\",<br />              level_idx);<br />    }<br />    else<br />    {<br />        unsigned int level_data_idx = 0;<br />        for ( unsigned int idx_y = 0;<br />             idx_y < board_height; idx_y++ )<br />        {<br />            for ( unsigned int idx_x = 0;<br />                 idx_x < board_width; idx_x++ )<br />            {<br />                int polar_data_tile_val =<br />                    polar_levels[level_idx]<br />                                [level_data_idx] - '0';<br />                if ( ( polar_data_tile_val < 0 ) ||<br />                     ( polar_data_tile_val > <br />                       polar_data_max_tile_val ) )<br />                {<br />                    NSLog(@\"tile value %d out of range!\\n\",<br />                          polar_data_tile_val );<br />                    self = nil;<br />                }<br />                else<br />                {<br />                    board[idx_y][idx_x] =<br />                        polar_data_tile_map[polar_data_tile_val];<br />                    level_data_idx++;<br />                }<br />            }<br />        }<br />    }<br /><br />    return self;<br /><br />}<br /><br />- (ArcticSlideTile*)getTileFromPosition:(pos_t)pos <br />                            inDirection:(dir_e)dir<br />{<br />    pos_t updated_pos = getUpdatedPos(pos, dir);<br />    if ( posValid( updated_pos ) )<br />    {<br />        return board[updated_pos.y_idx]<br />                    [updated_pos.x_idx];<br />    }<br />    else<br />    {<br />        return nil;<br />    }<br />}<br /><br />- (NSString*)description<br />{<br />    NSMutableString *desc_str =[[NSMutableString alloc]init];<br />    <br />    [desc_str appendString:@\"ArcticSlideModel board state:\\n\"];<br />    for ( unsigned int idx_y = 0;<br />         idx_y < board_height; idx_y++ )<br />    {<br />        for ( unsigned int idx_x = 0;<br />             idx_x < board_width; idx_x++ )<br />        {<br />            [desc_str appendString:[board[idx_y][idx_x] <br />                                    description]];<br />        }<br />        [desc_str appendString:@\"\\n\"];<br />    }<br />    return desc_str;<br />}<br /><br />- (void)setTileAtPosition:(pos_t)pos to:(ArcticSlideTile*)type<br />{<br />    board[pos.y_idx][pos.x_idx] = type;<br />}<br /><br />@end</pre> <p>It's not much yet, and it doesn't have any kind of user interface outside of <b>NSLog</b>, but my code will successfully respond to moving the penguin through trees, through open space, and pushing a bomb, which then moves into an open space, continues to slide until it comes up against a mountain, and destroys the mountain. I'm driving this with a test method like this:</p> <pre>NSLog(@\"%@\\n\", model_p);<br />// Penguin starts at 0,0, on a tree tile<br />pos_t penguin_pos = { 0, 0 };<br /><br />// Walk the penguin south onto another tree tile<br />ArcticSlideTile* tile_p =<br />[model_p getTileFromPosition:penguin_pos <br />                 inDirection:dir_south];<br />NSLog(@\"Penguin is facing: %@\\n\", tile_p);<br />BOOL allowed = [tile_p pushFromPosition:penguin_pos<br />                            inDirection:dir_south];<br />NSLog(@\"Penguin allowed: %s\\n\", ( allowed ? \"YES\" : \"NO\" ) );<br />tile_p = [model_p getTileFromPosition:penguin_pos<br />                              inDirection:dir_south];<br />penguin_pos = getUpdatedPos(penguin_pos, dir_south);<br />NSLog(@\"Penguin is facing: %@\\n\", tile_p);<br />    <br />// Walk the penguin east onto an empty space<br />tile_p = [model_p getTileFromPosition:penguin_pos<br />                              inDirection:dir_east];<br />NSLog(@\"Penguin is facing: %@\\n\", tile_p);<br />allowed = [tile_p pushFromPosition:penguin_pos<br />                       inDirection:dir_east];<br />NSLog(@\"Penguin allowed: %s\\n\", ( allowed ? \"YES\" : \"NO\" ) );<br />tile_p = [model_p getTileFromPosition:penguin_pos<br />                          inDirection:dir_east];<br />penguin_pos = getUpdatedPos(penguin_pos, dir_east);<br /><br />// Try walking into a bomb, which should slide<br />// and blow up a mountain<br />tile_p = [model_p getTileFromPosition:penguin_pos<br />                          inDirection:dir_east];<br />NSLog(@\"Penguin is facing: %@\\n\", tile_p);<br />allowed = [tile_p pushFromPosition:penguin_pos<br />                           inDirection:dir_east];<br />NSLog(@\"Penguin allowed: %s\\n\", ( allowed ? \"YES\" : \"NO\" ) );<br /><br />NSLog(@\"%@\\n\", model_p);</pre> <p>I'll think on this whole model of updates some more. Maybe it can be even simpler. And I have to consider how the penguin state will be managed, including its orientation (in the original, the penguin can face in the cardinal directions). Should I preserve that in a touch-driven game user interface?</p>" nil nil "92a4cbabbc70a3e2c94f290e38a2d950") (42 (20928 8813 672886) "http://feedproxy.google.com/~r/FpComplete/~3/eSA5S2IjGkc/call-for-submissions" "FP Complete: FP Complete Launches Haskell in Real World Competition" nil "Fri, 07 Jun 2013 19:18:00 +0000" "<h4>FP Complete Launches Haskell in Real World Competition with $1,000 Cash Prize Each Month</h4><p>I’m very excited to announce our Haskell in Real World contest: a call out for sample Haskell code and tutorials of real-world engineering and business solutions. Each entry consists of a working solution to an applied problem, plus accompanying tutorial material to teach others how to build similar programs.</p><p>The winning entry each month will get $1,000 cash prize. There may be multiple prizes each month or none at all if none meet the winning criteria. There are no limits on how many prizes each individual, team or group can win in any month or the duration of the contest.  In other words, you can make some serious play money here! Anyone not affiliated with FP Complete is eligible to enter.</p><p>Why are we doing this?  Simple: because the Haskell community needs to vastly expand for Haskell to become a mainstream language. To do this we must show people how to use this amazing language in solving real-world business problems. People tell us they need to see running and documented examples of real-world problems and solutions, so they can quickly see how to design their own working solutions. They also want material to show their colleagues and bosses just how useful Haskell is today.  In essence this contest intends to compile recipes which, taken together, could be seen as an applied Haskell cookbook. </p><p>The competition starts in July.  Official Rules and sign-ups will be published on our website www.fpcomplete.com at the end of June / early July.  So check back then and let the games begin!</p><div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=eSA5S2IjGkc:l31aYdR7xbk:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=eSA5S2IjGkc:l31aYdR7xbk:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=eSA5S2IjGkc:l31aYdR7xbk:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=eSA5S2IjGkc:l31aYdR7xbk:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=eSA5S2IjGkc:l31aYdR7xbk:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=eSA5S2IjGkc:l31aYdR7xbk:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/eSA5S2IjGkc\" height=\"1\" width=\"1\" />" nil nil "f4d0d1d22d9edae38c90332a407dc9bf") (41 (20928 8813 672356) "http://joyful.com/blog/2013-06-06-blog-tinkering-hledger.org.html" "Simon Michael: Blog tinkering, hledger.org" nil "Fri, 07 Jun 2013 01:00:00 +0000" "<div style=\"font-style: italic;\">June  7, 2013</div>
<h2>Blog tinkering, hledger.org</h2>
<p>
</p><h3 id=\"a-better-ghci-fix\">A better ghci fix</h3>
<p>I forgot to commit <a href=\"http://joyful.com/2013-06-05-ghci-fix.html\">last night’s ghci fix</a>, which is good because I <a href=\"https://github.com/simonmichael/hledger/commit/39f6ec9f04a5f077ac8e0f4036d81d5185c23c4a\">improved it</a> today, fixing the code duplication.</p>
<h3 id=\"blog-tinkering\">Blog tinkering</h3>
<p>Thanks to help from #hakyll, I spent some time figuring out how to safely update published blog posts without having them reappear as new on Planet Haskell. The problem seemed to be that I wasn’t setting a separate <code>updated</code> date, which caused the <code>published</code> date to change, which caused the post to reappear as new, at least in my feed reader.</p>
<p>Solution: Start blog posts with metadata like this:</p>
<pre><code>---
title:     6/6
author:    Simon Michael
published: 2013-06-06 16:00:00PDT
updated:   2013-06-06 17:00:00PDT
---</code></pre>
<h3 id=\"hledger.org\">hledger.org</h3>
<p>Worked on the next hledger backlog item, improving the website update process. Did some file cleanup and testing.</p>
<p>I found that I had broken hledger.org several days ago, when I gratuitously enhanced:</p>
<pre><code>RewriteRule ^/bugs?/?$   https://github.com/simonmichael/hledger/issues [L,NE]</code></pre>
<p>to:</p>
<pre><code>RewriteRule ^/(bugs|issues)?/?$   https://github.com/simonmichael/hledger/issues [L,NE]</code></pre>
<p>Doh. Fixed it:</p>
<pre><code>RewriteRule ^/(bugs?|issues)/?$   https://github.com/simonmichael/hledger/issues [L,NE]</code></pre>
<p>Next: yes, the cron job for updating the site is reporting an error - though it seems to successfully update the site all the same:</p>
<pre><code>From github.com:simonmichael/hledger
47ebc21..e87f492  master     -> origin/master
Updating 47ebc21..e87f492
Fast-forward
README.md |    2 +-
1 file changed, 1 insertion(+), 1 deletion(-)
cd site; ghc site.hs -L/usr/lib -package-db ~/src/joyful.com/cabal-dev/packages-*.conf
cd site; ./site build
Initialising...
Creating store...
Creating provider...
Running rules...
Checking for out-of-date items
Compiling
site: _site/README.html: commitBuffer: invalid argument (invalid character)
updated README.md
make: *** [site] Error 1</code></pre>
<p>Re-enabling <code>export LANG=en_US.UTF-8</code> in the Makefile seems to have fixed it. I have a non-ascii character in the site footer. Setting the LANG environment variable is the quick way to configure a locale, which used to be very much required to avoid encoding errors with GHC 6, but which I thought was less necessary with GHC 7. Perhaps not.</p>" nil nil "4d8695257900cef4bcf8fb4de65fc0f0") (40 (20928 8813 671629) "http://praisecurseandrecurse.blogspot.com/2013/06/objective-c-day-4.html" "Paul Potts: Objective-C, Day 4" "noreply@blogger.com (Paul Potts)" "Thu, 06 Jun 2013 19:06:00 +0000" "<p>(Warning: more non-FP content)</p> <p>It's time to get the board representation filled out with a real board. I've only got a couple of hours left before I have to pack up my computer to leave my Undisclosed Location, but let's see if I can get a little more done. Let's review what level 1 looks like:</p> <a href=\"http://4.bp.blogspot.com/-7lLSOnNaHd8/Ua4uWuQMFmI/AAAAAAAADBs/8ByFzRW9Ccs/s1600/level_1_blown_up.tiff\"><img src=\"http://4.bp.blogspot.com/-7lLSOnNaHd8/Ua4uWuQMFmI/AAAAAAAADBs/8ByFzRW9Ccs/s640/level_1_blown_up.tiff\" height=\"120\" border=\"0\" width=\"512\" /></a> <p>Level layouts are taken from the original Macintosh Polar game created by Go Endo. These were originally MacOS resources of type 'STGE.' Let's see if we can decode them. Using ResEdit, the raw data for 'STGE' resource ID -16000 looks like:</p> <pre>0x0000 0x0000 0x0003 0x0001<br />0x0000 0x0000 0x0000 0x0000<br />0x0000 0x0000 0x0000 0x0000<br />0x0000 0x0000 0x0000 0x0000<br />0x0000 0x0000 0x0001 0x0000<br />0x0000 0x0000 0x0000 0x0000<br />0x0004 0x0000 0x0000 0x0001<br />0x0000 0x0006 0x0000 0x0002<br />0x0000 0x0005 0x0004 0x0005<br />0x0000 0x0000 0x0000 0x0000<br />0x0000 0x0000 0x0000 0x0000<br />0x0000 0x0001 0x0000 0x0000<br />0x0001 0x0000 0x0000 0x0001<br />0x0000 0x0000 0x0000 0x0000<br />0x0000 0x0000 0x0000 0x0000<br />0x0000 0x0000 0x0000 0x0000<br />0x0000 0x0000 0x0000 0x0005<br />0x0000 0x0000 0x0000 0x0002<br />0x0003 0x0000 0x0000 0x0001<br />0x0001 0x0000 0x0000 0x0000<br />0x0000 0x0001 0x0000 0x0000<br />0x0000 0x0000 0x0000 0x0000<br />0x0000 0x0000 0x0000 0x0000<br />0x0000 0x0000 0x0000 0x0000<br />0x0000 0x0000 0x0000</pre> <p>There are 99 16-bit values. My best guess is that this corresponds to the 24x4 grid (96 board positions) plus 3 extras for some kind of of header of footer data (maybe the total number of hearts is indicated, for example). There are 7 unique values, so it seems extremely likely that they correspond almost exactly to our eight different tile types, with zero representing a blank space. But the counts of each type don't _quite_ match up. The first board has 8 trees, 1 bomb, 2 hearts, 2 ice blocks, 2 mountains, 3 hearts, 1 house, and 1 penguin (there is always 1 penguin), while this 'STGE' resource has: 9 ones, 2 twos, 2 threes, 2 fours, 3 fives, and 1 six. The counts are very close, so this has to represent level 1, and the the 5 almost certainly represents a heart, but I'm not clearly seeing the layout. The first vertical column goes penguin, tree, tree, tree. I don't quite see a pattern that looks like that, but resources -1599 and -15996 give me a hint that the \"extra\" data is at the front: they contain 0x0007 and 0x0008 as their third values. Those don't appear anywhere else so they probably don't indicate tiles. So let's try rearranging resource -16000 without the first 6 bytes, remove redundant zeroes for clarity, and looking at the values aligned by groups of 24 instead of 4:</p> <pre>1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 4 0 0<br />1 0 6 0 2 0 5 4 5 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0<br />1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 2 3 0 0<br />1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</pre> <p>There's the board. The left column is actually all trees -- when the board first appears, the penguin is hiding a tree. There are actually nine trees. So the encoding looks like so: empty space = 0, tree = 1, mountain = 2, home = 3, ice block = 4, heart = 5, and bomb = 6. The penguin doesn't have a value, but his starting position is probably represented by the first two values, (0,0), most likely encoded as row index, column index to correspond to row-major indexing, and there are 3 hearts to count down as the game is solved.</p> <p>Can we validate this with the second board? Yes, it looks like there's a 4 indicating 4 hearts. In all the boards I've seen so far (the first four), the penguin is in the upper left. The fifth resource has 0, 1 for its first two values, so I'm guessing I can confirm the encoding of the penguin's position if and when I get to that stage.</p> <p>And now to come up with a quick way to populate the board in my code. As I'm still a complete n00b in Objective-C, and on the general principle that there's no real need to make this any more clever or less obvious than it has to be, let's just use a string with the data from the resource. Let's add an init method to the interface for the model class:</p> <pre>- (id)initWithLevelIndex:(int)level_idx;</pre> <p>And here is some data, and an initializer method:</p> <pre>static const int num_polar_levels = 1;<br />static const int polar_data_len = 96;<br />static const int polar_data_num_tile_vals = 7; // 0-6 inclusive<br />static const int polar_data_max_tile_val = 6;<br />static const NSString *polar_levels[num_polar_levels] =<br />{<br />    @\"100000000000000100000400\" \\<br />    @\"106020545000000000100100\" \\<br />    @\"100000000000000050002300\" \\<br />    @\"110000100000000000000000\"<br />};<br /><br />- (id)initWithLevelIndex:(int)level_idx<br />{<br />    // Call our own basic initializer. This will <br />    // result in redundant setting of board values,<br />    // but maybe I will clean that up later.<br />    self = [self init];<br /><br />    // A simple lookup table to decode the original<br />    // Polar resource data as strings<br />    ArcticSlideTile <br />        *polar_data_tile_map[polar_data_num_tile_vals] = {<br />        empty, tree, mountain, house,<br />        ice_block, heart, bomb };<br /><br />    if ( level_idx > ( num_polar_levels - 1) )<br />    {<br />        NSLog( @\"initWithLevelLayout: level %d out of range!\\n\",<br />               level_idx );<br />        self = nil;<br />    }<br />    else<br />    {<br />        const NSString* level_str = polar_levels[level_idx];<br />        unsigned int level_data_idx = 0;<br />        for ( unsigned int idx_y = 0;<br />             idx_y < board_height; idx_y++ )<br />        {<br />            for ( unsigned int idx_x = 0;<br />                 idx_x < board_width; idx_x++ )<br />            {<br />                NSRange range = NSMakeRange(level_data_idx, 1);<br />                const NSString * item_str =<br />                    [level_str substringWithRange: range];<br />                int polar_data_tile_val = [item_str intValue];<br />                if ( polar_data_tile_val ><br />                    polar_data_max_tile_val )<br />                {<br />                    NSLog(@\"tile val %d out of range!\\n\",<br />                        polar_data_tile_val );<br />                    self = nil;<br />                }<br />                else<br />                {<br />                    board[idx_y][idx_x] =<br />                        polar_data_tile_map[polar_data_tile_val];<br />                    level_data_idx++;<br />                }<br />            }<br />        }<br />    }<br />    return self;<br />}<br /></pre> <p>Hmmm, that seems overly complicated. There probably is a better, more idiomatic Objective-C way to use NSStrings for that, but I'm tempted to just write it with a basic C string. Using NSString objects in this context didn't even really help me catch bugs or avoid crashes, since I had forgotten to initialize a heart object and the result was hitting a nil object pointer at runtime and crashing, pretty much the same result as dereferencing a null pointer in straight C except with a better error logged. I'm a little disconcerted by Objective-C's inability to allocate objects on the stack, but that comes down to the aforementioned \"thin veneer\" over C. I don't really care about the overhead in using method dispatch in this simple piece of code operating on such a small amount of data, but I do care about simplicity. Just to compare, here's a more straightforward C implementation of that inner loop:</p> <pre>static const char *polar_levels[num_polar_levels] =<br />{<br />    \"100000000000000100000400\"<br />    \"106020545000000000100100\"<br />    \"100000000000000050002300\"<br />    \"110000100000000000000000\"<br />};<br /><br />int polar_data_tile_val = level_str_p[level_data_idx] - '0';<br />if ( ( polar_data_tile_val < 0 ) || <br />     ( polar_data_tile_val > <br />       polar_data_max_tile_val ) )<br />{<br />    NSLog(@\"polar data tile value %d out of range!\\n\",<br />          polar_data_tile_val );<br />    self = nil<br />}</pre> <p>Maybe the lesson here is \"use Objective-C objects only when objects are a win.\"</p> <p>I'm going to continue with this project, developing the code to handle the interactions of objects on the playing field and eventually the user interface. However, now that my week away from home is done, I might not be able to make progress very quickly. Stay tuned -- I'll post what I can, when I can. As always, if you have any comments or questions, I'm happy to have feedback.</p>" nil nil "41c78c39e640d6957aba75d69a3d693e") (39 (20928 8813 669969) "http://tomschrijvers.blogspot.com/2013/06/ppdp-13-last-call-for-papers.html" "Tom Schrijvers: PPDP '13: Last Call for Papers" "noreply@blogger.com (Tom Schrijvers)" "Thu, 06 Jun 2013 15:56:18 +0000" "<div style=\"text-align: left;\" dir=\"ltr\"><br />=====================================================================<br /><br />                        Last Call for papers<br />               15th International Symposium on<br />       Principles and Practice of Declarative Programming<br />                           PPDP 2013<br /><br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Special Issue of Science of Computer Programming (SCP)<br /><br />            Madrid, Spain, September 16-18, 2013<br />                 (co-located with LOPSTR 2013)<br /><br />              http://users.ugent.be/~tschrijv/PPDP2013/<br /><br />======================================================================<br /><br />PPDP 2013 is a forum that brings together researchers from the declarative<br />programming communities, including those working in the logic, constraint and<br />functional programming paradigms, but also embracing a variety of other<br />paradigms such as visual programming, executable specification languages,<br />database languages, and knowledge representation languages.<br /><br />The goal is to stimulate research in the use of logical formalisms and methods<br />for specifying, performing, and analysing computations, including mechanisms<br />for mobility, modularity, concurrency, object-orientation, security,<br />verification and static analysis. Papers related to the use of declarative<br />paradigms and tools in industry and education are especially solicited. Topics<br />of interest include, but are not limited to:<br /><br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Functional programming<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Logic programming<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Answer-set programming<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Functional-logic programming<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Declarative visual languages<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Constraint Handling Rules<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Parallel implementation and concurrency<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Monads, type classes and dependent type systems<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Declarative domain-specific languages<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Termination, resource analysis and the verification of declarative programs<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Transformation and partial evaluation of declarative languages<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Language extensions for security and tabulation<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Probabilistic modelling in a declarative language and modelling reactivity<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Memory management and the implementation of declarative systems<br />*<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Practical experiences and industrial application<br /><br />This year the conference will be co-located with the 23nd International<br />Symposium on Logic-Based Program Synthesis and Transformation (LOPSTR 2013) and<br />held in cooperation with ACM SIGPLAN.  The conference will be held in Madrid,<br />Spain. Previous symposia were held at Leuven (Belgium), Odense (Denmark),<br />Hagenberg (Austria), Coimbra (Portugal), Valencia (Spain), Wroclaw (Poland),<br />Venice (Italy), Lisboa (Portugal), Verona (Italy), Uppsala (Sweden), Pittsburgh<br />(USA), Florence (Italy), Montreal (Canada), and Paris (France).<br /><br />Papers must describe original work, be written and presented in English, and<br />must not substantially overlap with papers that have been published or that are<br />simultaneously submitted to a journal, conference, or workshop with refereed<br />proceedings. Work that already appeared in unpublished or informally published<br />workshop proceedings may be submitted (please contact the PC chair in case of<br />questions).  Proceedings will be published in the ACM International Conference<br />Proceedings Series.<br /><br /><br />After the symposium, a selection of the best papers will be invited to extend<br />their submissions in the light of the feedback solicited at the symposium.  The<br />papers are expected to include at least 30% extra material over and above the<br />PPDP version. Then, after another round of reviewing, these revised papers will<br />be published in a special issue of SCP with a target publication date by<br />Elsevier of 2014.<br /><br />Important Dates<br /><br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Abstract Submission: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">  </span>June 10, 2013<br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Paper submission: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">  </span>June 13, 2013<br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Notification: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">   </span>July 18, 2013<br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Camera-ready: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">   </span>August 4, 2013<br /><br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Symposium: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">   </span>September 16-18, 2013 <br /><br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Invites for SCP: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">  </span>October 2, 2013<br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Submission of SCP: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">  </span>December 11, 2013<br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Notification from SCP: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">  </span>February 22, 2014<br /><span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>Camera-ready for SCP: <span style=\"white-space: pre;\" class=\"Apple-tab-span\">  </span>March 14, 2014<br /><br />Authors should submit an electronic copy of the paper (written in English) in<br />PDF.  Each submission must include on its first page the paper title; authors<br />and their affiliations; abstract; and three to four keywords. The keywords will<br />be used to assist us in selecting appropriate reviewers for the paper. Papers<br />should consist of no more than 12 pages, formatted following the ACM SIG<br />proceedings template (option 1). The 12 page limit must include references but<br />excludes well-marked appendices not intended for publication. Referees are not<br />required to read the appendices, and thus papers should be intelligible without<br />them.<br /><br />Program Committee<br /><br />Sergio Antoy               Portland State University, USA<br />Manuel Carro               IMDEA Software Institute, Spain<br />Iliano Cervesato           Carnegie Mellon University, Qatar<br />Agostino Dovier            Universita degli Studi di Udine, Italy<br />Maria Garcia de la Banda   Monash University, Australia<br />Ralf Hinze                 University of Oxford, UK<br />Yukiyoshi Kameyama         University of Tsukuba, Japan<br />Oleg Kiselyov              USA<br />Yanhong Annie Liu          State University of New York at Stony Brook, USA<br />Stefan Monnier             Universite de Montreal, Canada<br />Alan Mycroft               University of Cambrige, UK<br />Bruno C. d. S. Oliveira<span style=\"white-space: pre;\" class=\"Apple-tab-span\"> </span>   National University of Singapore, Singapore<br />Alberto Pettorossi         Universita di Roma Tor Vergata, Italy<br />Enrico Pontelli            New Mexico State University, USA<br />Kristoffer Rose            IBM Research, USA<br />Sukyoung Ryu               KAIST, South Korea<br />Vitor Santos Costa         University of Porto, Portugal<br />Torsten Schaub             University Potsdam, Germany<br />Tom Schrijvers             Ghent University, Belgium<br />Martin Sulzmann            Hochschule Karlsruhe, Germany<br />Wouter Swierstra           Universiteit Utrecht, The Netherlands<br />Tarmo Uustalu              Institute of Cybernetics, Estonia<br />Janis Voigtlaender         University of Bonn, Germany<br />Meng Wang                  Chalmers University of Technology, Sweden<br />Jan Wielemaker             Universiteit van Amsterdam, The Netherlands<br /><br />Program Chair<br /><br />    Tom Schrijvers<br />    Department of Applied Mathematics and Computer Science<br />    Ghent University<br />    9000 Gent, Belgium<br /><br />General Chair<br /><br />    Ricardo Pena<br />    Facultad de Informatica<br />    Universidad Complutense de Madrid<br />    28040 Madrid, Spain<br /><div><br /></div></div>" nil nil "49eca3a9517b1439879b36c3d00d63ae") (38 (20928 8813 668458) "http://joyful.com/blog/2013-06-05-ghci-fix.html" "Simon Michael: GHCI fix" nil "Thu, 06 Jun 2013 06:00:00 +0000" "<div style=\"font-style: italic;\">June  6, 2013</div>
<h2>GHCI fix</h2>
<p>
</p><p><a href=\"http://joyful.com/2013-06-04-bugfix-planning-autoweb.html\">Yesterday</a>.</p>
<p>Today:</p>
<p>Next item on the 0.22 backlog: fix <code>make ghci</code> and <code>make ghciweb</code>.</p>
<p>The goal of these make rules is to bring up a GHCI prompt with as much as possible of the guts of hledger (or hledger-web) loaded, in scope, and visible. This can be really valuable for debugging, sanity-checking, and exploratory development, but it’s quite hard to set up by hand, as the necessary flags tend to proliferate. Hence these rules.</p>
<p>The latest breakage was due to my using cabal’s MIN_version_* macros (to make Hledger.Cli.Utils compatible with both the versions of directory currently found on user machines). It’s hard to ensure these macros are available in all circumstances (sp/ghc builds, haddock, ghci..) So I’ve made it work with or without them, with this not-very-pretty kludge:</p>
<pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><span class=\"fu\">#</span>ifdef <span class=\"dt\">MIN_VERSION_directory</span>
<span class=\"fu\">#</span>if <span class=\"dt\">MIN_VERSION_directory</span>(<span class=\"dv\">1</span>,<span class=\"dv\">2</span>,<span class=\"dv\">0</span>)
utc <span class=\"ot\"><-</span> getModificationTime f
<span class=\"kw\">let</span> nom <span class=\"fu\">=</span> utcTimeToPOSIXSeconds utc
<span class=\"kw\">let</span> clo <span class=\"fu\">=</span> <span class=\"dt\">TOD</span> (<span class=\"fu\">read</span> <span class=\"fu\">$</span> <span class=\"fu\">takeWhile</span> (<span class=\"ot\">`elem`</span> <span class=\"st\">\"0123456789\"</span>) <span class=\"fu\">$</span> <span class=\"fu\">show</span> nom) <span class=\"dv\">0</span> <span class=\"co\">-- XXX read</span>
<span class=\"fu\">#</span>else
clo <span class=\"ot\"><-</span> getModificationTime f
<span class=\"fu\">#</span>endif
<span class=\"fu\">#</span>else
<span class=\"co\">-- cabal macros aren't available, assume the new directory</span>
utc <span class=\"ot\"><-</span> getModificationTime f
<span class=\"kw\">let</span> nom <span class=\"fu\">=</span> utcTimeToPOSIXSeconds utc
<span class=\"kw\">let</span> clo <span class=\"fu\">=</span> <span class=\"dt\">TOD</span> (<span class=\"fu\">read</span> <span class=\"fu\">$</span> <span class=\"fu\">takeWhile</span> (<span class=\"ot\">`elem`</span> <span class=\"st\">\"0123456789\"</span>) <span class=\"fu\">$</span> <span class=\"fu\">show</span> nom) <span class=\"dv\">0</span> <span class=\"co\">-- XXX read</span>
<span class=\"fu\">#</span>endif</code></pre>
<p>And now I’ve got ghci prompts again. It looks like they could do some more importing though:</p>
<pre><code>~/src/hledger$ make ghciweb
ghci -rtsopts -W -fwarn-tabs -fno-warn-unused-do-bind -fno-warn-name-shadowing  -ihledger-lib -ihledger -ihledger-web -ihledger-web/app -L/usr/lib  -optP-include -optPhledger/dist/build/autogen/cabal_macros.h -DPATCHLEVEL=0 -DDEVELOPMENT -DVERSION='\"0.21.2dev\"' -XCPP -XMultiParamTypeClasses -XOverloadedStrings -XQuasiQuotes -XRecordWildCards -XTemplateHaskell  hledger-web/app/main.hs
GHCi, version 7.6.3: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
[ 1 of 52] Compiling Settings.Development ( hledger-web/Settings/Development.hs, interpreted ) [flags changed]
[ 2 of 52] Compiling Settings         ( hledger-web/Settings.hs, interpreted ) [flags changed]
Loading package array-0.4.0.1 ... linking ... done.
...
[52 of 52] Compiling Main             ( hledger-web/app/main.hs, interpreted )
Ok, modules loaded: Hledger, Hledger.Data, Hledger.Data.Account, Hledger.Data.AccountName, Hledger.Data.Amount, Hledger.Data.Commodity, Hledger.Data.Dates, Hledger.Data.FormatStrings, Hledger.Data.Journal, Hledger.Data.Ledger, Hledger.Data.Posting, Hledger.Data.TimeLog, Hledger.Data.Transaction, Hledger.Data.Types, Hledger.Query, Hledger.Read, Hledger.Read.CsvReader, Hledger.Read.JournalReader, Hledger.Read.TimelogReader, Hledger.Reports, Hledger.Utils, Hledger.Utils.UTF8IOCompat, Hledger.Cli, Hledger.Cli.Options, Hledger.Cli.Utils, Hledger.Cli.Version, Hledger.Cli.Add, Hledger.Cli.Balance, Hledger.Cli.Balancesheet, Hledger.Cli.Cashflow, Hledger.Cli.Histogram, Hledger.Cli.Incomestatement, Hledger.Cli.Print, Hledger.Cli.Register, Hledger.Cli.Stats, Application, Foundation, Import, Settings, Settings.StaticFiles, Settings.Development, Handler.Common, Handler.JournalEditR, Handler.JournalEntriesR, Handler.JournalR, Handler.Post, Handler.RegisterR, Handler.RootR, Handler.Utils, Hledger.Web.Main, Hledger.Web.Options, Main.
>>> :t defbaseurl
<interactive>:1:1: Not in scope: `defbaseurl'
>>> import Settings
>>> :t defbaseurl
defbaseurl :: GHC.Types.Int -> GHC.Base.String
>>> </code></pre>" nil nil "dffa59e484adb1e97a4ff03431954918") (37 (20928 8813 667392) "http://praisecurseandrecurse.blogspot.com/2013/06/objective-c-day-3.html" "Paul Potts: Objective-C, Day 3" "noreply@blogger.com (Paul Potts)" "Wed, 05 Jun 2013 05:05:00 +0000" "<p>(Warning: non-FP content)</p> <p>So, this is day 5 in my Undisclosed Location and I haven't gotten much done -- I'm still engaged in a job search, and spent about eight hours working on a \"take-home test\" for an employer (with a few interruptions), and I'm pursuing more leads, and I'm trying to socialize with my hosts occasionally, so there are some distractions. But I've got enough information to go on to start implementing something original.</p> <p>What I want to implement is a small game. I'll get as far as I can in the back-end code today (the Model and Controller parts of the MVC \"trinity\") and we'll see just how productive I really am in Objective-C. I read most of Objective-C Programming by Aaron Hillegass last night -- it's a very quick read for someone well-versed in C, and it reiterates parts of the iOS Programming book. I haven't covered protocols, categories, blocks, or run loops, but I think I can get by without those things for now.</p> <p>Many years ago there existed on old-school MacOS a small game called \"Polar.\" It was a very simple game, written by a guy (Go Endo) who was probably a student at the time, but I was fond of it -- fond enough to save it for 23 years, with the intention of studying its design and re-implementing it in the future. (In fact, I've saved a lot of old bits and bobs like this). I made notes of how to beat the first 3 levels (it was one of those \"incredibly simple game play, but maddeningly tricky\" games), drew out the levels, made notes on how the objects behaved, etc. I haven't been able to run that game for a long time, but today I just got it working under SheepShaver. Here's what level 1 looks like (blown up a bit):</p> <a href=\"http://4.bp.blogspot.com/-7lLSOnNaHd8/Ua4uWuQMFmI/AAAAAAAADBs/8ByFzRW9Ccs/s1600/level_1_blown_up.tiff\"><img src=\"http://4.bp.blogspot.com/-7lLSOnNaHd8/Ua4uWuQMFmI/AAAAAAAADBs/8ByFzRW9Ccs/s640/level_1_blown_up.tiff\" height=\"120\" border=\"0\" width=\"512\" /></a> <p>The penguin is your avatar. The rest of the objects are ice blocks, trees, hearts, bombs, mountains, and houses. The world is a sheet of ice. You can walk around on the ice. You can walk through trees. Some objects (trees, mountains, and houses) can't be moved. Bombs, hearts, and ice blocks move without friction -- if you push them, they will keep going until they hit the edge of the world or another object. If an sliding ice block hits another object, it stops. If you push it against another object, it crumbles and disappears. The penguin can walk through trees, but other objects can't. Bombs will blow up mountains when they slide into them. Everything else simply stops them. The goal of the game is to slide all the hearts into a house (cute, huh?) But because the ice is frictionless, it's incredibly easy to get objects stuck against walls or corners where you can no longer move them the way you need to. So you have to carefully plan out your moves, and if you get stuck, there's an option to start the level over.</p> <p>I should mention that the original game had a copyright notice (1990), and was shareware ($2.00). I can't remember if I ever sent the author $2.00. I'm not sure how he would feel about me taking apart and trying to re-implement his game, or whether he'd try to assert that copyright prevented me from doing so, but I'll assume he's a  nice guy and wouldn't care as long as I don't charge for it, and go ahead, on the theory that easier to ask forgiveness than permission. I was not able to find him online -- maybe \"Go Endo\" was a pseudonym?</p> <p>Back in 1991 I came up with a C++ class design (actually, it doesn't quite look like C++; I think it was written using THINK C's object-oriented extensions, which are sort of lost in the mists of time to me -- what is that <b>indirect</b> keyword? What did <b>#pragma options(virtual)</b> do? I don't remember for sure, but let's see if we can come up with an Objective-C implementation. The objects, other than the penguin, which can face in different directions, don't seem to have any real distinct properties except for their locations in the board, so I'm tempted not to take the obvious route and implement a board full of instances of the objects. I'm more inclined to just define a class for the board, and let it encapsulate most of the game logic. For the objects themselves, I'd like to just make references (pointers) to their classes (the class object) rather than putting them in a container. That's apparently not really possible -- there are no predefined singletons for the class objects that are accessible at run-time the way there are for NSNull. So I have to make some (sort of) singletons.</p> <p>Here's what I've got today:</p> <pre>@interface ArcticSlideTile : NSObject<br />// Not necessarily useful yet, but I am guessing it might<br />// be helpful to have a separate base class at some point.<br />@end<br /><br />@interface ArcticSlideTileStateless : ArcticSlideTile<br />// In implementation, there will be a single shared instance.<br />@end<br /><br />@interface ArcticSlideBomb : ArcticSlideTileStateless<br />// Bombs can be pushed and will slide until they<br />// hit an object and stop. If the object is a mountain,<br />// both bomb and mountain are destroyed and<br />// there should be an animation. If another object<br />// hits a bomb it stops (I'm not sure you can test this<br />// combination in the original game with the board layouts<br />// available<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlideEmpty : ArcticSlideTileStateless<br />// The penguin can walk on empty space. Pushable objects<br />// on empty space are on ice and they slide until something<br />// stops them.<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlideHeart : ArcticSlideTileStateless<br />// When a heart hits a house the heart disappears (getting<br />// all the hearts into the house is how you win the game).<br />// Otherwise they cannot be destroyed, and slide like other<br />// slidable items.<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlideHouse : ArcticSlideTileStateless<br />// Houses cannot be pushed and stop other objects<br />// except hearts. When a heart hits a house the heart<br />// disappears (getting the hearts into the house is<br />// how you win the game). So the model should keep track<br />// of the number of hearts on the board and trigger a<br />// \"win the level\" behavior when the last heart is <br />// destroyed.<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlideIceBlock : ArcticSlideTileStateless<br />// Ice blocks can be pushed and will slide until they<br />// hit an object and stop. If they are pushed directly<br />// against an object they will be crushed (there should<br />// be an animation) and disappear.<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlideMountain : ArcticSlideTileStateless<br />// Mountains cannot be moved and are destroyed by bombs.<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlidePenguin : ArcticSlideTile<br />// The penguin is the avatar. It has the special<br />// quality of being able to face different directions<br />// in the original game, although that's because you <br />// can click near him to turn him and make him walk in<br />// different directions. In a touchscreen implementation<br />// I'm not sure how this should be implemented -- maybe<br />// he can slide in discreet steps. The penguin has the<br />// ability to walk through trees. We might want to <br />// implement this temporary state using using an<br />// \"override\" object reference in the model. Sliding<br />// objects might be implemented the same way.<br />typedef enum {<br />    north, south, east, west<br />}penguinDirection_e;<br /><br />@property penguinDirection_e facing;<br />- (NSString*) description;<br />@end<br /><br />@interface ArcticSlideTree : ArcticSlideTile<br />// Trees cannot be pushed or destroyed and stop<br />// all sliding objects, but the penguin avatar <br />// character can walk through them.<br />- (NSString*) description;<br />@end<br /><br />static const int board_width = 24, board_height = 4;<br />// The short board design is part of what makes it<br />// so easy to get sliding objects stuck against the<br />// edges of the world or in corners where you can no longer<br />// get around to the other side to push them. We could<br />// consider a bigger board later and maybe implement the<br />// original puzzles surrounded by impassible water.<br /><br />@interface ArcticSlideModel : NSObject<br />{<br />    ArcticSlideTile* board[board_height][board_width];<br />}<br /><br />- (id)init;<br />- (NSString*) description;<br /><br />@end<br /><br />@implementation ArcticSlideTile<br />{<br />}<br />@end<br /><br />@implementation ArcticSlideTileStateless<br />{<br />}<br />@end<br /><br />@implementation ArcticSlideBomb<br />- (NSString*) description<br />{<br />    return @\"Bomb\";<br />}<br />@end<br /><br />@implementation ArcticSlideEmpty<br />- (NSString*) description<br />{<br />    return @\"Empty\";<br />}<br />@end<br /><br />@implementation ArcticSlideHouse<br />- (NSString*) description<br />{<br />    return @\"House\";<br />}<br />@end<br /><br />@implementation ArcticSlideIceBlock<br />- (NSString*) description<br />{<br />    return @\"Ice Block\";<br />}<br />@end<br /><br />@implementation ArcticSlideMountain<br />- (NSString*) description<br />{<br />    return @\"Mountain\";<br />}<br />@end<br /><br />@implementation ArcticSlidePenguin<br />- (NSString*) description<br />{<br />    return @\"Mountain\";<br />}<br />@end<br /><br />@implementation ArcticSlideTree<br />- (NSString*) description<br />{<br />    return @\"Tree\";<br />}<br />@end<br /><br />@implementation ArcticSlideModel<br />{<br />    ArcticSlideBomb *bomb;<br />    ArcticSlideEmpty *empty;<br />    ArcticSlideHeart *heart;<br />    ArcticSlideHouse *house;<br />    ArcticSlideIceBlock *ice_block;<br />    ArcticSlideMountain *mountain;<br />    ArcticSlidePenguin *penguin;<br />    ArcticSlideTree* tree;<br /><br />}<br />- (id)init<br />{<br />    bomb = [[ArcticSlideBomb alloc] init];<br />    empty = [[ArcticSlideEmpty alloc] init];<br />    heart = [[ArcticSlideHeart alloc] init];<br />    house = [[ArcticSlideHouse alloc] init];<br />    ice_block = [[ArcticSlideIceBlock alloc] init];<br />    mountain = [[ArcticSlideMountain alloc] init];<br />    penguin = [[ArcticSlidePenguin alloc] init];<br />    tree = [[ArcticSlideTree alloc] init];<br /><br />    for ( unsigned int idx_y = 0;<br />         idx_y < board_height; idx_y++ )<br />    {<br />        for ( unsigned int idx_x = 0;<br />             idx_x < board_width; idx_x++ )<br />        {<br />            board[idx_y][idx_x] = empty;<br />        }<br />    }<br />    return self;<br />}<br /><br />- (NSString*)description<br />{<br />    NSMutableString *desc_str =<br />        [[NSMutableString alloc]init];<br />    <br />    [desc_str appendString:@\"ArcticSlideModel board state:\\n\"];<br />    for ( unsigned int idx_y = 0;<br />         idx_y < board_height; idx_y++ )<br />    {<br />        for ( unsigned int idx_x = 0;<br />             idx_x < board_width; idx_x++ )<br />        {<br />            [desc_str<br />             appendString:[board[idx_y][idx_x] description]];<br />            [desc_str appendString:@\" \"];<br />        }<br />        [desc_str appendString:@\"\\n\"];<br />    }<br />    return desc_str;<br />}<br /><br />@end<br /></pre> <p>My quiet time at my undisclosed location ends tomorrow. I'm not sure I'll be able to get back to this for a few days. I haven't gotten nearly as much done with this as I've hoped. I've been distracted by a lot of job-search things. But hey, it's a start!</p>" nil nil "ef3201d94d907cc7e80b5df5a252573b") (36 (20928 8813 665064) "http://twdkz.wordpress.com/2013/05/31/data-analysis-with-monoids/" "Tim Docker: Data analysis with Monoids" nil "Tue, 04 Jun 2013 22:05:36 +0000" "<p>This post expresses the key ideas of a talk I gave at FP-SYD this week.</p>
<p><a href=\"http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Monoid.html\">Monoids</a> are a pretty simple concept in haskell. Some years ago I learnt of them through the excellent <a href=\"http://www.haskell.org/haskellwiki/Typeclassopedia\">Typeclassopedia</a>, looked at the examples, and understood them quickly (which is more than can be said for many of the new ideas that one learns in haskell). However that was it. Having learnt the idea, I realised that monoids are everywhere in programming, but I’d not found much use for the Monoid typeclass abstraction itself. Recently, I’ve found they can be a useful tool for data analysis…</p>
<h2 id=\"monoids\">Monoids</h2>
<p>First a quick recap. A monoid is a type with a binary operation, and an identity element:</p>
<pre><code>class Monoid a where
mempty :: a
mappend :: a -> a -> a</code></pre>
<p>It must satisfy a simple set of laws, specifically that the binary operation much be associative, and the identity element must actually be the identity for the given operation:</p>
<pre><code>mappend a (mappend b c) = mappend (mappend a b) c
mappend mempty x = x
mappend x mempty = x</code></pre>
<p>As is hinted by the names of the typeclass functions, lists are an obvious Monoid instance:</p>
<pre><code>instance Monoid [a] where
mempty  = []
mappend = (++)</code></pre>
<p>However, many types can be Monoids. In fact, often a type can be a monoid in multiple ways. Numbers are monoids under both addition and multiplication, with 0 and 1 as their respective identity elements. In the haskell standard libraries, rather than choose one kind of monoid for numbers, newtype declarations are used to given instances for both:</p>
<pre><code>newtype Sum a = Sum { getSum :: a }
deriving (Eq, Ord, Read, Show, Bounded)
instance Num a => Monoid (Sum a) where
mempty = Sum 0
Sum x `mappend` Sum y = Sum (x + y)
newtype Product a = Product { getProduct :: a }
deriving (Eq, Ord, Read, Show, Bounded)
instance Num a => Monoid (Product a) where
mempty = Product 1
Product x `mappend` Product y = Product (x * y)</code></pre>
<p>We’ve now established and codified the common structure for a few monoids, but it’s not yet clear what it has gained us. The Sum and Product instances are unwieldly – you are unlikely to want to use Sum directly to add two numbers:</p>
<pre><code>Prelude> :m Data.Monoid
Prelude Data.Monoid> 5+4
9
Prelude Data.Monoid> getSum (mappend (Sum 5) (Sum 4))
9</code></pre>
<p>Before we progress, however, let’s define a few more monoid instances, potentially useful for data analysis.</p>
<pre><code>data Min a = Min a | MinEmpty deriving (Show)

data Max a = Max a | MaxEmpty deriving (Show)
newtype Count = Count Int deriving (Show)
instance (Ord a) => Monoid (Min a) where
mempty = MinEmpty
mappend MinEmpty m = m
mappend m MinEmpty = m
mappend (Min a) (Min b) = (Min (P.min a b))
instance (Ord a) => Monoid (Max a) where
mempty = MaxEmpty
mappend MaxEmpty m = m
mappend m MaxEmpty = m
mappend (Max a) (Max b) = (Max (P.max a b))
instance Monoid Count where
mempty = Count 0
mappend (Count n1) (Count n2) = Count (n1+n2)</code></pre>
<p>Also some helper functions to construct values of all these monoid types:</p>
<pre><code>sum :: (Num a) => a -> Sum a
sum = Sum
product :: (Num a) => a -> Product a
product = Product
min :: (Ord a) => a -> Min a
min = Min
max :: (Ord a) => a -> Max a
max = Max
count :: a -> Count
count _ = Count 1</code></pre>
<p>These functions are trivial, but they put a consistent interface on creating monoid values. They all have a signature (a -> m) where m is some monoid. For lack of a better name, I’ll call functions with such signatures \"monoid functions\".</p>
<h2 id=\"foldable\">Foldable</h2>
<p>It’s time to introduce another typeclass, <a href=\"http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Foldable.html\">Foldable</a>. This class abstracts the classic foldr and foldl functions away from lists, making them applicable to arbitrary structures. (There’s a robust debate going on right now about the merits of replacing the list specific fold functions in the standard prelude with the more general versions from Foldable.) Foldable is a large typeclass – here’s the key function of interest to us:</p>
<pre><code>class Foldable t where
...
foldMap :: Monoid m => (a -> m) -> t a -> m
...</code></pre>
<p>foldMap takes a monoid function and a Foldable structure, and reduces the structure down to a single value of the monoid. Lists are, of course, instances of foldable, so we can demo our helper functions:</p>
<pre><code>*Examples> let as = [45,23,78,10,11,1]
*Examples> foldMap count as
Count 6
*Examples> foldMap sum as
Sum {getSum = 168}
*Examples> foldMap max as
Max 78</code></pre>
<p>Notice how the results are all still wrapped with the newtype constructors. We’ll deal with this later.</p>
<h2 id=\"composition\">Composition</h2>
<p>As it turns out, tuples are already instances of Monoids:</p>
<pre><code>instance (Monoid a,Monoid b) => Monoid (a,b) where
mempty = (mempty,mempty)
mappend (a1,b1) (a2,b2) = (mappend a1 a2,mappend b1 b2)</code></pre>
<p>A pair is a monoid if it’s elements are monoids. There are similar instances for longer tuples. We need some helper monoid functions for tuples also:</p>
<pre><code>a2 :: (a -> b) -> (a -> c) -> a -> (b,c)
a2 b c = (,) <$> b <*> c
a3 :: (a -> b) -> (a -> c) -> (a -> d) -> a -> (b,c,d)
a3 b c d = (,,) <$> b <*> c <*> d</code></pre>
<p>These are implemented above using <a href=\"http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Applicative.html\">Applicative</a> operators, though I’ve given them more restrictive types to make their intended use here clearer. Now I can compose monoid functions:</p>
<pre><code>*Examples> let as = [45,23,78,10,11,1]
*Examples> :t (a2 min max)
(a2 min max) :: Ord a => a -> (Min a, Max a)
*Examples> foldMap (a2 min max) as
(Min 1,Max 78)
*Examples> :t (a3 count (a2 min max) (a2 sum product))
(a3 count (a2 min max) (a2 sum product))
:: (Num a, Ord a) =>
a -> (Count, (Min a, Max a), (Sum a, Product a))
*Examples> foldMap (a3 count (a2 min max) (a2 sum product)) as
(Count 6,(Min 1,Max 78),(Sum {getSum = 168},Product {getProduct = 8880300}))</code></pre>
<p>It’s worth noting here that the composite computations are done in a single traversal of the input list.</p>
<h2 id=\"more-complex-calculations\">More complex calculations</h2>
<p>Happy with this, I decide to extend my set of basic computations with the arithmetic mean. There is a problem, however. The arithmetic mean doesn’t \"fit\" as a monoid – there’s no binary operation such that a mean for a combined set of data can be calculated from the mean of two subsets.</p>
<p>What to do? Well, the mean is the sum divided by the count, both of which are monoids:</p>
<pre><code>newtype Mean a = Mean (Sum a,Count) deriving (Show)
instance (Num a) => Monoid (Mean a) where
mempty = Mean mempty
mappend (Mean m1) (Mean m2) = Mean (mappend m1 m2)
mean v = Mean (Sum v,Count 1)</code></pre>
<p>So I can calculate the mean if I am prepared to do a calculation after the foldMap:</p>
<pre><code>*Examples> let as = [45,23,78,10,11,1.5]
*Examples> foldMap mean as
Mean (Sum {getSum = 168.5},Count 6)
*Examples> let (Mean (Sum t,Count n)) = foldMap mean as in t / fromIntegral n
28.083333333333332</code></pre>
<h2 id=\"the-aggregation-type-class\">The Aggregation type class</h2>
<p>For calculations like <code>mean</code>, I need something more than a monoid. I need a monoid for accumulating the values, and then, once the accumulation is complete, a postprocessing function to compute the final result. Hence a new typeclass to extend Monoid:</p>
<pre><code>{-# LANGUAGE TypeFamilies #-}
class (Monoid a) => Aggregation a where
type AggResult a :: *
aggResult :: a -> AggResult a</code></pre>
<p>This makes use of the <a href=\"http://www.haskell.org/haskellwiki/GHC/Type_families\">type families ghc extension</a>. We need this to express the fact that our postprocessing function aggResult has a different return type to the type of the monoid. In the above definition:</p>
<ul>
<li>aggResult is a function that gives you the <em>value</em> of the final result from the <em>value</em> of the monoid</li>
<li>AggResult is a <em>type</em> function that gives you the <em>type</em> of the final result from the <em>type</em> of the monoid</li>
</ul>
<p>We can write an instance of Aggregation for Mean:</p>
<pre><code>instance (Fractional a) => Aggregation (Mean a) where
type AggResult (Mean a) = a
aggResult (Mean (Sum t,Count n)) = t/fromIntegral n</code></pre>
<p>and test it out:</p>
<pre><code>*Examples> let as = [45,23,78,10,11,1.5]
*Examples> aggResult (foldMap mean as)
28.083333333333332
*Examples> </code></pre>
<p>Nice. Given that <code>aggResult (foldMap ...)</code> will be a common pattern, lets write a helper:</p>
<pre><code>afoldMap :: (Foldable t, Aggregation a) => (v -> a) -> t v -> AggResult a
afoldMap f vs = aggResult (foldMap f vs)</code></pre>
<p>In order to use the monoids we defined before (sum,product etc) we need to define Aggregation instances for them also. Even though they are trivial, it turns out to be useful, as we can make the aggResult function strip off the newtype constructors that were put there to enable the Monoid typeclass:</p>
<pre><code>instance (Num a) => Aggregation (Sum a)  where
type AggResult (Sum a) = a
aggResult (Sum a) = a

instance (Num a) => Aggregation (Product a)  where
type AggResult (Product a) = a
aggResult (Product a) = a
instance (Ord a) => Aggregation (Min a)  where
type AggResult (Min a) = a
aggResult (Min a) = a
instance (Ord a) => Aggregation (Max a)  where
type AggResult (Max a) = a
aggResult (Max a) = a
instance Aggregation Count where
type AggResult Count = Int
aggResult (Count n) = n
instance (Aggregation a, Aggregation b) => Aggregation (a,b) where
type AggResult (a,b) = (AggResult a, AggResult b)
aggResult (a,b) = (aggResult a, aggResult b)
instance (Aggregation a, Aggregation b, Aggregation c) => Aggregation (a,b,c) where
type AggResult (a,b,c) = (AggResult a, AggResult b, AggResult c)
aggResult (a,b,c) = (aggResult a, aggResult b, aggResult c)</code></pre>
<p>This is mostly boilerplate, though notice how the tuple instances delve into their components in order to postprocess the results. Now everything fits together cleanly:</p>
<pre><code>*Examples> let as = [45,23,78,10,11,1.5]
*Examples> :t (a3 count (a2 min max) mean)
(a3 count (a2 min max) mean)
:: Ord a => a -> (Count, (Min a, Max a), Mean a)
*Examples> afoldMap (a3 count (a2 min max) mean) as
(6,(1.5,78.0),28.083333333333332)
*Examples> </code></pre>
<p>The 4 computations have been calculated all in a single pass over the input list, and the results are free of the type constructors that are no longer required once the aggregation is complete.</p>
<p>Another example of an Aggregation where we need to postprocess the result is counting the number of unique items. For this we will keep a set of the items seen, and then return the size of this set at the end:</p>
<pre><code>newtype CountUnique a = CountUnique (Set.Set a)
instance Ord a => Monoid (CountUnique a) where
mempty = CountUnique Set.empty
mappend (CountUnique s1) (CountUnique s2) = CountUnique (Set.union s1 s2)
instance Ord a => Aggregation (CountUnique a) where
type AggResult (CountUnique a) = Int
aggResult (CountUnique s1) = Set.size s1
countUnique :: Ord a => a -> CountUnique a
countUnique a = CountUnique (Set.singleton a)</code></pre>
<p>.. in use:</p>
<pre><code>*Examples> let as = [5,7,8,7,11,10,11]
*Examples> afoldMap (a2 countUnique count) as
(5,7)</code></pre>
<h2 id=\"higher-order-aggregation-functions\">Higher order aggregation functions</h2>
<p>All of the calculations seen so far have worked consistently across all values in the source data structure. We can make use of the <code>mempty</code> monoid value in order to filter our data set, and or aggregate in groups. Here’s a couple of higher order monoid functions for this:</p>
<pre><code>afilter :: Aggregation m => (a -> Bool) -> (a -> m) -> (a -> m)
afilter match mf = \\a -> if match a then mf a else mempty
newtype MMap k v = MMap (Map.Map k v)
deriving Show
instance (Ord k, Monoid v) => Monoid (MMap k v) where
mempty = MMap (Map.empty)
mappend (MMap m1) (MMap m2) = MMap (Map.unionWith mappend m1 m2)
instance (Ord k, Aggregation v) => Aggregation (MMap k v) where
type AggResult (MMap k v) = Map.Map k (AggResult v)
aggResult (MMap m) = Map.map aggResult m
groupBy :: (Ord k, Aggregation m) => (a -> k) -> (a -> m) -> (a -> MMap k m)
groupBy keyf valuef = \\a -> MMap (Map.singleton (keyf a) (valuef a))</code></pre>
<p><code>afilter</code> restricts the application of a monoid function to a subset of the input data. eg to calculate the sum of all the values, and the sum of values less than 20:</p>
<pre><code>*Examples> let as = [5,10,20,45.4,35,1,3.4]
*Examples> afoldMap (a2 sum (afilter (<=20) sum)) as
(119.8,39.4)</code></pre>
<p><code>groupBy</code> takes a key function and a monoid function. It partitions the data set using the key function, and applies a monoid function to each subset, returning all of the results in a map. Non-numeric data works better as an example here. Let’s take a set of words as input, and for each starting letter, calculate the number of words with that letter, the length of the shortest word, and and the length of longest word:</p>
<pre><code>*Examples> let as = words \"monoids are a pretty simple concept in haskell some years ago i learnt of them through the excellent typeclassopedia looked at the examples and understood them straight away which is more than can be said for many of the new ideas that one learns in haskell\"
*Examples> :t groupBy head (a3 count (min.length) (max.length))
groupBy head (a3 count (min.length) (max.length))
:: Ord k => [k] -> MMap k (Count, Min Int, Max Int)
*Examples> afoldMap (groupBy head (a3 count (min.length) (max.length))) as
fromList [('a',(6,1,4)),('b',(1,2,2)),('c',(2,3,7)),('e',(2,8,9)),('f',(1,3,3)),('h',(2,7,7)),('i',(5,1,5)),('l',(3,6,6)),('m',(3,4,7)),('n',(1,3,3)),('o',(3,2,3)),('p',(1,6,6)),('s',(4,4,8)),('t',(9,3,15)),('u',(1,10,10)),('w',(1,5,5)),('y',(1,5,5))]</code></pre>
<p>Many useful data analysis functions can be written through simple function application and composition using these primitive monoid functions, the product combinators a2 and a3 and these new filtering and grouping combinators.</p>
<h2 id=\"disk-based-data\">Disk-based data</h2>
<p>As pointed out before, regardless of the complexity of the computation, it’s done with a single traversal of the input data. This means that we don’t need to limit ourselves to lists and other in memory Foldable data structures. Here’s a function similar to foldMap, but that works over the lines in a file:</p>
<pre><code>foldFile :: Monoid m => FilePath -> (BS.ByteString -> Maybe a) -> (a -> m) -> IO m
foldFile fpath pf mf = do
h <- openFile fpath ReadMode
m <- loop h mempty
return m
where
loop h m = do
eof <- hIsEOF h
if eof
then (return m)
else do
l <- BS.hGetLine h
case pf l of
Nothing -> loop h m
(Just a) -> let m' = mappend m (mf a)
in loop h m'
afoldFile :: Aggregation m => FilePath -> (BS.ByteString -> Maybe a) -> (a -> m) -> IO (AggResult m)
afoldFile fpath pf mf = fmap aggResult (foldFile fpath pf mf)</code></pre>
<p>foldFile take two parameters – a function to parse each line of the file, the other is the monoid function to do the aggregation. Lines that fail to parse are skipped. (I can here questions in the background \"What about strictness and space leaks?? – I’ll come back to that). As an example usage of aFoldFile, I’ll analyse some stock data. Assume that I have it in a CSV file, and I’ve got a function to parse one CSV line into a sensible data value:</p>
<pre><code>import qualified Data.ByteString.Char8 as BS
import Data.Time.Calendar
data Prices = Prices {
pName :: String,          -- The stock code
pDate :: Day,             -- The historic date
pOpen :: Double,          -- The price at market open
pHigh :: Double,          -- The highest price on the date
pLow :: Double,           -- The lowest price on the date
pClose :: Double,         -- The price at market close
pVolume :: Double         -- How many shares were traded
} deriving (Show)
parsePrices :: BS.ByteString -> Maybe Prices
parsePrices = ...</code></pre>
<p>Now I can use my monoid functions to analyse the file based data. How many google prices do I have, over what date range:</p>
<pre><code>*Examples> let stats =  afilter ((\"GOOG\"==).pName) (a3 count (min.pDate) (max.pDate))
*Examples> :t stats
stats
:: Prices
-> (Count,
Min time-1.4:Data.Time.Calendar.Days.Day,
Max time-1.4:Data.Time.Calendar.Days.Day)
*Examples> afoldFile \"prices.csv\" parsePrices stats
(1257,2008-05-29,2013-05-24)
*Examples> </code></pre>
<p>Perhaps I want to aggregate my data per month, getting traded price range and total volume. We need a helper function to work out the month of each date:</p>
<pre><code>startOfMonth :: Day -> Day
startOfMonth t = let (y,m,d) = toGregorian t
in fromGregorian y m 1</code></pre>
<p>And then we can use groupBy to collect data monthly:</p>
<pre><code>:*Examples> let stats =  afilter ((\"GOOG\"==).pName) (groupBy (startOfMonth.pDate) (a3 (min.pLow) (max.pHigh) (sum.pVolume)))
*Examples> :t stats
stats
:: Prices
-> MMap
time-1.4:Data.Time.Calendar.Days.Day
(Min Double, Max Double, Sum Double)
*Examples> results <- afoldFile \"prices.csv\" parsePrices stats
*Examples> mapM_ print (Map.toList results)
(2008-05-01,(573.2,589.92,8073107.0))
(2008-06-01,(515.09,588.04,9.3842716e7))
(2008-07-01,(465.6,555.68,1.04137619e8))
...
(2013-03-01,(793.3,844.0,4.2559856e7))
(2013-04-01,(761.26,827.64,5.3574633e7))
(2013-05-01,(816.36,920.6,4.1080028e7))</code></pre>
<h2 id=\"conclusion\">Conclusion</h2>
<p>So, I hope I’ve shown that monoids are useful indeed. They can form the core of a framework for cleanly specifing quite complex data analysis tasks.</p>
<p>An additional typeclass which I called \"Aggregation\" extends Monoid and provides for a broader range of computations and also cleaner result types (thanks to type families). There was some discussion when I presented this talk as to whether a single method typeclass like Aggregation was a \"true\" abstraction, given it has no associated laws. This is a valid point, however using it simplifies the syntax and usage of monoidal calculations significantly, and for me, this makes it worth having.</p>
<p>There remains an elephant in the room, however, and this is space leakage. Lazy evalulation means that, as written, most of the calculations shown run in space proportional to the input data set. Appropriate strictness annotations and related modifications will fix this, but it turns out to be slightly irritating. This blog post is already long enough, so I’ll address space leaks in in a subsequent post…</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/twdkz.wordpress.com/65/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/twdkz.wordpress.com/65/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=twdkz.wordpress.com&blog=33863535&post=65&subd=twdkz&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "ffc5e04a3dc6d59cb5bdf9d6ce0ba591") (35 (20928 8813 662093) "http://joyful.com/blog/2013-06-04-bugfix-planning-autoweb.html" "Simon Michael: Bugfix, planning, autoweb" nil "Tue, 04 Jun 2013 19:00:00 +0000" "<div style=\"font-style: italic;\">June  4, 2013</div>
<h2>Bugfix, planning, autoweb</h2>
<p>
</p><p><a href=\"http://joyful.com/2013-06-03-chart-fix.html\">Yesterday</a>.</p>
<p>Today:</p>
<p>Fixed a build failure from last night’s late session, caught by <a href=\"http://hydra.cryp.to:8080/project/hledger\">Peter’s build bot</a>, which is being very helpful. It’s like having R2D2 at my back! I do worry a little about the gratuitous added carbon footprint from a bunch of builds on every github commit.</p>
<p>Loaded up the 0.22 release backlog with a bunch of items on the <a href=\"http://hledger.org/trello\">planning board</a>. (Scroll over to the right).</p>
<p>Did the first backlog item, removing some troublesome friction in hledger-web development. When I’m working on hledger[-web] and need rapid compiler feedback, I use the <a href=\"https://github.com/simonmichael/hledger/blob/master/Makefile#L168\">“auto” rules</a> - <code>make auto</code>, <code>make auto-test</code>, or <code>make autoweb</code>. These watch for file changes and recompile as needed, using <a href=\"http://hub.darcs.net/simon/searchpath\">searchpath</a>. Searchpath is old, but still works well and can build from multiple packages, unlike cabal-based autobuilders. So it’s very useful when I’m tweaking things in hledger-lib for hledger-web. (I’d use <code>yesod devel</code> if I was just working just in hledger-web, and changing routes, templates, or the cabal file).</p>
<p>The problem: when compiling hledger-web, hledger and hledger-lib together, how to enable the hairy yesodish language extensions only for hledger-web code, and not for hledger-lib and hledger, which don’t compile with them (and seem to get obfuscated if I make them compile).</p>
<p>The solution: wrestle with ghc, sp, cabal; identify required and incompatible language extensions by trial and error; specify the compatible ones in the makefile, and add the rest as source file pragmas. Now my trusty autoweb runs again!</p>
<pre><code>~/src/hledger$ make autoweb
sp --no-exts --no-default-map ghc  -O0  hledger-web/app/main.hs -o bin/hledger-webdev -rtsopts -W -fwarn-tabs -fno-warn-unused-do-bind -fno-warn-name-shadowing  -ihledger-lib -ihledger -ihledger-web -ihledger-web/app -L/usr/lib  -optP-include -optPhledger/dist/build/autogen/cabal_macros.h -DPATCHLEVEL=2 -DDEVELOPMENT -DVERSION='\\\"0.21.1dev\\\"'  -XCPP -XMultiParamTypeClasses -XOverloadedStrings -XQuasiQuotes -XRecordWildCards -XTemplateHaskell  --run -B --port 5001 --base-url http://localhost:5001 -f webtest.j
[ 1 of 52] Compiling Hledger.Data.Types ( hledger-lib/Hledger/Data/Types.hs, hledger-lib/Hledger/Data/Types.o )
[ 2 of 52] Compiling Hledger.Data.FormatStrings ( hledger-lib/Hledger/Data/FormatStrings.hs, hledger-lib/Hledger/Data/FormatStrings.o )
...
Loading package yesod-static-1.2.0 ... linking ... done.
[40 of 52] Compiling Foundation       ( hledger-web/Foundation.hs, hledger-web/Foundation.o )
hledger-web/Foundation.hs:106:37: Not in scope: `css_bootstrap_css'</code></pre>
<p>Hmm. That didn’t happen on the other machine. Never mind, something for tomorrow.</p>
<p>Finally, realised I need to do <a href=\"http://hackage.haskell.org/package/hledger-0.21.2\">yet another release</a> including this morning’s build fix. This time I waited to see <a href=\"http://hydra.cryp.to:8080/eval/211\">green lights</a> on the buildbot before uploading.</p>" nil nil "c5c0e2279b535a8be25a38c53a4812bc") (34 (20928 8813 661435) "http://jpmoresmau.blogspot.com/2013/06/eclipse-hate-and-haskell-ides.html" "JP Moresmau: Eclipse Hate and Haskell IDEs" "noreply@blogger.com (JP Moresmau)" "Tue, 04 Jun 2013 18:14:33 +0000" "A few weeks ago I was <a href=\"http://www.reddit.com/r/programming/comments/1eeoqu/android_studio/\">reading the comments about the release of Android Studio on reddit</a>. I was a bit shocked by all the Eclipse hate. But hey, I suppose I use <a href=\"http://eclipse.org/\">Eclipse</a> and not <a href=\"http://www.jetbrains.com/idea/\">IntelliJ</a>, so I don't know what I'm missing and how great it would be to work on IDEA. But then I was surprised to see that there has been no release of <a href=\"http://code.google.com/p/ideah/\">ideah</a>, the Haskell plug-in for IDEA, for <a href=\"http://ideah-plugin.blogspot.fr/\">a year and a half</a>. How come there isn't more momentum if IntelliJ is such a great IDE to build on and work with?<br /><br />Maybe we're just suffering from too much dispersion in the <a href=\"http://www.haskell.org/haskellwiki/IDE\">Haskell IDE space</a>. We have plug-ins for the major IDEs, but none of them can probably called great (I know, some people positively hate EclipseFP, but for my defence I'll say I get much more bug reports and feature requests than pull requests, I probably need a course on \"building a passionate programming community around your open source project\"). They however have the massive advantage of being able to reuse a wealth of existing code (I can use the <a href=\"http://www.eclipse.org/egit/\">Eclipse Git plugin</a> to work with Github, I don't need somebody to write the Haskell version). An IDE in Haskell like <a href=\"http://leksah.org/\">Leksah</a> or something built on top of <a href=\"https://github.com/yi-editor/yi\">Yi</a> would be amazing to showcase that you can do real applications in Haskell (since you still get people saying that Haskell is only for toying with), but then you need to build everything, which requires people (see note above on building a community). Then we have web based editors like the offering from <a href=\"https://www.fpcomplete.com/school/how-to-use-the-school-of-haskell/creating-your-own-content\">FPComplete</a>, but for developers to use them on real projects we need to think on how to package a web based interface and what it means for a development work-flow: I'm not sure developers would embrace developing using a browser. Of course we have plug-ins for the Unixy editors, <a href=\"https://github.com/haskell/haskell-mode\">emacs</a> and <a href=\"http://projects.haskell.org/haskellmode-vim/\">vim</a>, but if we want to open up Haskell to non hackers, maybe we need something more...<br /><br />So can we continue like that and hope to have a few decent environments? Or shall we all agree on a direction and unite to provide the one true development environment for Haskell? Sometimes people say \"Haskell is so different and advanced as a programming language, it needs a new type of editor/IDE\". I don't disagree with it, but who has the vision of what the Haskell IDE should be?" nil nil "363b72eac76a4343dad1eda94c635155") (33 (20928 8813 660769) "http://joyful.com/blog/2013-06-03-chart-fix.html" "Simon Michael: Chart fix" nil "Tue, 04 Jun 2013 05:30:00 +0000" "<div style=\"font-style: italic;\">June  4, 2013</div>
<h2>Chart fix</h2>
<p>
</p><p><a href=\"http://joyful.com/2013-06-02-earth-nap.html\">Yesterday</a>.</p>
<p>Here’s the developer diary entry for monday.</p>
<p>Peter Simons <a href=\"http://thread.gmane.org/gmane.comp.finance.ledger.hledger/935\">argued convincingly</a> against depending on yesod-platform.</p>
<p>I released hledger 0.21.1, fixing a <a href=\"https://github.com/simonmichael/hledger/issues/122\">regression</a> in hledger-web 0.21 where it showed the wrong chart Y-values when filtering by date. The chart appears at the top of the <a href=\"http://demo.hledger.org/register\">register view</a>, and simply shows the register’s running total in graphical form. Here’s the report type which provides values for the chart:</p>
<pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><span class=\"co\">-- | A transactions report includes a list of transactions</span>
<span class=\"co\">-- (posting-filtered and unfiltered variants), a running balance, and some</span>
<span class=\"co\">-- other information helpful for rendering a register view (a flag</span>
<span class=\"co\">-- indicating multiple other accounts and a display string describing</span>
<span class=\"co\">-- them) with or without a notion of current account(s).</span>
<span class=\"kw\">type</span> <span class=\"dt\">TransactionsReport</span> <span class=\"fu\">=</span> (<span class=\"dt\">String</span>                   <span class=\"co\">-- label for the balance column, eg \"balance\" or \"total\"</span>
,[<span class=\"dt\">TransactionsReportItem</span>] <span class=\"co\">-- line items, one per transaction</span>
)
<span class=\"kw\">type</span> <span class=\"dt\">TransactionsReportItem</span> <span class=\"fu\">=</span> (<span class=\"dt\">Transaction</span> <span class=\"co\">-- the corresponding transaction</span>
,<span class=\"dt\">Transaction</span> <span class=\"co\">-- the transaction with postings to the current account(s) removed</span>
,<span class=\"dt\">Bool</span>        <span class=\"co\">-- is this a split, ie more than one other account posting</span>
,<span class=\"dt\">String</span>      <span class=\"co\">-- a display string describing the other account(s), if any</span>
,<span class=\"dt\">MixedAmount</span> <span class=\"co\">-- the amount posted to the current account(s) (or total amount posted)</span>
,<span class=\"dt\">MixedAmount</span> <span class=\"co\">-- the running balance for the current account(s) after this transaction</span>
)
triDate (t,_,_,_,_,_) <span class=\"fu\">=</span> tdate t
triAmount (_,_,_,_,a,_) <span class=\"fu\">=</span> a
triBalance (_,_,_,_,_,a) <span class=\"fu\">=</span> a
triSimpleBalance (_,_,_,_,_,<span class=\"dt\">Mixed</span> a) <span class=\"fu\">=</span> <span class=\"kw\">case</span> a <span class=\"kw\">of</span> [] <span class=\"ot\">-></span> <span class=\"st\">\"0\"</span>
(<span class=\"dt\">Amount</span>{aquantity<span class=\"fu\">=</span>q})<span class=\"fu\">:</span>_ <span class=\"ot\">-></span> <span class=\"fu\">show</span> q</code></pre>
<p>and here’s the slightly tricky new code to split it into separate reports, each covering one commodity:</p>
<pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><span class=\"co\">-- Split a transactions report whose items may involve several commodities,</span>
<span class=\"co\">-- into one or more single-commodity transactions reports.</span>
<span class=\"ot\">transactionsReportByCommodity ::</span> <span class=\"dt\">TransactionsReport</span> <span class=\"ot\">-></span> [<span class=\"dt\">TransactionsReport</span>]
transactionsReportByCommodity tr <span class=\"fu\">=</span>
[filterTransactionsReportByCommodity c tr <span class=\"fu\">|</span> c <span class=\"ot\"><-</span> transactionsReportCommodities tr]
<span class=\"kw\">where</span>
transactionsReportCommodities (_,items) <span class=\"fu\">=</span>
nub <span class=\"fu\">$</span> <span class=\"fu\">sort</span> <span class=\"fu\">$</span> <span class=\"fu\">map</span> acommodity <span class=\"fu\">$</span> <span class=\"fu\">concatMap</span> (amounts <span class=\"fu\">.</span> triAmount) items
<span class=\"co\">-- Remove transaction report items and item amount (and running</span>
<span class=\"co\">-- balance amount) components that don't involve the specified</span>
<span class=\"co\">-- commodity. Other item fields such as the transaction are left unchanged.</span>
<span class=\"ot\">filterTransactionsReportByCommodity ::</span> <span class=\"dt\">Commodity</span> <span class=\"ot\">-></span> <span class=\"dt\">TransactionsReport</span> <span class=\"ot\">-></span> <span class=\"dt\">TransactionsReport</span>
filterTransactionsReportByCommodity c (label,items) <span class=\"fu\">=</span>
(label, fixTransactionsReportItemBalances <span class=\"fu\">$</span> <span class=\"fu\">concat</span> [filterTransactionsReportItemByCommodity c i <span class=\"fu\">|</span> i <span class=\"ot\"><-</span> items])
<span class=\"kw\">where</span>
filterTransactionsReportItemByCommodity c (t,t2,s,o,a,bal)
<span class=\"fu\">|</span> c <span class=\"ot\">`elem`</span> cs <span class=\"fu\">=</span> [item']
<span class=\"fu\">|</span> <span class=\"fu\">otherwise</span>   <span class=\"fu\">=</span> []
<span class=\"kw\">where</span>
cs <span class=\"fu\">=</span> <span class=\"fu\">map</span> acommodity as
item' <span class=\"fu\">=</span> (t,t2,s,o,a',bal)
a' <span class=\"fu\">=</span> filterMixedAmountByCommodity c a
fixTransactionsReportItemBalances [] <span class=\"fu\">=</span> []
fixTransactionsReportItemBalances [i] <span class=\"fu\">=</span> [i]
fixTransactionsReportItemBalances items <span class=\"fu\">=</span> <span class=\"fu\">reverse</span> <span class=\"fu\">$</span> i<span class=\"fu\">:</span>(go startbal is)
<span class=\"kw\">where</span>
i<span class=\"fu\">:</span>is <span class=\"fu\">=</span> <span class=\"fu\">reverse</span> items
startbal <span class=\"fu\">=</span> filterMixedAmountByCommodity c <span class=\"fu\">$</span> triBalance i
go _ [] <span class=\"fu\">=</span> []
go bal ((t,t2,s,o,amt,_)<span class=\"fu\">:</span>is) <span class=\"fu\">=</span> (t,t2,s,o,amt,bal')<span class=\"fu\">:</span>go bal' is
<span class=\"kw\">where</span> bal' <span class=\"fu\">=</span> bal <span class=\"fu\">+</span> amt
<span class=\"co\">-- | Filter out all but the specified commodity from this amount.</span>
<span class=\"ot\">filterMixedAmountByCommodity ::</span> <span class=\"dt\">Commodity</span> <span class=\"ot\">-></span> <span class=\"dt\">MixedAmount</span> <span class=\"ot\">-></span> <span class=\"dt\">MixedAmount</span>
filterMixedAmountByCommodity c (<span class=\"dt\">Mixed</span> as) <span class=\"fu\">=</span> <span class=\"dt\">Mixed</span> <span class=\"fu\">$</span> <span class=\"fu\">filter</span> ((<span class=\"fu\">==</span>c)<span class=\"fu\">.</span> acommodity) as</code></pre>
<p>so that we can render one line for each commodity:</p>
<pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><span class=\"ot\">registerChartHtml ::</span> [[<span class=\"dt\">TransactionsReportItem</span>]] <span class=\"ot\">-></span> <span class=\"dt\">HtmlUrl</span> <span class=\"dt\">AppRoute</span>
registerChartHtml itemss <span class=\"fu\">=</span>
<span class=\"fu\">...</span>
\\<span class=\"fu\">$.</span>plot(chartdiv,
[
<span class=\"fu\">$</span>forall items <span class=\"ot\"><-</span> itemss
[
<span class=\"fu\">$</span>forall i <span class=\"ot\"><-</span> <span class=\"fu\">reverse</span> items
[<span class=\"fu\">#</span>{dayToJsTimestamp <span class=\"fu\">$</span> triDate i}, <span class=\"fu\">#</span>{triSimpleBalance i}],
[]
],
[]
],
{
xaxis<span class=\"fu\">:</span> {
mode<span class=\"fu\">:</span> <span class=\"st\">\"time\"</span>,
timeformat<span class=\"fu\">:</span> <span class=\"st\">\"%y/%m/%d\"</span>
}
}
);
<span class=\"fu\">...</span></code></pre>" nil nil "0fea40d5913d1eed57abf648872dae4d") (32 (20928 8813 659255) "http://praisecurseandrecurse.blogspot.com/2013/06/objective-c-day-2.html" "Paul Potts: Objective-C, Day 2" "noreply@blogger.com (Paul Potts)" "Tue, 04 Jun 2013 02:57:00 +0000" "<p>(Warning: non-FP content)</p> <p>So today I'm working on chapter 3 in <i>iOS Programming</i>. This is about memory management. I have vague memories of manual reference-counting using retain and release in earlier experiments with Objective-C, but this book teaches ARM (Automatic Reference Counting). You enable ARM when you configure an XCode project of iOS.</p> <p>The idea behind object references (well, pointers in iOS) and trees of objects and their owners is not new to me. And here they they still do not clarify whether a statement like <b>items = nil</b> actually invokes runtime behavior to destroy objects. I believe it does not. When I override a <b>dealloc</b> method to log, I see that the <b>dealloc</b> methods are called when the curly brace at the end of @autoreleasepool is reached. This makes sense, as in C it is the point where variables go out of scope. So reference-counting bookkeeping must be invoked then. It does not seem to be possible to step in with the debugger at this point to view what is happening, though -- Apple's Objective-C runtime is proprietary software.</p> <p>We next get into weak references. There's a <b>__weak</b> specifier that can appear as part of an object pointer declaration, and <i>iOS Programming</i> says that \"an interesting property of weak references is that they know when the object they reference is destroyed... the [parent object] automatically sets its [child object] instance variable to <b>nil</b>.\" I'm going to have to read more about that. I really wish this book were more precise in its language. There's another specifier, <b>__unsafe_unretained</b>, which is not set -- and so a pointer to a destroyed object could still be dereferenced. I suppose I should just be happy that this works and use it, but I'm the type to want to know what is going on at the register level. Apparently ARC (the \"automatic\" in reference-counting) is all due to some amazing work done in clang, where the static analysis actually figures out all the possible points of object creation and deletion and can wrap up your reference-counting for you. That seems like a great development -- because I've never quite liked how garbage collectors (at least, those without hardware support), no matter how efficient they are, had to actually be implemented, looking at dumb machine pointers. It seems to me that there could be room in purely-GC'ed languages for this kind of static analysis. But I haven't thought very hard about that yet.</p> <p><i>Properties</i> seem to be a shorthand, asking the compiler to provide getters and setters. There's a great example as to how much code this can eliminate. There's a strange wart in that we are asked to specify (nonatomic) in every property, because that is not the default setting. Presumably this is to support multiple threads accessing the object. Again, a dark corner to look into.</p> <p>For a little refresher, I took a break by reading the first few chapters of Brad Cox's book. He outlines his vision of a software IC, along the lines of a hardware C, that would support reusability primarily through late binding, limited interfaces, and wrapping up functionality with data so that clients don't have to write the operations on an object's data type. It's an interesting vision.</p> <p>Cox writes of early Objective-C:</p> <blockquote>Objective-C adds precisely one new data type, the object, to those C provides already, and precisely one new operation, the message expression.</blockquote> <p>Cox's book indicates that early versions of Objective-C used an intermediate preprocessor step, between the C macro-preprocessing step and the regular C compiler. If you are my age you might recall that, early on, C++ was treated similarly, with a program called <a href=\"http://en.wikipedia.org/wiki/Cfront\">CFront</a>. This is no longer the case with either Objective-C or C++, although this approach lives on in tools like <a href=\"http://en.wikipedia.org/wiki/Qt_(framework)\">Qt, with its Meta Object Compiler</a>, or moc).</p> <p>Cox describes the pragmatic design of Objective-C:</p> <blockquote>One of Objective-C's key features is that it is always possible to bypass the object-oriented machinery to access an object's private information directly. This is one of a hybrid language's greatest theoretical weaknesses and one of its greatest pragmatic strengths. Low-level code is often best developed in a conventional manner, exploiting static binding to obtain high machine efficiency and strong type checking. Conversely, user-level code is often best written as objects. It is important that these levels interface smoothly and efficiently.</blockquote> <p>There is an interesting passage about object identifiers. In a slight muddling of his earlier statement he writes that \"objects are identified by a new Objective-C data type called an id, or object identifier.\" In practice, though, this isn't really a new data type <i>per se</i>. The address (a pointer to) an object is this identifier. The veneer over C is so thin that, he writes, it would have been perfectly feasible to implement the dynamic message sends using straightforward C language calls like </p><pre>reply = _msg_(aReceiver, \"aMessage\", argument1, ...)</pre> (I assume he'd use C's <a href=\"http://en.wikipedia.org/wiki/Varargs.h#.3Cvarargs.h.3E\">variable-length argument list</a> mechanism here), but for efficiency he wanted to avoid string comparison in the dispatch mechanism. Cox was quite aware of the reaction that messages like [anObject do:arg1 with:arg2] would inspire in C programmers, writing \"the convention seems strange to those accustomed to conventional function call syntax, and frankly, I find it a mixed blessing.\"<p></p> <p>In this formulation, Objective-C classes were still objects, and class methods were called \"factory methods\" (but I'm peeking ahead a number of pages, so there might be some differences from their current incarnation), as distinct from instance methods. Cox writes \"...the programmer conceives the initial object... the loader gives it life by installing it in memory... this is done once for each class in the system. These primal objects are called factory objects... every factory's name is published in a global variable.\"</p> <p>Cox is a very thoughtful writer and he presents a minimalist view of what an object-oriented language requires in order to provide the most basic advantage of OOP. He writes:</p> <blockquote>One last time: the only substantive difference between conventional programming and object-oriented programming is the selection mechanism. This is not to minimize its importance, but to demystify what is basically a very simple notion. Its significance is that it moves a single responsibility across the boundary between the consumer of a service and the supplier of that service. In conventional programming, the consumer is responsible for choosing functions that operate properly on the data managed by that service. The selection mechanism moves that single responsibility off the consumer and onto the supplier. In this small change lies all the power of the technique.</blockquote> <p>That really caused me to, as they say, nearly drop my monocle. Could this really be where most of the advantage, such as it is, imperfectly realized, understood, and applied, of OOP comes from?</p> <p>The mainstream business world got C++ instead, a mash-up of C and <a href=\"http://en.wikipedia.org/wiki/Simula\">Simula</a>, and then Java instead, <a href=\"http://www.infoworld.com/d/developer-world/java-becoming-new-cobol-204\">the Cobol of object-oriented programming languages</a>. I was not pleased. As I consider my career I also consider which implementation languages I should focus my efforts on, for the next decade. After exposure to Haskell it's hard to believe that, ultimately, functions -- without explicit state -- won't prove to be a cleaner reusable element than classes, whatever kind of binding they use. And don't get me wrong -- I like classes. I'm pretty certain that I'll still be writing C code, at least occasionally, in ten years. I'd prefer to be writing less C++. But what I'd really like is to move on -- to pick a \"<a href=\"http://skillsmatter.com/podcast/agile-testing/bobs-last-language\">last programming language</a>.\" Objective-C isn't that, for me -- it's too imperative, and can't truly be made safe, just <i>safer</i>. I'm enjoying it in this context, but would Objective-C even be an viable option outside of the Apple ecosystem? It doesn't seem to have gained much adoption. The state of GnuStep doesn't seem terribly robust. And so my career-long quest for a Better Way continues, while at the same time trying to gain facility with all the Good Ways along the way.</p>" nil nil "a42437793f9dc3d44ebd00e3aa6efe12") (31 (20928 8813 657871) "http://lukepalmer.wordpress.com/2013/04/01/the-plan/" "Luke Palmer: The Plan" nil "Mon, 03 Jun 2013 20:49:26 +0000" "<p>Last September, I decided that it was time to get a programming job again.  After two months of trying to find paid work (of any kind, $10 would have been great!) as a composer, I realized that it’s really hard.  There are a lot of people willing to work for free, and without much of a scoring portfolio (as opposed to the “pure music” I do) I have no way to distinguish myself to the studios that have a budget.  Also, a lot of games want orchestral scores, and I don’t have the hardware and software I need to make convincing-sounding synthetic orchestral scores.  Also, I’m sure once I get the necessary hardware and software, I will need time to practice with it.  In short, I needed money and time.  I am extremely fortunate to have, in my free-flowing way, stumbled onto a skill that is valued by the economy, and so I decided it was once again time to utilize that skill to achieve my other goals.  I planned to live reasonably cheaply, save up money so that I can buy equipment and support myself for enough time to build up a portfolio by doing free projects.</p>
<p>Now I have been programming for Clozure for almost six months.  As far as jobs go, it’s great.  I get to work in my favorite language, Haskell, and they give me enough freedom to experiment with designs and come up with solutions that not only work, but that I would even consider <i>good</i>.  My fear of programming jobs was based on having jobs where I constantly have to compromise my values, either by working in crappy languages or on startup-style timelines where there is no time to lose.  With this job, I feel reunited with my love of software, and my inspirations for developer support tools have been once again ignited.</p>
<p>And so I have amended the plan: after I have saved enough money to support myself for several years, I will not only attempt to bootstrap a career composing, but dedicate my current work week to making a reality the software ideas which have been floating around in my head for half a decade.  This prospect <i>really</i> excites me — the reason I have not been able to make my ideas is mostly the time pressure: there’s was always something else I <i>should</i> be doing, and so I always felt guilty working on my pet projects.  I wonder, what am I capable of if my pet projects are the main thing?</p>
<p>I want to revive <a href=\"https://github.com/luqui/CodeCatalog\">CodeCatalog</a>.  Max and I lost steam on that project for a number of reasons.</p>
<ol>
<li>Due to family pressure, I returned to school.</li>
<li>I fell in love with a girl and got my heart all broken.  That can be kind of a downer.</li>
<li>The priorities of the project compromised my vision.  We were attempting to use modern wisdom to make the project successful: first impressions and intuitive usability came first.  Our focus was on making it pretty and satisfying to use (which took a long time since neither of us were experienced web front-end developers), and that required me to strip off the most interesting parts of the project because noobs wouldn’t immediately understand it.</li>
</ol>
<p>So I want to re-orient (3) to make it more satisfying for me.  I want to allow myself to make the large strides that I envisage rather than baby-stepping toward success — to encourage myself to use my own talents in design and abstraction rather than trying to be a front-end person, to emphasize the exciting parts (what Audrey Tang calles <tt>-Ofun</tt>).  By funding myself, I will not feel the guilt that comes with working on a project at the same time as (1).  I can do no more than hope that something like (2) doesn’t happen.  (I have a wonderful, stable and supportive relationship right now, so if that continues, that’d cover it :-)</p>
<p>I have many ideas; the reason I want to return to CodeCatalog in particular is mainly because I have identified most of my ideas as aspects of this project.  My specific fancies change frequently (usually to things I have thought about before but never implemented), and so by focusing on this project in a researchy rather than producty way, I can entertain them while still working toward a larger goal and eventually benefitting the community.  </p>
<p>Here is a summary of some ideas that fit in the CodeCatalog umbrella (just because I’m excited and want to remember):</p>
<ul>
<li><a href=\"http://lukepalmer.wordpress.com/2008/11/12/sketch-of-udon-version-controlpackaging-system/\">Inter-project version control</a> — I have always been frustrated by the inability of git and hg to merge two projects while still allowing interoperation with where they came from.  The “project” quantum seems arbitrary, and I want to globalize it.</li>
<li>Package adapters — evolving the interface of a package without breaking users of the old interface by rewriting the old package in terms of the new one.  There is a great deal that can be done automatically in this area with sufficient knowledge about the meaning of changes. I talked with Michael Sloan about this some, and some of the resulting ideas are contained in <a href=\"http://www.mgsloan.com/wordpress/?p=219\">this writeup</a>.</li>
<li>Informal checked documentation — documenting the assumptions of code in a machine-readable semi-formal language, to get the computer to pair-program with you (e.g. you write a division <tt>x/y</tt> and you have no <tt>y /= 0</tt> assumption in scope, you’d get a “documentation obligation” to explain in english why <tt>y</tt> can’t be 0).</li>
<li>Structural editing — coding by transforming valid syntax trees.  Yes it’d be cool, but the main reason it’s compelling to me is in its synergy with other features.  Once you have the notion of focusing on expressions, holes with contextual information (a la Agda), semi-automatic creation of package and data-type adapters, smarter version control (e.g. a change might rename <i>all</i> references to an identifier, even the ones that weren’t there when the change was made) all come as natural extensions to the idea.</li>
</ul>
<p>I think the challenge for me will be to focus on one of these for long enough to make it cool before getting distracted by another.  My plan for that is to set short-term goals here on my blog and use it to keep myself in check.  I am considering involving other people in my project as a way to keep myself focused (i.e. maybe I can make a little mini-kickstarter in which my devotees can pledge small amounts in exchange for me completing a specific goal on time).</p>
<p>This is all two years away or more, which feels like a long time, but in the grand scheme is not that long in exchange for what I see as the potential of this endeavor.  I’m just excited and couldn’t help but to think about it and get pumped up.  Thanks for reading!</p>
<p>Oh, despite the date, this is totally not an April Fools joke (as far as I know ;-).</p>
<br />  <img src=\"http://stats.wordpress.com/b.gif?host=lukepalmer.wordpress.com&blog=5292379&post=2154&subd=lukepalmer&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "97cf98c3159da6cfc492fd16eadf31a7") (30 (20928 8813 656706) "http://izbicki.me/blog/hlearn-cross-validates-400x-faster-than-weka?utm_source=rss&utm_medium=rss&utm_campaign=hlearn-cross-validates-400x-faster-than-weka" "Mike Izbicki: HLearn cross-validates >400x faster than Weka" nil "Mon, 03 Jun 2013 15:33:16 +0000" "<p><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/weka-lambda-haskell-300x150.png\" alt=\"weka-lambda-haskell\" height=\"120\" class=\"alignright  wp-image-2478\" width=\"240\" /><a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> is one of the most popular tools for data analysis.  But Weka takes <strong>70 minutes</strong> to perform leave-one-out cross-validate using a simple <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\">naive bayes classifier</a> on the <a href=\"http://archive.ics.uci.edu/ml/datasets/Census-Income+(KDD)\">census income</a> data set, whereas Haskell’s <a href=\"https://github.com/mikeizbicki/HLearn\">HLearn</a> library only takes <strong>9 seconds</strong>.  Weka is 465x slower!</p>
<p><strong>Code and instructions for reproducing these experiments are <a href=\"https://github.com/mikeizbicki/HLearn/tree/master/HLearn-classification/src/examples/weka-cv#readme\">available on github</a>.</strong></p>
<p><strong><span id=\"more-2468\"></span></strong></p>
<p>Why is HLearn so much faster?</p>
<p>Well, it turns out that the bayesian classifier has the algebraic structure of a <a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a>, a <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">group</a>, and a <a href=\"https://en.wikipedia.org/wiki/Vector_space\">vector space</a>.  HLearn uses a new cross-validation algorithm that can exploit these algebraic structures.  The standard algorithm runs in time <span id=\"tex_9745\"></span>, where <span id=\"tex_8353\"></span> is the number of “folds” and <span id=\"tex_3668\"></span> is the number of data points.  The algebraic algorithms, however, run in time <span id=\"tex_5274\"></span>.  In other words, it doesn’t matter how many folds we do, the run time is constant!  And not only are we faster, but we get the <em>exact same answer</em>.  Algebraic cross-validation is not an approximation, it’s just fast.</p>
<p>Here’s some run times for k-fold cross-validation on the census income data set.  Notice that HLearn’s run time is constant as we add more folds.<i><br />
</i></p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/k-fold-cross-validation-weka1.png\" alt=\"k-fold-cross-validation-weka\" height=\"336\" class=\"aligncenter size-full wp-image-2479\" width=\"555\" /></p>
<p>And when we set k=n, we have leave-one-out cross-validation.  Notice that Weka’s cross-validation has quadratic run time, whereas HLearn has linear run time.</p>
<p style=\"text-align: center;\"><img src=\"http://izbicki.me/blog/wp-content/uploads/2013/05/leave-one-out-fast-cross-validation-weka1.png\" alt=\"leave-one-out-fast-cross-validation-weka\" height=\"333\" class=\"aligncenter size-full wp-image-2480\" width=\"553\" /></p>
<p>HLearn certainly isn’t going to replace Weka any time soon, but it’s got a number of cool tricks like this going on inside.  If you want to read more, you should check out these two recent papers:</p>
<ul>
<li>(ICML13) <a href=\"http://izbicki.me/public/papers/icml2013-algebraic-classifiers.pdf\">Algebraic Classifiers: a generic approach to fast cross-validation, online training, and parallel training</a></li>
</ul>
<ul>
<li><span style=\"line-height: 12px;\" class=\"Apple-style-span\">(TFP13) <a href=\"http://izbicki.me/public/papers/tfp2013-hlearn-a-machine-learning-library-for-haskell.pdf\">HLearn: a machine learning library for Haskell</a></span></li>
</ul>
<p>I’ll continue to write more about these tricks in future blog posts.</p>
<p>Subscribe to the <a href=\"http://izbicki.me/blog/feed\">RSS feed</a> to stay tuned.</p>
<img src=\"http://izbicki.me/blog/?feed-stats-post-id=2468\" style=\"display: none;\" height=\"1\" width=\"1\" />" nil nil "bb8ca14d64a7e950977e724b2359e7b2") (29 (20928 8813 655955) "http://joyful.com/blog/2013-06-02-earth-nap.html" "Simon Michael: Earth Nap" nil "Mon, 03 Jun 2013 06:45:00 +0000" "<div style=\"font-style: italic;\">June  3, 2013</div>
<h2>Earth Nap</h2>
<p>
</p><p>Let’s take a break from all this <a href=\"http://joyful.com/2013-06-01-hledger-0.21-released.html\">hledger stuff</a>. I’ve been programming for about 30 years, and I’ve acquired - often the hard way - some tricks, tools and habits helpful for balance and productivity as a working programmer. We are all different, but I bet some of you could also use these. Here’s one - I’ll call it <strong>Earth Nap</strong>. It’s very simple:</p>
<ol style=\"\">
<li><p>Find a patch of earth where you can lie down without being disturbed.</p></li>
<li><p>Lie down. If possible, cover your eyes or head.</p></li>
<li><p>Rest with eyes closed, doze, or nap for 5-30 minutes.</p></li>
<li><p>Reactivate gently. Stretch, rub your face/hands/feet, roll up, maybe sing, shake out the cobwebs or walk a little.</p></li>
</ol>
<p>A good time is after lunch, or early/mid/late afternoon. Or any time you feel fatigued, over-pressured, or burnt out. There is always time for a 5m break.</p>
<p>Direct contact between your skin and the earth is ideal. Lately I’ve done it on the beach and under a tree in a nearby quiet park - perfect. At my last client gig, I was onsite all day and there was no park and no quiet.. but there was an unused stair leading up to a small concrete landing where no one went. A few minutes in my secret lair made a big difference!</p>
<p>If you’re likely to sleep longer than 30m, set a gentle alarm (a deeper sleep rhythm kicks in after about 45 minutes which would leave you feeling groggy). Or, just watch/trust your body/mind’s natural napping cycle. It’s not necessary to fall asleep. You may notice yourself sink into a dozing/free association/dreaming state, then return to wakefulness.</p>
<p>Each time you do this, observe the effects. You might notice:</p>
<ul>
<li>more calmness/cheerfulness</li>
<li>less mental noise</li>
<li>better concentration</li>
<li>better coping skills and emotional resilience</li>
<li>slower, more powerful energy</li>
<li>less addiction/aversion to pleasant/unpleasant tasks</li>
<li>less vulnerability to “rabbit holes” (mentally enticing, demanding tasks which fan out endlessly and lead nowhere)</li>
<li>new ideas and solutions appearing effortlessly</li>
<li>more energy left over at end of day</li>
</ul>" nil nil "6fd6dfd6b0983d7578a559644facaded") (28 (20928 8813 655134) "http://blog.moertel.com/posts/2013-06-03-recursion-to-iteration-3.html" "Tom Moertel: Tricks of the trade: Recursion to Iteration, Part 3: Recursive Data Structures" nil "Mon, 03 Jun 2013 00:00:00 +0000" "<div class=\"info\">Posted on June  3, 2013</div>
<div class=\"tags\">Tags: <a href=\"http://blog.moertel.com/tags/programming.html\">programming</a>, <a href=\"http://blog.moertel.com/tags/recursion.html\">recursion</a>, <a href=\"http://blog.moertel.com/tags/iteration.html\">iteration</a>, <a href=\"http://blog.moertel.com/tags/python.html\">python</a>, <a href=\"http://blog.moertel.com/tags/recursion-to-iteration series.html\">recursion-to-iteration series</a>, <a href=\"http://blog.moertel.com/tags/tail calls.html\">tail calls</a>, <a href=\"http://blog.moertel.com/tags/data structures.html\">data structures</a></div>
<p>This is the third article in <a href=\"http://blog.moertel.com/tags/recursion-to-iteration%20series.html\">a series on converting recursive algorithms into iterative algorithms</a>. If any of what follows seems confusing, you may want to read the earlier articles first.</p>
<p>This is an extra article that I hadn’t planned. I’m writing it because in a comment on the previous article a reader asked me to show a less mathematical example and suggested tree traversal. So that’s the subject of this article: We’ll take a binary tree and flatten it into a list, first recursively, then iteratively.</p>
<h3 id=\"the-challenge\">The challenge</h3>
<p>First, let’s define a binary tree to be either empty or given by a node having three parts: (1) a value, (2) a left subtree, and (3) a right subtree, where both of the subtrees are themselves binary trees. In Haskell, we might define it like so:</p>
<pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><span class=\"kw\">data</span> <span class=\"dt\">BinaryTree</span> a <span class=\"fu\">=</span> <span class=\"dt\">Empty</span> <span class=\"fu\">|</span> <span class=\"dt\">Node</span> a (<span class=\"dt\">BinaryTree</span> a) (<span class=\"dt\">BinaryTree</span> a)</code></pre>
<p>In Python, which we’ll use for the rest of this article, we’ll say that <code>None</code> represents an empty tree and that the following class represents a node:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"ch\">import</span> collections
Node = collections.namedtuple(<span class=\"st\">'Node'</span>, <span class=\"st\">'val left right'</span>)
<span class=\"co\"># some sample trees having various node counts</span>
tree0 = <span class=\"ot\">None</span>  <span class=\"co\"># empty tree</span>
tree1 = Node(<span class=\"dv\">5</span>, <span class=\"ot\">None</span>, <span class=\"ot\">None</span>)
tree2 = Node(<span class=\"dv\">7</span>, tree1, <span class=\"ot\">None</span>)
tree3 = Node(<span class=\"dv\">7</span>, tree1, Node(<span class=\"dv\">9</span>, <span class=\"ot\">None</span>, <span class=\"ot\">None</span>))
tree4 = Node(<span class=\"dv\">2</span>, <span class=\"ot\">None</span>, tree3)
tree5 = Node(<span class=\"dv\">2</span>, Node(<span class=\"dv\">1</span>, <span class=\"ot\">None</span>, <span class=\"ot\">None</span>), tree3)</code></pre>
<p>Let us now define a function to flatten a tree using an <a href=\"http://en.wikipedia.org/wiki/Tree_traversal#In-order\">in-order traversal</a>. The recursive definition is absurdly simple, the data type having only two cases to consider:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten(bst):
<span class=\"co\"># empty case</span>
<span class=\"kw\">if</span> bst is <span class=\"ot\">None</span>:
<span class=\"kw\">return</span> []
<span class=\"co\"># node case</span>
<span class=\"kw\">return</span> flatten(bst.left) + [bst.val] + flatten(bst.right)</code></pre>
<p>A few tests to check that it does what we expect:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> check_flattener(f):
<span class=\"kw\">assert</span> f(tree0) == []
<span class=\"kw\">assert</span> f(tree1) == [<span class=\"dv\">5</span>]
<span class=\"kw\">assert</span> f(tree2) == [<span class=\"dv\">5</span>, <span class=\"dv\">7</span>]
<span class=\"kw\">assert</span> f(tree3) == [<span class=\"dv\">5</span>, <span class=\"dv\">7</span>, <span class=\"dv\">9</span>]
<span class=\"kw\">assert</span> f(tree4) == [<span class=\"dv\">2</span>, <span class=\"dv\">5</span>, <span class=\"dv\">7</span>, <span class=\"dv\">9</span>]
<span class=\"kw\">assert</span> f(tree5) == [<span class=\"dv\">1</span>, <span class=\"dv\">2</span>, <span class=\"dv\">5</span>, <span class=\"dv\">7</span>, <span class=\"dv\">9</span>]
<span class=\"kw\">print</span> <span class=\"st\">'ok'</span>
check_flattener(flatten)  <span class=\"co\"># ok</span></code></pre>
<p>Our challenge for today is to convert <code>flatten</code> into an iterative version. Other than a new trick – partial evaluation – the transformation is straightforward, so I’ll move quickly.</p>
<p>Let’s do this!</p>
<h3 id=\"eliminating-the-first-recursive-call\">Eliminating the first recursive call</h3>
<p>First, let’s separate the base case from the incremental work:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(bst):
<span class=\"kw\">return</span> flatten(bst.left) + [bst.val] + flatten(bst.right)
<span class=\"kw\">def</span> flatten(bst):
<span class=\"kw\">if</span> bst is <span class=\"ot\">None</span>:
<span class=\"kw\">return</span> []
<span class=\"kw\">return</span> step(bst)</code></pre>
<p>And let’s break the incremental work into smaller pieces to see what’s going on.</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(bst):
left = flatten(bst.left)
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> left
<span class=\"kw\">def</span> flatten(bst):
<span class=\"kw\">if</span> bst is <span class=\"ot\">None</span>:
<span class=\"kw\">return</span> []
<span class=\"kw\">return</span> step(bst)</code></pre>
<p>Let’s try to get rid of the first recursive call by assuming that somebody has passed us its result via a secret argument <code>left</code>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(bst, left=<span class=\"ot\">None</span>):
<span class=\"kw\">if</span> left is <span class=\"ot\">None</span>:
left = flatten(bst.left)
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> left
<span class=\"kw\">def</span> flatten(bst):
<span class=\"kw\">if</span> bst is <span class=\"ot\">None</span>:
<span class=\"kw\">return</span> []
<span class=\"kw\">return</span> step(bst)</code></pre>
<p>And now we’ll make <code>step</code> return values that parallel its input arguments:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(bst, left=<span class=\"ot\">None</span>):
<span class=\"kw\">if</span> left is <span class=\"ot\">None</span>:
left = flatten(bst.left)
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> bst, left  <span class=\"co\"># <-- add bst</span>
<span class=\"kw\">def</span> flatten(bst):
<span class=\"kw\">if</span> bst is <span class=\"ot\">None</span>:
<span class=\"kw\">return</span> []
<span class=\"kw\">return</span> step(bst)[-<span class=\"dv\">1</span>]  <span class=\"co\"># <-- note [-1]</span></code></pre>
<p>In the first recursive call, the transformation applied to <code>bst</code> is <code>.left</code>, so we want to apply the opposite transformation to <code>bst</code> in the returned values. And what’s the opposite of descending to a node’s left subtree? It’s ascending to the node’s parent. So we want something like this:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"co\"># this code does not work!</span>
<span class=\"kw\">def</span> step(bst, left=<span class=\"ot\">None</span>):
<span class=\"kw\">if</span> left is <span class=\"ot\">None</span>:
left = flatten(bst.left)
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> get_parent(bst), left  <span class=\"co\"># <-- need get_parent</span></code></pre>
<p>But we’re stuck. We can’t define <code>get_parent</code> because our tree data structure doesn’t keep track of parents, only children.</p>
<p>New plan: Maybe we can assume that someone has <em>passed us</em> the node’s parent and go from there?</p>
<p>But this plan hits the same brick wall: If we add a new argument to accept the parent, we must for parallelism add a new return value to emit the transformed parent, which is the parent of the parent. But we can’t compute the parent of the parent because, as before, we have no way of implementing <code>get_parent</code>.</p>
<p>So we do what mathematicians do when their assumptions hit a brick wall: we strengthen our assumption! Now we assume that someone has passed us <em>all of the parents</em>, right up to the tree’s root. And that assumption gives us what we need:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(bst, parents, left=<span class=\"ot\">None</span>):
<span class=\"kw\">if</span> left is <span class=\"ot\">None</span>:
left = flatten(bst.left)
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> parents[-<span class=\"dv\">1</span>], parents[:-<span class=\"dv\">1</span>], left</code></pre>
<p>Note that we’re using the Python stack convention for <code>parents</code>; thus the immediate parent of <code>bst</code> is given by the final element <code>parents[-1]</code>.</p>
<p>As a simplification, we can eliminate the <code>bst</code> argument by considering it the final parent pushed onto the stack:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left=<span class=\"ot\">None</span>):
bst = parents.pop()  <span class=\"co\"># <-- bst = top of parents stack</span>
<span class=\"kw\">if</span> left is <span class=\"ot\">None</span>:
left = flatten(bst.left)
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> parents, left</code></pre>
<p>Now that <code>step</code> requires the <code>parents</code> stack as an argument, the base function must provide it:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten(bst):
<span class=\"kw\">if</span> bst is <span class=\"ot\">None</span>:
<span class=\"kw\">return</span> []
parents = [bst]
<span class=\"kw\">return</span> step(parents)[-<span class=\"dv\">1</span>]</code></pre>
<p>But we still haven’t eliminated the first recursive call. To do that, we’ll need to pass the <code>step</code> function a value for its <code>left</code> argument, which will cause the recursive call to be skipped.</p>
<p>But we only know what that value should be for one case, the base case, when <code>bst</code> is <code>None</code>; then <code>left</code> must be <code>[]</code>. To get to that case from the tree’s root, where <code>bst</code> is definitely not <code>None</code>, we must iteratively replicate the normal recursive calls on <code>bst.left</code> until we hit the leftmost leaf node. And then, to compute the desired result, we must reverse the trip, iterating the <code>step</code> function until we have returned to the tree’s root, where the <code>parents</code> stack must be empty:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten(bst):
<span class=\"co\"># find initial conditions for secret-feature \"left\"</span>
left = []
parents = []
<span class=\"kw\">while</span> bst is not <span class=\"ot\">None</span>:
parents.append(bst)
bst = bst.left
<span class=\"co\"># iterate to compute the result</span>
<span class=\"kw\">while</span> parents:
parents, left = step(parents, left)
<span class=\"kw\">return</span> left</code></pre>
<p>And just like that, one of the recursive calls has been transformed into iteration. We’re halfway to the finish line!</p>
<h3 id=\"eliminating-the-second-recursive-call\">Eliminating the second recursive call</h3>
<p>But we still have to eliminate that final recursive call to <code>flatten</code>, now sequestered in <code>step</code>. Let’s take a closer look at that function after we make its <code>left</code> argument required since it always gets called with a value now:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
right = flatten(bst.right)
left.extend(right)
<span class=\"kw\">return</span> parents, left</code></pre>
<p>To get rid of the recursive call to <code>flatten</code>, we’re going to use a new trick: partial evaluation. Basically, we’re going to replace the call to <code>flatten</code> with the function body of <code>flatten</code>, after we rename all its variables to prevent conflicts. So let’s make a copy of <code>flatten</code> and suffix all its variables with <code>1</code>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten1(bst1):
left1 = []
parents1 = []
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents1.append(bst1)
bst1 = bst1.left
<span class=\"kw\">while</span> parents1:
parents1, left1 = step(parents1, left1)
<span class=\"kw\">return</span> left1</code></pre>
<p>And then let’s make its arguments and return values explicit:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\">    (bst1, ) = ARGUMENTS
left1 = []
parents1 = []
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents1.append(bst1)
bst1 = bst1.left
<span class=\"kw\">while</span> parents1:
parents1, left1 = step(parents1, left1)
RETURNS = (left1, )</code></pre>
<p>And then we’ll drop this expansion into <code>step</code>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
<span class=\"co\"># -- begin partial evaluation --</span>
(bst1, ) = (bst.right, )
left1 = []
parents1 = []
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents1.append(bst1)
bst1 = bst1.left
<span class=\"kw\">while</span> parents1:
parents1, left1 = step(parents1, left1)
(right, ) = (left1, )
<span class=\"co\"># -- end partial evaluation --</span>
left.extend(right)
<span class=\"kw\">return</span> parents, left</code></pre>
<p>Now we can eliminate code by fusion across the partial-evaluation boundary.</p>
<p>First up: <code>left1</code>. We can now see that this variable accumulates values that, in the end, get appended to <code>left</code> (via the return variable <code>right</code>). But we can just as well append those values to <code>left</code> directly, eliminating <code>left1</code> within the boundary and the call to <code>left.extend(right)</code> without:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
<span class=\"co\"># -- begin partial evaluation --</span>
(bst1, ) = (bst.right, )
<span class=\"co\"># left1 = []  # <-- eliminate and use left instead</span>
parents1 = []
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents1.append(bst1)
bst1 = bst1.left
<span class=\"kw\">while</span> parents1:
parents1, left = step(parents1, left)
<span class=\"co\"># (right, ) = (left, )  # <-- eliminated</span>
<span class=\"co\"># -- end partial evaluation --</span>
<span class=\"co\"># left.extend(right)  # <-- eliminated</span>
<span class=\"kw\">return</span> parents, left</code></pre>
<p>For this next fusion, we’re going to need to recall our base function to get the necessary outside scope:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
<span class=\"co\"># -- begin partial evaluation --</span>
(bst1, ) = (bst.right, )
parents1 = []
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents1.append(bst1)
bst1 = bst1.left
<span class=\"kw\">while</span> parents1:
parents1, left = step(parents1, left)
<span class=\"co\"># -- end partial evaluation --</span>
<span class=\"kw\">return</span> parents, left
<span class=\"kw\">def</span> flatten(bst):
left = []
parents = []
<span class=\"kw\">while</span> bst is not <span class=\"ot\">None</span>:
parents.append(bst)
bst = bst.left
<span class=\"kw\">while</span> parents:
parents, left = step(parents, left)
<span class=\"kw\">return</span> left</code></pre>
<p>When <code>flatten</code> calls <code>step</code> and the code within the partially evaluated region executes, it builds up a stack of nodes <code>parents1</code> and then calls <code>step</code> iteratively to pop values off of that stack and process them. When it’s finished, control returns to <code>step</code> proper, which then returns to its caller, <code>flatten</code>, with the values (<code>parents</code>, <code>left</code>). But look at what <code>flatten</code> then does with <code>parents</code>: it calls <code>step</code> iteratively to pop values off of that stack and process them in exactly the same way.</p>
<p>So we can eliminate the <code>while</code> loop in <code>step</code> – and the recursive call! – by returning not <code>parents</code> but <code>parents + parents1</code>, which will make the <code>while</code> loop in <code>flatten</code> do the exact same work.</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
<span class=\"co\"># -- begin partial evaluation --</span>
(bst1, ) = (bst.right, )
parents1 = []
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents1.append(bst1)
bst1 = bst1.left
<span class=\"co\"># while parents1:                            # <-- eliminated</span>
<span class=\"co\">#     parents1, left = step(parents1, left)  #</span>
<span class=\"co\"># -- end partial evaluation --</span>
<span class=\"kw\">return</span> parents + parents1, left  <span class=\"co\"># parents -> parents + parents1</span></code></pre>
<p>And then we can eliminate <code>parents1</code> completely by taking the values we would have appended to it and appending them directly to <code>parents</code>:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
<span class=\"co\"># -- begin partial evaluation --</span>
(bst1, ) = (bst.right, )
<span class=\"co\"># parents1 = []  # <-- eliminated</span>
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents.append(bst1)  <span class=\"co\"># parents1 -> parents</span>
bst1 = bst1.left
<span class=\"co\"># -- end partial evaluation --</span>
<span class=\"kw\">return</span> parents, left  <span class=\"co\"># parents + parents1 -> parents</span></code></pre>
<p>And now, once we remove our partial-evaluation scaffolding, our <code>step</code> function is looking simple again:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> step(parents, left):
bst = parents.pop()
left.append(bst.val)
bst1 = bst.right
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents.append(bst1)
bst1 = bst1.left
<span class=\"kw\">return</span> parents, left</code></pre>
<p>For the final leg of our journey – simplification – let’s inline the <code>step</code> logic back into the base function:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten(bst):
left = []
parents = []
<span class=\"kw\">while</span> bst is not <span class=\"ot\">None</span>:
parents.append(bst)
bst = bst.left
<span class=\"kw\">while</span> parents:
parents, left = parents, left
bst = parents.pop()
left.append(bst.val)
bst1 = bst.right
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents.append(bst1)
bst1 = bst1.left
parents, left = parents, left
<span class=\"kw\">return</span> left</code></pre>
<p>Let’s eliminate the trivial argument-binding and return-value assignments:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten(bst):
left = []
parents = []
<span class=\"kw\">while</span> bst is not <span class=\"ot\">None</span>:
parents.append(bst)
bst = bst.left
<span class=\"kw\">while</span> parents:
<span class=\"co\"># parents, left = parents, left  # = no-op</span>
bst = parents.pop()
left.append(bst.val)
bst1 = bst.right
<span class=\"kw\">while</span> bst1 is not <span class=\"ot\">None</span>:
parents.append(bst1)
bst1 = bst1.left
<span class=\"co\"># parents, left = parents, left  # = no-op</span>
<span class=\"kw\">return</span> left</code></pre>
<p>And, finally, factor out the duplicated <code>while</code> loop into a local function:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> flatten(bst):
left = []
parents = []
<span class=\"kw\">def</span> descend_left(bst):
<span class=\"kw\">while</span> bst is not <span class=\"ot\">None</span>:
parents.append(bst)
bst = bst.left
descend_left(bst)
<span class=\"kw\">while</span> parents:
bst = parents.pop()
left.append(bst.val)
descend_left(bst.right)
<span class=\"kw\">return</span> left</code></pre>
<p>And that’s it! We now have a tight, efficient, and iterative version of our original function. Further, the code is close to idiomatic.</p>
<p>That’s it for this time. If you have any questions or comments, just hit me at <a href=\"https://twitter.com/tmoertel\">@tmoertel</a> or use the comment form below.</p>
<p>Thanks for reading!</p>" nil nil "83eb257f316b6261382cd7938fdda54f") (27 (20928 8813 651520) "http://feedproxy.google.com/~r/FpComplete/~3/2D5iyiU03QM/haskell-from-c" "FP Complete: Haskell from C: Where are the for Loops?" nil "Sun, 02 Jun 2013 18:00:00 +0000" "<p>This post contains fragments of active Haskell code, best viewed and executed at
<a href=\"https://www.fpcomplete.com/blog/2013/06/haskell-from-c\">https://www.fpcomplete.com/blog/2013/06/haskell-from-c</a>
</p>
<p>If you're coming from a language like C, Haskell can take some getting used to. It's typical for a new language to feel a little different, but in Haskell the differences are more dramatic, and more fundamental. In particular...</p><h2>Where are the <code>for</code> loops?</h2><p>In most imperative languages, <code>for</code> loops are all over the place, and are used for a wide variety of <i>different things</i>. Whether you're squaring every value of an array or finding its sum, you're probably using a <code>for</code> loop.</p><p>In Haskell, control structures are more expressive. Sure, there's a counterpart to C's <code>for</code> (Haskell's <code>forM_</code>). But that's a discussion for another time. Today, we'll see some <code>for</code> loops in C that can be written very differently in Haskell, and why that's a good thing.</p><p>Consider the simple example of computing the norm of a vector. For a vector <b>x</b>∈ℝ<sup>n</sup>, this is just</p>
<math xmlns=\"http://www.w3.org/1998/Math/MathML\">
<mtable style=\"width: 98%; margin-top: 1.0em; margin-right: 1.0em; margin-bottom: 2.0em; margin-left: 2.0em;\" displaystyle=\"true\" class=\"m-equation-square\">
<mtr>
<mtd columnalign=\"left\">
<mrow>
<mo>|</mo>
<mo>|</mo>
</mrow>
<mi mathvariant=\"bold\">x</mi>
<mrow>
<mo>|</mo>
<mo>|</mo>
</mrow>
<mo>=</mo>
<msqrt>
<mrow>
<mstyle displaystyle=\"true\">
<munderover>
<mo>∑</mo>
<mrow>
<mi>i</mi>
<mo>=</mo>
<mn>0</mn>
</mrow>
<mrow>
<mi>n</mi>
<mo>-</mo>
<mn>1</mn>
</mrow>
</munderover>
</mstyle>
<msubsup>
<mi mathvariant=\"bold\">x</mi>
<mi>i</mi>
<mn>2</mn>
</msubsup>
</mrow>
</msqrt>
</mtd>
</mtr>
</mtable>
</math>
<p>Conceptually, there are three stages to this computation:</p><ol><li><b><code>mapSq</code></b>: Square each element</li><li><b><code>sum</code></b>: Compute the sum</li><li><b><code>sqrt</code></b>: Compute the square root</li></ol><p>We can think of the first step as building (at least abstractly) a new array whose <code>i</code>th element is <code>y[i] = x[i] * x[i]</code>. In functional programming, we refer to this as <i>mapping</i> the square function over the array. </p><p>Putting everything in terms of functions, we can write this (in Haskell-like pseudocode) as</p><pre><code>norm(x) = sqrt(sum(mapSq(x))) ,</code></pre><p>To clean up the syntax a bit, we can instead use the notation for function composition and write</p><pre><code>norm(x) = (sqrt ○ sum ○ mapSq)(x) ,</code></pre><p>or just </p><pre><code>norm = sqrt ○ sum ○ mapSq .</code></pre><h2>Computing Norms in C</h2><p>In C, this modular approach leads to something like</p><pre><code>void mapSq(double *x, double *y, int n) {
int i;
for(i=0; i<n; i++) {
y[i] = x[i] * x[i];
}
}
double sum(double *x, int n) {
double result = 0;
int i;
for(i=0; i<n; i++) {
result += x[i];
}
return result;
}
double norm1(double *x, int n) {
double *y = malloc(n * sizeof(double));
mapSq(x, y, n);
theSum = sum(y, n);
free(y);
return sqrt(theSum);
}</code></pre><p>We'd probably never do it this way, for a few reasons:</p><ul><li>For such a simple computation, it's way too verbose.</li><li>It uses two separate <code>for</code> loops, where only one is needed.</li><li>There's an unnecessary <code>malloc</code> that's unlikely to be removed by the compiler.</li></ul><p>If it weren't for these issues, we probably would write code like the above. It has the advantage of being more modular and of faithfully representing the concepts. But the problems are too big to ignore, so we typically make some code transformations in our head, and instead write</p><pre><code>double norm2(double *x, int n) {
double theSum = 0.0;
for (int i = 0; i < n; i++) {
theSum += x[i]*x[i]; }
return sqrt(theSum);
}</code></pre><p>This code is very clear, and performs well, but we've entirely lost modularity. In this case the code is very short, so we don't give the compromise a second thought. But at a larger scale, this kind of manual optimization reduces code reuse and makes components more complex. Code becomes harder to understand, and harder to test for correctness.</p><h2>Computing Norms in Haskell</h2><p>In Haskell, we could write <code>norm</code> as</p><pre><code class=\"active haskell\">import Prelude hiding (sum)
import Data.List (foldl')
-- show
mapSq x = map sq x
where
sq xi = xi * xi
sum x = foldl' (+) 0.0 x
norm x = (sqrt . sum . mapSq) x
main = print (norm [1,2,3,4,5])</code></pre><p>While the C example is in terms of arrays, this Haskell example instead uses <i>lazy linked lists</i>. We'll change this in a bit.</p><p>Let's step through this code. The first function, <code>mapSq</code>, is defined in terms of the <code>map</code> function, and produces a new list by squaring every element of the original list. The squaring function <code>sq</code> can also be written as <code>(\\x -> x*x)</code>, allowing us to write the function as</p><pre><code class=\"haskell\">mapSq x = map (\\x -> x*x) x</code></pre><p>or simply</p><pre><code class=\"haskell\">mapSq = map (\\x -> x*x)</code></pre><p>Next, the <code>sum</code> function is defined in terms of <code>foldl'</code>. Before you worry too much about the name, you should know that a <i>fold</i> is just a function that traverses some data structure, using a given function to update some <i>accumulator</i> as it goes. In the current case, the accumulator is the counterpart of \"<code>theSum</code>\" in the C version. Accumulation is via addition, and starts at 0.0.</p><p>Lists can be folded from either side. In our case, we're using <code>foldl'</code>. The \"<code>l</code>\" in this function name is for \"left\", the side we're starting on, and the \"<code>'</code>\" indicates that this fold is <i>strict</i>. Haskell is lazy by default, but for numeric there's no point in delaying evaluation of the accumulator (and for large lists it can lead to a stack overflow), so in this case we prefer to evaluate it at every step.</p><p>As it turns out, our <code>sum</code> function is common enough that it's included in Haskell's Prelude; we can use it exactly as described with no need to define it.<sup>1</sup> Our <code>norm</code> function is now simple:</p><pre><code class=\"active haskell\">norm = sqrt . sum . map (\\x -> x*x)
main = print (norm [1,2,3,4,5])</code></pre><p>This looks remarkably like the mathematical specification; some have affectionately refered to Haskell as an <i>executable specification language</i>.</p><h2>But what about performance?</h2><p>Let's compare performance with C. In order to measure easily across languages, we'll make the vector much bigger - lets say a billion elements. We'll start with a standard list implementation in Haskell and compare this to an implementation in C using arrays. Then we'll make a couple of minor changes in Haskell that allow us to use unboxed vectors.</p><p>We'll test using an AMD A6-3670 APU running Ubuntu 13.04. For compilation, we'll use GHC 7.6.3 (with <code>-O2</code>) and GCC 4.7.3 (with <code>-O3</code>). </p><h3>Haskell - Lists</h3><p>Our Haskell version is certainly elegant, but using linked lists in this way is not the best approach for performance. For a billion elements, the running time is <b>over 2 minutes</b>. What's going on here?</p><p>Haskell lists are <i>lazy</i> (only those elements required by later calculations are computed) and <i>polymorphic</i> (you can have a list of elements of any type, even if elements of that type don't take up a fixed number of bytes). In order to implement this, a list in Haskell is really a <i>list of pointers to elements</i>. In cases like this, all that pointer chasing adds up.</p><p>We'll soon see an easy way to improve this and get Haskell running really fast.</p><h3>C - Arrays</h3><p>Before we get Haskell zipping along, let's look at how we would do this in C. We'll use the faster version of our norm in C (<code>norm2</code> above). Here's the plan:</p><ol><li><code>malloc</code> an array of a billion elements</li><li>Fill the array so that <code>x[i] = i</code></li><li>Find the norm of the vector</li><li>Free the array and print the result</li></ol><p>We'll use the OS to measure the time of the whole process, and insert some code to measure step (3) alone. So all together we have this:</p><pre><code>#include <time.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#define x_size 1000000000
double norm(double *x, int n) {
double theSum = 0.0;
int i;
for (i=0; i<n; i++) {
theSum += x[i]*x[i];
}
return sqrt(theSum);
}
int main() {
double *x = malloc(x_size * sizeof(double));
int i;
for(i=0; i<x_size; i++) {
x[i] = (double) i;
}
clock_t start = clock();
double result = norm(x, x_size);
clock_t end = clock();
printf(\"%3.2f\\n\", result);
printf(\"%3.2f sec\\n\", (end-start)/(double)CLOCKS_PER_SEC);
free(x);
return 0;
}</code></pre><p>The whole thing takes about <b>7 seconds</b> to run, with the <code>norm</code> function itself taking <b>1.9 seconds</b>.</p><h3>Haskell - Unboxed Vectors</h3><p>To close in on C, let's make some minor changes. Instead of using lists, we'll use  unboxed <i>vector</i>s. The \"unboxed\" qualifier just means that the elements are available directly, without the need to follow a pointer. </p><p>From a data structure standpoint, Haskell's vectors are a lot like C's arrays. There is an important difference, though; many operations on vectors (even boxed ones) are subject to <i>fusion</i>. A <code>map</code> followed by a <code>sum</code> will be represented as a tight loop, but the code can remain modular. Remember the malloc in our original C code? Through fusion, it's eliminated entirely. </p><p>Updating the original code to operate on vectors is straightforward. And To stay entirely outside the realm of lists, we can generate our vector using <code>iterateN</code>, which plays the role of our data-filling loop in C.</p><p>[EDIT: Because School of Haskell compilation does not use <code>-O2</code>, there is no fusion, so we'll need to keep the values a bit smaller. In this case, I'll use an unusually small value for <code>oneBillion</code>, though for benchmarking I still use 10<sup>9</sup>]</p><pre><code class=\"active haskell\">import Data.Vector.Unboxed as V
norm ::  Vector Double -> Double
norm = sqrt . V.sum . V.map (\\x -> x*x)
oneBillion = 100
main = print $ norm $ V.iterateN oneBillion (+1) 0.0 </code></pre><p>This code runs in about <b>2.5 seconds</b>. It's just a bit longer than C's inner loop alone, but much less than the 7 seconds if the malloc is included.</p><p>EDIT: As Pedro Vasconcelos points out, tight numerical loops like this can often benefit from using the LLVM back-end, via <code>-fllvm</code>. This brings the time for the entire Haskell run down to <b>1.9 seconds</b>, the same as the inner loop alone in C!</p><h2>Conclusion</h2><p>Haskell's control structures express that a reduction (a <i>fold</i> in Haskell) is very different than a <i>map</i>.<sup>2</sup> Libraries like <b>vector</b> implement powerful fusion techniques to combine loops and eliminate intermediate data structures. And <i>unboxing</i> elminates excessive pointer chasing required by built-in lists.</p><p>All in all, this lets us write <i>high-level code without sacrificing high performance</i>. The need for any compromise between the two is becoming more rare every day.</p><hr /><p> <sup>1</sup> The Prelude's <code>sum</code> function is not defined in terms of <code>foldl'</code>, but instead relies on GHC's strictness analysis. In GHC 7.6.3 there's a regression, as described in <a href=\"http://hackage.haskell.org/trac/ghc/ticket/7954\">this ticket</a>. Because of this, we stuck with <code>foldl' (+) 0.0</code> in timing our Haskell version using lists.</p><br />
<sup>2</sup>  EDIT: Michael Sloan has pointed out that the difference is not so fundamental, since `map f = foldr ((:) . f) []`. <div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=2D5iyiU03QM:TrJEQ8HeCec:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=yIl2AUoC8zA\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=2D5iyiU03QM:TrJEQ8HeCec:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=2D5iyiU03QM:TrJEQ8HeCec:V_sGLiPBpWU\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=2D5iyiU03QM:TrJEQ8HeCec:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?d=qj6IDK7rITs\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~ff/FpComplete?a=2D5iyiU03QM:TrJEQ8HeCec:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/FpComplete?i=2D5iyiU03QM:TrJEQ8HeCec:gIN9vFwOqvQ\" border=\"0\" /></a>
</div><img src=\"http://feeds.feedburner.com/~r/FpComplete/~4/2D5iyiU03QM\" height=\"1\" width=\"1\" />" nil nil "7e8d098c2661f157bf6baf2946e47bb5") (26 (20928 8813 649361) "http://lpuppet.banquise.net/blog/2013/06/01/hruby-package-released/" "language-puppet: Hruby package released" nil "Sat, 01 Jun 2013 06:42:00 +0000" "<p>I finally released the <a href=\"http://hackage.haskell.org/package/hruby\">hruby</a> package, along with an updated version of the <a href=\"http://hackage.haskell.org/package/language-puppet\">language-puppet</a> package. It is very unfortunate this package will never get proper haddocks on Hackage, as the documentation is quite useful. If someone has a suggestion for getting haddocks without having the ruby1.8 library installed, I am interested. Also the path to the Ruby include files is hardcoded, meaning it might require manual tweaking to get it right.</p>
<p>Both libraries now have build flags :</p>
<ul>
<li>Hruby has a flag for ruby1.9. This flag is mostly cosmetic as I didn’t even test it, and just copied the files for ruby1.8.</li>
<li>Language-puppet now has a <code>-fhruby</code> option, to build with this library.</li>
</ul>
<p>The immediate result is a two-fold speed increase for single runs of <code>puppetresource</code>, and a six-time speed-up for scripts computing several catalogs. The
reason is that the parser is not too fast, but its results get cached. Also, the language-puppet daemon infrastructure still let you define the number of
threads that should be spawned to compute templates. <em>This should be set to 1</em>. The ruby interpreter cannot be used in a thread-safe way.</p>
<p>There are still several issues to address. The first is related to the multiple variable assignment problem. In Puppet all variables are immutable, and can’t be
reassigned. Well, <em>except</em> when overwriting variables belonging to an inherited class. I wish they never introduced inheritance, as it introduces all kind of
special rules, and seems generally fragile. Moreover, given how I (have not) implemented scopes, it is not trivial to have a robust way to check if the overwrite is valid
or not.</p>
<p>The second most important issue is the fact that the dependency system isn’t working as it should be. I still get dependency loops in Puppet that are not
catched by language-puppet. This is a show-stopper, and must be fixed soon. It is however a big challenge.</p>
<p>Finally, as language-puppet is Linux only for now, I would like to start using the inotify feature. The current caching mechanism works by issuing <code>stat</code> system
calls on all files that might have changed. Inotify would greatly reduce the number of system calls, which is always a good thing. I am not sure this would lead
to a big speed increase however.</p>" nil nil "0d773225ab6a6cccb8cf1b68c3146e3e") (25 (20928 8813 648784) "http://kenta.blogspot.com/2012/05/spovtkwt-equiangular-pentagon.html" "Ken T Takusagawa: [spovtkwt] Equiangular pentagon" "noreply@blogger.com (Ken)" "Fri, 31 May 2013 17:56:36 +0000" "<p>Finding not many good pictures of a pentagon with equal angles but unequal sides, I drew one.  For reference, inside it is a regular pentagon; corresponding sides are parallel.</p><p><img src=\"http://mit.edu/kenta/www/three/pentagon-equiangular/spovtkwt/equiangular-pentagon.png\" alt=\"Equiangular Pentagon\" height=\"572\" width=\"699\" /></p><p><a href=\"http://mit.edu/kenta/www/three/pentagon-equiangular/spovtkwt\">Haskell source code is here</a>.</p><p>And in Scalable Vector Graphics (SVG) format:<br />
</p><div style=\"background: white;\"><object data=\"http://mit.edu/kenta/www/three/pentagon-equiangular/spovtkwt/pentagon.svg\" height=\"473\" type=\"image/svg+xml\" width=\"600\"></object></div><a href=\"http://mit.edu/kenta/www/three/pentagon-equiangular/spovtkwt/pentagon.svg\">Equiangular Pentagon in SVG</a><br />
<p></p><p>Someday, an amoeba-like animation which explores possible shapes of an equiangular pentagon of a constant area.</p>" nil nil "868451a221bbf6c7860dac11996daeef") (24 (20928 8813 648338) "http://wadler.blogspot.com/2013/05/the-eff-oracle-google-and-me.html" "Philip Wadler: The EFF, Oracle, Google, and me" "noreply@blogger.com (Philip Wadler)" "Fri, 31 May 2013 15:39:13 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-oUdfjPrpGnk/UajDtRgxfqI/AAAAAAAACDI/Tshk9t5yiY4/s1600/EFF.png\"><img src=\"http://2.bp.blogspot.com/-oUdfjPrpGnk/UajDtRgxfqI/AAAAAAAACDI/Tshk9t5yiY4/s320/EFF.png\" height=\"222\" border=\"0\" width=\"320\" /></a></div><br /><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-JymkWK6ziMQ/UajBL4yXzhI/AAAAAAAACC4/m41WF6Ms4Bw/s1600/oracle-v-google.jpg\"><img src=\"http://2.bp.blogspot.com/-JymkWK6ziMQ/UajBL4yXzhI/AAAAAAAACC4/m41WF6Ms4Bw/s1600/oracle-v-google.jpg\" border=\"0\" /></a></div><div style=\"clear: both; text-align: center;\" class=\"separator\"><br /></div>The Electronic Frontier Foundation has <a href=\"https://www.eff.org/press/releases/computer-scientists-urge-court-block-copyright-claims-oracle-v-google-api-fight\">submitted an amicus brief</a> for the case of Oracle vs. Google, arguing that copyright should apply to code that implements an API, but not to the API itself, which anyone should be free to implement.  The brief details a number of cases where the freedom to implement an API has led to social benefits.  I am pleased to be a signatory of the brief, in the company of luminaries including John Parry Barlow, Jon Bentley, Frederick Brooks, David Dill, Les Earnest, Doug Lea, Martin Odersky, Bruce Schneier, Bjarne Stoustroup, and others.<br /><br />" nil nil "7da444e577993ecd4081421170f04664") (23 (20928 8813 645465) "http://idontgetoutmuch.wordpress.com/2013/05/31/neural-networks-and-automated-differentiation-3/" "Dominic Steinitz: Neural Networks and Automated Differentiation" nil "Fri, 31 May 2013 14:30:22 +0000" "<h2 id=\"introduction\">Introduction</h2>
<p>Neural networks are a method for classifying data based on a theory of how biological systems operate. They can also be viewed as a generalization of logistic regression. A method for determining the coefficients of a given model, backpropagation, was developed in the 1970’s and rediscovered in the 1980’s.</p>
<p>The article “A Functional Approach to Neural Networks” in the <a href=\"http://themonadreader.files.wordpress.com/2013/03/issue214.pdf\">Monad Reader</a> shows how to use a neural network to classify handwritten digits in the <a href=\"http://yann.lecun.com/exdb/mnist/\">MNIST database</a> using backpropagation.</p>
<p>The reader is struck by how similar <a href=\"http://en.wikipedia.org/wiki/Backpropagation\">backpropagation</a> is to <a href=\"http://en.wikipedia.org/wiki/Automatic_differentiation\">automatic differentiation</a>. The reader may not therefore be surprised to find that this observation had been made before: <a href=\"http://justindomke.wordpress.com/2009/02/17/automatic-differentiation-the-most-criminally-underused-tool-in-the-potential-machine-learning-toolbox/\">Domke2009a</a>. Indeed as Dan Piponi observes: “the grandaddy machine-learning algorithm of them all, back-propagation, is nothing but steepest descent with reverse mode automatic differentiation”.</p>
<h2 id=\"neural-networks\">Neural Networks</h2>
<p>We can view neural nets or at least a multi layer perceptron as a generalisation of (multivariate) linear logistic regression.</p>
<p>We follow <span class=\"citation\">(Rojas 1996; Bishop 2006)</span>. We are given a training set:</p>
<div style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5C%7B%28%5Cboldsymbol%7Bx%7D_0%2C+%5Cboldsymbol%7By%7D_0%29%2C+%28%5Cboldsymbol%7Bx%7D_1%2C+%5Cboldsymbol%7By%7D_1%29%2C+%5Cldots%2C+%28%5Cboldsymbol%7Bx%7D_p%2C+%5Cboldsymbol%7By%7D_p%29%5C%7D++&bg=ffffff&fg=333333&s=0\" alt=\"\\displaystyle  \\{(\\boldsymbol{x}_0, \\boldsymbol{y}_0), (\\boldsymbol{x}_1, \\boldsymbol{y}_1), \\ldots, (\\boldsymbol{x}_p, \\boldsymbol{y}_p)\\}  \" class=\"latex\" title=\"\\displaystyle  \\{(\\boldsymbol{x}_0, \\boldsymbol{y}_0), (\\boldsymbol{x}_1, \\boldsymbol{y}_1), \\ldots, (\\boldsymbol{x}_p, \\boldsymbol{y}_p)\\}  \" /></div>
<p>of pairs of <img src=\"http://s0.wp.com/latex.php?latex=n&bg=ffffff&fg=333333&s=0\" alt=\"n\" class=\"latex\" title=\"n\" />-dimensional and <img src=\"http://s0.wp.com/latex.php?latex=m&bg=ffffff&fg=333333&s=0\" alt=\"m\" class=\"latex\" title=\"m\" />-dimensional vectors called the input and output patterns in Machine Learning parlance. We wish to build a neural network model using this training set.</p>
<p>A neural network model (or at least the specific model we discuss: the <a href=\"http://en.wikipedia.org/wiki/Multilayer_perceptron\">multi-layer perceptron</a>) consists of a sequence of transformations. The first transformation creates weighted sums of the inputs.</p>
<div style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=%5Cdisplaystyle++a_j%5E%7B%281%29%7D+%3D+%5Csum_%7Bi%3D1%7D%5E%7BK_0%7D+w%5E%7B%281%29%7D_%7Bij%7Dx_i+%2B+w_%7B0j%7D%5E%7B%281%29%7D++&bg=ffffff&fg=333333&s=0\" alt=\"\\displaystyle  a_j^{(1)} = \\sum_{i=1}^{K_0} w^{(1)}_{ij}x_i + w_{0j}^{(1)}  \" class=\"latex\" title=\"\\displaystyle  a_j^{(1)} = \\sum_{i=1}^{K_0} w^{(1)}_{ij}x_i + w_{0j}^{(1)}  \" /></div>
<p>where <img src=\"http://s0.wp.com/latex.php?latex=K_0+%5Cequiv+n&bg=ffffff&fg=333333&s=0\" alt=\"K_0 \\equiv n\" class=\"latex\" title=\"K_0 \\equiv n\" /> is the size of the input vector and there are <img src=\"http://s0.wp.com/latex.php?latex=j+%3D+1%2C%5Cldots%2CK_1&bg=ffffff&fg=333333&s=0\" alt=\"j = 1,\\ldots,K_1\" class=\"latex\" title=\"j = 1,\\ldots,K_1\" /> neurons in the so called first hidden layer of the network. The weights are unknown.</p>
<p>The second transformation then applies a non-linear activation function <img src=\"http://s0.wp.com/latex.php?latex=f&bg=ffffff&fg=333333&s=0\" alt=\"f\" class=\"latex\" title=\"f\" /> to each <img src=\"http://s0.wp.com/latex.php?latex=a_j&bg=ffffff&fg=333333&s=0\" alt=\"a_j\" class=\"latex\" title=\"a_j\" /> to give the output from the <img src=\"http://s0.wp.com/latex.php?latex=j&bg=ffffff&fg=333333&s=0\" alt=\"j\" class=\"latex\" title=\"j\" />-th neuron in the first hidden layer.</p>
<div style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=%5Cdisplaystyle++z_j%5E%7B%281%29%7D+%3D+f%28a_j%5E%7B%281%29%7D%29++&bg=ffffff&fg=333333&s=0\" alt=\"\\displaystyle  z_j^{(1)} = f(a_j^{(1)})  \" class=\"latex\" title=\"\\displaystyle  z_j^{(1)} = f(a_j^{(1)})  \" /></div>
<p>Typically, <img src=\"http://s0.wp.com/latex.php?latex=f&bg=ffffff&fg=333333&s=0\" alt=\"f\" class=\"latex\" title=\"f\" /> is chosen to be <img src=\"http://s0.wp.com/latex.php?latex=%5Ctanh&bg=ffffff&fg=333333&s=0\" alt=\"\\tanh\" class=\"latex\" title=\"\\tanh\" /> or the logistic function. Note that if it were chosen to be the identity then our neural network would be the same as a multivariate linear logistic regression.</p>
<p>We now repeat these steps for the second hidden layer:</p>
<p>Ultimately after we applied <img src=\"http://s0.wp.com/latex.php?latex=L-1&bg=ffffff&fg=333333&s=0\" alt=\"L-1\" class=\"latex\" title=\"L-1\" /> transformations (through <img src=\"http://s0.wp.com/latex.php?latex=L-1&bg=ffffff&fg=333333&s=0\" alt=\"L-1\" class=\"latex\" title=\"L-1\" /> hidden layers) we produce some output:</p>
<p>We show an example neural in the diagram below.</p>
<div style=\"text-align: center;\">
<p><img src=\"http://idontgetoutmuch.files.wordpress.com/2013/05/3e46ca17f20285d1315961aa7dc6196f.png?w=450\" alt=\"\" /></p>
</div>
<p>The input layer has 7 nodes. There are 2 hidden layers, the first has 3 nodes and the second has 5. The output layer has 3 nodes.</p>
<p>We are also given a cost function:</p>
<div style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=%5Cdisplaystyle++E%28%5Cboldsymbol%7Bw%7D%3B+%5Cboldsymbol%7Bx%7D%2C+%5Cboldsymbol%7By%7D%29+%3D+%5Cfrac%7B1%7D%7B2%7D%5C%7C%28%5Chat%7B%5Cboldsymbol%7By%7D%7D+-+%5Cboldsymbol%7By%7D%29%5C%7C%5E2++&bg=ffffff&fg=333333&s=0\" alt=\"\\displaystyle  E(\\boldsymbol{w}; \\boldsymbol{x}, \\boldsymbol{y}) = \\frac{1}{2}\\|(\\hat{\\boldsymbol{y}} - \\boldsymbol{y})\\|^2  \" class=\"latex\" title=\"\\displaystyle  E(\\boldsymbol{w}; \\boldsymbol{x}, \\boldsymbol{y}) = \\frac{1}{2}\\|(\\hat{\\boldsymbol{y}} - \\boldsymbol{y})\\|^2  \" /></div>
<p>where <img src=\"http://s0.wp.com/latex.php?latex=%5Chat%7B%5Cboldsymbol%7By%7D%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\hat{\\boldsymbol{y}}\" class=\"latex\" title=\"\\hat{\\boldsymbol{y}}\" /> is the predicted output of the neural net and <img src=\"http://s0.wp.com/latex.php?latex=%5Cboldsymbol%7By%7D&bg=ffffff&fg=333333&s=0\" alt=\"\\boldsymbol{y}\" class=\"latex\" title=\"\\boldsymbol{y}\" /> is the observed output.</p>
<p>As with logistic regression, our goal is to find weights for the neural network which minimises this cost function. We initialise the weights to some small non-zero amount and then use the method of steepest descent (aka gradient descent). The idea is that if <img src=\"http://s0.wp.com/latex.php?latex=f&bg=ffffff&fg=333333&s=0\" alt=\"f\" class=\"latex\" title=\"f\" /> is a function of several variables then to find its minimum value, one ought to take a small step in the direction in which it is decreasing most quickly and repeat until no step in any direction results in a decrease. The analogy is that if one is walking in the mountains then the quickest way down is to walk in the direction which goes down most steeply. Of course one get stuck at a local minimum rather than the global minimum but from a machine learning point of view this may be acceptable; alternatively one may start at random points in the search space and check they all give the same minimum.</p>
<p>We therefore need calculate the gradient of the loss function with respect to the weights (since we need to minimise the cost function). In other words we need to find:</p>
<div style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Cnabla+E%28%5Cboldsymbol%7Bx%7D%29+%5Cequiv+%28%5Cfrac%7B%5Cpartial+E%7D%7B%5Cpartial+w_1%7D%2C+%5Cldots%2C+%5Cfrac%7B%5Cpartial+E%7D%7B%5Cpartial+w_n%7D%29++&bg=ffffff&fg=333333&s=0\" alt=\"\\displaystyle  \\nabla E(\\boldsymbol{x}) \\equiv (\\frac{\\partial E}{\\partial w_1}, \\ldots, \\frac{\\partial E}{\\partial w_n})  \" class=\"latex\" title=\"\\displaystyle  \\nabla E(\\boldsymbol{x}) \\equiv (\\frac{\\partial E}{\\partial w_1}, \\ldots, \\frac{\\partial E}{\\partial w_n})  \" /></div>
<p>Once we have this we can take our random starting position and move down the steepest gradient:</p>
<div style=\"text-align: center;\"><img src=\"http://s0.wp.com/latex.php?latex=%5Cdisplaystyle++w%27_i+%3D+w_i+-+%5Cgamma%5Cfrac%7B%5Cpartial+E%7D%7B%5Cpartial+w_i%7D++&bg=ffffff&fg=333333&s=0\" alt=\"\\displaystyle  w'_i = w_i - \\gamma\\frac{\\partial E}{\\partial w_i}  \" class=\"latex\" title=\"\\displaystyle  w'_i = w_i - \\gamma\\frac{\\partial E}{\\partial w_i}  \" /></div>
<p>where <img src=\"http://s0.wp.com/latex.php?latex=%5Cgamma&bg=ffffff&fg=333333&s=0\" alt=\"\\gamma\" class=\"latex\" title=\"\\gamma\" /> is the step length known in machine learning parlance as the learning rate.</p>
<h2 id=\"haskell-foreword\">Haskell Foreword</h2>
<p>Some pragmas and imports required for the example code.</p>
<pre><code>> <span style=\"color: green;\">{-# LANGUAGE RankNTypes                #-}</span>
> <span style=\"color: green;\">{-# LANGUAGE DeriveFunctor             #-}</span>
> <span style=\"color: green;\">{-# LANGUAGE DeriveFoldable            #-}</span>
> <span style=\"color: green;\">{-# LANGUAGE DeriveTraversable         #-}</span>
> <span style=\"color: green;\">{-# LANGUAGE ScopedTypeVariables       #-}</span>
> <span style=\"color: green;\">{-# LANGUAGE TupleSections             #-}</span>
> <span style=\"color: green;\">{-# LANGUAGE NoMonomorphismRestriction #-}</span>
</code>
<code>> <span style=\"color: green;\">{-# OPTIONS_GHC -Wall                     #-}</span>
> <span style=\"color: green;\">{-# OPTIONS_GHC -fno-warn-name-shadowing  #-}</span>
> <span style=\"color: green;\">{-# OPTIONS_GHC -fno-warn-type-defaults   #-}</span>
> <span style=\"color: green;\">{-# OPTIONS_GHC -fno-warn-unused-do-bind  #-}</span>
> <span style=\"color: green;\">{-# OPTIONS_GHC -fno-warn-missing-methods #-}</span>
</code>
<code>> <span style=\"color: blue; font-weight: bold;\">module</span> NeuralNet
>        <span style=\"color: red;\">(</span> test1
>        <span style=\"color: red;\">,</span> test2
>        <span style=\"color: red;\">,</span> test3
>        <span style=\"color: red;\">)</span> <span style=\"color: blue; font-weight: bold;\">where</span>
</code>
<code>> <span style=\"color: blue; font-weight: bold;\">import</span> Numeric.AD
> <span style=\"color: blue; font-weight: bold;\">import</span> Numeric.AD.Types
</code>
<code>> <span style=\"color: blue; font-weight: bold;\">import</span> Data.Traversable <span style=\"color: red;\">(</span>Traversable<span style=\"color: red;\">)</span>
> <span style=\"color: blue; font-weight: bold;\">import</span> Data.Foldable <span style=\"color: red;\">(</span>Foldable<span style=\"color: red;\">)</span>
> <span style=\"color: blue; font-weight: bold;\">import</span> Data.List
> <span style=\"color: blue; font-weight: bold;\">import</span> Data.List.Split
> <span style=\"color: blue; font-weight: bold;\">import</span> System.Random
> <span style=\"color: blue; font-weight: bold;\">import</span> <span style=\"color: blue; font-weight: bold;\">qualified</span> Data.Vector <span style=\"color: blue; font-weight: bold;\">as</span> V
</code>
<code>> <span style=\"color: blue; font-weight: bold;\">import</span> Control.Monad
> <span style=\"color: blue; font-weight: bold;\">import</span> Control.Monad.State
</code>
<code>> <span style=\"color: blue; font-weight: bold;\">import</span> Data.Random ()
> <span style=\"color: blue; font-weight: bold;\">import</span> Data.Random.Distribution.Beta
> <span style=\"color: blue; font-weight: bold;\">import</span> Data.Random.Distribution.Uniform
> <span style=\"color: blue; font-weight: bold;\">import</span> Data.RVar
</code>
<code>> <span style=\"color: blue; font-weight: bold;\">import</span> Text.Printf
</code></pre>
<h2 id=\"logistic-regression-redux\">Logistic Regression Redux</h2>
<p>Let us first implement logistic regression. This will give us a reference against which to compare the equivalent solution expressed as a neural network.</p>
<p>Instead of maximimizing the log likelihood, we will minimize a cost function.</p>
<pre><code>> cost <span style=\"color: red;\">::</span> Floating a <span style=\"color: red;\">=></span> V.Vector a <span style=\"color: red;\">-></span> a <span style=\"color: red;\">-></span> V.Vector a <span style=\"color: red;\">-></span> a
> cost theta y x <span style=\"color: red;\">=</span> <span class=\"hs-num\">0.5</span> * <span style=\"color: red;\">(</span>y <span style=\"color: green;\">-</span> yhat<span style=\"color: red;\">)</span>^<span class=\"hs-num\">2</span>
>   <span style=\"color: blue; font-weight: bold;\">where</span>
>     yhat <span style=\"color: red;\">=</span> logit $ V.sum $ V.zipWith <span style=\"color: red;\">(</span>*<span style=\"color: red;\">)</span> theta x
</code>
<code>> logit <span style=\"color: red;\">::</span> Floating a <span style=\"color: red;\">=></span>
>          a <span style=\"color: red;\">-></span> a
> logit x <span style=\"color: red;\">=</span> <span class=\"hs-num\">1</span> / <span style=\"color: red;\">(</span><span class=\"hs-num\">1</span> + exp <span style=\"color: red;\">(</span>negate x<span style=\"color: red;\">)</span><span style=\"color: red;\">)</span>
</code></pre>
<p>We add a regularization term into the total cost so that the parameters do not grow too large. Note that we do not regularize over the bias.</p>
<pre><code>> delta <span style=\"color: red;\">::</span> Floating a <span style=\"color: red;\">=></span> a
> delta <span style=\"color: red;\">=</span> <span class=\"hs-num\">0.01</span>
</code>
<code>> totalCost <span style=\"color: red;\">::</span> Floating a <span style=\"color: red;\">=></span>
>              V.Vector a <span style=\"color: red;\">-></span>
>              V.Vector a <span style=\"color: red;\">-></span>
>              V.Vector <span style=\"color: red;\">(</span>V.Vector a<span style=\"color: red;\">)</span> <span style=\"color: red;\">-></span>
>              a
> totalCost theta y x <span style=\"color: red;\">=</span> <span style=\"color: red;\">(</span>a + delta * b<span style=\"color: red;\">)</span> / l
>   <span style=\"color: blue; font-weight: bold;\">where</span>
>     l <span style=\"color: red;\">=</span> fromIntegral $ V.length y
>     a <span style=\"color: red;\">=</span> V.sum $ V.zipWith <span style=\"color: red;\">(</span>cost theta<span style=\"color: red;\">)</span> y x
>     b <span style=\"color: red;\">=</span> <span style=\"color: red;\">(</span>/<span class=\"hs-num\">2</span><span style=\"color: red;\">)</span> $ V.sum $ V.map <span style=\"color: red;\">(</span>^<span class=\"hs-num\">2</span><span style=\"color: red;\">)</span> $ V.drop <span class=\"hs-num\">1</span> theta
</code></pre>
<p>We determine the gradient of the regularized cost function.</p>
<pre><code>> delTotalCost <span style=\"color: red;\">::</span> Floating a <span style=\"color: red;\">=></span>
>                 V.Vector a <span style=\"color: red;\">-></span>
>                 V.Vector <span style=\"color: red;\">(</span>V.Vector a<span style=\"color: red;\">)</span> <span style=\"color: red;\">-></span>
>                 V.Vector a <span style=\"color: red;\">-></span>
>                 V.Vector a
> delTotalCost y x <span style=\"color: red;\">=</span> grad f
>   <span style=\"color: blue; font-weight: bold;\">where</span>
>     f theta <span style=\"color: red;\">=</span> totalCost theta <span style=\"color: red;\">(</span>V.map auto y<span style=\"color: red;\">)</span> <span style=\"color: red;\">(</span>V.map <span style=\"color: red;\">(</span>V.map auto<span style=\"color: red;\">)</span> x<span style=\"color: red;\">)</span>
</code></pre>
<p>And finally we can apply <a href=\"http://en.wikipedia.org/wiki/Gradient_descent\">gradient descent</a>.</p>
<pre><code>> gamma <span style=\"color: red;\">::</span> Double
> gamma <span style=\"color: red;\">=</span> <span class=\"hs-num\">0.4</span>
</code>
<code>> stepOnceCost <span style=\"color: red;\">::</span> Floating a <span style=\"color: red;\">=></span>
>                  a <span style=\"color: red;\">-></span>
>                  V.Vector a <span style=\"color: red;\">-></span>
>                  V.Vector <span style=\"color: red;\">(</span>V.Vector a<span style=\"color: red;\">)</span> <span style=\"color: red;\">-></span>
>                  V.Vector a <span style=\"color: red;\">-></span>
>                  V.Vector a
> stepOnceCost gamma y x theta <span style=\"color: red;\">=</span>
>   V.zipWith <span style=\"color: red;\">(</span><span style=\"color: green;\">-</span><span style=\"color: red;\">)</span> theta <span style=\"color: red;\">(</span>V.map <span style=\"color: red;\">(</span>* gamma<span style=\"color: red;\">)</span> $ del theta<span style=\"color: red;\">)</span>
>     <span style=\"color: blue; font-weight: bold;\">where</span>
>       del <span style=\"color: red;\">=</span> delTotalCost y x
</code></pre>
<h2 id=\"neural-network-representation\">Neural Network Representation</h2>
<p>Let us borrow, generalize and prune the data structures used in <a href=\"http://themonadreader.files.wordpress.com/2013/03/issue214.pdf\">“A Functional Approach to Neural Networks”</a>. Some of the fields in the borrowed data structures are probably no longer necessary given that we are going to use automated differentiation rather than backpropagation. Caveat lector!</p>
<p>The activation function itself is a function which takes any type in the <em>Floating</em> class to the same type in the <em>Floating</em> class e.g. <em>Double</em>.</p>
<pre><code>> <span style=\"color: blue; font-weight: bold;\">newtype</span> ActivationFunction <span style=\"color: red;\">=</span>
>   ActivationFunction
>   <span style=\"color: red;\">{</span>
>     activationFunction <span style=\"color: red;\">::</span> Floating a <span style=\"color: red;\">=></span> a <span style=\"color: red;\">-></span> a
>   <span style=\"color: red;\">}</span>
</code></pre>
<p>A neural network is a collection of layers.</p>
<pre><code>> <span style=\"color: blue; font-weight: bold;\">data</span> Layer a <span style=\"color: red;\">=</span>
>   Layer
>   <span style=\"color: red;\">{</span>
>     layerWeights  <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span><span style=\"color: red;\">,</span>
>     layerFunction <span style=\"color: red;\">::</span> ActivationFunction
>   <span style=\"color: red;\">}</span> <span style=\"color: blue; font-weight: bold;\">deriving</span> <span style=\"color: red;\">(</span>Functor<span style=\"color: red;\">,</span> Foldable<span style=\"color: red;\">,</span> Traversable<span style=\"color: red;\">)</span>
</code>
<code>> <span style=\"color: blue; font-weight: bold;\">data</span> BackpropNet a <span style=\"color: red;\">=</span> BackpropNet
>     <span style=\"color: red;\">{</span>
>       layers       <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span>Layer a<span style=\"color: red;\">]</span><span style=\"color: red;\">,</span>
>       learningRate <span style=\"color: red;\">::</span> Double
>     <span style=\"color: red;\">}</span> <span style=\"color: blue; font-weight: bold;\">deriving</span> <span style=\"color: red;\">(</span>Functor<span style=\"color: red;\">,</span> Foldable<span style=\"color: red;\">,</span> Traversable<span style=\"color: red;\">)</span>
</code></pre>
<p>We need some helper functions to build our neural network and to extract information from it.</p>
<pre><code>> buildBackpropNet <span style=\"color: red;\">::</span>
>   Double <span style=\"color: red;\">-></span>
>   <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span><span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span>
>   ActivationFunction <span style=\"color: red;\">-></span>
>   BackpropNet a
> buildBackpropNet learningRate ws f <span style=\"color: red;\">=</span>
>   BackpropNet <span style=\"color: red;\">{</span>
>       layers       <span style=\"color: red;\">=</span> map buildLayer checkedWeights
>     <span style=\"color: red;\">,</span> learningRate <span style=\"color: red;\">=</span> learningRate
>     <span style=\"color: red;\">}</span>
>   <span style=\"color: blue; font-weight: bold;\">where</span> checkedWeights <span style=\"color: red;\">=</span> scanl1 checkDimensions ws
>         buildLayer w   <span style=\"color: red;\">=</span> Layer <span style=\"color: red;\">{</span> layerWeights  <span style=\"color: red;\">=</span> w
>                                 <span style=\"color: red;\">,</span> layerFunction <span style=\"color: red;\">=</span> f
>                                 <span style=\"color: red;\">}</span>
>         checkDimensions <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span>
>         checkDimensions w1 w2 <span style=\"color: red;\">=</span>
>           <span style=\"color: blue; font-weight: bold;\">if</span> <span class=\"hs-num\">1</span> + length w1 == length <span style=\"color: red;\">(</span>head w2<span style=\"color: red;\">)</span>
>           <span style=\"color: blue; font-weight: bold;\">then</span> w2
>           <span style=\"color: blue; font-weight: bold;\">else</span> error $ <span style=\"color: teal;\">\"Inconsistent dimensions in weight matrix\\n\"</span> ++
>                         show <span style=\"color: red;\">(</span>length w1<span style=\"color: red;\">)</span>        ++ <span style=\"color: teal;\">\"\\n\"</span> ++
>                         show <span style=\"color: red;\">(</span>length w2<span style=\"color: red;\">)</span>        ++ <span style=\"color: teal;\">\"\\n\"</span> ++
>                         show <span style=\"color: red;\">(</span>length $ head w1<span style=\"color: red;\">)</span> ++ <span style=\"color: teal;\">\"\\n\"</span> ++
>                         show <span style=\"color: red;\">(</span>length $ head w2<span style=\"color: red;\">)</span>
</code>
<code>> extractWeights <span style=\"color: red;\">::</span> BackpropNet a <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span><span style=\"color: red;\">]</span>
> extractWeights x <span style=\"color: red;\">=</span> map layerWeights $ layers x
</code></pre>
<p>In order to undertake gradient descent on the data structure in which we store a neural network, <em>BackpropNet</em>, it will be convenient to be able to add such structures together point-wise.</p>
<pre><code>> <span style=\"color: blue; font-weight: bold;\">instance</span> Num a <span style=\"color: red;\">=></span> Num <span style=\"color: red;\">(</span>Layer a<span style=\"color: red;\">)</span> <span style=\"color: blue; font-weight: bold;\">where</span>
>   <span style=\"color: red;\">(</span>+<span style=\"color: red;\">)</span> <span style=\"color: red;\">=</span> addLayer
>
> addLayer <span style=\"color: red;\">::</span> Num a <span style=\"color: red;\">=></span> Layer a <span style=\"color: red;\">-></span> Layer a <span style=\"color: red;\">-></span> Layer a
> addLayer x y <span style=\"color: red;\">=</span>
>   Layer <span style=\"color: red;\">{</span> layerWeights  <span style=\"color: red;\">=</span> zipWith <span style=\"color: red;\">(</span>zipWith <span style=\"color: red;\">(</span>+<span style=\"color: red;\">)</span><span style=\"color: red;\">)</span>
>                                   <span style=\"color: red;\">(</span>layerWeights x<span style=\"color: red;\">)</span>
>                                   <span style=\"color: red;\">(</span>layerWeights y<span style=\"color: red;\">)</span>
>         <span style=\"color: red;\">,</span> layerFunction <span style=\"color: red;\">=</span> layerFunction x
>         <span style=\"color: red;\">}</span>
</code>
<code>> <span style=\"color: blue; font-weight: bold;\">instance</span> Num a <span style=\"color: red;\">=></span> Num <span style=\"color: red;\">(</span>BackpropNet a<span style=\"color: red;\">)</span> <span style=\"color: blue; font-weight: bold;\">where</span>
>   <span style=\"color: red;\">(</span>+<span style=\"color: red;\">)</span> <span style=\"color: red;\">=</span> addBPN
</code>
<code>> addBPN <span style=\"color: red;\">::</span> Num a <span style=\"color: red;\">=></span> BackpropNet a <span style=\"color: red;\">-></span> BackpropNet a <span style=\"color: red;\">-></span> BackpropNet a
> addBPN x y <span style=\"color: red;\">=</span> BackpropNet <span style=\"color: red;\">{</span> layers <span style=\"color: red;\">=</span> zipWith <span style=\"color: red;\">(</span>+<span style=\"color: red;\">)</span> <span style=\"color: red;\">(</span>layers x<span style=\"color: red;\">)</span> <span style=\"color: red;\">(</span>layers y<span style=\"color: red;\">)</span>
>                           <span style=\"color: red;\">,</span> learningRate <span style=\"color: red;\">=</span> learningRate x
>                           <span style=\"color: red;\">}</span>
</code></pre>
<p>We store information about updating of output values in each layer in the neural network as we move forward through the network (aka forward propagation).</p>
<pre><code>> <span style=\"color: blue; font-weight: bold;\">data</span> PropagatedLayer a
>     <span style=\"color: red;\">=</span> PropagatedLayer
>         <span style=\"color: red;\">{</span>
>           propLayerIn         <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span><span style=\"color: red;\">,</span>
>           propLayerOut        <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span><span style=\"color: red;\">,</span>
>           propLayerWeights    <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span><span style=\"color: red;\">,</span>
>           propLayerActFun     <span style=\"color: red;\">::</span> ActivationFunction
>         <span style=\"color: red;\">}</span>
>     <span style=\"color: red;\">|</span> PropagatedSensorLayer
>         <span style=\"color: red;\">{</span>
>           propLayerOut <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span>
>         <span style=\"color: red;\">}</span> <span style=\"color: blue; font-weight: bold;\">deriving</span> <span style=\"color: red;\">(</span>Functor<span style=\"color: red;\">,</span> Foldable<span style=\"color: red;\">,</span> Traversable<span style=\"color: red;\">)</span>
</code></pre>
<p>Sadly we have to use an inefficient calculation to multiply matrices; see this <a href=\"http://www.haskell.org/pipermail/haskell-cafe/2013-April/107543.html\">email</a> for further details.</p>
<pre><code>> matMult <span style=\"color: red;\">::</span> Num a <span style=\"color: red;\">=></span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span>
> matMult m v <span style=\"color: red;\">=</span> result
>   <span style=\"color: blue; font-weight: bold;\">where</span>
>     lrs <span style=\"color: red;\">=</span> map length m
>     l   <span style=\"color: red;\">=</span> length v
>     result <span style=\"color: red;\">=</span> <span style=\"color: blue; font-weight: bold;\">if</span> all <span style=\"color: red;\">(</span>== l<span style=\"color: red;\">)</span> lrs
>              <span style=\"color: blue; font-weight: bold;\">then</span> map <span style=\"color: red;\">(</span><span style=\"color: red;\">\\</span>r <span style=\"color: red;\">-></span> sum $ zipWith <span style=\"color: red;\">(</span>*<span style=\"color: red;\">)</span> r v<span style=\"color: red;\">)</span> m
>              <span style=\"color: blue; font-weight: bold;\">else</span> error $ <span style=\"color: teal;\">\"Matrix has rows of length \"</span> ++ show lrs ++
>                           <span style=\"color: teal;\">\" but vector is of length \"</span> ++ show l
</code></pre>
<p>Now we can propagate forwards. Note that the code from which this is borrowed assumes that the inputs are images which are <img src=\"http://s0.wp.com/latex.php?latex=m+%5Ctimes+m&bg=ffffff&fg=333333&s=0\" alt=\"m \\times m\" class=\"latex\" title=\"m \\times m\" /> pixels each encoded using a grayscale, hence the references to bits and the check that values lie in the range <img src=\"http://s0.wp.com/latex.php?latex=0+%5Cleq+x+%5Cleq+1&bg=ffffff&fg=333333&s=0\" alt=\"0 \\leq x \\leq 1\" class=\"latex\" title=\"0 \\leq x \\leq 1\" />.</p>
<pre><code>> propagateNet <span style=\"color: red;\">::</span> <span style=\"color: red;\">(</span>Floating a<span style=\"color: red;\">,</span> Ord a<span style=\"color: red;\">,</span> Show a<span style=\"color: red;\">)</span> <span style=\"color: red;\">=></span>
>                 <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span>
>                 BackpropNet a <span style=\"color: red;\">-></span>
>                 <span style=\"color: red;\">[</span>PropagatedLayer a<span style=\"color: red;\">]</span>
> propagateNet input net <span style=\"color: red;\">=</span> tail calcs
>   <span style=\"color: blue; font-weight: bold;\">where</span> calcs <span style=\"color: red;\">=</span> scanl propagate layer0 <span style=\"color: red;\">(</span>layers net<span style=\"color: red;\">)</span>
>         layer0 <span style=\"color: red;\">=</span> PropagatedSensorLayer $ validateInput net input
>
>         validateInput net <span style=\"color: red;\">=</span> validateInputValues .
>                             validateInputDimensions net
>
>         validateInputDimensions net input <span style=\"color: red;\">=</span>
>           <span style=\"color: blue; font-weight: bold;\">if</span> got == expected
>           <span style=\"color: blue; font-weight: bold;\">then</span> input
>           <span style=\"color: blue; font-weight: bold;\">else</span> error <span style=\"color: red;\">(</span><span style=\"color: teal;\">\"Input pattern has \"</span> ++ show got ++
>                       <span style=\"color: teal;\">\" bits, but \"</span> ++
>                       show expected ++ <span style=\"color: teal;\">\" were expected\"</span><span style=\"color: red;\">)</span>
>           <span style=\"color: blue; font-weight: bold;\">where</span> got      <span style=\"color: red;\">=</span> length input
>                 expected <span style=\"color: red;\">=</span> <span style=\"color: red;\">(</span>+<span style=\"color: red;\">(</span>negate <span class=\"hs-num\">1</span><span style=\"color: red;\">)</span><span style=\"color: red;\">)</span> $
>                            length $
>                            head $
>                            layerWeights $
>                            head $
>                            layers net
>
>         validateInputValues input <span style=\"color: red;\">=</span>
>           <span style=\"color: blue; font-weight: bold;\">if</span> <span style=\"color: red;\">(</span>minimum input >= <span class=\"hs-num\">0</span><span style=\"color: red;\">)</span> && <span style=\"color: red;\">(</span>maximum input <= <span class=\"hs-num\">1</span><span style=\"color: red;\">)</span>
>           <span style=\"color: blue; font-weight: bold;\">then</span> input
>           <span style=\"color: blue; font-weight: bold;\">else</span> error <span style=\"color: teal;\">\"Input bits outside of range [0,1]\"</span>
</code></pre>
<p>Note that we add a 1 to the inputs to each layer to give the bias.</p>
<pre><code>> propagate <span style=\"color: red;\">::</span> <span style=\"color: red;\">(</span>Floating a<span style=\"color: red;\">,</span> Show a<span style=\"color: red;\">)</span> <span style=\"color: red;\">=></span>
>              PropagatedLayer a <span style=\"color: red;\">-></span>
>              Layer a <span style=\"color: red;\">-></span>
>              PropagatedLayer a
> propagate layerJ layerK <span style=\"color: red;\">=</span> result
>   <span style=\"color: blue; font-weight: bold;\">where</span>
>     result <span style=\"color: red;\">=</span>
>       PropagatedLayer
>         <span style=\"color: red;\">{</span>
>           propLayerIn         <span style=\"color: red;\">=</span> layerJOut<span style=\"color: red;\">,</span>
>           propLayerOut        <span style=\"color: red;\">=</span> map f a<span style=\"color: red;\">,</span>
>           propLayerWeights    <span style=\"color: red;\">=</span> weights<span style=\"color: red;\">,</span>
>           propLayerActFun     <span style=\"color: red;\">=</span> layerFunction layerK
>         <span style=\"color: red;\">}</span>
>     layerJOut <span style=\"color: red;\">=</span> propLayerOut layerJ
>     weights   <span style=\"color: red;\">=</span> layerWeights layerK
>     a <span style=\"color: red;\">=</span> weights `matMult` <span style=\"color: red;\">(</span><span class=\"hs-num\">1</span>:layerJOut<span style=\"color: red;\">)</span>
>     f <span style=\"color: red;\">::</span> Floating a <span style=\"color: red;\">=></span> a <span style=\"color: red;\">-></span> a
>     f <span style=\"color: red;\">=</span> activationFunction $ layerFunction layerK
</code>
<code>> evalNeuralNet <span style=\"color: red;\">::</span> <span style=\"color: red;\">(</span>Floating a<span style=\"color: red;\">,</span> Ord a<span style=\"color: red;\">,</span> Show a<span style=\"color: red;\">)</span> <span style=\"color: red;\">=></span>
>                  BackpropNet a <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span>
> evalNeuralNet net input <span style=\"color: red;\">=</span> propLayerOut $ last calcs
>   <span style=\"color: blue; font-weight: bold;\">where</span> calcs <span style=\"color: red;\">=</span> propagateNet input net
</code></pre>
<p>We define a cost function.</p>
<pre><code>> costFn <span style=\"color: red;\">::</span> <span style=\"color: red;\">(</span>Floating a<span style=\"color: red;\">,</span> Ord a<span style=\"color: red;\">,</span> Show a<span style=\"color: red;\">)</span> <span style=\"color: red;\">=></span>
>           Int <span style=\"color: red;\">-></span>
>           Int <span style=\"color: red;\">-></span>
>           <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span>
>           BackpropNet a <span style=\"color: red;\">-></span>
>           a
> costFn nDigits expectedDigit input net <span style=\"color: red;\">=</span> <span class=\"hs-num\">0.5</span> * sum <span style=\"color: red;\">(</span>map <span style=\"color: red;\">(</span>^<span class=\"hs-num\">2</span><span style=\"color: red;\">)</span> diffs<span style=\"color: red;\">)</span>
>   <span style=\"color: blue; font-weight: bold;\">where</span>
>     predicted <span style=\"color: red;\">=</span> evalNeuralNet net input
>     diffs <span style=\"color: red;\">=</span> zipWith <span style=\"color: red;\">(</span><span style=\"color: green;\">-</span><span style=\"color: red;\">)</span> <span style=\"color: red;\">(</span><span style=\"color: red;\">(</span>targets nDigits<span style=\"color: red;\">)</span>!!expectedDigit<span style=\"color: red;\">)</span> predicted
</code>
<code>> targets <span style=\"color: red;\">::</span> Floating a <span style=\"color: red;\">=></span> Int <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span>
> targets nDigits <span style=\"color: red;\">=</span> map row <span style=\"color: red;\">[</span><span class=\"hs-num\">0</span> <span style=\"color: red;\">..</span> nDigits <span style=\"color: green;\">-</span> <span class=\"hs-num\">1</span><span style=\"color: red;\">]</span>
>   <span style=\"color: blue; font-weight: bold;\">where</span>
>     row m <span style=\"color: red;\">=</span> concat <span style=\"color: red;\">[</span>x<span style=\"color: red;\">,</span> <span class=\"hs-num\">1.0</span> : y<span style=\"color: red;\">]</span>
>       <span style=\"color: blue; font-weight: bold;\">where</span>
>         <span style=\"color: red;\">(</span>x<span style=\"color: red;\">,</span> y<span style=\"color: red;\">)</span> <span style=\"color: red;\">=</span> splitAt m <span style=\"color: red;\">(</span>take <span style=\"color: red;\">(</span>nDigits <span style=\"color: green;\">-</span> <span class=\"hs-num\">1</span><span style=\"color: red;\">)</span> $ repeat <span class=\"hs-num\">0.0</span><span style=\"color: red;\">)</span>
</code></pre>
<p>If instead we would rather perform gradient descent over the whole training set (rather than stochastically) then we can do so. Note that we do not regularize the weights for the biases.</p>
<pre><code>> totalCostNN <span style=\"color: red;\">::</span> <span style=\"color: red;\">(</span>Floating a<span style=\"color: red;\">,</span> Ord a<span style=\"color: red;\">,</span> Show a<span style=\"color: red;\">)</span> <span style=\"color: red;\">=></span>
>                Int <span style=\"color: red;\">-></span>
>                V.Vector Int <span style=\"color: red;\">-></span>
>                V.Vector <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span>
>                BackpropNet a <span style=\"color: red;\">-></span>
>                a
> totalCostNN nDigits expectedDigits inputs net <span style=\"color: red;\">=</span> cost
>   <span style=\"color: blue; font-weight: bold;\">where</span>
>     cost <span style=\"color: red;\">=</span> <span style=\"color: red;\">(</span>a + delta * b<span style=\"color: red;\">)</span> / l
>
>     l <span style=\"color: red;\">=</span> fromIntegral $ V.length expectedDigits
>
>     a <span style=\"color: red;\">=</span> V.sum $ V.zipWith <span style=\"color: red;\">(</span><span style=\"color: red;\">\\</span>expectedDigit input <span style=\"color: red;\">-></span>
>                             costFn nDigits expectedDigit input net<span style=\"color: red;\">)</span>
>                           expectedDigits inputs
>
>     b <span style=\"color: red;\">=</span> <span style=\"color: red;\">(</span>/<span style=\"color: red;\">(</span><span class=\"hs-num\">2</span> * m<span style=\"color: red;\">)</span><span style=\"color: red;\">)</span> $ sum $ map <span style=\"color: red;\">(</span>^<span class=\"hs-num\">2</span><span style=\"color: red;\">)</span> ws
>
>     m <span style=\"color: red;\">=</span> fromIntegral $ length ws
>
>     ws <span style=\"color: red;\">=</span> concat $ concat $
>          map stripBias $
>          extractWeights net
>
>     stripBias xss <span style=\"color: red;\">=</span> map <span style=\"color: red;\">(</span>drop <span class=\"hs-num\">1</span><span style=\"color: red;\">)</span> xss
</code>
<code>> delTotalCostNN <span style=\"color: red;\">::</span> <span style=\"color: red;\">(</span>Floating a<span style=\"color: red;\">,</span> Ord a<span style=\"color: red;\">,</span> Show a<span style=\"color: red;\">)</span> <span style=\"color: red;\">=></span>
>                   Int <span style=\"color: red;\">-></span>
>                   V.Vector Int <span style=\"color: red;\">-></span>
>                   V.Vector <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span>
>                   BackpropNet a <span style=\"color: red;\">-></span>
>                   BackpropNet a
> delTotalCostNN nDigits expectedDigits inputs <span style=\"color: red;\">=</span> grad f
>   <span style=\"color: blue; font-weight: bold;\">where</span>
>     f net <span style=\"color: red;\">=</span> totalCostNN nDigits expectedDigits
>                         <span style=\"color: red;\">(</span>V.map <span style=\"color: red;\">(</span>map auto<span style=\"color: red;\">)</span> inputs<span style=\"color: red;\">)</span> net
</code>
<code>> stepOnceTotal <span style=\"color: red;\">::</span> Int <span style=\"color: red;\">-></span>
>                  Double <span style=\"color: red;\">-></span>
>                  V.Vector Int <span style=\"color: red;\">-></span>
>                  V.Vector <span style=\"color: red;\">[</span>Double<span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span>
>                  BackpropNet Double <span style=\"color: red;\">-></span>
>                  BackpropNet Double
> stepOnceTotal nDigits gamma y x net <span style=\"color: red;\">=</span>
>   net + fmap <span style=\"color: red;\">(</span>* <span style=\"color: red;\">(</span>negate gamma<span style=\"color: red;\">)</span><span style=\"color: red;\">)</span> <span style=\"color: red;\">(</span>delTotalCostNN nDigits y x net<span style=\"color: red;\">)</span>
</code></pre>
<h2 id=\"example-i\">Example I</h2>
<p>Let’s try it out. First we need to generate some data. Rather arbitrarily let us create some populations from the <code>beta</code> distribution.</p>
<pre><code>> betas <span style=\"color: red;\">::</span> Int <span style=\"color: red;\">-></span> Double <span style=\"color: red;\">-></span> Double <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span>Double<span style=\"color: red;\">]</span>
> betas n a b <span style=\"color: red;\">=</span>
>   fst $ runState <span style=\"color: red;\">(</span>replicateM n <span style=\"color: red;\">(</span>sampleRVar <span style=\"color: red;\">(</span>beta a b<span style=\"color: red;\">)</span><span style=\"color: red;\">)</span><span style=\"color: red;\">)</span> <span style=\"color: red;\">(</span>mkStdGen seed<span style=\"color: red;\">)</span>
>     <span style=\"color: blue; font-weight: bold;\">where</span>
>       seed <span style=\"color: red;\">=</span> <span class=\"hs-num\">0</span>
</code></pre>
<p>We can plot the populations we wish to distinguish by sampling.</p>
<pre><code>> a<span style=\"color: red;\">,</span> b <span style=\"color: red;\">::</span> Double
> a          <span style=\"color: red;\">=</span> <span class=\"hs-num\">15</span>
> b          <span style=\"color: red;\">=</span> <span class=\"hs-num\">6</span>
> nSamples <span style=\"color: red;\">::</span> Int
> nSamples   <span style=\"color: red;\">=</span> <span class=\"hs-num\">100000</span>
>
> sample0<span style=\"color: red;\">,</span> sample1 <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span>Double<span style=\"color: red;\">]</span>
> sample0 <span style=\"color: red;\">=</span> betas nSamples a b
> sample1 <span style=\"color: red;\">=</span> betas nSamples b a
</code>
<code>> mixSamples <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span>Double<span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span>Double<span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span><span style=\"color: red;\">(</span>Double<span style=\"color: red;\">,</span> Double<span style=\"color: red;\">)</span><span style=\"color: red;\">]</span>
> mixSamples xs ys <span style=\"color: red;\">=</span> unfoldr g <span style=\"color: red;\">(</span><span style=\"color: red;\">(</span>map <span style=\"color: red;\">(</span><span class=\"hs-num\">0</span><span style=\"color: red;\">,</span><span style=\"color: red;\">)</span> xs<span style=\"color: red;\">)</span><span style=\"color: red;\">,</span> <span style=\"color: red;\">(</span>map <span style=\"color: red;\">(</span><span class=\"hs-num\">1</span><span style=\"color: red;\">,</span><span style=\"color: red;\">)</span> ys<span style=\"color: red;\">)</span><span style=\"color: red;\">)</span>
>   <span style=\"color: blue; font-weight: bold;\">where</span>
>     g <span style=\"color: red;\">(</span>[]<span style=\"color: red;\">,</span> []<span style=\"color: red;\">)</span>         <span style=\"color: red;\">=</span> Nothing
>     g <span style=\"color: red;\">(</span>[]<span style=\"color: red;\">,</span>  <span style=\"color: blue; font-weight: bold;\">_</span><span style=\"color: red;\">)</span>         <span style=\"color: red;\">=</span> Nothing
>     g <span style=\"color: red;\">(</span> <span style=\"color: blue; font-weight: bold;\">_</span><span style=\"color: red;\">,</span> []<span style=\"color: red;\">)</span>         <span style=\"color: red;\">=</span> Nothing
>     g <span style=\"color: red;\">(</span><span style=\"color: red;\">(</span>x:xs<span style=\"color: red;\">)</span><span style=\"color: red;\">,</span> <span style=\"color: red;\">(</span>y:ys<span style=\"color: red;\">)</span><span style=\"color: red;\">)</span> <span style=\"color: red;\">=</span> Just $ <span style=\"color: red;\">(</span>x<span style=\"color: red;\">,</span> <span style=\"color: red;\">(</span>y:ys<span style=\"color: red;\">,</span> xs<span style=\"color: red;\">)</span><span style=\"color: red;\">)</span>
</code>
<code>> createSample <span style=\"color: red;\">::</span> V.Vector <span style=\"color: red;\">(</span>Double<span style=\"color: red;\">,</span> Double<span style=\"color: red;\">)</span>
> createSample <span style=\"color: red;\">=</span> V.fromList $ take <span class=\"hs-num\">100</span> $ mixSamples sample1 sample0
</code>
<code>> lRate <span style=\"color: red;\">::</span> Double
> lRate <span style=\"color: red;\">=</span> <span class=\"hs-num\">0.01</span>
> actualTheta <span style=\"color: red;\">::</span> V.Vector Double
> actualTheta <span style=\"color: red;\">=</span> V.fromList <span style=\"color: red;\">[</span><span class=\"hs-num\">0.0</span><span style=\"color: red;\">,</span> <span class=\"hs-num\">1.0</span><span style=\"color: red;\">]</span>
> initTheta <span style=\"color: red;\">::</span> V.Vector Double
> initTheta <span style=\"color: red;\">=</span> V.replicate <span style=\"color: red;\">(</span>V.length actualTheta<span style=\"color: red;\">)</span> <span class=\"hs-num\">0.1</span>
</code>
<code>> logitAF <span style=\"color: red;\">::</span> ActivationFunction
> logitAF <span style=\"color: red;\">=</span> ActivationFunction logit
</code>
<code>> test1 <span style=\"color: red;\">::</span> IO ()
> test1 <span style=\"color: red;\">=</span> <span style=\"color: blue; font-weight: bold;\">do</span>
>
>   <span style=\"color: blue; font-weight: bold;\">let</span> testNet <span style=\"color: red;\">=</span> buildBackpropNet lRate <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span><span style=\"color: red;\">[</span><span class=\"hs-num\">0.1</span><span style=\"color: red;\">,</span> <span class=\"hs-num\">0.1</span><span style=\"color: red;\">]</span><span style=\"color: red;\">,</span> <span style=\"color: red;\">[</span><span class=\"hs-num\">0.1</span><span style=\"color: red;\">,</span> <span class=\"hs-num\">0.1</span><span style=\"color: red;\">]</span><span style=\"color: red;\">]</span><span style=\"color: red;\">]</span> logitAF
</code>
<code>>   <span style=\"color: blue; font-weight: bold;\">let</span> vals <span style=\"color: red;\">::</span> V.Vector <span style=\"color: red;\">(</span>Double<span style=\"color: red;\">,</span> V.Vector Double<span style=\"color: red;\">)</span>
>       vals <span style=\"color: red;\">=</span> V.map <span style=\"color: red;\">(</span><span style=\"color: red;\">\\</span><span style=\"color: red;\">(</span>y<span style=\"color: red;\">,</span> x<span style=\"color: red;\">)</span> <span style=\"color: red;\">-></span> <span style=\"color: red;\">(</span>y<span style=\"color: red;\">,</span> V.fromList <span style=\"color: red;\">[</span><span class=\"hs-num\">1.0</span><span style=\"color: red;\">,</span> x<span style=\"color: red;\">]</span><span style=\"color: red;\">)</span><span style=\"color: red;\">)</span> $ createSample
>
>   <span style=\"color: blue; font-weight: bold;\">let</span> gs <span style=\"color: red;\">=</span> iterate <span style=\"color: red;\">(</span>stepOnceCost gamma <span style=\"color: red;\">(</span>V.map fst vals<span style=\"color: red;\">)</span> <span style=\"color: red;\">(</span>V.map snd vals<span style=\"color: red;\">)</span><span style=\"color: red;\">)</span>
>                    initTheta
>       theta <span style=\"color: red;\">=</span> head $ drop <span class=\"hs-num\">1000</span> gs
>   printf <span style=\"color: teal;\">\"Logistic regression: theta_0 = %5.3f, theta_1 = %5.3f\\n\"</span>
>          <span style=\"color: red;\">(</span>theta V.! <span class=\"hs-num\">0</span><span style=\"color: red;\">)</span> <span style=\"color: red;\">(</span>theta V.! <span class=\"hs-num\">1</span><span style=\"color: red;\">)</span>
>
>   <span style=\"color: blue; font-weight: bold;\">let</span> us <span style=\"color: red;\">=</span> V.map <span style=\"color: red;\">(</span>round . fst<span style=\"color: red;\">)</span> createSample
>   <span style=\"color: blue; font-weight: bold;\">let</span> vs <span style=\"color: red;\">=</span> V.map snd createSample
>   <span style=\"color: blue; font-weight: bold;\">let</span> fs <span style=\"color: red;\">=</span> iterate <span style=\"color: red;\">(</span>stepOnceTotal <span class=\"hs-num\">2</span> gamma us <span style=\"color: red;\">(</span>V.map return vs<span style=\"color: red;\">)</span><span style=\"color: red;\">)</span> testNet
>       phi <span style=\"color: red;\">=</span> extractWeights $ head $ drop <span class=\"hs-num\">1000</span> fs
>   printf <span style=\"color: teal;\">\"Neural network: theta_00 = %5.3f, theta_01 = %5.3f\\n\"</span>
>          <span style=\"color: red;\">(</span><span style=\"color: red;\">(</span><span style=\"color: red;\">(</span>phi!!<span class=\"hs-num\">0</span><span style=\"color: red;\">)</span>!!<span class=\"hs-num\">0</span><span style=\"color: red;\">)</span>!!<span class=\"hs-num\">0</span><span style=\"color: red;\">)</span> <span style=\"color: red;\">(</span><span style=\"color: red;\">(</span><span style=\"color: red;\">(</span>phi!!<span class=\"hs-num\">0</span><span style=\"color: red;\">)</span>!!<span class=\"hs-num\">0</span><span style=\"color: red;\">)</span>!!<span class=\"hs-num\">1</span><span style=\"color: red;\">)</span>
>   printf <span style=\"color: teal;\">\"Neural network: theta_10 = %5.3f, theta_11 = %5.3f\\n\"</span>
>          <span style=\"color: red;\">(</span><span style=\"color: red;\">(</span><span style=\"color: red;\">(</span>phi!!<span class=\"hs-num\">0</span><span style=\"color: red;\">)</span>!!<span class=\"hs-num\">1</span><span style=\"color: red;\">)</span>!!<span class=\"hs-num\">0</span><span style=\"color: red;\">)</span> <span style=\"color: red;\">(</span><span style=\"color: red;\">(</span><span style=\"color: red;\">(</span>phi!!<span class=\"hs-num\">0</span><span style=\"color: red;\">)</span>!!<span class=\"hs-num\">1</span><span style=\"color: red;\">)</span>!!<span class=\"hs-num\">1</span><span style=\"color: red;\">)</span>
</code>
<code><span style=\"color: gray;\">ghci> </span>test1
Logistic regression: theta_0 = -2.383, theta_1 = 4.852
Neural network: theta_00 = 2.386, theta_01 = -4.861
Neural network: theta_10 = -2.398, theta_11 = 4.886
</code></pre>
<h2 id=\"example-ii\">Example II</h2>
<p>Now let’s try a neural net with 1 hidden layer using the data we prepared earlier.</p>
<p>We seed the weights in the neural with small random values; if we set all the weights to 0 then the gradient descent algorithm might get stuck.</p>
<pre><code>> uniforms <span style=\"color: red;\">::</span> Int <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span>Double<span style=\"color: red;\">]</span>
> uniforms n <span style=\"color: red;\">=</span>
>   fst $ runState <span style=\"color: red;\">(</span>replicateM n <span style=\"color: red;\">(</span>sampleRVar stdUniform<span style=\"color: red;\">)</span><span style=\"color: red;\">)</span> <span style=\"color: red;\">(</span>mkStdGen seed<span style=\"color: red;\">)</span>
>     <span style=\"color: blue; font-weight: bold;\">where</span>
>       seed <span style=\"color: red;\">=</span> <span class=\"hs-num\">0</span>
</code>
<code>> randomWeightMatrix <span style=\"color: red;\">::</span> Int <span style=\"color: red;\">-></span> Int <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>Double<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span>
> randomWeightMatrix numInputs numOutputs <span style=\"color: red;\">=</span> y
>   <span style=\"color: blue; font-weight: bold;\">where</span>
>     y <span style=\"color: red;\">=</span> chunksOf numInputs weights
>     weights <span style=\"color: red;\">=</span> map <span style=\"color: red;\">(</span>/ <span class=\"hs-num\">100.0</span><span style=\"color: red;\">)</span> $ uniforms <span style=\"color: red;\">(</span>numOutputs * numInputs<span style=\"color: red;\">)</span>
</code>
<code>> w1<span style=\"color: red;\">,</span> w2 <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>Double<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span>
> w1  <span style=\"color: red;\">=</span> randomWeightMatrix <span class=\"hs-num\">2</span> <span class=\"hs-num\">2</span>
> w2  <span style=\"color: red;\">=</span> randomWeightMatrix <span class=\"hs-num\">3</span> <span class=\"hs-num\">2</span>
</code>
<code>> initNet2 <span style=\"color: red;\">::</span> BackpropNet Double
> initNet2 <span style=\"color: red;\">=</span> buildBackpropNet lRate <span style=\"color: red;\">[</span>w1<span style=\"color: red;\">,</span> w2<span style=\"color: red;\">]</span> logitAF
>
> labels <span style=\"color: red;\">::</span> V.Vector Int
> labels <span style=\"color: red;\">=</span> V.map <span style=\"color: red;\">(</span>round . fst<span style=\"color: red;\">)</span> createSample
</code>
<code>> inputs <span style=\"color: red;\">::</span> V.Vector <span style=\"color: red;\">[</span>Double<span style=\"color: red;\">]</span>
> inputs <span style=\"color: red;\">=</span> V.map <span style=\"color: red;\">(</span>return . snd<span style=\"color: red;\">)</span> createSample
</code></pre>
<p>Instead of hand-crafting gradient descent, let us use the library function as it performs better and is easier to implement.</p>
<pre><code>> estimates <span style=\"color: red;\">::</span> <span style=\"color: red;\">(</span>Floating a<span style=\"color: red;\">,</span> Ord a<span style=\"color: red;\">,</span> Show a<span style=\"color: red;\">)</span> <span style=\"color: red;\">=></span>
>              V.Vector Int <span style=\"color: red;\">-></span>
>              V.Vector <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span>
>              BackpropNet a <span style=\"color: red;\">-></span>
>              <span style=\"color: red;\">[</span>BackpropNet a<span style=\"color: red;\">]</span>
> estimates y x <span style=\"color: red;\">=</span> gradientDescent $
>                 <span style=\"color: red;\">\\</span>theta <span style=\"color: red;\">-></span> totalCostNN <span class=\"hs-num\">2</span> y <span style=\"color: red;\">(</span>V.map <span style=\"color: red;\">(</span>map auto<span style=\"color: red;\">)</span> x<span style=\"color: red;\">)</span> theta
</code></pre>
<p>Now we can examine the weights of our fitted neural net and apply it to some test data.</p>
<pre><code>> test2 <span style=\"color: red;\">::</span> IO ()
> test2 <span style=\"color: red;\">=</span> <span style=\"color: blue; font-weight: bold;\">do</span>
>
>   <span style=\"color: blue; font-weight: bold;\">let</span> fs <span style=\"color: red;\">=</span> estimates labels inputs initNet2
>   mapM_ putStrLn $ map <span style=\"color: red;\">(</span>take <span class=\"hs-num\">60</span><span style=\"color: red;\">)</span> $
>                    map show $ extractWeights $
>                    head $ drop <span class=\"hs-num\">1000</span> fs
>   putStrLn $ show $ evalNeuralNet <span style=\"color: red;\">(</span>head $ drop <span class=\"hs-num\">1000</span> fs<span style=\"color: red;\">)</span> <span style=\"color: red;\">[</span><span class=\"hs-num\">0.1</span><span style=\"color: red;\">]</span>
>   putStrLn $ show $ evalNeuralNet <span style=\"color: red;\">(</span>head $ drop <span class=\"hs-num\">1000</span> fs<span style=\"color: red;\">)</span> <span style=\"color: red;\">[</span><span class=\"hs-num\">0.9</span><span style=\"color: red;\">]</span>
</code>
<code><span style=\"color: gray;\">ghci> </span>test2
[[3.3809809537916933,-6.778365921046131],[-5.157492699008754
[[1.2771246165025043,5.294090869351353,-8.264801192310706],[
[0.997782987249909,2.216698813392053e-3]
[1.4853346509852003e-3,0.9985148392767443]
</code></pre>
<h2 id=\"example-iii\">Example III</h2>
<p>Let’s try a more sophisticated example and create a population of 4 groups which we measure with 2 variables.</p>
<pre><code>> c<span style=\"color: red;\">,</span> d <span style=\"color: red;\">::</span> Double
> c          <span style=\"color: red;\">=</span> <span class=\"hs-num\">15</span>
> d          <span style=\"color: red;\">=</span> <span class=\"hs-num\">8</span>
> sample2<span style=\"color: red;\">,</span> sample3 <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span>Double<span style=\"color: red;\">]</span>
> sample2 <span style=\"color: red;\">=</span> betas nSamples c d
> sample3 <span style=\"color: red;\">=</span> betas nSamples d c
</code>
<code>> mixSamples3 <span style=\"color: red;\">::</span> Num t <span style=\"color: red;\">=></span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span><span style=\"color: red;\">(</span>t<span style=\"color: red;\">,</span> a<span style=\"color: red;\">)</span><span style=\"color: red;\">]</span>
> mixSamples3 xss <span style=\"color: red;\">=</span> concat $ transpose $
>                   zipWith <span style=\"color: red;\">(</span><span style=\"color: red;\">\\</span>n xs <span style=\"color: red;\">-></span> map <span style=\"color: red;\">(</span>n<span style=\"color: red;\">,</span><span style=\"color: red;\">)</span> xs<span style=\"color: red;\">)</span>
>                           <span style=\"color: red;\">(</span>map fromIntegral <span style=\"color: red;\">[</span><span class=\"hs-num\">0</span><span style=\"color: red;\">..</span><span style=\"color: red;\">]</span><span style=\"color: red;\">)</span>
>                           xss
> sample02<span style=\"color: red;\">,</span> sample03<span style=\"color: red;\">,</span> sample12<span style=\"color: red;\">,</span> sample13 <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span><span style=\"color: red;\">(</span>Double<span style=\"color: red;\">,</span> Double<span style=\"color: red;\">)</span><span style=\"color: red;\">]</span>
> sample02 <span style=\"color: red;\">=</span> <span style=\"color: red;\">[</span><span style=\"color: red;\">(</span>x<span style=\"color: red;\">,</span> y<span style=\"color: red;\">)</span> <span style=\"color: red;\">|</span> x <span style=\"color: red;\"><-</span> sample0<span style=\"color: red;\">,</span> y <span style=\"color: red;\"><-</span> sample2<span style=\"color: red;\">]</span>
> sample03 <span style=\"color: red;\">=</span> <span style=\"color: red;\">[</span><span style=\"color: red;\">(</span>x<span style=\"color: red;\">,</span> y<span style=\"color: red;\">)</span> <span style=\"color: red;\">|</span> x <span style=\"color: red;\"><-</span> sample0<span style=\"color: red;\">,</span> y <span style=\"color: red;\"><-</span> sample3<span style=\"color: red;\">]</span>
> sample12 <span style=\"color: red;\">=</span> <span style=\"color: red;\">[</span><span style=\"color: red;\">(</span>x<span style=\"color: red;\">,</span> y<span style=\"color: red;\">)</span> <span style=\"color: red;\">|</span> x <span style=\"color: red;\"><-</span> sample1<span style=\"color: red;\">,</span> y <span style=\"color: red;\"><-</span> sample2<span style=\"color: red;\">]</span>
> sample13 <span style=\"color: red;\">=</span> <span style=\"color: red;\">[</span><span style=\"color: red;\">(</span>x<span style=\"color: red;\">,</span> y<span style=\"color: red;\">)</span> <span style=\"color: red;\">|</span> x <span style=\"color: red;\"><-</span> sample1<span style=\"color: red;\">,</span> y <span style=\"color: red;\"><-</span> sample3<span style=\"color: red;\">]</span>
</code>
<code>> createSample3 <span style=\"color: red;\">::</span> <span style=\"color: blue; font-weight: bold;\">forall</span> t. Num t <span style=\"color: red;\">=></span> V.Vector <span style=\"color: red;\">(</span>t<span style=\"color: red;\">,</span> <span style=\"color: red;\">(</span>Double<span style=\"color: red;\">,</span> Double<span style=\"color: red;\">)</span><span style=\"color: red;\">)</span>
> createSample3 <span style=\"color: red;\">=</span> V.fromList $ take <span class=\"hs-num\">512</span> $ mixSamples3 <span style=\"color: red;\">[</span> sample02
>                                                     <span style=\"color: red;\">,</span> sample03
>                                                     <span style=\"color: red;\">,</span> sample12
>                                                     <span style=\"color: red;\">,</span> sample13
>                                                     <span style=\"color: red;\">]</span>
</code></pre>
<p>Rather annoyingly picking random weights seemed to give a local but not global minimum. This may be a feature of having more nodes in the hidden layer than in the input layer. By fitting a neural net with no hidden layers to the data and using the outputs as inputs to fit another neural net with no hidden layers, we can get a starting point from which we can converge to the global minimum.</p>
<pre><code>> w31<span style=\"color: red;\">,</span> w32 <span style=\"color: red;\">::</span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span>Double<span style=\"color: red;\">]</span><span style=\"color: red;\">]</span>
> w31 <span style=\"color: red;\">=</span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span><span style=\"color: green;\">-</span><span class=\"hs-num\">1.795626449637491</span><span style=\"color: red;\">,</span><span class=\"hs-num\">1.0687662199549477</span><span style=\"color: red;\">,</span><span class=\"hs-num\">0.6780994566671094</span><span style=\"color: red;\">]</span><span style=\"color: red;\">,</span>
>        <span style=\"color: red;\">[</span><span style=\"color: green;\">-</span><span class=\"hs-num\">0.8953174631646047</span><span style=\"color: red;\">,</span><span class=\"hs-num\">1.536931540024011</span><span style=\"color: red;\">,</span><span style=\"color: green;\">-</span><span class=\"hs-num\">1.7631220370122578</span><span style=\"color: red;\">]</span><span style=\"color: red;\">,</span>
>        <span style=\"color: red;\">[</span><span style=\"color: green;\">-</span><span class=\"hs-num\">0.4762453998497917</span><span style=\"color: red;\">,</span><span style=\"color: green;\">-</span><span class=\"hs-num\">2.005243268058972</span><span style=\"color: red;\">,</span><span class=\"hs-num\">1.2945899127545906</span><span style=\"color: red;\">]</span><span style=\"color: red;\">,</span>
>        <span style=\"color: red;\">[</span><span class=\"hs-num\">0.43019763097582875</span><span style=\"color: red;\">,</span><span style=\"color: green;\">-</span><span class=\"hs-num\">1.5711869072989957</span><span style=\"color: red;\">,</span><span style=\"color: green;\">-</span><span class=\"hs-num\">1.187180183656747</span><span style=\"color: red;\">]</span><span style=\"color: red;\">]</span>
> w32 <span style=\"color: red;\">=</span> <span style=\"color: red;\">[</span><span style=\"color: red;\">[</span><span style=\"color: green;\">-</span><span class=\"hs-num\">0.65116209142284</span><span style=\"color: red;\">,</span><span class=\"hs-num\">0.4837310591797774</span><span style=\"color: red;\">,</span><span style=\"color: green;\">-</span><span class=\"hs-num\">0.17870333721054968</span><span style=\"color: red;\">,</span>
>         <span style=\"color: green;\">-</span><span class=\"hs-num\">0.6692619856605464</span><span style=\"color: red;\">,</span><span style=\"color: green;\">-</span><span class=\"hs-num\">1.062292154441557</span><span style=\"color: red;\">]</span><span style=\"color: red;\">,</span>
>        <span style=\"color: red;\">[</span><span style=\"color: green;\">-</span><span class=\"hs-num\">0.7521274440366631</span><span style=\"color: red;\">,</span><span style=\"color: green;\">-</span><span class=\"hs-num\">1.2071835415415136e-2</span><span style=\"color: red;\">,</span><span class=\"hs-num\">1.0078929981538551</span><span style=\"color: red;\">,</span>
>         <span style=\"color: green;\">-</span><span class=\"hs-num\">1.3144243587577473</span><span style=\"color: red;\">,</span><span style=\"color: green;\">-</span><span class=\"hs-num\">0.5102027925579049</span><span style=\"color: red;\">]</span><span style=\"color: red;\">,</span>
>        <span style=\"color: red;\">[</span><span style=\"color: green;\">-</span><span class=\"hs-num\">0.7545728756863981</span><span style=\"color: red;\">,</span><span style=\"color: green;\">-</span><span class=\"hs-num\">0.4830112128458844</span><span style=\"color: red;\">,</span><span style=\"color: green;\">-</span><span class=\"hs-num\">1.2901624541811962</span><span style=\"color: red;\">,</span>
>         <span class=\"hs-num\">1.0487049495446408</span><span style=\"color: red;\">,</span><span class=\"hs-num\">9.746209726152217e-3</span><span style=\"color: red;\">]</span><span style=\"color: red;\">,</span>
>        <span style=\"color: red;\">[</span><span style=\"color: green;\">-</span><span class=\"hs-num\">0.8576212271328413</span><span style=\"color: red;\">,</span><span style=\"color: green;\">-</span><span class=\"hs-num\">0.9035219951783956</span><span style=\"color: red;\">,</span><span style=\"color: green;\">-</span><span class=\"hs-num\">0.4034500456652809</span><span style=\"color: red;\">,</span>
>         <span class=\"hs-num\">0.10091187689838758</span><span style=\"color: red;\">,</span><span class=\"hs-num\">0.781835908789879</span><span style=\"color: red;\">]</span><span style=\"color: red;\">]</span>
>
> testNet3 <span style=\"color: red;\">::</span> BackpropNet Double
> testNet3 <span style=\"color: red;\">=</span> buildBackpropNet lRate <span style=\"color: red;\">[</span>w31<span style=\"color: red;\">,</span> w32<span style=\"color: red;\">]</span> logitAF
</code>
<code>> labels3 <span style=\"color: red;\">::</span> V.Vector Int
> labels3 <span style=\"color: red;\">=</span> V.map <span style=\"color: red;\">(</span>round . fst<span style=\"color: red;\">)</span> createSample3
> inputs3 <span style=\"color: red;\">::</span> V.Vector <span style=\"color: red;\">[</span>Double<span style=\"color: red;\">]</span>
> inputs3 <span style=\"color: red;\">=</span> V.map <span style=\"color: red;\">(</span><span style=\"color: red;\">(</span><span style=\"color: red;\">\\</span><span style=\"color: red;\">(</span>x<span style=\"color: red;\">,</span> y<span style=\"color: red;\">)</span> <span style=\"color: red;\">-></span> <span style=\"color: red;\">[</span>x<span style=\"color: red;\">,</span> y<span style=\"color: red;\">]</span><span style=\"color: red;\">)</span> . snd<span style=\"color: red;\">)</span> createSample3
</code></pre>
<p>Now we use the library <em>gradientDescent</em> function to generate neural nets which ever better fit the data.</p>
<pre><code>> estimates3 <span style=\"color: red;\">::</span> <span style=\"color: red;\">(</span>Floating a<span style=\"color: red;\">,</span> Ord a<span style=\"color: red;\">,</span> Show a<span style=\"color: red;\">)</span> <span style=\"color: red;\">=></span>
>               V.Vector Int <span style=\"color: red;\">-></span>
>               V.Vector <span style=\"color: red;\">[</span>a<span style=\"color: red;\">]</span> <span style=\"color: red;\">-></span>
>               BackpropNet a <span style=\"color: red;\">-></span>
>               <span style=\"color: red;\">[</span>BackpropNet a<span style=\"color: red;\">]</span>
> estimates3 y x <span style=\"color: red;\">=</span> gradientDescent $
>                  <span style=\"color: red;\">\\</span>theta <span style=\"color: red;\">-></span> totalCostNN <span class=\"hs-num\">4</span> y <span style=\"color: red;\">(</span>V.map <span style=\"color: red;\">(</span>map auto<span style=\"color: red;\">)</span> x<span style=\"color: red;\">)</span> theta
</code></pre>
<p>Finally we can fit a neural net and check that it correctly classifies some data.</p>
<pre><code>> test3 <span style=\"color: red;\">::</span> IO ()
> test3 <span style=\"color: red;\">=</span> <span style=\"color: blue; font-weight: bold;\">do</span>
>   <span style=\"color: blue; font-weight: bold;\">let</span> fs <span style=\"color: red;\">=</span> drop <span class=\"hs-num\">100</span> $ estimates3 labels3 inputs3 testNet3
>   mapM_ putStrLn $ map <span style=\"color: red;\">(</span>take <span class=\"hs-num\">60</span><span style=\"color: red;\">)</span> $ map show $ extractWeights $ head fs
>   putStrLn $ take <span class=\"hs-num\">60</span> $ show $ evalNeuralNet <span style=\"color: red;\">(</span>head fs<span style=\"color: red;\">)</span> <span style=\"color: red;\">[</span><span class=\"hs-num\">0.1</span><span style=\"color: red;\">,</span> <span class=\"hs-num\">0.1</span><span style=\"color: red;\">]</span>
>   putStrLn $ take <span class=\"hs-num\">60</span> $ show $ evalNeuralNet <span style=\"color: red;\">(</span>head fs<span style=\"color: red;\">)</span> <span style=\"color: red;\">[</span><span class=\"hs-num\">0.1</span><span style=\"color: red;\">,</span> <span class=\"hs-num\">0.9</span><span style=\"color: red;\">]</span>
>   putStrLn $ take <span class=\"hs-num\">60</span> $ show $ evalNeuralNet <span style=\"color: red;\">(</span>head fs<span style=\"color: red;\">)</span> <span style=\"color: red;\">[</span><span class=\"hs-num\">0.9</span><span style=\"color: red;\">,</span> <span class=\"hs-num\">0.1</span><span style=\"color: red;\">]</span>
>   putStrLn $ take <span class=\"hs-num\">60</span> $ show $ evalNeuralNet <span style=\"color: red;\">(</span>head fs<span style=\"color: red;\">)</span> <span style=\"color: red;\">[</span><span class=\"hs-num\">0.9</span><span style=\"color: red;\">,</span> <span class=\"hs-num\">0.9</span><span style=\"color: red;\">]</span>
</code>
<code><span style=\"color: gray;\">ghci> </span>test3
[[-2.295896239599931,2.705409060274802,2.1377566388724047],[
[[-0.6169787627963551,2.5369568963968256,-0.3515306366626614
[2.638026636449198e-2,9.091308688841797e-2,0.373349222824566
[0.13674565454319784,1.128123133092104e-2,0.8525700090804755
[0.30731134024095474,0.8197492648500939,1.3704140162804749e-
[0.6773814649389487,0.22533958204471505,0.1957913744022863,4
</code></pre>
<h2 id=\"references\">References</h2>
<p>Bishop, Christopher M. 2006. <em>Pattern Recognition and Machine Learning (Information Science and Statistics)</em>. Secaucus, NJ, USA: Springer-Verlag New York, Inc.</p>
<p>Rojas, R. 1996. <em>Neural networks: a systematic introduction</em>. Springer-Verlag New York Incorporated. <a href=\"http://books.google.co.uk/books?id=txsjjYzFJS4C\" title=\"http://books.google.co.uk/books?id=txsjjYzFJS4C\">http://books.google.co.uk/books?id=txsjjYzFJS4C</a>.</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/idontgetoutmuch.wordpress.com/460/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/idontgetoutmuch.wordpress.com/460/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=idontgetoutmuch.wordpress.com&blog=2944309&post=460&subd=idontgetoutmuch&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "299b5540ab5ae0c68c14d54b47869d69") (22 (20928 8813 635460) "http://tomschrijvers.blogspot.com/2013/05/ghent-fp-meeting-on-june-26.html" "Tom Schrijvers: Ghent FP meeting on June 26" "noreply@blogger.com (Tom Schrijvers)" "Fri, 31 May 2013 09:36:41 +0000" "<div style=\"text-align: left;\" dir=\"ltr\"><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">The \"Functional Programming Group Ghent\" (GhentFPG) [1] is a friendly group for</span><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">all people interested in functional programming, with a tendency towards Haskell.</span><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">It is organised as part of Zeus WPI [2].</span><br /><br style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\" /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">We are pleased to announce that we will hold a next meeting on Wednesday, 26th</span><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">of June, starting at 19h00! There will be three talks.</span><br /><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">The main presentation, by Adam Bergmark from Silk [3] is about <b>Fay</b> [4]:</span><br /><blockquote class=\"tr_bq\"><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">Fay is a proper subset of Haskell that compiles to JavaScript. There is a</span><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">  compiler with the same name written in Haskell. Web browsers only speak</span><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">  JavaScript but more and more people find that they want to compile to</span><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">  JavaScript instead.</span><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">Why do we want to compile Haskell to JavaScript, and what advantages does</span><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">  Fay have compared to other compilers?</span><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">What are the challenges in compiling Haskell and supporting a language</span><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">  ecosystem, and how do we do it?</span><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">What can Fay currently do, and what is planned for the future?</span><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">This will be a broad overview about Fay for prospective users, followed by</span><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">  an in-depth look at interesting parts of the compiler internals.</span></blockquote><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">Additionally, there will be two short talks by two students who did an Msc. Thesis</span><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">about functional programming languages:</span><br /><br style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\" /><ul style=\"text-align: left;\"><li><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\"><b>Genetic Algorithms in Haskell</b><br />Matthias Delbar</span></li><li><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\"><b>Automatic Detection of Recursion Patterns</b>Jasper Van der Jeugt</span></li></ul><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">The meeting will take place in the Jozef Plateauzaal at the following address,</span><br /><blockquote class=\"tr_bq\"><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">Faculteit Ingenieurswetenschappen</span><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">Universiteit Gent</span><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">Plateaustraat 22</span><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">9000 Gent</span></blockquote><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">As mentioned above, we aim to start at </span><span style=\"\" class=\"aBn\" tabindex=\"0\"><span style=\"\" class=\"aQJ\">19:00</span></span><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">. After the meeting we can go</span><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">for drinks in a nearby pub (this latter part is, of course, completely optional)</span><br /><br style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\" /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">We hope to see you all there!</span><br /><br style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\" /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">Regards,</span><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">On behalf of the GhentFPG organising committee.</span><br /><br style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\" /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">[1]: </span><a style=\"background-color: white; color: #1155cc; font-family: arial, sans-serif; font-size: 12.800000190734863px;\" href=\"http://groups.google.com/group/ghent-fpg\" target=\"_blank\">http://groups.google.com/<wbr></wbr>group/ghent-fpg</a><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">[2]: </span><a style=\"background-color: white; color: #1155cc; font-family: arial, sans-serif; font-size: 12.800000190734863px;\" href=\"http://zeus.ugent.be/\" target=\"_blank\">http://zeus.ugent.be/</a><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">[3]: </span><a style=\"background-color: white; color: #1155cc; font-family: arial, sans-serif; font-size: 12.800000190734863px;\" href=\"http://www.silkapp.com/\" target=\"_blank\">http://www.silkapp.com/</a><br /><span style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 12.800000190734863px;\">[4]: </span><a style=\"background-color: white; color: #1155cc; font-family: arial, sans-serif; font-size: 12.800000190734863px;\" href=\"http://www.fay-lang.org/\" target=\"_blank\">http://www.fay-lang.org/</a></div>" nil nil "fd5501fce6735d3f6ea39392b3d804a8") (21 (20928 8813 634206) "http://winterkoninkje.dreamwidth.org/83994.html" "wren ng thornton: ANN: prelude-safeenum" nil "Thu, 30 May 2013 00:05:57 +0000" "<h3>prelude-safeenum 0.1.0</h3>
<p>The prelude-safeenum package offers a safe alternative to the Prelude's <code>Enum</code> class in order to render it safe. While we're at it, we also generalize the notion of enumeration to support types which can only be enumerated in one direction.</p>
<h3>Description</h3>
<p>The prelude-safeenum package offers an alternative to the notion of enumeration provided by the Prelude. For now it is just a package, but the eventual goal is to be incorporated into haskell prime. Some salient characteristics of the new type-class hierarchy are:</p>
<dl>
<dt>Removes partial functions</dt>
<dd>The Haskell Language Report <a href=\"http://www.haskell.org/onlinereport/haskell2010/haskellch6.html#x13-1310006.3.4\">section 6.3.4</a> defines <code>pred</code>, <code>succ</code>, <code>fromEnum</code>, and <code>toEnum</code> to be partial functions when the type is <code>Bounded</code>, but this is unacceptable. The new classes remove this problem by correcting the type signatures for these functions.</dd>
<dt>Generalizes the notion of enumeration</dt>
<dd>Rather than requiring that the type is linearly enumerable, we distinguish between forward enumeration (which allows for multiple predecessors) and backward enumeration (which allows for multiple successors).</dd>
<dt>Adds new functions: <code>enumDownFrom</code>, <code>enumDownFromTo</code></dt>
<dd>One of the big problems with the partiality of <code>pred</code> is that there is no safe way to enumerate downwards since in the border case <code>enumFromThen x (pred x)</code> will throw an error rather than evaluating to <code>[x]</code> as desired. These new functions remove this problem.</dd>
<dt>Removes the requirement...</dt>
<dd>...that the enumeration order coincides with the
<code>Ord</code> ordering (if one exists). Though, of course, it's advisable to keep
them in sync if possible, for your sanity.</dd>
<dt>Ensures that the notion of enumeration is well-defined</dt>
<dd>This much-needed rigor clarifies the meaning of enumeration. In addition, it rules out instances for <code>Float</code> and <code>Double</code> which are highly problematic and often confuse newcomers to Haskell. Unfortunately, this rigor does render the instance for <code>Ratio</code> problematic. However, <code>Ratio</code> instances <i>can</i> be provided so long as the base type is enumerable (and <code>Integral</code>, naturally); but they must be done in an obscure order that does not coincide with <code>Ord</code>.
</dd><dt>The obscure order required for well-defined enumeration of <code>Ratio</code> is provided.</dt>
</dl>
<h3>Links</h3>
<ul>
<li>Homepage: <a href=\"http://code.haskell.org/~wren/\">http://code.haskell.org/~wren/</a></li>
<li>Hackage: <a href=\"http://hackage.haskell.org/package/prelude-safeenum\">http://hackage.haskell.org/package/prelude-safeenum</a></li>
<li>Darcs: <a href=\"http://community.haskell.org/~wren/prelude-safeenum\">http://community.haskell.org/~wren/prelude-safeenum</a></li>
<li>Haddock: <a href=\"http://community.haskell.org/~wren/prelude-safeenum/dist/doc/html/prelude-safeenum/\">Darcs version</a></li>
</ul><br /><br /><img src=\"http://www.dreamwidth.org/tools/commentcount?user=winterkoninkje&ditemid=83994\" alt=\"comment count unavailable\" height=\"12\" style=\"vertical-align: middle;\" width=\"30\" /> comments" nil nil "95d4292f1e33df4aaf2acb718e9ae441") (20 (20928 8813 633558) "http://feedproxy.google.com/~r/ezyang/~3/EpcxawDNuhI/" "Edward Z. Yang: The AST Typing Problem" nil "Tue, 28 May 2013 11:25:03 +0000" "<div class=\"document\">
<p>This <a href=\"http://lambda-the-ultimate.org/node/4170\" class=\"reference external\">Lambda the Ultimate post (dated 2010)</a> describes a rather universal problem faced by compiler writers: how does one go about adding “extra information” (e.g. types) to an AST? (The post itself divides the problem into three components: adding the information to the data types, using the information to inform the construction of the node, and using the information to inform the destruction of a node—but I’m really only interested in the question of how you define your data type, not do things to it.) In this post, I want to sum up ways of solving the problem which were described in this post, and also take a look at what some real world compilers do.  The running example lambda calculus looks like the following:</p>
<pre class=\"literal-block\">data Exp = Num Int
| Bool Bool
| Var Var
| If Exp Exp Exp
| Lambda Var Exp
| App Exp Exp
data Type = TyInt | TyBool | TyArrow Type Type
</pre>
<div id=\"separate-ir-where-nodes-are-decorated-with-types\" class=\"section\">
<h3>Separate IR where nodes are decorated with types</h3>
<p>The low-tech solution: if you need a new version of the IR with more information, just define a new IR type where each node can also carry the information. A trick to make these definitions more concise is to make a mutually recursive data structure. <a href=\"http://lambda-the-ultimate.org/node/4170#comment-63834\" class=\"reference external\">[1]</a></p>
<pre class=\"literal-block\">type TExp = (TExp', Type)
data TExp' = TNum Int
| TBool Bool
| TVar Var
| TIf TExp TExp TExp
| TLambda Var TExp
| TApp TExp TExp
</pre>
<p>Despite (or perhaps because of) it’s simplicity, this approach is extremely popular among many compilers, especially in the ML community.  A few examples include OCaml (parsetree/typedtree), MLton (AST/CoreML) and Ikarus Scheme. Part of the reason for this is that the transition from frontend language to typed language also comes with some other changes, and when a new AST is defined those changes can be combined in too.</p>
</div>
<div id=\"nullable-field\" class=\"section\">
<h3>Nullable field</h3>
<p>The unprincipled solution: use one AST, but have an optional field in which you can slot in the information. <a href=\"http://lambda-the-ultimate.org/node/4170#comment-63832\" class=\"reference external\">[2]</a></p>
<pre class=\"literal-block\">type TExp = (TExp', Maybe Type)
data TExp' = TNum Int
| TBool Bool
| TVar Var
| TIf TExp TExp TExp
| TLambda Var TExp
| TApp TExp TExp
</pre>
<p>Presented without further comment.</p>
</div>
<div id=\"explicit-typing\" class=\"section\">
<h3>Explicit typing</h3>
<p>While closely related to the separate IR solution, an explicitly typed IR takes the approach of not decorating each node with a type, but arranging that the type of any given node can be quickly computed using only local information. <a href=\"http://lambda-the-ultimate.org/node/4170#comment-63884\" class=\"reference external\">[3]</a></p>
<pre class=\"literal-block\">data TExp = TNum Int
| TBool Bool
| TVar Var
| TIf TExp TExp TExp
| TLambda Var Type TExp
| TApp TExp TExp
</pre>
<p>Here, the difference between <tt class=\"docutils literal\">TExp</tt> and <tt class=\"docutils literal\">Exp</tt> is very slight; the <tt class=\"docutils literal\">TLambda</tt> is annotated with an explicit type for the binder. As far as type-checking is concerned, this makes a world of difference: we no longer need to look outside a lambda to figure out what the binder could be.</p>
<p>Forcing your IR to be explicitly typed is often a good idea for metatheoretic reasons, as complicated type systems often don’t have decidable inference algorithms.  Both GHC’s core IR, Ur/Web's core and Coq are explicitly typed in this way.</p>
</div>
<div id=\"two-level-types\" class=\"section\">
<h3>Two-level types</h3>
<p>By deferring when you tie the knot of a recursive data-structure, you can arrange for the base functor to do double-duty for the untyped and typed representations. <a href=\"http://lambda-the-ultimate.org/node/4170#comment-63836\" class=\"reference external\">[4]</a></p>
<pre class=\"literal-block\">data ExpF a = Num Int
| Bool Bool
| Var Var
| If a a a
| Lambda Var a
| App a a
newtype Exp = Exp (ExpF Exp)
newtype TExp = TExp (ExpF TExp, Type)
</pre>
<p>The Coq kernel uses this to define its expression type, although it doesn’t use it to define an untyped variant.</p>
</div>
<div id=\"lazy-attribute-grammars\" class=\"section\">
<h3>(Lazy) Attribute grammars</h3>
<p>I don’t claim to understand this approach too well, but essentially it is a programming model distinct from usual algebraic data types which associates attributes over nodes of a tree. In some sense, it can be thought as a memoized function from AST nodes to the attributes. Many compilers do utlize maps, but only for top-level declarations. <a href=\"http://lambda-the-ultimate.org/node/4170#comment-63903\" class=\"reference external\">[5]</a></p>
</div>
<div id=\"closing-remarks\" class=\"section\">
<h3>Closing remarks</h3>
<p>There were a few things that I did not mention here which came up in the discussion. One participant suggested using <a href=\"http://lambda-the-ultimate.org/node/4170#comment-63842(polymorphicvariants)\" class=\"reference external\">polymorphic variants</a> to define the data type; this doesn’t help much with adding extra information but allows for different ways of writing traversal functions. Indeed, traversal is one of the big concerns, and the mention of <a href=\"http://lambda-the-ultimate.org/node/4170#comment-63846\" class=\"reference external\">generic programming</a> also is targeted at this problem.</p>
<p>As for my preference? It’s hard to say. I’ve worked with compilers mostly written in the “define a new IR style”, and while the initial outlay of defining two data structures is quite annoying, it is mostly a fixed cost. What’s yours?</p>
<p><strong>Also, a question.</strong> Is there a presentation of the conventional set of annotations needed to get explicitly typed System F?</p>
</div>
</div>
<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/EpcxawDNuhI\" height=\"1\" width=\"1\" />" nil nil "6899593e23b9bf5068cbeed2a5d4e558") (19 (20928 8813 632364) "http://leepike.wordpress.com/2013/05/27/book-review-automate-this/" "Lee Pike: Book Review: Automate This" nil "Tue, 28 May 2013 01:00:03 +0000" "<p>A family member gave me a copy of <em><a href=\"http://www.amazon.com/dp/1591844924\">Automate This</a></em> by Christopher Steiner as a gift a few months ago.  The subtitle of the book is “How algorithms came to rule our world.”  The book is a non-technical, fast, and easy read.  I did read a few interesting stories, such as NASA’s use of personality categorization algorithms in the 70s to predict which potential astronauts would work well together, or a math professor’s algorithmic dissection of Beatles songs.  The book particularly emphasizes algorithmic trading on Wall Street.  The somewhat non sequitur conclusion is that we need more science, engineering, and math graduates.</p>
<p>The main point of the book is that algorithms are pervasive and will become more so.  Toward this point, I think the author could have cast an even wider net, mentioning that algorithms are implemented in everything from elevator controllers to autopilots.  There is a cursory pre-computing history of algorithms at the beginning of the book that is (tenuously) tied to a Wall Street trading.</p>
<p>Rather than focus on algorithms broadly, the focus is patchy, hitting on machine learning, high-speed trading, and game theory.  Some mention of algorithms as might be taught in a “Analysis of Algorithms” course, covering basic topics like time-space complexity and decidability, would help prevent the general public from having a narrow-minded interpretation of algorithms.  Computer scientists invent, analyze, and implement algorithms every day, but much of that work is perhaps not sexy enough for a popular science book.</p>
<p>Incidentally, for the topics Steiner does cover, an excellent companion treating similar topics, but with a different focus, is Nate Silver’s (of <a href=\"http://fivethirtyeight.blogs.nytimes.com/\">538</a> fame) book, <em><a href=\"http://www.amazon.com/dp/159420411X\">The Signal and the Noise</a></em>.</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/leepike.wordpress.com/556/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/leepike.wordpress.com/556/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=leepike.wordpress.com&blog=7358124&post=556&subd=leepike&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "7ce92d0f54a14242729cf14cadaa0492") (18 (20928 8813 631804) "http://wadler.blogspot.com/2013/05/how-to-reject-paper.html" "Philip Wadler: How to reject a paper" "noreply@blogger.com (Philip Wadler)" "Mon, 27 May 2013 09:24:19 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://4.bp.blogspot.com/-Nr_jG4UMaAA/UaMkctFqUcI/AAAAAAAACCQ/wYhoeiOP6T0/s1600/reject.jpg\"><img src=\"http://4.bp.blogspot.com/-Nr_jG4UMaAA/UaMkctFqUcI/AAAAAAAACCQ/wYhoeiOP6T0/s320/reject.jpg\" height=\"240\" border=\"0\" width=\"320\" /></a></div><br /><div style=\"font-family: inherit; margin-bottom: 0px; margin-top: 0px;\" class=\"mediumb-text\"><span style=\"font-size: small;\"><a href=\"http://dl.acm.org/citation.cfm?doid=1519103.1519122\">How NOT to review a paper: the tools and techniques of the adversarial reviewer</a> and </span><a href=\"http://vixra.org/pdf/0907.0020v1.pdf\">How to reject any scientific manuscript</a>.  Photo from <a href=\"http://academicnegativity.tumblr.com/\">Academic Negativity</a>.</div>" nil nil "1bbef13d038198b9229509e60e3ae0e7") (17 (20928 8813 631380) "http://kenta.blogspot.com/2013/05/ryvpijhs-code-reflection-at-compile-time.html" "Ken T Takusagawa: [ryvpijhs] Code reflection at compile time" "noreply@blogger.com (Ken)" "Mon, 27 May 2013 08:29:01 +0000" "<p dir=\"ltr\">Consider a Haskell extension providing this function:</p><p dir=\"ltr\">compileTimeAnalyze :: (Code -> IO ()) -> a -> a</p><p dir=\"ltr\">\"compileTypeAnalyze f e\" passes to user-defined function \"f\" the parse tree (and any other useful information such as types and symbol table) of the expression \"e\" and evaluates \"f\" at compile time.  At run time, it simply evaluates \"e\".</p><p dir=\"ltr\">The likely use is to emit warnings or errors if there is something domain-specifically wrong with the code that the compiler might not detect.</p><p dir=\"ltr\">Inspired by debugging 2D graphics code.  We often want the number of references to some X coordinate be the same as the number to the corresponding Y coordinate, or else there is likely a typo where we typed X instead of Y or vice versa.</p><p dir=\"ltr\">We probably also want the user to be able to define</p><p dir=\"ltr\">compileTimeAnalyzeModule :: Code -> IO()</p><p dir=\"ltr\">which gets the entire contents of the module for static analysis.  What about static analysis across many modules?</p><p dir=\"ltr\">Template Haskell can probably do most of this.</p>" nil nil "3784fe424e47c9aea22145e5bc66107c") (16 (20928 8813 630832) "http://neilmitchell.blogspot.com/2013/05/three-types-of-build-system-dependency.html" "Neil Mitchell: Three types of build-system dependency" "noreply@blogger.com (Neil Mitchell)" "Sun, 26 May 2013 19:58:13 +0000" "<i>Summary: There are three types of dependencies you might want to express in a build system, all of which are supported by Shake.</i><br /><br />A build system, at its heart, is a system which runs commands in an order satisfying user-specified dependencies. But what kind of dependencies can be expressed? This post describes three different types of dependency, only one of which is available in Make, but all of which are available in both <a href=\"https://github.com/ndmitchell/shake#readme\">Shake</a> and <a href=\"http://martine.github.io/ninja/\">Ninja</a>.<br /><br /><b>Feature 1: Static dependencies (available in every build system)</b><br /><br />The most basic form of dependency is a static dependency, where a rule produces an output from some inputs:<br /><br /><pre>-- In Make --<br />result.tar : file1 file2<br />    tar -cf result.tar file1 file2<br /><br />-- In Shake --<br />\"result.tar\" *> \\out -> do<br />    let deps = [\"file1\",\"file2\"]<br />    need deps<br />    cmd \"tar -cf\" [out] deps<br /></pre><br />This rule says that the file <tt>result.tar</tt> depends on the inputs <tt>file1</tt> and <tt>file2</tt>, and provides a command to build <tt>result.tar</tt>. Whenever <tt>file1</tt> or <tt>file2</tt> change, the command will be run, and <tt>result.tar</tt> will be built.<br /><br />Static dependencies occur in almost every build rule, and are supported by all build tools, including Make and Shake.<br /><br /><b>Feature 2: Dynamic dependencies (available in Shake, Ninja and Redo)</b><br /><br />A more advanced dependency is where the list of dependencies itself depends on the results of previous dependencies. Imagine we want to build <tt>result.tar</tt> from the list of files stored in <tt>list.txt</tt>. The dependencies of <tt>result.tar</tt> cannot be specified statically, but depend on <i>the contents</i> of <tt>list.txt</tt>. In Shake we can write:<br /><br /><pre>\"result.tar\" *> \\out -> do<br />    need [\"list.txt\"]<br />    contents <- readFileLines \"list.txt\"<br />    need contents<br />    cmd \"tar -cf\" [out] contents<br /></pre><br />This rule describes how to build <tt>result.tar</tt>. We depend on (<tt>need</tt>) the file <tt>list.txt</tt>. We read each line from <tt>list.txt</tt> into the variable <tt>contents</tt> - being a list of the files that should go into <tt>result.tar</tt>. Next, we depend on all the files in <tt>contents</tt>, and finally call the <tt>tar</tt> program. If either <tt>list.txt</tt> changes, or any of the files listed by <tt>list.txt</tt> change, then <tt>result.tar</tt> will be rebuilt.<br /><br />This feature is necessary in almost every build system, yet is shockingly lacking from most build tools - I am only aware of it being available in <a href=\"https://github.com/ndmitchell/shake#readme\">Shake</a>, <a href=\"http://martine.github.io/ninja/\">Ninja</a> and <a href=\"https://github.com/apenwarr/redo#readme\">Redo</a>. As a common example, in Make you might write:<br /><br /><pre>result.o : result.c result_header1.h result_header2.h<br />    gcc ...<br /></pre><br />The file <tt>result.o</tt> depends on both the C source file <tt>result.c</tt> and all headers that file includes. But listing the headers both in <tt>result.c</tt> with <tt>#include</tt> directives, and in the Makefile, is a brittle form of duplication. A better approach is for the build system to run <tt>gcc -M result.c</tt> and extract the includes from there. In Shake we can write:<br /><br /><pre>\"result.o\" *> \\out -> do<br />    let src = \"result.c\"<br />    Stdout stdout <- cmd \"gcc -MM\" [src]<br />    need $ src : drop 2 (words stdout)<br />    cmd \"gcc -o\" [out] \"-c\" [src]<br /></pre><br />My experience is that about a quarter of rules require some kind of additional dependency based on previous dependencies. While you can hack round some of the issues in Make, and people have become disturbingly adept at doing so, the result often only approximates the dependencies - building either too much or too little.<br /><br /><b>Feature 3: Multiple outputs from one rule (available in Shake and Ninja)</b><br /><br />The final feature is producing multiple outputs from one command, and is used far more rarely (perhaps one or two rules in a complex build system) - but when needed, is essential. Some programs, such as GHC, can produce two outputs with one command - compiling <tt>Foo.hs</tt> produces both <tt>Foo.o</tt> and <tt>Foo.hi</tt>. As a first approximation, the <tt>.o</tt> file depends on the entire contents of the source file, while the <tt>.hi</tt> file depends only on the type signatures. A single <tt>ghc</tt> invocation needs to do all the work to produce both, but often the <tt>.hi</tt> file will be left unchanged. In Shake we can write:<br /><br /><pre>[\"Foo.hi\",\"Foo.o\"] *>> \\_ -> do<br />    need [\"Foo.hs\"]<br />    cmd \"gcc -c Foo.hs\"<br /></pre><br />While it is often possible to construct a series of dependencies to approximate a single rule producing multiple outputs, it only works in some cases, and is brittle. The only build systems I am aware of which support multiple outputs are <a href=\"https://github.com/ndmitchell/shake#readme\">Shake</a> and <a href=\"http://martine.github.io/ninja/\">Ninja</a>.<br /><br /><b>Essential features</b><br /><br />My standard advice when people ask about writing a build system is \"don't\". If some existing build system (e.g. ghc --make or Cabal) is capable of building your project, use that instead. Custom build systems are necessary for many complex projects, but many projects are not complex. If you have decided your project is complex, you should use a build tool that can express complex dependencies, both for writing the initial system and to provide the flexibility to make the inevitable changes required.<br /><br />Looking only at dependency features, I would consider it unwise to start a complex build system using a tool other than Shake or Ninja, or perhaps Redo (if you accept the absence of multiple outputs from one rule).<br /><br />Weak dependency specification in build tools, particularly Make, has left its mark on many programs. I recently talked to some OCaml hackers complaining that their tools were not \"Make friendly\" because they produced multiple output files. I wonder what lengths other tools have gone to in order to cope with weak dependency specification...<br />" nil nil "855d421047eff4dbeed42248f8e2307f") (15 (20928 8813 629674) "http://blog.moertel.com/posts/2013-05-26-python-lazy-merge.html" "Tom Moertel: Lazy merging in Python using streams" nil "Sun, 26 May 2013 00:00:00 +0000" "<div class=\"info\">Posted on May 26, 2013</div>
<div class=\"tags\">Tags: <a href=\"http://blog.moertel.com/tags/programming.html\">programming</a>, <a href=\"http://blog.moertel.com/tags/python.html\">python</a>, <a href=\"http://blog.moertel.com/tags/iterators.html\">iterators</a>, <a href=\"http://blog.moertel.com/tags/streams.html\">streams</a>, <a href=\"http://blog.moertel.com/tags/SICP.html\">SICP</a>, <a href=\"http://blog.moertel.com/tags/functional programming.html\">functional programming</a></div>
<p>Recently while solving a programming puzzle in Python, I needed to merge a series of <em>N</em> iterators, each yielding values in sorted order, into a single iterator over the sorted values. The trick is that, when asked for a value from the merged series, to determine which iterator should contribute that value, you must extract all <em>N</em> iterators’ next values. And then, of course, you can emit only one. So what do you do with the remaining <em>N</em> – 1 values you’ve extracted?</p>
<p>Rather than think about that question too hard, I just converted the iterators into an equivalent form in which the next value was always exposed and hence available for making decisions <em>before</em> extraction. This form is basically the <a href=\"http://mitpress.mit.edu/sicp/full-text/sicp/book/node69.html\"><em>stream</em> of SICP fame</a>.</p>
<p>The idea is to convert each <a href=\"http://www.python.org/dev/peps/pep-0234/\">Python iterator</a> into either <code>None</code> (representing an empty stream) or a pair containing the iterator’s next value and the iterator itself:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> iterator_to_stream(iterator):
<span class=\"co\">\"\"\"Convert an iterator into a stream (None if the iterator is empty).\"\"\"</span>
<span class=\"kw\">try</span>:
<span class=\"kw\">return</span> iterator.<span class=\"dt\">next</span>(), iterator
<span class=\"kw\">except</span> <span class=\"ot\">StopIteration</span>:
<span class=\"kw\">return</span> <span class=\"ot\">None</span></code></pre>
<p>Then to extract values from the stream, you just apply <code>stream_next</code> to it, and it will hand you back the next value and the updated state of the stream:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> stream_next(stream):
<span class=\"co\">\"\"\"Get (next_value, next_stream) from a stream.\"\"\"</span>
val, iterator = stream
<span class=\"kw\">return</span> val, iterator_to_stream(iterator)</code></pre>
<p>Since streams expose their next value, they can be ordered by that value. And for my task that was the property that made all the difference:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"ch\">import</span> heapq
<span class=\"kw\">def</span> merge(iterators):
<span class=\"co\">\"\"\"Make a lazy sorted iterator that merges lazy sorted iterators.\"\"\"</span>
streams = <span class=\"dt\">map</span>(iterator_to_stream, <span class=\"dt\">map</span>(<span class=\"dt\">iter</span>, iterators))
heapq.heapify(streams)
<span class=\"kw\">while</span> streams:
stream = heapq.heappop(streams)
<span class=\"kw\">if</span> stream is not <span class=\"ot\">None</span>:
val, stream = stream_next(stream)
heapq.heappush(streams, stream)
<span class=\"kw\">yield</span> val</code></pre>
<p>An example use:</p>
<pre class=\"sourceCode python\"><code class=\"sourceCode python\">>>> xs = merge([<span class=\"dt\">xrange</span>(<span class=\"dv\">3</span>), <span class=\"dt\">xrange</span>(<span class=\"dv\">2</span>, <span class=\"dv\">9</span>), <span class=\"dt\">xrange</span>(<span class=\"dv\">5</span>)])
>>> xs
<generator <span class=\"dt\">object</span> merge at <span class=\"bn\">0x7fea07c9d320</span>>
>>> <span class=\"dt\">list</span>(xs)
[<span class=\"dv\">0</span>, <span class=\"dv\">0</span>, <span class=\"dv\">1</span>, <span class=\"dv\">1</span>, <span class=\"dv\">2</span>, <span class=\"dv\">2</span>, <span class=\"dv\">2</span>, <span class=\"dv\">3</span>, <span class=\"dv\">3</span>, <span class=\"dv\">4</span>, <span class=\"dv\">4</span>, <span class=\"dv\">5</span>, <span class=\"dv\">6</span>, <span class=\"dv\">7</span>, <span class=\"dv\">8</span>]</code></pre>" nil nil "1f5b5eb91038585a9cadcdb08e8b6918") (14 (20928 8813 628681) "http://www.joachim-breitner.de/blog/archives/597-My-first-CTAN-package-Typesetting-Continued-Equalities.html" "Joachim Breitner: My first CTAN package: Typesetting Continued Equalities" "mail@joachim-breitner.de (nomeata)" "Sat, 25 May 2013 14:05:10 +0000" "<p>I recently had a <a href=\"http://tex.stackexchange.com/questions/108277/automatic-arrangement-of-equations-with-comments\">TeX itch to scratch</a>: I am working on a paper that has several multi-line continued equalities¹ where, depending on the size of the expressions and the explanations of each step, I chose among a few layouts. But implementing the layout together with the actual code was inefficient, as switching the layout involved changing every line.</p>
<p>So I came up with the package <tt>conteq</tt> which allows you to typeset continued equations in a simple declarative manner, e.g.</p>
<pre>\\begin{conteq}
e^{\\pi\\cdot i} \\\\
= -1               & Euler's formula \\\\
< 0                & this is an inequality \\\\
< \\sqrt 3 \\\\
= \\int e^{-x^2} dx & this is due to Gauss.
\\end{conteq}</pre>
<p>and allows you to select the layout via an parameter to the environment, or globally, or either. Also, the styling of the explanations (italics? wrapped in <tt>{</tt>...<tt>}</tt>?) can be configured simply by redefining a macro. For more details and an overview of the various styles, check out the <a href=\"http://mirrors.ctan.org/macros/latex/contrib/conteq/conteq.pdf\">package documentation</a>.<br /></p>
<p>If this sounds useful to you, fetch the <a href=\"http://ctan.org/pkg/conteq\"><tt>conteq</tt> package from CTAN</a>. But beware: It uses quite current features of the <a href=\"http://ctan.org/pkg/expl3\"><tt>expl3</tt></a> package, so you need at least the version from 2012/07/02 (TeXLive 2013 is good). You can file bug reports at the <a href=\"https://github.com/nomeata/conteq\">GitHub mirror</a> of <a href=\"http://git.nomeata.de/?p=conteq.git\">my git repository</a>.<br /></p>
<p>I’d like to thank <a href=\"http://tex.stackexchange.com/users/2707/bruno-le-floch\">Bruno Le Floch</a> and <a href=\"http://tex.stackexchange.com/users/73/joseph-wright\">Joseph Wright</a>, who made me aware of expl3 on <a href=\"http://tex.stackexchange.com/q/115700/15107\">various</a> <a href=\"http://tex.stackexchange.com/a/115816/15107\">TeX</a> <a href=\"http://tex.stackexchange.com/a/115909/15107\">Exchange</a> <a href=\"http://tex.stackexchange.com/a/115575/15107\">questions</a>.</p>
<p>¹ I haven’t heard of this term before, but <a href=\"http://english.stackexchange.com/questions/114746/correct-phrase-for-chain-of-equations\">supposedly it is the right translation</a> for the German word „Gleichungskette“.<br /></p>" nil nil "803a7c9ed9bf7ec6306752051e7b1bef") (13 (20928 8813 628054) "http://lpuppet.banquise.net/blog/2013/05/24/embedded-ruby-interpreter-and-performance-increase/" "language-puppet: Embedded ruby interpreter and performance increase" nil "Fri, 24 May 2013 17:38:00 +0000" "<p>Despite hitting a nasty (but obvious) bug involving Ruby’s GC, it seems that the feature is now stable.</p>
<p>I have been using a script for a while that computes catalogs for 30 nodes, taking into account exported resources, and runs some tests on the results. This script used to run in around 50 seconds. On my puppet master, the combined catalog generation time for those hosts is around 10 minutes¹.</p>
<p>Language-puppet was about ten times faster than the original implementation, but was wasting a significant amount of time spawning Ruby processes, rendering gobs of data (the list of all known variables and their values), and feeding them to said process, for each template evaluation. On the Ruby side, the data was interpreted (with eval), the templates were loaded and interpolated, and the response spit back to the Haskell executable. For this reason I wrote a minimalist template parser that is capable of interpolating the simplest ones while staring in Haskell land.</p>
<p>Now the Ruby process is embedded, and variable resolution happens only when needed, by providing a callback Haskell function to the Ruby runtime.</p>
<p>The whole script now runs in less than 10 seconds (six if you omit the tunnelled accesses to PuppetDB). This is now acceptable to run it before almost all commits, which was the goal. It will help making sure nothing got (too) broken, especially with regards to exported resources.</p>
<p>The software is now stable enough, and I will probably prepare a new binary release soon, along with a Debian-style repository.</p>
<hr />
<p>¹ This is not a fair comparison however. My script queries the PuppetDB for facts using a SSH tunnel, whereas the puppet master is local. On the other hand the puppet master does stuff my script doesn’t, such as updating facts and reporting data into PuppetDB (in all fairness my script updates a local PuppetDB-like database). I do not believe this accounts for an important fraction of those ten minutes, but might be wrong. Also, the puppet master has a faster CPU, and does not run unit tests on the catalogs.</p>" nil nil "dfe829c647f58f3e27bcbedce5bba38c") (12 (20928 8813 627382) "http://paulspontifications.blogspot.com/2013/05/elevator-pitch-for-haskell-short-enough.html" "Paul Johnson: Elevator pitch for Haskell short enough for an elevator ride" "noreply@blogger.com (Paul Johnson)" "Fri, 24 May 2013 15:08:27 +0000" "Greg Hale has written an \"<a href=\"https://www.fpcomplete.com/user/imalsogreg/functional-programming-elevator-pitch\">elevator pitch</a>\" for Haskell. While it is certainly a good piece of advocacy, it is quite long, and therefore not an elevator pitch. The idea of an elevator pitch is something you can deliver in the 30 seconds or so that you find yourself sharing an elevator with a potential investor.<br /><br />I've been looking for an effective Haskell elevator pitch for some years now, but the only thing I was able to come up with was just that you can deliver software better, faster and cheaper because you need fewer lines of code. This just sounds like hype.<br /><br />However I think I've now got something better. Here it is:<br /><br /><blockquote class=\"tr_bq\">Conventional languages make the programmer construct both a control flow and a data flow for the program. There is no way to check they are consistent, and anytime they are inconsistent you get a bug. In Haskell the programmer just specifies the data flow: the control flow is up to the compiler. That simplifies the program, cutting down the work and completely preventing a big class of errors.</blockquote>" nil nil "7f8ff4c0f6371238c73423543a61a113") (11 (20928 8813 506007) "http://twanvl.nl/blog/agda/sorting" "Twan van Laarhoven: The complete correctness of sorting" nil "Thu, 23 May 2013 12:43:33 +0000" "<p>A while ago I set out to prove the correctness of <a href=\"http://en.wikipedia.org/wiki/Merge_sort\">merge sort</a> in Agda.
Of course this has been done before.
But <a href=\"http://mazzo.li/posts/AgdaSort.html\">most</a> <a href=\"http://www.iis.sinica.edu.tw/~scm/2007/agda-exercise-proving-that-mergesort-returns-ordered-list/\">proofs</a> you find are far from complete.
All they prove is a lemma such as
</p><pre class=\"agda\"><span class=\"varid\">is-sorted</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> (<span class=\"varid\">xs</span> <span class=\"listcon\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">IsSortedList</span> (<span class=\"varid\">sort</span> <span class=\"varid\">xs</span>)
</pre><p>Maybe even restricted to lists of natural numbers.
While it is nice that a sort function indeed produces a sorted output, that is only half of the story.
Consider this function:
</p><pre class=\"agda\"><span class=\"varid\">cheat-sort</span> <span class=\"listcon\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span>
<span class=\"varid\">cheat-sort</span> <span class=\"keyglyph\">_</span> <span class=\"keyglyph\">=</span> <span class=\"listcon\">[</span><span class=\"listcon\">]</span>
</pre><p>Clearly the empty list is sorted. So we are done.
What is missing is the second half of correctness of sorting: that the output is a permutation of the input.
You want something like:
</p><pre class=\"agda\"><span class=\"varid\">sort</span> <span class=\"listcon\">:</span> (<span class=\"varid\">xs</span> <span class=\"listcon\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Sorted'</span> <span class=\"conid\">A</span>
<span class=\"keyword\">record</span> <span class=\"conid\">Sorted'</span> (<span class=\"varid\">xs</span> <span class=\"listcon\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span>) <span class=\"listcon\">:</span> <span class=\"conid\">Set</span> <span class=\"keyword\">where</span>
<span class=\"keyword\">field</span>
<span class=\"varid\">ys</span>       <span class=\"listcon\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span>
<span class=\"varid\">isSorted</span> <span class=\"listcon\">:</span> <span class=\"conid\">IsSorted</span> <span class=\"varid\">ys</span>
<span class=\"varid\">isPerm</span>   <span class=\"listcon\">:</span> <span class=\"conid\">IsPermutation</span> <span class=\"varid\">ys</span> <span class=\"varid\">xs</span>
</pre><p>While I was at it, I decided to add the third half of correctness: a bound on the runtime or computational complexity.
In the end I was able to define:
</p><pre class=\"agda\"><span class=\"varid\">insertion-sort</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> (<span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span>) <span class=\"varop\">in-time</span> (<span class=\"varid\">length</span> <span class=\"varid\">xs</span> <span class=\"varop\">*</span> <span class=\"varid\">length</span> <span class=\"varid\">xs</span>)
<span class=\"varid\">selection-sort</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> (<span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span>) <span class=\"varop\">in-time</span> (<span class=\"varid\">length</span> <span class=\"varid\">xs</span> <span class=\"varop\">*</span> <span class=\"varid\">length</span> <span class=\"varid\">xs</span>)
<span class=\"varid\">merge-sort</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> (<span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span>) <span class=\"varop\">in-time</span> (<span class=\"varid\">length</span> <span class=\"varid\">xs</span> <span class=\"varop\">*</span> <span class=\"varop\">⌈log₂</span> <span class=\"varid\">length</span> <span class=\"varid\">xs</span> <span class=\"varop\">⌉</span>)
</pre><p>This was not as easy as I would have hoped.
In this post I will not bore you with all the details, I'll just go over some of the highlights. The <a href=\"https://gist.github.com/twanvl/5635740\">full code is on github</a>.
</p><h2><a name=\"what-it-means-to-be-sorted\"></a>What it means to be sorted </h2>
<p>There are roughly two ways to define sorted lists that I know of:
</p><ol><li> Parametrize the sorted list by a lower bound on the values it contains. For a cons cell the head should be smaller than the lower bound, and the tail should be larger than the head. This requires the type to have a smallest element, but you can adjoin -∞ with a new datatype.</li>
<li> Parametrize the sorted list by a list of all values in it. For a cons cell require that the head is smaller than all the values in the tail.</li>
</ol><p>Since I already need to parametrize by all values in the list to show that the sorted list contains a permutation of them, I went with the second approach:
</p><pre class=\"agda\"><span class=\"comment\">-- A proof that x is less than all values in xs</span>
<span class=\"keyword\">data</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≤*</span><span class=\"keyglyph\">_</span> (<span class=\"varid\">x</span> <span class=\"listcon\">:</span> <span class=\"conid\">A</span>) <span class=\"listcon\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"keyword\">where</span>
<span class=\"listcon\">[</span><span class=\"listcon\">]</span>  <span class=\"listcon\">:</span> <span class=\"varid\">x</span> <span class=\"varop\">≤*</span> <span class=\"listcon\">[</span><span class=\"listcon\">]</span>
<span class=\"keyglyph\">_</span>∷<span class=\"keyglyph\">_</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">y</span> <span class=\"varid\">ys</span>} <span class=\"keyglyph\">→</span> (<span class=\"varid\">x</span> <span class=\"varop\">≤</span> <span class=\"varid\">y</span>) <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≤*</span> <span class=\"varid\">ys</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≤*</span> (<span class=\"varid\">y</span> ∷ <span class=\"varid\">ys</span>)
<div class=\"empty-line\"></div>
<span class=\"comment\">-- Proof that a list is sorted</span>
<span class=\"keyword\">data</span> <span class=\"conid\">IsSorted</span> <span class=\"listcon\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"keyword\">where</span>
<span class=\"listcon\">[</span><span class=\"listcon\">]</span>  <span class=\"listcon\">:</span> <span class=\"conid\">IsSorted</span> <span class=\"listcon\">[</span><span class=\"listcon\">]</span>
<span class=\"keyglyph\">_</span>∷<span class=\"keyglyph\">_</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">xs</span>} <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≤*</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">IsSorted</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">IsSorted</span> (<span class=\"varid\">x</span> ∷ <span class=\"varid\">xs</span>)
</pre><h2><a name=\"what-it-means-to-be-a-permutation\"></a>What it means to be a permutation </h2>
<p>To show that one list is a permutation of another I again used two data types.
Suppose that we know that <tt><span class=\"varid\">xs</span></tt> is a permutation of <tt><span class=\"varid\">ys</span></tt>. Then when is <tt class=\"complex\"><span class=\"varid\">x</span> ∷ <span class=\"varid\">xs</span></tt> a permutation of some list <tt><span class=\"varid\">xys</span></tt>? Well, we can permute <tt><span class=\"varid\">xs</span></tt> to <tt><span class=\"varid\">ys</span></tt>, and insert <tt><span class=\"varid\">x</span></tt> anywhere. I used <tt class=\"complex\"><span class=\"varop\">◂</span></tt> to denote this insertion,
</p><pre class=\"agda\"><span class=\"comment\">-- x ◂ xs ≡ xys means that xys is equal to xs with x inserted somewhere</span>
<span class=\"keyword\">data</span> <span class=\"keyglyph\">_</span><span class=\"varop\">◂</span><span class=\"keyglyph\">_</span><span class=\"varop\">≡</span><span class=\"keyglyph\">_</span> (<span class=\"varid\">x</span> <span class=\"listcon\">:</span> <span class=\"conid\">A</span>) <span class=\"listcon\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span> <span class=\"keyword\">where</span>
<span class=\"varid\">here</span>  <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">xs</span>}           <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">◂</span> <span class=\"varid\">xs</span> <span class=\"varop\">≡</span> (<span class=\"varid\">x</span> ∷ <span class=\"varid\">xs</span>)
<span class=\"varid\">there</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">y</span>} {<span class=\"varid\">xs</span>} {<span class=\"varid\">xys</span>} <span class=\"keyglyph\">→</span> (<span class=\"varid\">p</span> <span class=\"listcon\">:</span> <span class=\"varid\">x</span> <span class=\"varop\">◂</span> <span class=\"varid\">xs</span> <span class=\"varop\">≡</span> <span class=\"varid\">xys</span>) <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">◂</span> (<span class=\"varid\">y</span> ∷ <span class=\"varid\">xs</span>) <span class=\"varop\">≡</span> (<span class=\"varid\">y</span> ∷ <span class=\"varid\">xys</span>)
</pre><pre class=\"agda\"><span class=\"comment\">-- Proof that a list is a permutation of another one</span>
<span class=\"keyword\">data</span> <span class=\"conid\">IsPermutation</span> <span class=\"listcon\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span> <span class=\"keyword\">where</span>
<span class=\"listcon\">[</span><span class=\"listcon\">]</span>  <span class=\"listcon\">:</span> <span class=\"conid\">IsPermutation</span> <span class=\"listcon\">[</span><span class=\"listcon\">]</span> <span class=\"listcon\">[</span><span class=\"listcon\">]</span>
<span class=\"keyglyph\">_</span>∷<span class=\"keyglyph\">_</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">x</span> <span class=\"varid\">xs</span> <span class=\"varid\">ys</span> <span class=\"varid\">xys</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">p</span> <span class=\"listcon\">:</span> <span class=\"varid\">x</span> <span class=\"varop\">◂</span> <span class=\"varid\">ys</span> <span class=\"varop\">≡</span> <span class=\"varid\">xys</span>)
<span class=\"keyglyph\">→</span> (<span class=\"varid\">ps</span> <span class=\"listcon\">:</span> <span class=\"conid\">IsPermutation</span> <span class=\"varid\">xs</span> <span class=\"varid\">ys</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">IsPermutation</span> (<span class=\"varid\">x</span> ∷ <span class=\"varid\">xs</span>) <span class=\"varid\">xys</span>
</pre><p>Now the <tt><span class=\"conid\">Sorted</span></tt> data type has three components: the sorted list, a proof that it is sorted, and a proof that it is a permutation of the input. These parts are either all <tt class=\"complex\"><span class=\"listcon\">[</span><span class=\"listcon\">]</span></tt>, or they are all <tt class=\"complex\"><span class=\"keyglyph\">_</span>∷<span class=\"keyglyph\">_</span></tt>.
It turns out to be much nicer to combine the parts together,
</p><pre class=\"agda\"><span class=\"comment\">-- Sorted permutations of a list</span>
<span class=\"keyword\">data</span> <span class=\"conid\">Sorted</span> <span class=\"listcon\">:</span> <span class=\"conid\">List</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Set</span>  <span class=\"keyword\">where</span>
<span class=\"listcon\">[</span><span class=\"listcon\">]</span>   <span class=\"listcon\">:</span> <span class=\"conid\">Sorted</span> <span class=\"listcon\">[</span><span class=\"listcon\">]</span>
<span class=\"varid\">cons</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> {<span class=\"varid\">xs</span> <span class=\"varid\">xxs</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">p</span> <span class=\"listcon\">:</span> <span class=\"varid\">x</span> <span class=\"varop\">◂</span> <span class=\"varid\">xs</span> <span class=\"varop\">≡</span> <span class=\"varid\">xxs</span>) <span class=\"comment\">-- inserting x somewhere into xs gives xxs</span>
<span class=\"keyglyph\">→</span> (<span class=\"varid\">least</span> <span class=\"listcon\">:</span> <span class=\"varid\">x</span> <span class=\"varop\">≤*</span> <span class=\"varid\">xs</span>)  <span class=\"comment\">-- x is the smallest element of the list</span>
<span class=\"keyglyph\">→</span> (<span class=\"varid\">rest</span> <span class=\"listcon\">:</span> <span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span>) <span class=\"comment\">-- and we have also sorted xs</span>
<span class=\"keyglyph\">→</span> <span class=\"conid\">Sorted</span> <span class=\"varid\">xxs</span>
</pre><p>Of course <tt><span class=\"conid\">Sorted</span></tt> and <tt class=\"complex\"><span class=\"conid\">Sorted'</span></tt> are equivalent.
</p><p>As an aside, these are all the ingredients necessary for proving
</p><pre class=\"agda\"><span class=\"varid\">sorted-unique</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">xs</span>} <span class=\"keyglyph\">→</span> (<span class=\"varid\">ys</span> <span class=\"varid\">zs</span> <span class=\"listcon\">:</span> <span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span>)
<span class=\"keyglyph\">→</span> <span class=\"varid\">sorted-to-List</span> <span class=\"varid\">ys</span> <span class=\"varop\">≡</span> <span class=\"varid\">sorted-to-List</span> <span class=\"varid\">zs</span>
</pre><h2><a name=\"a-monad-for-keeping-track-of-the-runtime\"></a>A monad for keeping track of the runtime </h2>
<p>To be able to reason about the runtime, as measured in the number of comparisons performed, I decided to use a monad. The type is simply
</p><pre class=\"agda\"><span class=\"keyword\">data</span> <span class=\"keyglyph\">_</span><span class=\"varop\">in-time</span><span class=\"keyglyph\">_</span> (<span class=\"conid\">A</span> <span class=\"listcon\">:</span> <span class=\"conid\">Set</span>) (<span class=\"varid\">n</span> <span class=\"listcon\">:</span> <span class=\"conop\">ℕ</span>) <span class=\"listcon\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span> <span class=\"keyword\">where</span>
<span class=\"varid\">box</span> <span class=\"listcon\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">C</span> <span class=\"conid\">A</span> <span class=\"varid\">n</span>
</pre><p>the constructor <tt><span class=\"varid\">box</span></tt> is private, and it can only be accessed through the standard monad operations,
</p><pre class=\"agda\"><span class=\"varid\">return</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"conid\">A</span> <span class=\"varid\">n</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"varop\">in-time</span> <span class=\"varid\">n</span>
<div class=\"empty-line\"></div>
<span class=\"keyglyph\">_</span><span class=\"varop\">>>=</span><span class=\"keyglyph\">_</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"conid\">A</span> <span class=\"conid\">B</span>} {<span class=\"varid\">m</span> <span class=\"varid\">n</span>} <span class=\"keyglyph\">→</span> <span class=\"conid\">A</span> <span class=\"varop\">in-time</span> <span class=\"varid\">n</span> <span class=\"keyglyph\">→</span> (<span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varop\">in-time</span> <span class=\"varid\">m</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">B</span> <span class=\"varop\">in-time</span> (<span class=\"varid\">n</span> <span class=\"varop\">+</span> <span class=\"varid\">m</span>)
</pre><p>Then the sorting functions will be parametrized by a function that for some partial order decides between <tt class=\"complex\"><span class=\"varid\">x</span> <span class=\"varop\">≤</span> <span class=\"varid\">y</span></tt> and <tt class=\"complex\"><span class=\"varid\">y</span> <span class=\"varop\">≤</span> <span class=\"varid\">x</span></tt> in one step, using the monad we defined above:
</p><pre class=\"agda\"><span class=\"keyword\">module</span> <span class=\"conid\">Sorting</span>
{<span class=\"conid\">A</span> <span class=\"listcon\">:</span> <span class=\"conid\">Set</span>} {<span class=\"varid\">l</span>} {<span class=\"keyglyph\">_</span><span class=\"varop\">≤</span><span class=\"keyglyph\">_</span> <span class=\"listcon\">:</span> <span class=\"conid\">Rel</span> <span class=\"conid\">A</span> <span class=\"varid\">l</span>}
(<span class=\"varid\">isPartialOrder</span> <span class=\"listcon\">:</span> <span class=\"conid\">IsPartialOrder</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≡</span><span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≤</span><span class=\"keyglyph\">_</span>)
(<span class=\"keyglyph\">_</span><span class=\"varop\">≤?</span><span class=\"keyglyph\">_</span> <span class=\"listcon\">:</span> (<span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"listcon\">:</span> <span class=\"conid\">A</span>) <span class=\"keyglyph\">→</span> (<span class=\"varid\">x</span> <span class=\"varop\">≤</span> <span class=\"varid\">y</span> <span class=\"conop\">⊎</span> <span class=\"varid\">y</span> <span class=\"varop\">≤</span> <span class=\"varid\">x</span>) <span class=\"varop\">in-time</span> <span class=\"num\">1</span>)
<span class=\"keyword\">where</span> <span class=\"varop\">...</span>
</pre><p>Note that I specify that <tt class=\"complex\"><span class=\"keyglyph\">_</span><span class=\"varop\">≤</span><span class=\"keyglyph\">_</span></tt> is a <em>partial</em> order,
because the Agda standard library definition of a total order actually comes with a function
</p><pre class=\"agda\"><span class=\"varid\">total</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> (<span class=\"varid\">x</span> <span class=\"varop\">≤</span> <span class=\"varid\">y</span>) <span class=\"conop\">⊎</span> (<span class=\"varid\">y</span> <span class=\"varop\">≤</span> <span class=\"varid\">x</span>)
</pre><p>which would defeat the whole prupose of <tt class=\"complex\"><span class=\"keyglyph\">_</span><span class=\"varop\">≤?</span><span class=\"keyglyph\">_</span></tt>.
In fact, the standard <tt><span class=\"conid\">TotalOrder</span></tt>s are decidable up to base equality, and if the base equality is propositional equality, then they are decidable. I.e.
</p><pre class=\"agda\"><span class=\"varid\">total-decidable</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">a</span> <span class=\"varid\">r</span>} {<span class=\"conid\">A</span> <span class=\"listcon\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span>} <span class=\"keyglyph\">→</span> (<span class=\"keyglyph\">_</span><span class=\"varop\">≤</span><span class=\"keyglyph\">_</span> <span class=\"listcon\">:</span> <span class=\"conid\">Rel</span> <span class=\"conid\">A</span> <span class=\"varid\">r</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">IsTotalOrder</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≡</span><span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≤</span><span class=\"keyglyph\">_</span>
<span class=\"keyglyph\">→</span> <span class=\"conid\">IsDecTotalOrder</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≡</span><span class=\"keyglyph\">_</span> <span class=\"keyglyph\">_</span><span class=\"varop\">≤</span><span class=\"keyglyph\">_</span>
</pre><p>See the source for the proof of this side theorem. It relies on a trick to show that <tt class=\"complex\"><span class=\"varid\">total</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span></tt> can only be different from <tt class=\"complex\"><span class=\"varid\">total</span> <span class=\"varid\">y</span> <span class=\"varid\">x</span></tt> if <tt class=\"complex\"><span class=\"varid\">x</span> <span class=\"varop\">≢</span> <span class=\"varid\">y</span></tt>. Which holds for propositional equality, but not in general.
</p><h2><a name=\"logarithms\"></a>Logarithms </h2>
<p>To be able to complete the specification of merge sort, we still need to add some missing functions on natural numbers. In particular, we need a logarithm.
This logarithm turns out to be surprisingly tricky to define in Agda.
Why? Because the usual definition uses non-structural recursion. In haskell you would write
</p><pre class=\"haskell\"><span class=\"comment\">-- @log n@ calculates ⌊log₂ (n+1)⌋</span>
<span class=\"varid\">log</span> <span class=\"num\">0</span> <span class=\"keyglyph\">=</span> <span class=\"num\">0</span>
<span class=\"varid\">log</span> <span class=\"varid\">n</span> <span class=\"keyglyph\">=</span> <span class=\"num\">1</span> <span class=\"varop\">+</span> <span class=\"varid\">log</span> (<span class=\"varid\">n</span> `<span class=\"varid\">div`</span> <span class=\"num\">2</span>)
</pre><p>But Agda is not able to see that <tt class=\"complex\"><span class=\"varid\">n</span> `<span class=\"varid\">div`</span> <span class=\"num\">2</span></tt> (or in agda notation, <tt class=\"complex\"><span class=\"varop\">⌊</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌋</span></tt>) is smaller than <tt><span class=\"varid\">n</span></tt>.
There are two approaches to circumvent this problem:
</p><ol><li> Use a different algorithm: Convert <tt><span class=\"varid\">n</span></tt> to a binary representation, and count the number of digits.</li>
<li> Use well-founded recursion, manually supplying a proof that <tt class=\"complex\"><span class=\"varop\">⌊</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌋</span> <span class=\"varop\"><</span> <span class=\"varid\">n</span></tt>.</li>
</ol><p>I went with the second option, because I will also be using the same shape of recursion inside merge sort itself.
The standard way to use well-founded recursion is through the function <tt class=\"complex\"><span class=\"keyglyph\"><-</span><span class=\"varid\">rec</span></tt>, which works a bit like <tt><span class=\"varid\">fix</span></tt> in haskell, except that you need to pass in a proof that the argument is smaller. The code would look like this:
</p><pre class=\"agda\"><span class=\"varid\">log</span> <span class=\"keyglyph\">=</span> <span class=\"keyglyph\"><-</span><span class=\"varid\">rec</span> <span class=\"varid\">log'</span>
<span class=\"keyword\">where</span>
<span class=\"varid\">log′</span> <span class=\"varid\">self</span> <span class=\"num\">0</span> <span class=\"keyglyph\">=</span> <span class=\"num\">0</span>
<span class=\"varid\">log′</span> <span class=\"varid\">self</span> (<span class=\"varid\">suc</span> <span class=\"varid\">n</span>) <span class=\"keyglyph\">=</span> <span class=\"num\">1</span> <span class=\"varop\">+</span> <span class=\"varid\">self</span> <span class=\"varop\">⌊</span> <span class=\"varid\">suc</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌋</span> (<span class=\"comment\">{-proof ommitted-}</span>)
</pre><p>But this leads to a problem as soon as you want to prove a property of logarithms. For example, you would think that <tt class=\"complex\"><span class=\"varid\">log</span> (<span class=\"varid\">suc</span> <span class=\"varid\">n</span>) <span class=\"varop\">≡</span> <span class=\"num\">1</span> <span class=\"varop\">+</span> (<span class=\"varid\">log</span> <span class=\"varop\">⌊</span> <span class=\"varid\">suc</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌋</span>)</tt>. But that is not definitionally true, since one <tt class=\"complex\"><span class=\"keyglyph\"><-</span><span class=\"varid\">rec</span></tt> is not like another. I found that the well-founded recursion library was in general a pain to work with, especially because it uses so many type synonyms. My solution was to use the slightly lower level accessibility relation. A value of type <tt class=\"complex\"><span class=\"conid\">Acc</span> <span class=\"keyglyph\">_</span><span class=\"varop\"><′</span><span class=\"keyglyph\">_</span> <span class=\"varid\">n</span></tt> allows you to do recursion with any <tt class=\"complex\"><span class=\"varid\">m</span> <span class=\"varop\"><′</span> <span class=\"varid\">n</span></tt>. Now I can use actual recursion:
</p><pre class=\"agda\"><span class=\"varid\">log-acc</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">n</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Acc</span> <span class=\"keyglyph\">_</span><span class=\"varop\"><′</span><span class=\"keyglyph\">_</span> <span class=\"varid\">n</span> <span class=\"keyglyph\">→</span> <span class=\"conop\">ℕ</span>
<span class=\"varid\">log-acc</span> <span class=\"num\">0</span> <span class=\"keyglyph\">_</span> <span class=\"keyglyph\">=</span> <span class=\"num\">0</span>
<span class=\"varid\">log-acc</span> (<span class=\"varid\">suc</span> <span class=\"varid\">n</span>) (<span class=\"varid\">acc</span> <span class=\"varid\">more</span>) <span class=\"keyglyph\">=</span> <span class=\"num\">1</span> <span class=\"varop\">+</span> <span class=\"varid\">log-acc</span> <span class=\"varop\">⌊</span> <span class=\"varid\">suc</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌋</span> (<span class=\"varid\">more</span> <span class=\"keyglyph\">_</span> <span class=\"comment\">{-proof ommitted-}</span>)
</pre><p>And use the well-foundedness of ℕ to get an <tt><span class=\"conid\">Acc</span></tt> for any number:
</p><pre class=\"agda\"><span class=\"varid\">log</span> <span class=\"listcon\">:</span> <span class=\"conop\">ℕ</span> <span class=\"keyglyph\">→</span> <span class=\"conop\">ℕ</span>
<span class=\"varid\">log</span> <span class=\"varid\">n</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">log-acc</span> <span class=\"varid\">n</span> (<span class=\"keyglyph\"><-</span><span class=\"varid\">well-founded</span> <span class=\"varid\">n</span>)
<div class=\"empty-line\"></div>
<span class=\"varop\">⌈log₂</span><span class=\"keyglyph\">_</span><span class=\"varop\">⌉</span> <span class=\"listcon\">:</span> <span class=\"conop\">ℕ</span> <span class=\"keyglyph\">→</span> <span class=\"conop\">ℕ</span>
<span class=\"varop\">⌈log₂</span> <span class=\"varid\">n</span> <span class=\"varop\">⌉</span> <span class=\"keyglyph\">=</span> <span class=\"varid\">log</span> (<span class=\"varid\">pred</span> <span class=\"varid\">n</span>)
</pre><p>There is still a snag when proving properties of <tt><span class=\"varid\">log</span></tt> or <tt class=\"complex\"><span class=\"varid\">log-acc</span></tt>, namely that you need to prove that <tt class=\"complex\">(<span class=\"varid\">more</span> <span class=\"varid\">n</span> <span class=\"varop\">...</span>) <span class=\"varop\">≡</span> <span class=\"keyglyph\"><-</span><span class=\"varid\">well-founded</span> <span class=\"varid\">n</span></tt>. But the accessibility relation doesn't actually matter for the computation, so I decided to just postulate
</p><pre class=\"agda\"><span class=\"varid\">postulate</span> <span class=\"varid\">acc-irrelevance</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">n</span> <span class=\"listcon\">:</span> <span class=\"conop\">ℕ</span>} <span class=\"keyglyph\">→</span> {<span class=\"varid\">a</span> <span class=\"varid\">b</span> <span class=\"listcon\">:</span> <span class=\"conid\">Acc</span> <span class=\"keyglyph\">_</span><span class=\"varop\"><′</span><span class=\"keyglyph\">_</span> <span class=\"varid\">n</span>} <span class=\"keyglyph\">→</span> <span class=\"varid\">a</span> <span class=\"varop\">≡</span> <span class=\"varid\">b</span>
<span class=\"comment\">-- this also follows from function extensionality</span>
</pre><p>If anyone knows a better way to prove properties of functions defined with well-founded recursion, I am open to suggestions.
</p><h2><a name=\"vectors-versus-lists\"></a>Vectors versus lists </h2>
<p>While working on the proofs I had to choose: Do I use fixed length <tt><span class=\"conid\">Vec</span></tt>s or variable length <tt><span class=\"conid\">List</span></tt>s? Both have their pros and cons.
</p><p>On the one hand, the sorting functions with vectors look a bit nicer, because we can use <tt><span class=\"varid\">n</span></tt> instead of <tt class=\"complex\"><span class=\"varid\">length</span> <span class=\"varid\">xs</span></tt>:
</p><pre class=\"agda\"><span class=\"varid\">merge-sort</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">n</span>} (<span class=\"varid\">xs</span> <span class=\"listcon\">:</span> <span class=\"conid\">Vec</span> <span class=\"conid\">A</span> <span class=\"varid\">n</span>) <span class=\"keyglyph\">→</span> <span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span> <span class=\"varop\">in-time</span> (<span class=\"varid\">n</span> <span class=\"varop\">*</span> <span class=\"varop\">⌈log₂</span> <span class=\"varid\">n</span> <span class=\"varop\">⌉</span>)
</pre><p>Additionally, with lists we can only do recursion on the input list, with vectors we can do recursion on the length of the list. The former works fine for insertion sort, where in each step you do something with the head element of the list; but it fails for selection and merge sort.
</p><p>On the other hand, with vectors you sometimes can't even <em>state</em> the property that one vector is equal to another.
For the term <tt class=\"complex\"><span class=\"varid\">xs</span> <span class=\"varop\">≡</span> <span class=\"varid\">ys</span> <span class=\"varop\">++</span> <span class=\"varid\">zs</span></tt> to be well-typed, <tt><span class=\"varid\">xs</span></tt> must have the type <tt class=\"complex\"><span class=\"conid\">Vec</span> <span class=\"conid\">A</span> (<span class=\"varid\">m</span> <span class=\"varop\">+</span> <span class=\"varid\">n</span>)</tt>.
</p><p>I went back and forth a couple of times between vectors and lists.
In the end I settled for using vectors only when needed, and specifying properties in terms of lists.
For example the split function for merge sort has the type
</p><pre class=\"agda\"><span class=\"varid\">splitHalf</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">n</span>} <span class=\"keyglyph\">→</span> (<span class=\"varid\">xs</span> <span class=\"listcon\">:</span> <span class=\"conid\">Vec</span> <span class=\"conid\">A</span> <span class=\"varid\">n</span>)
<span class=\"keyglyph\">→</span> ∃₂ <span class=\"keyglyph\">\\</span>(<span class=\"varid\">ys</span> <span class=\"listcon\">:</span> <span class=\"conid\">Vec</span> <span class=\"conid\">A</span> <span class=\"varop\">⌈</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌉</span>) (<span class=\"varid\">zs</span> <span class=\"listcon\">:</span> <span class=\"conid\">Vec</span> <span class=\"conid\">A</span> <span class=\"varop\">⌊</span> <span class=\"varid\">n</span> <span class=\"varop\">/2⌋</span>)
<span class=\"keyglyph\">→</span> <span class=\"varid\">toList</span> <span class=\"varid\">ys</span> <span class=\"varop\">++</span> <span class=\"varid\">toList</span> <span class=\"varid\">zs</span> <span class=\"varop\">≡</span> <span class=\"varid\">toList</span> <span class=\"varid\">xs</span>
</pre><p>So instead of using <tt class=\"complex\">Vec<span class=\"varop\">.</span><span class=\"keyglyph\">_</span><span class=\"varop\">++</span><span class=\"keyglyph\">_</span></tt>, I use <tt class=\"complex\">List<span class=\"varop\">.</span><span class=\"keyglyph\">_</span><span class=\"varop\">++</span><span class=\"keyglyph\">_</span></tt>.
In this style 'select' from selection sort looks like
</p><pre class=\"agda\"><span class=\"varid\">select</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"varid\">n</span>} (<span class=\"varid\">xs</span> <span class=\"listcon\">:</span> <span class=\"conid\">Vec</span> <span class=\"conid\">A</span> (<span class=\"varid\">suc</span> <span class=\"varid\">n</span>))
<span class=\"keyglyph\">→</span> (∃₂ <span class=\"keyglyph\">\\</span><span class=\"varid\">y</span> <span class=\"varid\">ys</span> <span class=\"keyglyph\">→</span> (<span class=\"varid\">y</span> <span class=\"varop\">◂</span> <span class=\"varid\">toList</span> <span class=\"varid\">ys</span> <span class=\"varop\">≡</span> <span class=\"varid\">toList</span> <span class=\"varid\">xs</span>) × (<span class=\"varid\">y</span> <span class=\"varop\">≤*</span> <span class=\"varid\">toList</span> <span class=\"varid\">ys</span>)) <span class=\"varop\">in-time</span> <span class=\"varid\">n</span>
</pre><p>I.e. given a <em>vector</em> <tt><span class=\"varid\">xs</span></tt> with <tt class=\"complex\"><span class=\"varid\">n+1</span></tt> elements, return a vector <tt><span class=\"varid\">ys</span></tt> with <tt><span class=\"varid\">n</span></tt> elements, such that inserting <tt><span class=\"varid\">y</span></tt> into it gives us back <tt><span class=\"varid\">xs</span></tt>. And this item <tt><span class=\"varid\">y</span></tt> should be the smallest one.
</p><h2><a name=\"extension-expected-runtime\"></a>Extension: expected runtime </h2>
<p>An extension of this post would be to look at randomized sorting algorithms. In particular, quick sort with a randomly chosen pivot has expected runtime <tt class=\"complex\"><span class=\"conid\">O</span>(<span class=\"varid\">n</span> <span class=\"varop\">*</span> <span class=\"varid\">log</span> <span class=\"varid\">n</span>)</tt>. At first I thought that all that would be needed is a function
</p><pre class=\"agda\"><span class=\"varid\">expected</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"conid\">P</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">ns</span> <span class=\"listcon\">:</span> <span class=\"conid\">List</span> <span class=\"conop\">ℕ</span>)             <span class=\"comment\">-- A list of numbers</span>
<span class=\"keyglyph\">→</span> <span class=\"conid\">All</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">n</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">P</span> <span class=\"varop\">in-time</span> <span class=\"varid\">n</span>) <span class=\"varid\">ns</span> <span class=\"comment\">-- for each n we have P in-time n</span>
<span class=\"keyglyph\">→</span> <span class=\"conid\">P</span> <span class=\"varop\">in-time</span> <span class=\"varop\">⌈mean</span> <span class=\"varid\">ns</span> <span class=\"varop\">⌉</span>      <span class=\"comment\">-- then expect time is mean of ns</span>
</pre><p>But that is not quite right, since if we actually knew the runtimes <tt><span class=\"varid\">ns</span></tt> we could just pick the fastest one.
With the randomized quicksort you will end up in a situation where you have two or more computations to choose from, and you know that some are faster than the others, but you don't yet know which one. That sounds a bit classical. A second idea is to return the runtimes at a later time, something like
</p><pre class=\"agda\"><span class=\"varid\">expected</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> {<span class=\"conid\">P</span>} {<span class=\"varid\">long-time</span>}
<span class=\"keyglyph\">→</span> (<span class=\"varid\">xs</span> <span class=\"listcon\">:</span> <span class=\"conid\">List</span> (<span class=\"keyglyph\">\\</span><span class=\"varid\">ex</span> <span class=\"varid\">n</span> <span class=\"conid\">P</span> <span class=\"varop\">in-time</span> <span class=\"varid\">n</span>) <span class=\"varop\">in-time</span> <span class=\"varid\">long-time</span>)
<span class=\"keyglyph\">→</span> <span class=\"conid\">P</span> <span class=\"varop\">in-time</span> <span class=\"varop\">⌈mean</span> <span class=\"varid\">map</span> <span class=\"varid\">proj1</span> <span class=\"varid\">xs</span> <span class=\"varop\">⌉</span>
</pre><p>But this is not quite right either, since after <tt class=\"complex\"><span class=\"varid\">long-time</span></tt> computing <tt><span class=\"conid\">P</span></tt> (i.e. a sorting) can be done in 0 time.
Rather, we need to decouple the proof about the runtime from the computation.
This is not possible with the <tt class=\"complex\"><span class=\"keyglyph\">_</span><span class=\"varop\">in-time</span><span class=\"keyglyph\">_</span></tt> monad. We would need to get rid of the runtime from the type, and store it as a value instead.
</p><p>I have tried redoing the proofs in this post with the monad
</p><pre class=\"agda\"><span class=\"keyword\">data</span> <span class=\"conid\">Timed</span> (<span class=\"conid\">A</span> <span class=\"listcon\">:</span> <span class=\"conid\">Set</span>) <span class=\"listcon\">:</span> <span class=\"conid\">Set</span> <span class=\"varid\">a</span> <span class=\"keyword\">where</span>
<span class=\"keyglyph\">_</span><span class=\"varop\">in-time</span><span class=\"keyglyph\">_</span> <span class=\"listcon\">:</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conop\">ℕ</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Timed</span> <span class=\"conid\">A</span>
<span class=\"varid\">runtime</span> <span class=\"listcon\">:</span> <span class=\"conid\">Timed</span> <span class=\"conid\">A</span> <span class=\"keyglyph\">→</span> <span class=\"conop\">ℕ</span>
</pre><p>But I didn't succeed; I ended up with the baffling error message
</p><pre class=\"agda\"><span class=\"varid\">runtime</span> (<span class=\"varid\">big-lambda-term</span> (<span class=\"varid\">unbox</span> (<span class=\"varid\">x</span> <span class=\"varop\">≤?</span> <span class=\"varid\">u</span>)))
<span class=\"varop\">!=</span>
<span class=\"varid\">runtime</span> (<span class=\"varid\">big-lambda-term</span> (<span class=\"varid\">unbox</span> (<span class=\"varid\">x</span> <span class=\"varop\">≤?</span> <span class=\"varid\">u</span>)))
</pre><h2><a name=\"another-extension-lower-bound-on-runtime\"></a>Another extension: lower bound on runtime </h2>
<p>So far I have proved that you can sort a list in time <tt class=\"complex\"><span class=\"varid\">n</span> <span class=\"varop\">*</span> <span class=\"varid\">log</span> <span class=\"varid\">n</span></tt>.
It would also be interesting to look at the well known <a href=\"http://planetmath.org/LowerBoundForSorting\">lower bound on the runtime of sorting</a>, and prove a theorem such as
</p><pre class=\"agda\"><span class=\"varid\">can't-sort-in-linear-time</span> <span class=\"listcon\">:</span> ¬ ∃ <span class=\"keyglyph\">\\</span><span class=\"varid\">k</span> <span class=\"keyglyph\">→</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span> <span class=\"varop\">in-time</span> <span class=\"varid\">k</span> <span class=\"varop\">*</span> <span class=\"varid\">length</span> <span class=\"varid\">xs</span>
</pre><p>unfortunately this statement is not actually true for all types. For finite sets you actually <em>can</em> sort in linear time with counting sort.
It also fails if we happen to have some decidable total order for that type lying around. But it might be possible to prove
</p><pre class=\"agda\"><span class=\"varid\">can't-sort-in-linear-time</span>
<span class=\"listcon\">:</span> (<span class=\"varid\">no-fast-compare</span> <span class=\"listcon\">:</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> (<span class=\"varid\">x</span> <span class=\"varop\">≤</span> <span class=\"varid\">y</span> <span class=\"conop\">⊎</span> <span class=\"varid\">y</span> <span class=\"varop\">≤</span> <span class=\"varid\">x</span>) <span class=\"varop\">in-time</span> <span class=\"num\">0</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">y</span>)
<span class=\"keyglyph\">→</span> ¬ ∃ <span class=\"keyglyph\">\\</span><span class=\"varid\">k</span> <span class=\"keyglyph\">→</span> <span class=\"keyglyph\">∀</span> <span class=\"varid\">xs</span> <span class=\"keyglyph\">→</span> <span class=\"conid\">Sorted</span> <span class=\"varid\">xs</span> <span class=\"varop\">in-time</span> <span class=\"varid\">k</span> <span class=\"varop\">*</span> <span class=\"varid\">length</span> <span class=\"varid\">xs</span>
</pre><p>But you have to be really careful with a term like <tt class=\"complex\"><span class=\"varid\">no-fast-compare</span></tt>, because inside the runtime monad we do have values of type <tt class=\"complex\">(<span class=\"varid\">x</span> <span class=\"varop\">≤</span> <span class=\"varid\">y</span> <span class=\"conop\">⊎</span> <span class=\"varid\">y</span> <span class=\"varop\">≤</span> <span class=\"varid\">x</span>)</tt>. And so you can derive <tt class=\"complex\"><span class=\"keyglyph\">∀</span> <span class=\"varid\">x</span> <span class=\"varid\">y</span> <span class=\"keyglyph\">→</span> <span class=\"varid\">x</span> <span class=\"varop\">≡</span> <span class=\"varid\">y</span> <span class=\"varop\">in-time</span> <span class=\"num\">1</span></tt>, and therefore also <tt class=\"complex\">⊥ <span class=\"varop\">in-time</span> <span class=\"num\">1</span></tt> for non trivial types. Which certainly looks wrong to me.
</p><p>I don't know a way around this problem, but it might be related to the same issue as expected runtime.
I.e. the problem is that all information about the runtime is bundled together with the return value.
The lower bound proof essentially asks to sort a 'random' list, and by a counting argument shows that at least a certain number of comparisons are needed to be able to produce all outputs.
</p>" nil nil "0a51b69552d8b27e054de1f8ef275edc") (10 (20928 8813 500485) "http://winterkoninkje.dreamwidth.org/83774.html" "wren ng thornton: Upcoming talk" nil "Mon, 20 May 2013 22:11:45 +0000" "<p>Next month I'll be giving a talk at the <a href=\"http://www.indiana.edu/~iulg/nlcs.html\">NLCS</a> workshop, on the chiastic lambda-calculi I first presented at NASSLLI 2010 (<a href=\"http://llama.freegeek.org/~wren/pubs/ccgjp_nasslli2010.pdf\">slides</a>[1]). After working out some of the metatheory for one of my quals, I gave more recent talks at our local PL Wonks and CLingDing seminars (<a href=\"http://llama.freegeek.org/~wren/pubs/chiastic_plwonks2013.pdf\">slides</a>). The NASSLLI talk was more about the linguistic motivations and the general idea, whereas the PLWonks/CLingDing talks were more about the formal properties of the calculus itself. For NLCS I hope to combine these threads a bit better— which has always been the challenge with this work.</p>
<p>NLCS is collocated with this year's <a href=\"http://lii.rwth-aachen.de/lics/lics13/\">LICS</a> (and MFPS and CSF). I'll also be around for LICS itself, and in town for MFPS though probably not attending. So if you're around, feel free to stop by and chat.</p>
<p>[1] N.B., the NASSLLI syntax is a bit different than the newer version: square brackets were used instead of angle brackets (the latter were chosen because they typeset better in general); juxtaposition was just juxtaposition rather than being made explicit; and the left- vs right-chiastic distinction was called chi vs ksi (however, it turns out that ksi already has an important meaning in type theory).</p><br /><br /><img src=\"http://www.dreamwidth.org/tools/commentcount?user=winterkoninkje&ditemid=83774\" alt=\"comment count unavailable\" height=\"12\" style=\"vertical-align: middle;\" width=\"30\" /> comments" nil nil "a6aa493dcbfb0220560a86db3a660d38") (9 (20928 8813 499712) "http://lpuppet.banquise.net/blog/2013/05/20/incoming-ruby-bridge/" "language-puppet: Incoming: Ruby bridge" nil "Mon, 20 May 2013 09:35:00 +0000" "<p>I am working on a quick and dirty Ruby bridge <a href=\"https://github.com/bartavelle/hruby\">library</a>, that I hope will yield a huge performance gain with template interpolation in the language-puppet library. Right now, it is capable of:</p>
<ul>
<li>Initializing a Ruby interpreter from libruby</li>
<li>Calling Ruby methods and functions</li>
<li>Registering methods or functions that will be called from Ruby code</li>
<li>Converting data between the two Worlds (right now the most complex instance is the JSON one, which means that many complex Ruby types can’t be converted, but it is more than enough for passing data)</li>
<li>Embedding native Haskell values that can be passed around in Ruby to the Haskell-provided external functions (I will use this for passing the Puppet catalog state around)</li>
</ul>
<p>There are still a few things to do before releasing it :</p>
<ul>
<li>Making compilation a bit less dependant on the system. This will probably require quite a few flags in the cabal definition …</li>
<li>Hunting for memory leaks. I am not sure how to do this with the GHC Runtime in the middle, and I do hope that <em>ruby_finalize</em> frees everything that is managed by the Ruby runtime. After all, restarting processes seems to be the only working garbage collection method for Ruby daemons …</li>
<li>Writing stubs for the Puppet library methods that might be needed by templates. I would like to be able to support custom types and functions directly written in Ruby instead of Lua, but this will probably turn into a nightmare …</li>
<li>Cleaning things up !</li>
</ul>
<p>Here is a quick code preview :</p>
<figure class=\"code\"><figcaption><span>test.hs </span></figcaption>
<div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>
<span class=\"line-number\">2</span>
<span class=\"line-number\">3</span>
<span class=\"line-number\">4</span>
<span class=\"line-number\">5</span>
<span class=\"line-number\">6</span>
<span class=\"line-number\">7</span>
<span class=\"line-number\">8</span>
<span class=\"line-number\">9</span>
<span class=\"line-number\">10</span>
<span class=\"line-number\">11</span>
<span class=\"line-number\">12</span>
<span class=\"line-number\">13</span>
<span class=\"line-number\">14</span>
<span class=\"line-number\">15</span>
<span class=\"line-number\">16</span>
<span class=\"line-number\">17</span>
<span class=\"line-number\">18</span>
<span class=\"line-number\">19</span>
<span class=\"line-number\">20</span>
<span class=\"line-number\">21</span>
<span class=\"line-number\">22</span>
<span class=\"line-number\">23</span>
<span class=\"line-number\">24</span>
<span class=\"line-number\">25</span>
<span class=\"line-number\">26</span>
<span class=\"line-number\">27</span>
<span class=\"line-number\">28</span>
<span class=\"line-number\">29</span>
<span class=\"line-number\">30</span>
<span class=\"line-number\">31</span>
<span class=\"line-number\">32</span>
<span class=\"line-number\">33</span>
<span class=\"line-number\">34</span>
<span class=\"line-number\">35</span>
<span class=\"line-number\">36</span>
<span class=\"line-number\">37</span>
<span class=\"line-number\">38</span>
<span class=\"line-number\">39</span>
<span class=\"line-number\">40</span>
<span class=\"line-number\">41</span>
<span class=\"line-number\">42</span>
<span class=\"line-number\">43</span>
<span class=\"line-number\">44</span>
<span class=\"line-number\">45</span>
<span class=\"line-number\">46</span>
<span class=\"line-number\">47</span>
<span class=\"line-number\">48</span>
<span class=\"line-number\">49</span>
<span class=\"line-number\">50</span>
<span class=\"line-number\">51</span>
<span class=\"line-number\">52</span>
<span class=\"line-number\">53</span>
</pre></td><td class=\"code\"><pre><code class=\"hs\"><span class=\"line\"><span class=\"cm\">{-# LANGUAGE OverloadedStrings, OverloadedStrings #-}</span>
</span><span class=\"line\"><span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>
</span><span class=\"line\">
</span><span class=\"line\"><span class=\"kr\">import</span> <span class=\"nn\">Foreign.Ruby.Bindings</span>
</span><span class=\"line\"><span class=\"kr\">import</span> <span class=\"nn\">Data.Aeson</span>
</span><span class=\"line\"><span class=\"kr\">import</span> <span class=\"nn\">Data.Attoparsec.Number</span>
</span><span class=\"line\">
</span><span class=\"line\"><span class=\"c1\">-- this is an external function that will be executed from the Ruby interpreter</span>
</span><span class=\"line\"><span class=\"c1\">-- the first parameter to the function is probably some reference to some top object</span>
</span><span class=\"line\"><span class=\"c1\">-- my knowledge of ruby is close to nonexistent, so I can't say for sure ...</span>
</span><span class=\"line\"><span class=\"nf\">extfunc</span> <span class=\"ow\">::</span> <span class=\"kt\">RValue</span> <span class=\"ow\">-></span> <span class=\"kt\">RValue</span> <span class=\"ow\">-></span> <span class=\"kt\">IO</span> <span class=\"kt\">RValue</span>
</span><span class=\"line\"><span class=\"nf\">extfunc</span> <span class=\"kr\">_</span> <span class=\"n\">v</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>
</span><span class=\"line\">    <span class=\"c1\">-- deserialize the Ruby value into some JSON Value</span>
</span><span class=\"line\">    <span class=\"n\">onv</span> <span class=\"ow\"><-</span> <span class=\"n\">fromRuby</span> <span class=\"n\">v</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Maybe</span> <span class=\"kt\">Value</span><span class=\"p\">)</span>
</span><span class=\"line\">    <span class=\"c1\">-- and display it</span>
</span><span class=\"line\">    <span class=\"n\">print</span> <span class=\"n\">onv</span>
</span><span class=\"line\">    <span class=\"c1\">-- now let's create a JSON object containing all kind of data types</span>
</span><span class=\"line\">    <span class=\"kr\">let</span> <span class=\"n\">nv</span> <span class=\"ow\">=</span> <span class=\"n\">object</span> <span class=\"p\">[</span> <span class=\"p\">(</span><span class=\"s\">\"bigint\"</span> <span class=\"p\">,</span> <span class=\"kt\">Number</span> <span class=\"p\">(</span><span class=\"kt\">I</span> <span class=\"mi\">16518656116889898998656112323135664684684</span><span class=\"p\">))</span>
</span><span class=\"line\">                    <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">\"int\"</span><span class=\"p\">,</span> <span class=\"kt\">Number</span> <span class=\"p\">(</span><span class=\"kt\">I</span> <span class=\"mi\">12</span><span class=\"p\">))</span>
</span><span class=\"line\">                    <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">\"double\"</span><span class=\"p\">,</span> <span class=\"kt\">Number</span> <span class=\"p\">(</span><span class=\"kt\">D</span> <span class=\"mf\">0.123</span><span class=\"p\">))</span>
</span><span class=\"line\">                    <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">\"null\"</span><span class=\"p\">,</span> <span class=\"s\">\"Null\"</span><span class=\"p\">)</span>
</span><span class=\"line\">                    <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">\"string\"</span><span class=\"p\">,</span> <span class=\"kt\">String</span> <span class=\"s\">\"string\"</span><span class=\"p\">)</span>
</span><span class=\"line\">                    <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">\"true\"</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span> <span class=\"kt\">True</span><span class=\"p\">)</span>
</span><span class=\"line\">                    <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">\"false\"</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span> <span class=\"kt\">False</span><span class=\"p\">)</span>
</span><span class=\"line\">                    <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">\"array\"</span><span class=\"p\">,</span> <span class=\"n\">toJSON</span> <span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]))</span>
</span><span class=\"line\">                    <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">\"object\"</span><span class=\"p\">,</span> <span class=\"n\">object</span> <span class=\"p\">[</span> <span class=\"p\">(</span><span class=\"s\">\"k\"</span><span class=\"p\">,</span> <span class=\"kt\">String</span> <span class=\"s\">\"v\"</span><span class=\"p\">)</span> <span class=\"p\">]</span> <span class=\"p\">)</span>
</span><span class=\"line\">                    <span class=\"p\">]</span>
</span><span class=\"line\">    <span class=\"c1\">-- turn it into Ruby values, and return this</span>
</span><span class=\"line\">    <span class=\"n\">toRuby</span> <span class=\"n\">nv</span>
</span><span class=\"line\">
</span><span class=\"line\"><span class=\"c1\">-- this is the function that is called if everything was loaded properly</span>
</span><span class=\"line\"><span class=\"nf\">nextThings</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>
</span><span class=\"line\"><span class=\"nf\">nextThings</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>
</span><span class=\"line\">    <span class=\"c1\">-- turn the extfunc function into something that can be called by the Ruby interpreter</span>
</span><span class=\"line\">    <span class=\"n\">myfunc</span> <span class=\"ow\"><-</span> <span class=\"n\">mkRegistered2</span> <span class=\"n\">extfunc</span>
</span><span class=\"line\">    <span class=\"c1\">-- and bind it to the global 'hsfunction' function</span>
</span><span class=\"line\">    <span class=\"n\">rb_define_global_function</span> <span class=\"s\">\"hsfunction\"</span> <span class=\"n\">myfunc</span> <span class=\"mi\">1</span>
</span><span class=\"line\">    <span class=\"c1\">-- now call a method in the Ruby interpreter</span>
</span><span class=\"line\">    <span class=\"n\">o</span> <span class=\"ow\"><-</span> <span class=\"n\">safeMethodCall</span> <span class=\"s\">\"MyClass\"</span> <span class=\"s\">\"testfunc\"</span> <span class=\"kt\">[]</span>
</span><span class=\"line\">    <span class=\"kr\">case</span> <span class=\"n\">o</span> <span class=\"kr\">of</span>
</span><span class=\"line\">        <span class=\"kt\">Right</span> <span class=\"n\">v</span> <span class=\"ow\">-></span> <span class=\"p\">(</span><span class=\"n\">fromRuby</span> <span class=\"n\">v</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Maybe</span> <span class=\"kt\">Value</span><span class=\"p\">))</span> <span class=\"o\">>>=</span> <span class=\"n\">print</span>
</span><span class=\"line\">        <span class=\"kt\">Left</span> <span class=\"n\">r</span> <span class=\"ow\">-></span> <span class=\"n\">putStrLn</span> <span class=\"n\">r</span>
</span><span class=\"line\">
</span><span class=\"line\"><span class=\"nf\">main</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>
</span><span class=\"line\"><span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>
</span><span class=\"line\">    <span class=\"c1\">-- initialize stuff</span>
</span><span class=\"line\">    <span class=\"n\">ruby_init</span>
</span><span class=\"line\">    <span class=\"n\">ruby_init_loadpath</span>
</span><span class=\"line\">    <span class=\"c1\">-- and load \"test.rb\"</span>
</span><span class=\"line\">    <span class=\"n\">s</span> <span class=\"ow\"><-</span> <span class=\"n\">rb_load_protect</span> <span class=\"s\">\"test.rb\"</span> <span class=\"mi\">0</span>
</span><span class=\"line\">    <span class=\"kr\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>
</span><span class=\"line\">        <span class=\"kr\">then</span> <span class=\"n\">nextThings</span>
</span><span class=\"line\">        <span class=\"kr\">else</span> <span class=\"n\">showError</span> <span class=\"o\">>>=</span> <span class=\"n\">putStrLn</span>
</span></code></pre></td></tr></tbody></table></div></figure>
<p>And here is the ruby program, that calls our external function :</p>
<figure class=\"code\"><figcaption><span>test.rb </span></figcaption>
<div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>
<span class=\"line-number\">2</span>
<span class=\"line-number\">3</span>
<span class=\"line-number\">4</span>
<span class=\"line-number\">5</span>
<span class=\"line-number\">6</span>
<span class=\"line-number\">7</span>
<span class=\"line-number\">8</span>
<span class=\"line-number\">9</span>
<span class=\"line-number\">10</span>
<span class=\"line-number\">11</span>
<span class=\"line-number\">12</span>
<span class=\"line-number\">13</span>
<span class=\"line-number\">14</span>
<span class=\"line-number\">15</span>
</pre></td><td class=\"code\"><pre><code class=\"rb\"><span class=\"line\"><span class=\"k\">class</span> <span class=\"nc\">MyClass</span>
</span><span class=\"line\">    <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">testfunc</span>
</span><span class=\"line\">        <span class=\"n\">hsfunction</span><span class=\"p\">(</span> <span class=\"o\">[</span><span class=\"mi\">16588</span><span class=\"p\">,</span>
</span><span class=\"line\">                    <span class=\"s2\">\"qsqsd\"</span><span class=\"p\">,</span>
</span><span class=\"line\">                    <span class=\"kp\">true</span><span class=\"p\">,</span>
</span><span class=\"line\">                    <span class=\"p\">{</span> <span class=\"s1\">'a'</span> <span class=\"o\">=></span> <span class=\"s1\">'b'</span> <span class=\"p\">},</span>
</span><span class=\"line\">                    <span class=\"ss\">:symbol</span><span class=\"p\">,</span>
</span><span class=\"line\">                    <span class=\"mi\">0</span><span class=\"o\">.</span><span class=\"mi\">432</span><span class=\"p\">,</span>
</span><span class=\"line\">                    <span class=\"mi\">5611561561186918918918618789115616591891198189123165165889</span> <span class=\"o\">]</span>
</span><span class=\"line\">                <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"o\">|</span>
</span><span class=\"line\">            <span class=\"nb\">puts</span> <span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"n\">k</span><span class=\"si\">}</span><span class=\"s2\"> => </span><span class=\"si\">#{</span><span class=\"n\">v</span><span class=\"si\">}</span><span class=\"s2\"> [</span><span class=\"si\">#{</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">class</span><span class=\"si\">}</span><span class=\"s2\">]\"</span>
</span><span class=\"line\">        <span class=\"k\">end</span>
</span><span class=\"line\">        <span class=\"mi\">12</span>
</span><span class=\"line\">    <span class=\"k\">end</span>
</span><span class=\"line\"><span class=\"k\">end</span>
</span></code></pre></td></tr></tbody></table></div></figure>
<p>And the output, showing that data is properly converted from either sides :</p>
<figure class=\"code\"><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>
<span class=\"line-number\">2</span>
<span class=\"line-number\">3</span>
<span class=\"line-number\">4</span>
<span class=\"line-number\">5</span>
<span class=\"line-number\">6</span>
<span class=\"line-number\">7</span>
<span class=\"line-number\">8</span>
<span class=\"line-number\">9</span>
<span class=\"line-number\">10</span>
<span class=\"line-number\">11</span>
</pre></td><td class=\"code\"><pre><code class=\"\"><span class=\"line\">Just (Array (fromList [Number 16588,String \"qsqsd\",Bool True,Object fromList [(\"a\",String \"b\")],String \"symbol\",Number 0.432,Number 5611561561186918918918618789115616591891198189123165165889]))
</span><span class=\"line\">bigint => 16518656116889898998656112323135664684684 [Bignum]
</span><span class=\"line\">int => 12 [Fixnum]
</span><span class=\"line\">double => 0.123 [Float]
</span><span class=\"line\">array => 12345 [Array]
</span><span class=\"line\">true => true [TrueClass]
</span><span class=\"line\">null => Null [String]
</span><span class=\"line\">string => string [String]
</span><span class=\"line\">object => kv [Hash]
</span><span class=\"line\">false => false [FalseClass]
</span><span class=\"line\">Just (Number 12)</span></code></pre></td></tr></tbody></table></div></figure>
<p>EDIT: added link to the code.</p>" nil nil "7130ea6f5da7abbbc77587284be6f1b7") (8 (20928 8813 497288) "http://kpreid.livejournal.com/50670.html" "Kevin Reid (kpreid): Game idea: reverse bullet hell" "kpreid@switchb.org (Kevin Reid (kpreid))" "Mon, 20 May 2013 04:56:02 +0000" "<p>I have come to realize that I have more ideas for programs than I'll ever have time to write. (This means they're not actually all that significant, on average — see all that's been said on ‘ideas vs. execution’.) But maybe I have the time to scribble a blog post about them, and that's stuff to blog about, if nothing else.
</p><p>So, a video game idea I had today: reverse bullet-hell shooter.
</p><p>A regular bullet-hell shooter is a game where you move in a 2D space dodging an immense number of mostly dumb instant-death projectiles launched in mostly predefined patterns, and trying to shoot back with dinkier, but better aimed, weapons. Instead, here you design the bullet pattern so as to trap and kill AI enemies doing the dodging.
</p><p>The roles seem a bit similar to tower defense, but the space of strategies would be considerably more, ah, bumpy, since you're not doing a little bit of damage at a time and how it plays out depends strongly on the AI's choices.
</p><p>That's probably the downfall of this idea: either the outcome is basically <a href=\"http://en.wikipedia.org/wiki/Butterfly_effect\" rel=\"nofollow\">butterfly effect</a> random due to enemy AI decisions and you mostly lose, or there are trivial ways to design undodgeable bullet patterns and you mostly win. I don't immediately see how to make the space of inputs and outcomes “smooth” enough.</p>" nil nil "11701305a123b249a6fc8546bb29841b") (7 (20928 8813 496668) "http://feedproxy.google.com/~r/ezyang/~3/nmmQFXNcDMg/" "Edward Z. Yang: Anatomy of an MVar operation" nil "Mon, 20 May 2013 00:00:37 +0000" "<div class=\"document\">
<p>Adam Belay (of <a href=\"http://dune.scs.stanford.edu/\" class=\"reference external\">Dune</a> fame) was recently wondering why Haskell’s MVars are so slow. “Slow?” I thought, “aren’t Haskell’s MVars supposed to be really fast?” So I did some digging around how MVars worked, to see if I could explain.</p>
<p>Let’s consider the operation of the function <tt class=\"docutils literal\">takeMVar</tt> in <a href=\"http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent-MVar.html#v:takeMVar\" class=\"reference external\">Control.Concurrent.MVar</a>.  This function is very simple, it unpacks <tt class=\"docutils literal\">MVar</tt> to get the underlying <tt class=\"docutils literal\">MVar#</tt> primitive value, and then calls the primop <tt class=\"docutils literal\">takeMVar#</tt>:</p>
<pre class=\"literal-block\">takeMVar :: MVar a -> IO a
takeMVar (MVar mvar#) = IO $ \\ s# -> takeMVar# mvar# s#
</pre>
<p><a href=\"http://hackage.haskell.org/trac/ghc/wiki/Commentary/PrimOps\" class=\"reference external\">Primops</a> result in the invocation of <tt class=\"docutils literal\">stg_takeMVarzh</tt> in <tt class=\"docutils literal\">PrimOps.cmm</tt>, which is where the magic happens. For simplicity, we consider only the <em>multithreaded</em> case.</p>
<p>The first step is to <strong>lock the closure</strong>:</p>
<pre class=\"literal-block\">(\"ptr\" info) = ccall lockClosure(mvar \"ptr\");
</pre>
<p>Objects on the GHC heap have an <em>info table header</em> which indicates what kind of object they are, by pointing to the relevant info table for the object.  These headers are <em>also</em> used for synchronization: since they are word-sized, they can be atomically swapped for other values. <tt class=\"docutils literal\">lockClosure</tt> is in fact a spin-lock on the info table header:</p>
<pre class=\"literal-block\">EXTERN_INLINE StgInfoTable *lockClosure(StgClosure *p)
{
StgWord info;
do {
nat i = 0;
do {
info = xchg((P_)(void *)&p->header.info, (W_)&stg_WHITEHOLE_info);
if (info != (W_)&stg_WHITEHOLE_info) return (StgInfoTable *)info;
} while (++i < SPIN_COUNT);
yieldThread();
} while (1);
}
</pre>
<p><tt class=\"docutils literal\">lockClosure</tt> is used for some other objects, namely thread state objects (<tt class=\"docutils literal\">stg_TSO_info</tt>, via <tt class=\"docutils literal\">lockTSO</tt>) and thread messages i.e. exceptions (<tt class=\"docutils literal\">stg_MSG_THROWTO_info</tt>, <tt class=\"docutils literal\">stg_MSG_NULL_info</tt>).</p>
<p>The next step is to <strong>apply a GC write barrier on the MVar</strong>:</p>
<pre class=\"literal-block\">if (info == stg_MVAR_CLEAN_info) {
ccall dirty_MVAR(BaseReg \"ptr\", mvar \"ptr\");
}
</pre>
<p>As I’ve <a href=\"http://blog.ezyang.com/2013/01/the-ghc-scheduler/\" class=\"reference external\">written before</a>, as the MVar is a mutable object, it can be mutated to point to objects in generation 0; thus, when a mutation happens, it has to be added to the root set via the mutable list. Since mutable is per capability, this boils down into a bunch of pointer modifications, and does not require any synchronizations. Note that we will need to add the MVar to the mutable list, <em>even</em> if we end up blocking on it, because the MVar is a retainer of the <em>thread</em> (TSO) which is blocked on it! (However, I suspect in some cases we can get away with not doing this.)</p>
<p>Next, we case split depending on whether or not the MVar is full or empty.  If the MVar is empty, we need to <strong>block the thread until the MVar is full</strong>:</p>
<pre class=\"literal-block\">/* If the MVar is empty, put ourselves on its blocking queue,
* and wait until we're woken up.
*/
if (StgMVar_value(mvar) == stg_END_TSO_QUEUE_closure) {
// We want to put the heap check down here in the slow path,
// but be careful to unlock the closure before returning to
// the RTS if the check fails.
ALLOC_PRIM_WITH_CUSTOM_FAILURE
(SIZEOF_StgMVarTSOQueue,
unlockClosure(mvar, stg_MVAR_DIRTY_info);
GC_PRIM_P(stg_takeMVarzh, mvar));
q = Hp - SIZEOF_StgMVarTSOQueue + WDS(1);
SET_HDR(q, stg_MVAR_TSO_QUEUE_info, CCS_SYSTEM);
StgMVarTSOQueue_link(q) = END_TSO_QUEUE;
StgMVarTSOQueue_tso(q)  = CurrentTSO;
if (StgMVar_head(mvar) == stg_END_TSO_QUEUE_closure) {
StgMVar_head(mvar) = q;
} else {
StgMVarTSOQueue_link(StgMVar_tail(mvar)) = q;
ccall recordClosureMutated(MyCapability() \"ptr\",
StgMVar_tail(mvar));
}
StgTSO__link(CurrentTSO)       = q;
StgTSO_block_info(CurrentTSO)  = mvar;
StgTSO_why_blocked(CurrentTSO) = BlockedOnMVar::I16;
StgMVar_tail(mvar)             = q;
jump stg_block_takemvar(mvar);
}
</pre>
<p>A useful thing to know when decoding C-- primop code is that <tt class=\"docutils literal\"><span class=\"pre\">StgTSO_block_info(...)</span></tt> and its kin are how we spell field access on objects. C-- doesn’t know anything about C struct layout, and so these “functions” are actually macros generated by <tt class=\"docutils literal\">utils/deriveConstants</tt>. Blocking a thread consists of three steps:</p>
<ol class=\"arabic simple\">
<li>We have to add the thread to the blocked queue attached to the MVar (that’s why blocking on an MVar mutates the MVar!) This involves performing a heap allocation for the linked list node as well as mutating the tail of the old linked list.</li>
<li>We have to mark the thread as blocked (the <tt class=\"docutils literal\">StgTSO</tt> modifications).</li>
<li>We need to setup a stack frame for the thread so that when the thread wakes up, it performs the correct action (the invocation to <tt class=\"docutils literal\">stg_block_takemvar</tt>). This invocation is also responsible for unlocking the closure. While the machinery here is pretty intricate, it’s not really in scope for this blog post.</li>
</ol>
<p>If the MVar is full, then we can go ahead and <strong>take the value from the MVar.</strong></p>
<pre class=\"literal-block\">/* we got the value... */
val = StgMVar_value(mvar);
</pre>
<p>But that’s not all. If there are other blocked <tt class=\"docutils literal\">putMVars</tt> on the MVar (remember, when a thread attempts to put an MVar that is already full, it blocks until the MVar empties out), then we should immediately unblock one of these threads so that the MVar can always be left in a full state:</p>
<pre class=\"literal-block\">    q = StgMVar_head(mvar);
loop:
if (q == stg_END_TSO_QUEUE_closure) {
/* No further putMVars, MVar is now empty */
StgMVar_value(mvar) = stg_END_TSO_QUEUE_closure;
unlockClosure(mvar, stg_MVAR_DIRTY_info);
return (val);
}
if (StgHeader_info(q) == stg_IND_info ||
StgHeader_info(q) == stg_MSG_NULL_info) {
q = StgInd_indirectee(q);
goto loop;
}
</pre>
<p>There is one interesting thing about the code that checks for blocked threads, and that is the check for <em>indirectees</em> (<tt class=\"docutils literal\">stg_IND_info</tt>). Under what circumstances would a queue object be stubbed out with an indirection? As it turns out, this occurs when we <em>delete</em> an item from the linked list. This is quite nice, because on a singly-linked list, we don't have an easy way to delete items unless we also have a pointer to the previous item. With this scheme, we just overwrite out the current item with an indirection, to be cleaned up next GC. (This, by the way, is why we can't just chain up the TSOs directly, without the extra linked list nodes. [1])</p>
<p>When we find some other threads, we immediately run them, so that the MVar never becomes empty:</p>
<pre class=\"literal-block\">// There are putMVar(s) waiting... wake up the first thread on the queue
tso = StgMVarTSOQueue_tso(q);
StgMVar_head(mvar) = StgMVarTSOQueue_link(q);
if (StgMVar_head(mvar) == stg_END_TSO_QUEUE_closure) {
StgMVar_tail(mvar) = stg_END_TSO_QUEUE_closure;
}
ASSERT(StgTSO_why_blocked(tso) == BlockedOnMVar::I16); // note: I16 means this is a 16-bit integer
ASSERT(StgTSO_block_info(tso) == mvar);
// actually perform the putMVar for the thread that we just woke up
W_ stack;
stack = StgTSO_stackobj(tso);
PerformPut(stack, StgMVar_value(mvar));
</pre>
<p>There is one detail here: <tt class=\"docutils literal\">PerformPut</tt> doesn’t actually run the thread, it just looks at the thread’s stack to figure out what it was <em>going</em> to put. Once the MVar is put, we then wake up the thread, so it can go on its merry way:</p>
<pre class=\"literal-block\">// indicate that the MVar operation has now completed.
StgTSO__link(tso) = stg_END_TSO_QUEUE_closure;
// no need to mark the TSO dirty, we have only written END_TSO_QUEUE.
ccall tryWakeupThread(MyCapability() \"ptr\", tso);
unlockClosure(mvar, stg_MVAR_DIRTY_info);
return (val);
</pre>
<p>To sum up, when you <tt class=\"docutils literal\">takeMVar</tt>, you pay the costs of:</p>
<ul class=\"simple\">
<li>one spinlock,</li>
<li>on order of several dozen memory operations (write barriers, queue twiddling), and</li>
<li>when the MVar is empty, a (small) heap allocation and stack write.</li>
</ul>
<p>Adam and I puzzled about this a bit, and then realized the reason why the number of cycles was so large: our numbers are for <em>roundtrips</em>, and even with such lightweight synchronization (and lack of syscalls), you still have to go through the scheduler when all is said and done, and that blows up the number of cycles.</p>
<hr class=\"docutils\" />
<p>[1] It wasn’t always this way, see:</p>
<pre class=\"literal-block\">commit f4692220c7cbdadaa633f50eb2b30b59edb30183
Author: Simon Marlow <marlowsd@gmail.com>
Date:   Thu Apr 1 09:16:05 2010 +0000
Change the representation of the MVar blocked queue
The list of threads blocked on an MVar is now represented as a list of
separately allocated objects rather than being linked through the TSOs
themselves.  This lets us remove a TSO from the list in O(1) time
rather than O(n) time, by marking the list object.  Removing this
linear component fixes some pathalogical performance cases where many
threads were blocked on an MVar and became unreachable simultaneously
(nofib/smp/threads007), or when sending an asynchronous exception to a
TSO in a long list of thread blocked on an MVar.
MVar performance has actually improved by a few percent as a result of
this change, slightly to my surprise.
This is the final cleanup in the sequence, which let me remove the old
way of waking up threads (unblockOne(), MSG_WAKEUP) in favour of the
new way (tryWakeupThread and MSG_TRY_WAKEUP, which is idempotent).  It
is now the case that only the Capability that owns a TSO may modify
its state (well, almost), and this simplifies various things.  More of
the RTS is based on message-passing between Capabilities now.
</pre>
</div>
<img src=\"http://feeds.feedburner.com/~r/ezyang/~4/nmmQFXNcDMg\" height=\"1\" width=\"1\" />" nil nil "8f0b4d503e1a9c605ef081b47152f27e") (6 (20928 8813 494510) "http://alessandrovermeulen.me/2013/05/19/why-you-should-switch-to-declarative-programming/" "Alessandro Vermeulen: Why you should switch to declarative programming" nil "Sun, 19 May 2013 10:52:00 +0000" "<p>We are reaching limits of what is feasible with imperative languages and we should move to declarative languages. </p>
<p>When applications written in imperative languages grow, the code becomes convoluted. Why? Imperatively programmed applications contain statements such as <code>if X do Y else do Z</code>. As <code>Y</code> and <code>Z</code> contain <em>invisible</em> side-effects the correctness of the program relies on some implicit invariant. This invariant has to be maintained by the programmer or else the code will break. Thus each time a new feature is added to an application or a bug is fixed the code for the application gets more complex as keeping the invariant intact becomes harder. After a while the code becomes spaghetti-code and bugs are introduced as the programmer fails to maintain the invariant. This is going to happen despite the best intentions of the programmer to keep things clean. Why is this? </p>
<p>An imperative language is a type of language that tells the computer what to do and in which order. However, most, if not all, applications are nothing but a translation of some business domain into a computer program. In order to get the imperative code the programmer has to translate the business model to a set of imperative instructions, the business logic. The imperative instructions bear little resemblance to the original description of the business model. When the business model changes the imperative counterpart could change entirely but what happens is that programmers make incremental updates to the code. This is done because either they do not see that a more drastic change is necessary or because they are under pressure to deliver results. Over time this leads to bugs and unmaintainable code. Summarized, bugs are introduced because there is a manual translation step between the business model and the program code.</p>
<p>Imagine a system for calculating whether a person should receive a certain allowance. To receive the allowance a person has to meet several criteria such as <code>age > 18 and income < 2400</code>. We can denote this in the following way:</p>
<div class=\"bogus-wrapper\"><notextile><figure class=\"code\"><figcaption><span></span></figcaption><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>
<span class=\"line-number\">2</span>
<span class=\"line-number\">3</span>
</pre></td><td class=\"code\"><pre><code class=\"ruby\"><span class=\"line\"><span class=\"k\">def</span> <span class=\"nf\">receives_allowance?</span><span class=\"p\">(</span><span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">income</span><span class=\"p\">)</span>
</span><span class=\"line\">  <span class=\"n\">age</span> <span class=\"o\">></span> <span class=\"mi\">18</span> <span class=\"o\">&&</span> <span class=\"n\">income</span> <span class=\"o\"><</span> <span class=\"mi\">2400</span>
</span><span class=\"line\"><span class=\"k\">end</span>
</span></code></pre></td></tr></tbody></table></div></figure></notextile></div>
<p>There are several remarks to be made for this code. Adding a criteria such as marital status would involve adding a parameter to the function and changing the boolean expression. We could already avoid having to change parameters when we had chosen a parameter of type Person that contains the information about a person. But what if we would introduce time as an aspect in our criteria? We need to change the function again. And what if the age criteria changed? If the programmer erroneously codes something like <code>age > 18 && age < 18</code> into the condition we would only find the bug during testing, if we are lucky. Additionally when our criteria become more complex we would like to extract criteria to their own functions. In short, it is easy to make mistakes this way.</p>
<p>A solution to this is to avoid the translation process by using a declarative language. A declarative language is a language that describes <em>what</em> is to be computed but not <em>how</em> it should be computed.<sup id=\"fnref:declarativereference\"><a href=\"http://alessandrovermeulen.me/atom.xml#fn:declarativereference\" rel=\"footnote\">1</a></sup> In essence: it omits control-flow. By encoding and thereby recording the business model into a set of declarative statements it becomes easier to spot irregularities in the business logic as the business logic reads more like the description of the business model and all invariants are <em>visible</em>. In this manner the programmer no longer tells the computer how to perform a computation but rather what the computation should be. This makes it easier to maintain </p>
<p>However, we take it even to an higher level entirely. By just using the declarative language, such as Haskell or Prolog, you are still using a general-purpose language and are thus lacking domain specific checks. It would be advantageous to devise a Domain Specific Language (DSL) instead. This would be a language specifically geared towards your business domain and can be done easily in a language such as Haskell. Creating a DSL has a great benefit: Because the business domain is written down in code the responsibility of translating the business domain into a program shifts from the programmer to the interpreter of the DSL. This has two benefits: the translation is consolidated in one single point (the interpreter) and can be verified or even proven to be correct. It could be checked that no contradicting statements are present. In this sense we can compare the validation to a spell-checker or JSLint but for our specific domain. Secondly the programmer cannot make mistakes in the translation of the business logic to imperative code.</p>
<p>A simple DSL embedding the idea of the allowance could look like the text in the examples below. The interpreter / compiler is able to inspect the separate rules and check whether they would cause a tautology or contradiction.</p>
<p>We will illustrate this with some examples. Consider the following text below, it is easy to read and it is clear what it means. Each line is a condition that has to hold, so we could read an “AND” at eacht line end. <small>(Whether Income is monthly or annually or weekly is not taken into account here but you get the picture.)</small></p>
<div class=\"bogus-wrapper\"><notextile><figure class=\"code\"><figcaption><span></span></figcaption><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>
<span class=\"line-number\">2</span>
<span class=\"line-number\">3</span>
<span class=\"line-number\">4</span>
<span class=\"line-number\">5</span>
</pre></td><td class=\"code\"><pre><code class=\"ruby\"><span class=\"line\"><span class=\"n\">A</span> <span class=\"n\">person</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">adult</span> <span class=\"k\">when</span> <span class=\"n\">his</span> <span class=\"no\">Age</span> <span class=\"n\">is</span> <span class=\"no\">GREATER</span> <span class=\"no\">THAN</span> <span class=\"no\">OR</span> <span class=\"no\">EQUAL</span> <span class=\"no\">TO</span> <span class=\"mi\">18</span>
</span><span class=\"line\"><span class=\"n\">A</span> <span class=\"n\">person</span> <span class=\"n\">is</span> <span class=\"n\">allegeable</span> <span class=\"k\">for</span> <span class=\"n\">an</span> <span class=\"n\">allowance</span> <span class=\"no\">IF</span>
</span><span class=\"line\">  <span class=\"n\">he</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">adult</span>
</span><span class=\"line\"><span class=\"n\">A</span> <span class=\"n\">person</span> <span class=\"n\">is</span> <span class=\"n\">allegeable</span> <span class=\"k\">for</span> <span class=\"n\">an</span> <span class=\"n\">allowance</span> <span class=\"no\">IF</span>
</span><span class=\"line\">  <span class=\"n\">his</span> <span class=\"no\">Income</span> <span class=\"n\">is</span> <span class=\"no\">NOT</span> <span class=\"no\">GREATER</span> <span class=\"no\">THAN</span> <span class=\"err\">€</span><span class=\"mi\">2400</span>
</span></code></pre></td></tr></tbody></table></div></figure></notextile></div>
<p>When we would add a rule as shown below, we could get a warning or error from the interpreter telling us that we have two different conditions on a person’s age.</p>
<div class=\"bogus-wrapper\"><notextile><figure class=\"code\"><figcaption><span></span></figcaption><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>
<span class=\"line-number\">2</span>
<span class=\"line-number\">3</span>
<span class=\"line-number\">4</span>
<span class=\"line-number\">5</span>
<span class=\"line-number\">6</span>
<span class=\"line-number\">7</span>
</pre></td><td class=\"code\"><pre><code class=\"ruby\"><span class=\"line\"><span class=\"n\">A</span> <span class=\"n\">person</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">adult</span> <span class=\"k\">when</span> <span class=\"n\">his</span> <span class=\"no\">Age</span> <span class=\"n\">is</span> <span class=\"no\">GREATER</span> <span class=\"no\">THAN</span> <span class=\"no\">OR</span> <span class=\"no\">EQUAL</span> <span class=\"no\">TO</span> <span class=\"mi\">18</span>
</span><span class=\"line\"><span class=\"n\">A</span> <span class=\"n\">person</span> <span class=\"n\">is</span> <span class=\"n\">allegeable</span> <span class=\"k\">for</span> <span class=\"n\">an</span> <span class=\"n\">allowance</span> <span class=\"no\">IF</span>
</span><span class=\"line\">  <span class=\"n\">he</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">adult</span>
</span><span class=\"line\"><span class=\"n\">A</span> <span class=\"n\">person</span> <span class=\"n\">is</span> <span class=\"n\">allegeable</span> <span class=\"k\">for</span> <span class=\"n\">an</span> <span class=\"n\">allowance</span> <span class=\"no\">IF</span>
</span><span class=\"line\">  <span class=\"n\">his</span> <span class=\"no\">Income</span> <span class=\"n\">is</span> <span class=\"no\">NOT</span> <span class=\"no\">GREATER</span> <span class=\"no\">THAN</span> <span class=\"err\">€</span><span class=\"mi\">2400</span>
</span><span class=\"line\"><span class=\"n\">A</span> <span class=\"n\">person</span> <span class=\"n\">is</span> <span class=\"n\">allegeable</span> <span class=\"k\">for</span> <span class=\"n\">an</span> <span class=\"n\">allowance</span> <span class=\"no\">IF</span>
</span><span class=\"line\">  <span class=\"n\">his</span> <span class=\"no\">Age</span> <span class=\"n\">is</span> <span class=\"no\">GREATER</span> <span class=\"no\">THAN</span> <span class=\"mi\">21</span>
</span></code></pre></td></tr></tbody></table></div></figure></notextile></div>
<p>And when we would add a rule as this it could warn us that no-one will ever get an allowance.</p>
<div class=\"bogus-wrapper\"><notextile><figure class=\"code\"><figcaption><span></span></figcaption><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>
<span class=\"line-number\">2</span>
<span class=\"line-number\">3</span>
<span class=\"line-number\">4</span>
<span class=\"line-number\">5</span>
<span class=\"line-number\">6</span>
<span class=\"line-number\">7</span>
</pre></td><td class=\"code\"><pre><code class=\"ruby\"><span class=\"line\"><span class=\"n\">A</span> <span class=\"n\">person</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">adult</span> <span class=\"k\">when</span> <span class=\"n\">his</span> <span class=\"no\">Age</span> <span class=\"n\">is</span> <span class=\"no\">GREATER</span> <span class=\"no\">THAN</span> <span class=\"no\">OR</span> <span class=\"no\">EQUAL</span> <span class=\"no\">TO</span> <span class=\"mi\">18</span>
</span><span class=\"line\"><span class=\"n\">A</span> <span class=\"n\">person</span> <span class=\"n\">is</span> <span class=\"n\">allegeable</span> <span class=\"k\">for</span> <span class=\"n\">an</span> <span class=\"n\">allowance</span> <span class=\"no\">IF</span>
</span><span class=\"line\">  <span class=\"n\">he</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">adult</span>
</span><span class=\"line\"><span class=\"n\">A</span> <span class=\"n\">person</span> <span class=\"n\">is</span> <span class=\"n\">allegeable</span> <span class=\"k\">for</span> <span class=\"n\">an</span> <span class=\"n\">allowance</span> <span class=\"no\">IF</span>
</span><span class=\"line\">  <span class=\"n\">his</span> <span class=\"no\">Income</span> <span class=\"n\">is</span> <span class=\"no\">NOT</span> <span class=\"no\">GREATER</span> <span class=\"no\">THAN</span> <span class=\"err\">€</span><span class=\"mi\">2400</span>
</span><span class=\"line\"><span class=\"n\">A</span> <span class=\"n\">person</span> <span class=\"n\">is</span> <span class=\"n\">allegeable</span> <span class=\"k\">for</span> <span class=\"n\">an</span> <span class=\"n\">allowance</span> <span class=\"no\">IF</span>
</span><span class=\"line\">  <span class=\"n\">his</span> <span class=\"no\">Age</span> <span class=\"n\">is</span> <span class=\"no\">LESS</span> <span class=\"no\">THAN</span> <span class=\"mi\">12</span>
</span></code></pre></td></tr></tbody></table></div></figure></notextile></div>
<p>Not only would the interpreter be able to spot these kinds of errors but it would also be easier for the writer of these rules to spot whether there is a mistake.
The astute reader will have noticed than we have not included any control flow into our language making it a declarative language.</p>
<p>Because the business-logic is now represented by the DSL it can be written by domain experts instead of the programmers of the application itself. The compiler can provide feedback when something is wrong in the DSL and there is less chance for errors in the implementation of the business logic. Additionally this frees the programmes for implementing better translations of the DSL or other projects saving time and other resources. </p>
<p>To summarise 4 reasons why you should switch to declarative languages:</p>
<ol>
<li>Direct translation of the business model into business logic </li>
<li>Better readability of the business logic</li>
<li>Better scalability for the program in terms of functionality</li>
<li>Less bugs</li>
</ol>
<p>And 3 reasons why you should use DSLs to boot:</p>
<ol>
<li>Free up programmers to do important stuff</li>
<li>Let the domain-experts handle the business logic and have it machine-checked!</li>
<li>It is just awesome</li>
</ol>
<div class=\"footnotes\">
<ol>
<li id=\"fn:declarativereference\">
<p><a href=\"ftp://clip.dia.fi.upm.es/pub/papers/PARFORCE/second_review/D.WP3.1.M2.3.ps.Z\">Lloyd, J.W., Practical Advantages of Declarative Programming</a><a href=\"http://alessandrovermeulen.me/atom.xml#fnref:declarativereference\" rev=\"footnote\">↩</a></p>
</li>
</ol>
</div>" nil nil "5d7cdbe4cd6717e1f50bf1e84f98bf9f") (5 (20928 8813 492238) "http://lpuppet.banquise.net/blog/2013/05/16/language-puppet-v0-dot-4-0/" "language-puppet: language-puppet v0.4.0" nil "Thu, 16 May 2013 18:32:00 +0000" "<p>I just released the latest language-puppet version. For the full list of changes, please take a look at the
<a href=\"https://github.com/bartavelle/language-puppet/blob/master/Changelog\">changelog</a>. Here are the highlights.</p>
<h3>PuppetDB code reworked</h3>
<p>The PuppetDB code and API has been completely overhauled. It is now more generic : the resource collection and puppet
query functions now work the same. Additionally, a PuppetDB stub has been created for testing use.</p>
<h3>Better diagnostic facilities</h3>
<p>As the main use of this library is to test stuff, the following features were added:</p>
<ul>
<li>Several error messages have been reworked so that they are more informative.</li>
<li>A <code>dumpvariables</code> built-in function has been added. It just prints all known variables (and facts) to stdout, and can
be quite handy.</li>
<li>The “scope stack” description is stored with the resources. This turned out to be extremely useful when debugging
resource names colisions or to find out where some resource is defined.</li>
</ul>
<p>Here is an example, let’s say you do not remember which package installs the <code>collectd</code> package. Just run this :</p>
<figure class=\"code\"><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>
<span class=\"line-number\">2</span>
<span class=\"line-number\">3</span>
<span class=\"line-number\">4</span>
<span class=\"line-number\">5</span>
<span class=\"line-number\">6</span>
<span class=\"line-number\">7</span>
</pre></td><td class=\"code\"><pre><code class=\"\"><span class=\"line\">» puppetresources . default.domain 'Package[collectd]'
</span><span class=\"line\">
</span><span class=\"line\">package {
</span><span class=\"line\">    \"collectd\": #\"./modules/collectd/manifests/base.pp\" (line 4, column 9) [\"::\",\"site::baseconfig\",\"collectd\",\"collectd::client\",\"collectd::base\"]
</span><span class=\"line\">        ensure          => \"installed\",
</span><span class=\"line\">        require         => [Class[\"collectd\"], Class[\"collectd::base\"], Class[\"collectd::client\"], Class[\"site::baseconfig\"]];
</span><span class=\"line\">}</span></code></pre></td></tr></tbody></table></div></figure>
<p>You now know exactly where the <code>package</code> resource is declared, and the list of “scopes” that have been traversed in
order to do so. Note that this information is displayed when resources names collide.</p>
<h3>Easier to setup</h3>
<p>This library doesn’t depend from a newish <code>bytestring</code> anymore, and should build with the package provided with a GHC
compiler of the 7.6.x serie.</p>
<p>This is not yet done, but I will certainly soon publish a debian-style repository of the compiled <code>puppetresources</code> binary. I am interested in suggestions for an automated building system.</p>
<h3>Better testing</h3>
<p>The testing API seems sufficient to write pretty strong tests, but would still benefit from a few more helper functions.
The testing “daemon” has been reworked to use the new PuppetDB stub. It makes it possible to test complex interactions
between hosts using the exported resource or PuppetDB query features.</p>
<h3>Work in progress</h3>
<p>I will probably <a href=\"http://hackage.haskell.org/package/lens\">lensify</a> the code until I get a descent understanding of it.</p>
<p>I do not intend to work on Hiera emulation just yet, as I am probably the only user of this library for now and I do not
use this feature.</p>
<p>One area of improvement would be to embed the ruby interpreter in the library. I am not sure how to do this, but as
there are quite a few projects of lightweight interpreters sprouting from the earth, it might be possible in the near
future. The only problem would be figuring out how to build a large C project with cabal.</p>
<h3>Some other considerations</h3>
<p>I recently ported the code from <code>random.c</code> to Haskell
(<a href=\"https://github.com/bartavelle/language-puppet/blob/master/Puppet/Interpreter/RubyRandom.hs\">here</a>). This has been
quite tedious, and is quite hard to read. This is an almost naive port of the code found in the Ruby interpreter,
without the useless loop variables. For some reason, there are many loops like this :</p>
<figure class=\"code\"><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>
<span class=\"line-number\">2</span>
<span class=\"line-number\">3</span>
<span class=\"line-number\">4</span>
<span class=\"line-number\">5</span>
<span class=\"line-number\">6</span>
<span class=\"line-number\">7</span>
<span class=\"line-number\">8</span>
<span class=\"line-number\">9</span>
<span class=\"line-number\">10</span>
</pre></td><td class=\"code\"><pre><code class=\"\"><span class=\"line\">i=1; j=0;
</span><span class=\"line\">k = (N>key_length ? N : key_length);
</span><span class=\"line\">for (; k; k--) {
</span><span class=\"line\">    mt->state[i] = (mt->state[i] ^ ((mt->state[i-1] ^ (mt->state[i-1] >> 30)) * 1664525U))
</span><span class=\"line\">        + init_key[j] + j; /* non linear */
</span><span class=\"line\">    mt->state[i] &= 0xffffffffU; /* for WORDSIZE > 32 machines */
</span><span class=\"line\">    i++; j++;
</span><span class=\"line\">    if (i>=N) { mt->state[0] = mt->state[N-1]; i=1; }
</span><span class=\"line\">    if (j>=key_length) j=0;
</span><span class=\"line\">}</span></code></pre></td></tr></tbody></table></div></figure>
<p>As you can see, the value of k is never used in the loop. I am not sure why the author didn’t go for something like :</p>
<figure class=\"code\"><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>
</pre></td><td class=\"code\"><pre><code class=\"\"><span class=\"line\">for(i=1;i<k;i++) {</span></code></pre></td></tr></tbody></table></div></figure>
<p>Anyway, the Haskell code is pretty bad, and will certainly only work for 64-bit builds. I am not sure how I should have
written it. I suppose staying in the ST monad would have lead to nicer code, and I am open to suggestions.</p>" nil nil "bab8597b76f29cf825ac29a0b13a9614") (4 (20928 8813 491049) "http://wadler.blogspot.com/2013/05/from-session-types-to-data-types-ra.html" "Philip Wadler: From Session Types to Data Types: RA posts and PhD studentships" "noreply@blogger.com (Philip Wadler)" "Thu, 16 May 2013 13:39:54 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://2.bp.blogspot.com/-nZkF32umhTc/UZTeDERPduI/AAAAAAAABi4/Ybi1BefzLhw/s1600/Screenshot-1.png\"><img src=\"http://2.bp.blogspot.com/-nZkF32umhTc/UZTeDERPduI/AAAAAAAABi4/Ybi1BefzLhw/s320/Screenshot-1.png\" height=\"160\" border=\"0\" width=\"320\" /></a></div>I've posted this elsewhere, but neglected to blog before now. <br /><br />We are recruiting for research associate positions in design and implementation of  programming languages, and also may have PhD studentships available this year and next.  The posts are on the project \"From <span class=\"il\">Data</span> <span class=\"il\">Types</span> to  <span class=\"il\">Session</span> <span class=\"il\">Types</span>: A Basis for Concurrency and Distribution\" which is a  programme grant funded by EPSRC for five years from 20 May 2013, joint with Simon Gay at the University of Glasgow and Nobuko Yoshida at Imperial College London.<br /><br />The RA post at Edinburgh for an initial period of 24 months, with  possibility of extension, and is on the UE07 scale (£30,424 - £36,298). Deadline for applications for the RA post is Monday 20 May 2013, anyone interested in a PhD studentship should apply as soon as possible.  Glasgow and Imperial are also recruiting.<br /><br />Please contact me if you are interested in either the RA post or a PhD studentship.  Further description of the Edinburgh RA post is below. <br /><div class=\"yj6qo ajU\"><div tabindex=\"0\" id=\":4y\" class=\"ajR\"><img src=\"https://mail.google.com/mail/u/0/images/cleardot.gif\" class=\"ajT\" /></div></div><br /><br /><br />   <b>Project Description</b><br /><br />Just as <span class=\"il\">data</span> <span class=\"il\">types</span> describe the structure of <span class=\"il\">data</span>, <span class=\"il\">session</span> <span class=\"il\">types</span> describe the structure of communication between concurrent and  distributed processes. Our project has particular emphasis on putting  theory into practice, by embedding <span class=\"il\">session</span> <span class=\"il\">types</span> in a range of programming languages and applying them to realistic case  studies. The research programme is joint between the University of  Edinburgh, University of Glasgow, and Imperial College London, and  includes collaboration with Amazon, Cognizant, Red Hat, VMware, and the  Ocean Observatories Initiative.<br /><br /><b>Principal Duties</b><br /><br />The successful candidate will join a team responsible for extending  the functional web programming language Links with <span class=\"il\">session</span> <span class=\"il\">types</span> to  support concurrency and distribution.  We will test our techniques by  providing a library to access Amazon Web Services (AWS) cloud computing  infrastructure, and perform empirical experiments to assess how our  language design impacts the performance of programmers. <br /><br />You should possess a PhD in a relevant area, or be nearing  completion of same, or have comparable experience.  You should have a  track-record of publication, or other evidence of ability to undertake  research and communicate well.  You should have a strong background in  programming languages, including <span class=\"il\">type</span> systems, and strong programming  and software engineering skills. <br /><br />It is desirable for candidates to also have one or more of the  following: a combination of theoretical and practical skills; experience  of web programming or cloud programming; knowledge of the theory or  practice of concurrent and distributed systems; knowledge of linear  logic; or training in empirical measurement of programming tasks. <br /><br />We seek applicants at an international level of excellence.  The  Laboratory for Foundations of Computer Science is internationally  renowned, the School of Informatics at Edinburgh is among the strongest  in the world, and Edinburgh is known as a cultural centre providing a  high quality of life. <br /><br />Further details of the RA post, including how to apply, are <a href=\"https://www.vacancies.ed.ac.uk/pls/corehrrecruit/erq_jobspec_version_4.jobspec?p_id=013243\">here</a>." nil nil "8ffc40155bb811aa4741bb9a609cdd66") (3 (20928 8813 490200) "http://www.xoltar.org/?p=127" "Bryn Keller: Hot Towel SPA Is a Great Starter" nil "Thu, 16 May 2013 10:30:00 +0000" "<p>A few months ago, <a href=\"http://www.johnpapa.net/\">John Papa</a> released a Visual Studio template called <a href=\"http://www.johnpapa.net/hottowel/\">Hot Towel SPA</a>, which <a href=\"http://www.hanselman.com/\">Scott Hanselman</a> kindly pointed out to me. SPA, as all the hip kids will tell you, stands for Single Page Application. That is, the kind of application that you start by visiting a web page, and you stay on that same page for as long as you use the application. As opposed to most web applications, where you skip from page to page as you interact with the site.</p>
<p>People have been doing this for a long time, of course,  but the Hot Towel SPA starter really is a nice introduction to the style. In a SPA, you really  need to think of the browser as “the client,” a standalone entity that communicates with your server via (web) API calls. Once you get used to it, it’s really rather refreshing, and it allows you to take advantage of all the computing power on the client machine in a way that can be quite liberating.</p>
<p>Hot Towel uses a JavaScript application framework called <a href=\"http://durandaljs.com/\">Durandal</a> to structure the client side code. It divides the world up into services (JavaScript modules, basically), views, and view models. All of this is just for the JavaScript side of things, remember – you may also have views and view models and so on on the server side, but that’s a different thing – you’ll interact with those via AJAX calls, usually using JSON to encode the data.</p>
<p>Hot Towel uses HTML for the views and lets <a href=\"http://knockoutjs.com/\">Knockout</a> do the view composition and data binding, which makes it a good source of examples for learning Knockout as well.</p>
<p>The JavaScript code is nicely modular, in the style of <a href=\"http://requirejs.org/\">require.js</a>. If you’ve not seen this style, it’s worth checking out. Basically, you declare all your dependencies for your JavaScript module, and the framework asynchronously loads them as necessary, as passes them to your module. It’s great documentation, great for structuring the code so you don’t get circular dependencies, and makes for easier unit testing too, since can easily supply alternative (mock) implementations of your module’s dependencies.</p>
<p>On the server, the MVC code is well organized as well, and it’s straightforward to plug in your new Web API controllers and start coding.</p>
<p>I’ve been playing with this starter for a while, working on a proof of concept for a new series of articles on my blog. I found Hot Towel to be a great starting point, and it opened my eyes to some interesting new techniques on the client side. Give Hot Towel a try for your next project, it’ll be fun.</p>" nil nil "f3d151c9ffc9063e843c6f9345fbd382") (2 (20928 8813 489626) "http://wadler.blogspot.com/2013/05/aleph-cloud.html" "Philip Wadler: Aleph Cloud" "noreply@blogger.com (Philip Wadler)" "Thu, 16 May 2013 09:36:14 +0000" "<div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em;\" href=\"http://1.bp.blogspot.com/-5PEq8CrNw1I/UZSm9ZuKzXI/AAAAAAAABhw/F82qIaaKv0g/s1600/aleph-cloud-logo.png\"><img src=\"http://1.bp.blogspot.com/-5PEq8CrNw1I/UZSm9ZuKzXI/AAAAAAAABhw/F82qIaaKv0g/s320/aleph-cloud-logo.png\" height=\"78\" border=\"0\" width=\"320\" /></a></div><br /><div style=\"clear: both; text-align: center;\" class=\"separator\"></div><a href=\"http://www.alephcloud.com/\">Aleph Cloud</a> is looking to <a href=\"http://homepages.inf.ed.ac.uk/wadler/documents/AlephCloud_Haskell_Engineer_JD_final.pdf\">hire Haskell programmers</a>." nil nil "979c9618d41475805da13a76334fa959") (1 (20928 8813 489184) "http://snapframework.com/blog/2013/05/15/snap-0.12-released" "Snap Framework: Announcing: Snap Framework v0.12" "mightybyte@gmail.com (Doug Beardsley)" "Thu, 16 May 2013 00:15:00 +0000" "<div class=\"markdown\">
<p>The Snap team is happy to announce the release of version 0.12 of the Snap Framework.</p><h2 id=\"new-features\">New features</h2><ul><li><p>Heist now has the ability to reload templates. Along with this, <code>HeistConfig</code> now stores template locations instead of templates. A template location is essentially an IO action returning templates. This allows you to have Heist get its templates from a database, over the network, etc–anything that can be done from IO.</p></li><li><p>The Heist snaplet now has generic functions that can work with either interpreted or compiled templates. Most applications will choose one of either interpreted or compiled templates and not need this new functionality. However, if you are writing a generic snaplet, then you probably want it to work no matter which mode the end application uses. All you need to do is import the <code>Snap.Snaplet.Heist.Generic</code> module. The Heist snaplet defaults to compiled mode. If you want to use interpreted mode, call the <code>setInterpreted</code> function in your application initializer.</p></li><li><p>It is now possible to reload individual snaplets without reloading the whole site. The snaplet API now includes a function <code>modifyMaster</code> that you can use to write reload functions for individual snaplets. The Heist snaplet now provides a reloader leveraging this functionality. We found this very useful in allowing us to rapidly iterate when making changes to markup in large applications that take a long time to initialize.</p></li></ul><h2 id=\"bugfixes-minor-improvements\">Bugfixes / minor improvements</h2><ul><li><p>Generalized parts of the compiled splice API to use <code>RuntimeSplice n a</code> instead of the less general <code>n a</code>. Since RuntimeSplice is a monad transformer, this change only requires you to add a call to <code>lift</code> in places where you have an <code>n a</code>.</p></li><li><p>Fixed Heist’s <code>runAttributesRaw</code> function to do both types of attribute parsing.</p></li><li><p>Fixed Heist bug that caused XML templates to be rendered as HTML5.</p></li><li><p>Improve the consistency of the auth snaplet API.</p></li><li><p>Eliminated the inappropriate export of orphan instances.</p></li></ul>
</div>" nil nil "3ff86b164d5fb245760f98f326724895")))