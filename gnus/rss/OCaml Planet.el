;; -*- coding: utf-8-emacs; -*-
(setq nnrss-group-data '((41 (20950 61549 483371) "http://gallium.inria.fr/blog/gpu_memory_model" "GaGallium: GPU memory model" "Thomas Braibant" "Fri, 05 Jul 2013 08:00:00 +0000" "<p>Following a discussion that occurred at Gallium, I recently wondered what was the kind of memory model exposed by a GPU (read: my awesome gamer's GPU).</p>
<p>Most programmers assume what is called a \"sequentially consistent\" (SC) memory model: that is, parallel programs execute as if instructions from various threads were interleaved. Seasoned programmers will know that the memory model exhibited by modern multi-core processors is not SC, but much more arcane.</p>
<p><a href=\"http://moscova.inria.fr/~maranget/\">Luc</a>, one of Gallium's researchers, spends a considerable amount of time testing various kind of processors to unravel what memory model they expose, and whether or not a given processor is correct with respect to its \"model\". The industry often provides informal textual documentation of models that is barely understandable. One better way to document a memory model is to describe what are the allowed results of so-called litmus tests.</p>
<p>A customary litmus-test is the following, where we execute two threads <code>p1</code> and <code>p2</code>:</p>
<pre><code>| p1      | p2      |
|---------+---------|
| x  <- 1 | y  <- 1 |
| r1 <- y | r2 <- x |</code></pre>
<p>Here, <code>x</code>, <code>y</code>, <code>r1</code>, <code>r2</code> are initialized to <code>0</code>. Considering all possible interleavings of this code makes it clear that <code>r1</code> or <code>r2</code> (maybe both) must be equal to <code>1</code> at the end of the execution of <code>p1</code> and <code>p2</code>. But, on non-SC architectures, it is also possible to see <code>r1 = r2 = 0</code> at the end of the execution. (In the nomenclature defined in <a href=\"http://www.cl.cam.ac.uk/~pes20/ppc-supplemental/pldi105-sarkar.pdf\">this paper</a>, this test is called SB, which stands for \"store buffering\".)</p>
<p>Another common test is the following</p>
<pre><code>| p1      | p2       |
|---------+----------|
| x  <- 1 | r2  <- y |
| y  <- 1 | r1  <- x |</code></pre>
<p>Here, the experimental situation makes it possible to determine whether or not the read-after-read and writes-after-writes dependencies are preserved. If <code>r2 = 1</code> and <code>r1 = 0</code>, then it means that writes do not appear in program order. (In the aforementioned nomenclature, this test is named MP, for \"message passing\".)</p>
<p>There are more complex tests, that involves things such as locked instructions, barriers and so on, but I am not an expert on this, and I secretly hope that Luc will jump in and write a blog post about it. I will rather come back on the subject of this post: is my GPU sequentially consistent?</p>
<p>I translated the above litmus tests in CUDA kernels, and wrote C programs that execute the litmus tests under various conditions till the relaxed behaviors appear. Then, I compiled these programs using the NVidia <code>nvcc</code> compiler, and ran them on my computer<sup><a href=\"http://gallium.inria.fr/blog/index.rss#fn1\" id=\"fnref1\" class=\"footnoteRef\">1</a></sup>.</p>
<p>Let's cut down the chase: as you may have guessed, the relaxed behaviors do appear. The interesting point is that for some values of the experimental parameters we choose, they may appear more or less often (and for some values, never). To be more specific, the experimental parameter I am speaking about is the amount of copies of the test that are run in parallel, and whether or not two threads that interact together are \"close\": basically, we execute N times the same litmus test at once, which involves 2N threads. These threads are executed in batches called \"warps\" of 32 threads at once, and the behaviors we get seems to depend on whether interacting threads are in the same warp or not<sup><a href=\"http://gallium.inria.fr/blog/index.rss#fn2\" id=\"fnref2\" class=\"footnoteRef\">2</a></sup></p>
<p>Of course, if I had read carefully the NVidia documentation (PTX isa 3.1, Section 5.1.4) beforehand, I would have found a less-than-cristal-clear explanation like the following one:</p>
<blockquote>
<p>Global memory is not sequentially consistent. Consider the case where one thread executes the following two assignments:</p>
<pre><code>a = a + 1;
b = b – 1;</code></pre>
<p>If another thread sees the variable <code>b</code> change, the store operation updating <code>a</code> may still be in flight. This reiterates the kind of parallelism available in machines that run PTX.</p>
</blockquote>
<p>But this would have made for a less dramatic blog post... Moreover, I hope that it helps convey the idea that memory models are a \"formal\" thing, that can be studied experimentally (as Luc does), but can also be formalized in a proof assistant (as <a href=\"http://www0.cs.ucl.ac.uk/staff/j.alglave/\">Jade</a> does).</p>
<p>I think it would be interesting to extend the kind of attention that was given to the memory models of CPUs to GPUs, in terms of testing and formalizations (the semantics of NVidia's PTX ISA). Of course, I am just being curious here, since it is not my field of research. But if you are looking for a research internship and this interests you, you should definitely contact Luc ;).</p>
<div class=\"footnotes\">
<hr />
<ol>
<li id=\"fn1\"><p>these tests are available upon request<a href=\"http://gallium.inria.fr/blog/index.rss#fnref1\">↩</a></p></li>
<li id=\"fn2\"><p>it is likely that this explanation is incomplete or even incorrect, but it conveys the idea of what shows up in the tests.<a href=\"http://gallium.inria.fr/blog/index.rss#fnref2\">↩</a></p></li>
</ol>
</div>" nil nil "dbbda8e6eef75444094eb2aa05652cb3") (40 (20950 32332 70170) "http://www.amazon.co.uk/review/R28WYJ13WA94YL/ref=cm_cr_rdp_perm?ie=UTF8&ASIN=0957671105&linkCode=&nodeID=&tag=" "Daniel =?utf-8?Q?B=C3=BCnzli=3A?= On the book =?utf-8?Q?=C2=AB?= OCaml from the very beginning =?utf-8?Q?=C2=BB?=" nil "Thu, 04 Jul 2013 22:43:32 +0000" "Cambridge overflows with OCaml programmers. I got to meet John Whitington of <a href=\"http://www.coherentpdf.com/ocaml-libraries.html\">camlpdf</a> fame. He kindly offered me a copy of his book « <a href=\"http://ocaml-book.com\">OCaml from the very beginning</a>. » I read it and made a small review <a href=\"http://www.amazon.co.uk/review/R28WYJ13WA94YL/ref=cm_cr_rdp_perm?ie=UTF8&ASIN=0957671105&linkCode=&nodeID=&tag=\">here</a>." nil nil "1428e0aefdddc8ddcbd9b5a35fc2573d") (39 (20950 32332 69599) "http://functional-orbitz.blogspot.com/2013/07/riakc-in-five-minutes.html" "Orbitz: Riakc In Five Minutes" "orbitz" "Thu, 04 Jul 2013 17:01:00 +0000" "<p>This is a simple example using Riakc to PUT a key into a Riak database.  It assumes that you already have a Riak database up and running. </p> <p>First you need to install riakc.  Simply do: <code>opam install riakc</code>.  As of this writing, the latest version of riakc is 2.0.0 and the code given depends on that version. </p> <p>Now, the code.  The following is a complete CLI tool that will PUT a key and print back the result from Riak.  It handles all errors that the library can generate as well as outputting siblings correctly. </p> <pre><code><i><font color=\"#9A1900\">(*</font></i><br /><i><font color=\"#9A1900\"> * This example is valid for version 2.0.0, and possibly later</font></i><br /><i><font color=\"#9A1900\"> *)</font></i><br /><b><font color=\"#000080\">open</font></b> <b><font color=\"#000080\">Core</font></b><font color=\"#990000\">.</font><font color=\"#009900\">Std</font><br /><b><font color=\"#000080\">open</font></b> <b><font color=\"#000080\">Async</font></b><font color=\"#990000\">.</font><font color=\"#009900\">Std</font><br /><br /><i><font color=\"#9A1900\">(*</font></i><br /><i><font color=\"#9A1900\"> * Take a string of bytes and convert them to hex string</font></i><br /><i><font color=\"#9A1900\"> * representation</font></i><br /><i><font color=\"#9A1900\"> *)</font></i><br /><b><font color=\"#0000FF\">let</font></b> hex_of_string <font color=\"#990000\">=</font><br />  <b><font color=\"#000080\">String</font></b><font color=\"#990000\">.</font>concat_map <font color=\"#990000\">~</font>f<font color=\"#990000\">:(</font><b><font color=\"#0000FF\">fun</font></b> c <font color=\"#990000\">-></font> sprintf <font color=\"#FF0000\">\"%X\"</font> <font color=\"#990000\">(</font><b><font color=\"#000080\">Char</font></b><font color=\"#990000\">.</font>to_int c<font color=\"#990000\">))</font><br /><br /><i><font color=\"#9A1900\">(*</font></i><br /><i><font color=\"#9A1900\"> * An Robj can have multiple values in it, each one with its</font></i><br /><i><font color=\"#9A1900\"> * own content type, encoding, and value.  This just prints</font></i><br /><i><font color=\"#9A1900\"> * the value, which is a string blob</font></i><br /><i><font color=\"#9A1900\"> *)</font></i><br /><b><font color=\"#0000FF\">let</font></b> print_contents contents <font color=\"#990000\">=</font><br />  <b><font color=\"#000080\">List</font></b><font color=\"#990000\">.</font>iter<br />    <font color=\"#990000\">~</font>f<font color=\"#990000\">:(</font><b><font color=\"#0000FF\">fun</font></b> content <font color=\"#990000\">-></font><br />      <b><font color=\"#0000FF\">let</font></b> <b><font color=\"#0000FF\">module</font></b> <font color=\"#009900\">C</font> <font color=\"#990000\">=</font> <b><font color=\"#000080\">Riakc</font></b><font color=\"#990000\">.</font><b><font color=\"#000080\">Robj</font></b><font color=\"#990000\">.</font><font color=\"#009900\">Content</font> <b><font color=\"#0000FF\">in</font></b><br />      printf <font color=\"#FF0000\">\"VALUE: %s\\n\"</font> <font color=\"#990000\">(</font><b><font color=\"#000080\">C</font></b><font color=\"#990000\">.</font>value content<font color=\"#990000\">))</font><br />    contents<br /><br /><b><font color=\"#0000FF\">let</font></b> fail s <font color=\"#990000\">=</font><br />  printf <font color=\"#FF0000\">\"%s\\n\"</font> s<font color=\"#990000\">;</font><br />  shutdown <font color=\"#993399\">1</font><br /><br /><b><font color=\"#0000FF\">let</font></b> exec <font color=\"#990000\">()</font> <font color=\"#990000\">=</font><br />  <b><font color=\"#0000FF\">let</font></b> host <font color=\"#990000\">=</font> <b><font color=\"#000080\">Sys</font></b><font color=\"#990000\">.</font>argv<font color=\"#990000\">.(</font><font color=\"#993399\">1</font><font color=\"#990000\">)</font> <b><font color=\"#0000FF\">in</font></b><br />  <b><font color=\"#0000FF\">let</font></b> port <font color=\"#990000\">=</font> <b><font color=\"#000080\">Int</font></b><font color=\"#990000\">.</font>of_string <b><font color=\"#000080\">Sys</font></b><font color=\"#990000\">.</font>argv<font color=\"#990000\">.(</font><font color=\"#993399\">2</font><font color=\"#990000\">)</font> <b><font color=\"#0000FF\">in</font></b><br />  <i><font color=\"#9A1900\">(*</font></i><br /><i><font color=\"#9A1900\">   * [with_conn] is a little helper function that will</font></i><br /><i><font color=\"#9A1900\">   * establish a connection, run a function on the connection</font></i><br /><i><font color=\"#9A1900\">   * and tear it down when done</font></i><br /><i><font color=\"#9A1900\">   *)</font></i><br />  <b><font color=\"#000080\">Riakc</font></b><font color=\"#990000\">.</font><b><font color=\"#000080\">Conn</font></b><font color=\"#990000\">.</font>with_conn<br />    <font color=\"#990000\">~</font>host<br />    <font color=\"#990000\">~</font>port<br />    <font color=\"#990000\">(</font><b><font color=\"#0000FF\">fun</font></b> c <font color=\"#990000\">-></font><br />      <b><font color=\"#0000FF\">let</font></b> <b><font color=\"#0000FF\">module</font></b> <font color=\"#009900\">R</font> <font color=\"#990000\">=</font> <b><font color=\"#000080\">Riakc</font></b><font color=\"#990000\">.</font><font color=\"#009900\">Robj</font> <b><font color=\"#0000FF\">in</font></b><br />      <b><font color=\"#0000FF\">let</font></b> content  <font color=\"#990000\">=</font> <b><font color=\"#000080\">R</font></b><font color=\"#990000\">.</font><b><font color=\"#000080\">Content</font></b><font color=\"#990000\">.</font>create <font color=\"#FF0000\">\"some random data\"</font> <b><font color=\"#0000FF\">in</font></b><br />      <b><font color=\"#0000FF\">let</font></b> robj     <font color=\"#990000\">=</font> <b><font color=\"#000080\">R</font></b><font color=\"#990000\">.</font>create <font color=\"#990000\">[]</font> <font color=\"#990000\">|></font> <b><font color=\"#000080\">R</font></b><font color=\"#990000\">.</font>set_content content <b><font color=\"#0000FF\">in</font></b><br />      <i><font color=\"#9A1900\">(*</font></i><br /><i><font color=\"#9A1900\">       * Put takes a bucket, a key, and an optional list of</font></i><br /><i><font color=\"#9A1900\">       * options.  In this case we are setting the</font></i><br /><i><font color=\"#9A1900\">       * [Return_body] option which returns what the key</font></i><br /><i><font color=\"#9A1900\">       * looks like after the put.  It is possible that</font></i><br /><i><font color=\"#9A1900\">       * siblings were created.</font></i><br /><i><font color=\"#9A1900\">       *)</font></i><br />      <b><font color=\"#000080\">Riakc</font></b><font color=\"#990000\">.</font><b><font color=\"#000080\">Conn</font></b><font color=\"#990000\">.</font>put<br />        c<br />        <font color=\"#990000\">~</font>b<font color=\"#990000\">:</font><font color=\"#FF0000\">\"test_bucket\"</font><br />        <font color=\"#990000\">~</font>k<font color=\"#990000\">:</font><font color=\"#FF0000\">\"test_key\"</font><br />        <font color=\"#990000\">~</font>opts<font color=\"#990000\">:[</font><b><font color=\"#000080\">Riakc</font></b><font color=\"#990000\">.</font><b><font color=\"#000080\">Opts</font></b><font color=\"#990000\">.</font><b><font color=\"#000080\">Put</font></b><font color=\"#990000\">.</font><font color=\"#009900\">Return_body</font><font color=\"#990000\">]</font><br />        robj<font color=\"#990000\">)</font><br /><br /><b><font color=\"#0000FF\">let</font></b> eval <font color=\"#990000\">()</font> <font color=\"#990000\">=</font><br />  exec <font color=\"#990000\">()</font> <font color=\"#990000\">>>|</font> <b><font color=\"#0000FF\">function</font></b><br />    <font color=\"#990000\">|</font> <font color=\"#009900\">Ok</font> <font color=\"#990000\">(</font>robj<font color=\"#990000\">,</font> key<font color=\"#990000\">)</font> <font color=\"#990000\">-></font> <b><font color=\"#0000FF\">begin</font></b><br />      <i><font color=\"#9A1900\">(*</font></i><br /><i><font color=\"#9A1900\">       * [put] returns a [Riakc.Robj.t] and a [string</font></i><br /><i><font color=\"#9A1900\">       * option], which is the key if Riak had to generate</font></i><br /><i><font color=\"#9A1900\">       * it</font></i><br /><i><font color=\"#9A1900\">       *)</font></i><br />      <b><font color=\"#0000FF\">let</font></b> <b><font color=\"#0000FF\">module</font></b> <font color=\"#009900\">R</font> <font color=\"#990000\">=</font> <b><font color=\"#000080\">Riakc</font></b><font color=\"#990000\">.</font><font color=\"#009900\">Robj</font> <b><font color=\"#0000FF\">in</font></b><br />      <i><font color=\"#9A1900\">(*</font></i><br /><i><font color=\"#9A1900\">       * Extract the vclock, if it exists, and convert it to</font></i><br /><i><font color=\"#9A1900\">       * to something printable</font></i><br /><i><font color=\"#9A1900\">       *)</font></i><br />      <b><font color=\"#0000FF\">let</font></b> vclock <font color=\"#990000\">=</font><br /> <b><font color=\"#000080\">Option</font></b><font color=\"#990000\">.</font>value<br />   <font color=\"#990000\">~</font>default<font color=\"#990000\">:</font><font color=\"#FF0000\">\"<none>\"</font><br />   <font color=\"#990000\">(</font><b><font color=\"#000080\">Option</font></b><font color=\"#990000\">.</font>map <font color=\"#990000\">~</font>f<font color=\"#990000\">:</font>hex_of_string <font color=\"#990000\">(</font><b><font color=\"#000080\">R</font></b><font color=\"#990000\">.</font>vclock robj<font color=\"#990000\">))</font><br />      <b><font color=\"#0000FF\">in</font></b><br />      <b><font color=\"#0000FF\">let</font></b> key <font color=\"#990000\">=</font> <b><font color=\"#000080\">Option</font></b><font color=\"#990000\">.</font>value <font color=\"#990000\">~</font>default<font color=\"#990000\">:</font><font color=\"#FF0000\">\"<none>\"</font> key <b><font color=\"#0000FF\">in</font></b><br />      printf <font color=\"#FF0000\">\"KEY: %s\\n\"</font> key<font color=\"#990000\">;</font><br />      printf <font color=\"#FF0000\">\"VCLOCK: %s\\n\"</font> vclock<font color=\"#990000\">;</font><br />      print_contents <font color=\"#990000\">(</font><b><font color=\"#000080\">R</font></b><font color=\"#990000\">.</font>contents robj<font color=\"#990000\">);</font><br />      shutdown <font color=\"#993399\">0</font><br />    <b><font color=\"#0000FF\">end</font></b><br />    <i><font color=\"#9A1900\">(*</font></i><br /><i><font color=\"#9A1900\">     * These are the various errors that can be returned.</font></i><br /><i><font color=\"#9A1900\">     * Many of then come directly from the ProtoBuf layer</font></i><br /><i><font color=\"#9A1900\">     * since there aren't really any more semantics to apply</font></i><br /><i><font color=\"#9A1900\">     * to the data if it matches the PB frame.</font></i><br /><i><font color=\"#9A1900\">     *)</font></i><br />    <font color=\"#990000\">|</font> <font color=\"#009900\">Error</font> `<font color=\"#009900\">Bad_conn</font>           <font color=\"#990000\">-></font> fail <font color=\"#FF0000\">\"Bad_conn\"</font><br />    <font color=\"#990000\">|</font> <font color=\"#009900\">Error</font> `<font color=\"#009900\">Bad_payload</font>        <font color=\"#990000\">-></font> fail <font color=\"#FF0000\">\"Bad_payload\"</font><br />    <font color=\"#990000\">|</font> <font color=\"#009900\">Error</font> `<font color=\"#009900\">Incomplete_payload</font> <font color=\"#990000\">-></font> fail <font color=\"#FF0000\">\"Incomplete_payload\"</font><br />    <font color=\"#990000\">|</font> <font color=\"#009900\">Error</font> `<font color=\"#009900\">Notfound</font>           <font color=\"#990000\">-></font> fail <font color=\"#FF0000\">\"Notfound\"</font><br />    <font color=\"#990000\">|</font> <font color=\"#009900\">Error</font> `<font color=\"#009900\">Incomplete</font>         <font color=\"#990000\">-></font> fail <font color=\"#FF0000\">\"Incomplete\"</font><br />    <font color=\"#990000\">|</font> <font color=\"#009900\">Error</font> `<font color=\"#009900\">Overflow</font>           <font color=\"#990000\">-></font> fail <font color=\"#FF0000\">\"Overflow\"</font><br />    <font color=\"#990000\">|</font> <font color=\"#009900\">Error</font> `<font color=\"#009900\">Unknown_type</font>       <font color=\"#990000\">-></font> fail <font color=\"#FF0000\">\"Unknown_type\"</font><br />    <font color=\"#990000\">|</font> <font color=\"#009900\">Error</font> `<font color=\"#009900\">Wrong_type</font>         <font color=\"#990000\">-></font> fail <font color=\"#FF0000\">\"Wrong_type\"</font><br /><br /><b><font color=\"#0000FF\">let</font></b> <font color=\"#990000\">()</font> <font color=\"#990000\">=</font><br />  ignore <font color=\"#990000\">(</font>eval <font color=\"#990000\">());</font><br />  never_returns <font color=\"#990000\">(</font><b><font color=\"#000080\">Scheduler</font></b><font color=\"#990000\">.</font>go <font color=\"#990000\">())</font><br /></code></pre>  <p>Now compile it: </p> <pre><code>ocamlfind ocamlopt -thread -I +camlp4 -package riakc -c demo.ml<br />ocamlfind ocamlopt -package riakc -thread -linkpkg \\<br />-o demo.native demo.cmx<br /></code></pre> <p>Finally, you can run it: <code>./demo.native <i>hostname</i> <i>port</i></code></p> <h1>...And More Detail</h1><p>The API for Riakc is broken up into two modules: <code>Riakc.Robj</code> and <code>Riakc.Conn</code> with <code>Riakc.Opts</code> being a third helper module.  Below is in reference to version 2.0.0 of Riakc. </p> <h2>Riakc.Robj</h2><p><code>Riakc.Robj</code> defines a representation of an object stored in Riak.  <code>Robj</code> is completely pure code.  The API can be found <a href=\"https://github.com/orbitz/ocaml-riakc/blob/2.0.0/lib/riakc/robj.mli\">here</a>. </p> <h2>Riakc.Conn</h2><p>This is the I/O layer.  All interaction with the actual database happens through this module.  <code>Riakc.Conn</code> is somewhat clever in that it has a compile-time requirement that you have called <code>Riakc.Robj.set_content</code> on any value you want to PUT.  This guarantees you have resolved all siblings, somehow.  Its API can be found <a href=\"https://github.com/orbitz/ocaml-riakc/blob/2.0.0/lib/riakc/conn.mli\">here</a>. </p> <h2>Riakc.Opts</h2><p>Finally, various options are defined in <code>Riakc.Opts</code>.  These are options that GET and PUT take.  Not all of them are actually supported but support is planned.  The API can be viewed <a href=\"https://github.com/orbitz/ocaml-riakc/blob/2.0.0/lib/riakc/opts.mli\">here</a>. </p> <p>Hopefully Riakc has a fairly straight forward API.  While the example code might be longer than other clients, it is complete and correct (I hope). </p>" nil nil "b274cc780801ff0c64dcdc11d2f0f8f4") (38 (20949 15561 622302) "http://camlspotter.blogspot.com/2013/07/ocamlscope-is-now-ocaml-heroku-app.html" "Caml Spotting: =?utf-8?Q?OCaml=E2=97=8EScope?= is now an OCaml heroku app!" "Jun Furuse" "Wed, 03 Jul 2013 15:36:00 +0000" "OCaml◎Scope, a new OCaml API search, is now a service running at <a href=\"http://ocamloscope.herokuapp.com/\">http://ocamloscope.herokuapp.com</a>!<br /><br /><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em; text-align: center;\" href=\"http://ocamloscope.herokuapp.com/images/logo.svg\"><img src=\"http://ocamloscope.herokuapp.com/images/logo.svg\" height=\"131\" border=\"0\" width=\"320\" /></a></div><br />Change list:<br /><br /><ul><li>Now it no longer uses <a href=\"http://sourceforge.net/projects/ocaml-cgi/\">CamlGI</a> but <a href=\"http://ocsigen.org/eliom/\">Eliom</a> as the web engine. Eliom is much safer and easier to write!</li><li>DB carries 245302 entries from 76 OCamlFind packages.</li><li>Search algorithm tweak to get better results in shorter time</li><li>More query forms (see Examples)<div style=\"clear: both; text-align: center;\" class=\"separator\"><br /></div></li></ul>" nil nil "19f413637fe13ff0d51ab583d05ad1d8") (37 (20949 15561 622031) "http://alan.petitepomme.net/cwn/2013.07.02.html" "Caml Weekly News: Caml Weekly News, 02 Jul 2013" nil "Tue, 02 Jul 2013 12:00:00 +0000" "Spoc: GPGPU programming with OCaml / Ocaml on windows / meetup Paris-OCaml (OUPS) mardi 2 juillet / Mixing two GADTs / Request for feedback: A problem with injectivity and GADTs / Other Caml News" nil nil "02b8ba1b4b2b7b614c4dbc88828075b4") (36 (20949 15561 621775) "http://gallium.inria.fr/blog/portable-conditionals-in-makefiles" "GaGallium: Portable conditionals in makefiles" "Damien Doligez" "Tue, 02 Jul 2013 08:00:00 +0000" "<p>If you are <a href=\"http://caml.inria.fr/mantis/view.php?id=5737#c9658\">writing software</a> that works on many variants of Unix, you are confronted to the problem of Makefiles: some systems use GNU make and others use BSD make and these two are compatible, but only on a very restricted subset. The most problematic restriction is that they don't have a common syntax for writing conditionals.</p>
<p>So how do you write conditionals that work on both variants? GNU make and BSD make share so few of their \"new\" features (features that were not in UNIX make) that it looks like an impossible task.</p>
<p>Let's say you have a variable <code>FOO</code> that contains either <code>true</code> or <code>false</code>, and you want your target <code>A</code> to depend on <code>B C D</code> in the first case, and on <code>E F G</code> in the second. I know two ways of doing that.</p>
<h3 id=\"first-solution-substitution\">First solution: substitution</h3>
<p>The first solution is simple but not fully general. It uses substitution in variable references:</p>
<pre><code>DEPS1 = ${FOO:true=B C D}
DEPS2 = ${DEPS1:false=E F G}
A : ${DEPS2}
echo ${DEPS2}</code></pre>
<p>This is quite ugly, it doesn't work if <code>false</code> appears in the value of the <code>true</code> case (here, <code>B C D</code>). Also, I don't think there is any way to extend it to handle a default case. But it's simple and relatively easy to understand.</p>
<h3 id=\"second-solution-indirection\">Second solution: indirection</h3>
<p>The second solution works by applying David Wheeler's aphorism:</p>
<blockquote>
<p>All problems in computer science can be solved by another level of indirection.</p>
</blockquote>
<p>We'll use indirect variable references. This is a feature that, surprisingly, works the same in both flavours of make:</p>
<pre><code>FOO = BAR
BAR = toto
all:
echo ${${FOO}}</code></pre>
<p>This will echo <code>toto</code>.</p>
<p>Now, we have <code>FOO</code> that is either <code>true</code> or <code>false</code>, so we'll do this:</p>
<pre><code>true = B C D
false = E F G
DEPS := ${${FOO}}
A : ${DEPS}
echo ${DEPS}</code></pre>
<p>Note how the definition of <code>DEPS</code> uses <code>:=</code> rather than <code>=</code>. This is because we want to be able to reuse the variables <code>true</code> and <code>false</code> for another conditional. If we don't use <code>:=</code>, the assignment is lazy and <code>DEPS</code> gets a value based on the last values assigned to <code>true</code> and <code>false</code> (which may be further down in the makefile).</p>
<h3 id=\"advanced-solution-more-indirection\">Advanced solution: more indirection</h3>
<p>The above obviously generalizes to more than two cases, but what about having a default case? Suppose that we want to do as above, but make <code>A</code> depend on <code>H I J</code> when <code>FOO</code> is set to anything else that <code>true</code> or <code>false</code> (or unset, which is the same as set to <code>\"\"</code>). How do we do that?</p>
<p>It's easy, just apply Wheeler's aphorism one more time:</p>
<pre><code>unlikely_true = aaaa
unlikely_false = bbbb
xxx_aaaa = B C D
xxx_bbbb = E F G
xxx_ = H I J
DEPS := ${xxx_${unlikely_${FOO}}}
A : ${DEPS}
echo ${DEPS}</code></pre>
<p>This is getting ugly but it works. As long as you don't have any clash with some random variable whose name starts with <code>unlikely_</code>. And if you have several conditionals in your makefile, you probably should reset all these variables after using them:</p>
<pre><code>unlikely_true = aaaa
unlikely_false = bbbb
xxx_aaaa = B C D
xxx_bbbb = E F G
xxx_ = H I J
DEPS := ${xxx_${unlikely_${FOO}}}
unlikely_true =
unlikely_false =
xxx_aaaa =
xxx_bbbb =
xxx_ =
A : ${DEPS}
echo ${DEPS}</code></pre>
<p>This makefile has a nice property: you can use environment variables not only to override some cases, but also to add some cases without touching the makefile. For example:</p>
<pre><code>make A unlikely_filenotfound=cccc xxx_cccc='X Y Z' FOO=filenotfound</code></pre>
<p>This will use <code>X Y Z</code> for the dependencies of A.</p>
<h3 id=\"obvious-solution-use-gmake\">Obvious solution: use gmake</h3>
<p>Of course, the obvious solution is to use GNUmake on BSD as well as Linux and MacOS, and write your makefiles for GNUmake only. That looks more reasonable than the above. Unless you have to deal with some BSD fanatics who don't want to install GNU make on their machine.</p>
<p>Anyway, I started with the explicit (but maybe unreasonable) constraint of making portable makefiles. Over the years I've heard a number of very smart people claim that it was impossible, and I set out to prove them wrong. Mission accomplished.</p>" nil nil "86fa33989d2867f4c0a2a55fdeef86a5") (35 (20949 15561 620829) "http://www.ocamlpro.com/blog/2013/07/01/monthly-06.html" "OCamlPro: News from May and June" "Thomas Gazagnaire" "Mon, 01 Jul 2013 00:00:00 +0000" "<p>It is time to give a brief summary of our recent activities. As usual, our contributions were focused on three main objectives: (i) make the OCaml compiler faster and easier to use; (ii) make the OCaml developers more efficient by releasing new development tools and improving editor supports; and (iii) organize and participate to community events around the language. We are also welcoming four interns who will work with us on these objectives during the summer.</p><h2>Compiler updates</h2><p>Following the ideas he announced in his recent <a href=\"http://www.ocamlpro.com/blog/2013/05/24/optimisations-you-shouldn-t-do.html\">blog post</a>, <a href=\"https://github.com/chambart\">Pierre Chambart</a> has made some progress on his <a href=\"https://github.com/chambart/ocaml/tree/flambda_experiments\">inlining branch</a>. He is currently working on stabilizing and cleaning-up the code for optimization which does not take into account inter-module information.</p><p>We also continue to work on our profiling tool and start to separate the different parts of the project. We have <a href=\"https://github.com/cago/ocaml\">patched</a> the compiler and runtime, for both bytecode and native code, to generate (i) <code>.prof</code> files which contain the id-loc information and allow us to recover the location from the identifiers in the header of the block; and (ii) to dump a program heap in a file on demand or to monitor a running program without memory and performance overhead. <a href=\"http://cagdas.bozman.fr/\">Çagdas Bozman</a> has presented the work he has done so far regarding his PhD to members of the <a href=\"http://bware.lri.fr/index.php/Presentation\">Bware</a> project and we started to test our prototype on industrial use-cases using the <a href=\"http://why3.lri.fr/\">why3</a> platform.</p><p>On the multi-core front, <a href=\"http://ageinghacker.net/\">Luca Saiu</a> is continuing his post-doc with <a href=\"http://fabrice.lefessant.net/\">Fabrice le Fessant</a> and is modifying the OCaml runtime to support parallel programming on multi-core computers. Their version of the \"multi-runtime\" OCaml provides a message-passing abstraction in which a running OCaml program is \"split\" into independent OCaml programs, one per thread (if possible running on its separate core) with a separate instance of the runtime library in order to reduce resource contention both at the software and at the hardware level. Luca is now debugging the support for OCaml multi-threading running on top of a multi-context parallel program.  A recent presentation covering this work and its challenges is available <a href=\"http://www.ocamlpro.com/pub/multi-runtime.pdf.tar.gz\">online</a>.</p><p>A new intern from <a href=\"http://www.ens-cachan.fr/\">ENS Cachan</a>, <a href=\"https://github.com/thomasblanc\">Thomas Blanc</a> is working on a whole program analysis system. His internship's final goal is to provide a good hint of exceptions that may be left uncaught by the program, resulting a failure. It is quite interesting as exceptions are pretty much the part of the program \"hard to foresee\". The main difficulty comes from higher-order functions (like <code>List.iter</code>). Because of them, a simple local analysis becomes impossible. So the first task is to take the whole program in the form of separated <code>.cmt</code> files, <a href=\"https://github.com/thomasblanc/ocaml-typedtree-mapper\">merge</a> it, and remove every higher-order functions (either by direct inlining if possible or by a very big pattern matching). The merging as already been done through a deep browsing of the compiler's typedtrees. Thomas is now focusing in reordering the code so that higher-order functions can be safely removed.</p><p>Finally, we are helping to prepare the release 4.01.0 of the OCaml compiler: Fabrice has integrated his <a href=\"http://www.ocamlpro.com/blog/2012/08/08/profile-native-code.html\">frame-pointer</a> patch, that can be used to profile the performance of OCaml applications using Linux <code>perf</code> tool; he has added in <code>Pervasives</code> <a href=\"https://github.com/ocaml/ocaml/commit/ace0205b6499ffdae4588cfdd640c45855217a8f\">two application operators</a> that had been optimized before, but were only available for people who knew about that; he has also added a new environment variable, <code>OCAMLCOMPPARAM</code>, that can be used to change how a program is compiled by <code>ocamlc</code>/<code>ocamlopt</code>, without changing the build system (for example, <code>OCAMLCOMPPARAM='g=1' make</code> can be used to compile a project in debug mode without modifying the makefiles).</p><h2>Development Tools</h2><p>Since the initial release of <a href=\"http://opam.ocamlpro.com\">OPAM</a> in March, we have been kept busy preparing the upcoming <code>1.1.0</code> version, which should interface nicely with the forthcoming set of automatic tools which will constitute the first version of the <a href=\"http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html\">OCaml Platform</a> that we are helping <a href=\"http://www.cl.cam.ac.uk/projects/ocamllabs/\">OCamlLabs</a> to deliver. We have constantly been focused on fixing bugs and implementing feature requests (more than <a href=\"https://github.com/OCamlPro/opam/issues?direction=desc&milestone=17&page=1&sort=created&state=closed\">70 issues</a> have been closed on Github) and we have recently improved the speed and reliability of <code>opam update</code>. More good news related to OPAM: The number of packages submitted to <a href=\"http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html\">official</a> repository is steadily increasing with around 20 new packages integrated every-months (and much more already existing package upgrades), and the official Debian package should land in <a href=\"http://ftp-master.debian.org/new/opam_1.0.0-1.html\">testing</a> very soon.</p><p>This month, <a href=\"http://louis.gesbert.fr/cv.en.html\">Louis</a> was still busy improving different tools for ocaml code edition. <code>ocp-index</code> and <code>ocp-indent</code>, made for the community to improve the general ocaml experience and kindly funded by <a href=\"http://janestreet.com\">Jane Street</a>, have seen some updates:</p><ul> <li> <p><a href=\"https://github.com/OCamlPro/ocp-index\">ocp-index</a>: the library data access tool which was first presented in <a href=\"http://www.ocamlpro.com/blog/2013/04/22/monthly-04.html\">April</a> has seen some progress, with the ability to locate definitions and resolve type names. It is still not yet considered stable though, expect more from it soon. An early release (0.2.0) is in OPAM.</p> </li><li> <p><a href=\"https://github.com/OCamlPro/ocp-indent\">ocp-indent</a> the generic ocaml source code indenter, has seen its usual bunch of fixes, along with some new customisation options. Also, its <a href=\"https://github.com/OCamlPro/ocp-indent/blob/master/src/indentPrinter.mli\">library interface</a> has been rewritten, offering much better flexibility and opening the gate to uses like restarting from checkpoints to avoid full reparsing, detecting top-expression boundaries, syntax coloration, etc. We will be releasing 1.3.0 in OPAM very soon.</p> </li> </ul><p>We are also developing in-house projects aiming at providing a better first experience of OCaml to beginners and students:</p><ul> <li> <p>the new <a href=\"https://github.com/OCamlPro/ocaml-top\">ocaml-top</a> (previous project name <code>ocp-edit-simple</code>) aims to offer a simple, but clean and easy-to-use interface to interact with the ocaml top-level. It is intended mainly for exercises, tutorials and practicals. A release should be coming soon, the Linux version being quite stable while some bugs remain on Windows.</p> </li><li> <p>two new interns, <a href=\"http://www.linkedin.com/profile/view?id=3D238971426&locale=3Dfr_FR&tr=k3Dtyah\">David</a> and <a href=\"http://www.linkedin.com/profile/view?id=3D65173689\">Pierrick</a>, have started working on a <a href=\"https://github.com/pcouderc/ocp-webedit\">web-IDE</a> for OCaml. As students, they have seen sometimes how difficult it could be to install OCaml on some OSes, or simply configure editors like emacs or vim. To solve these issues, the idea is to use only a web browser-based editor and provide a way to compile a project without having to install anything on your computer.  For the editing part, the idea is to use <a href=\"http://ace.ajax.org/\">Ace</a> and improve it for OCaml, using <a href=\"https://github.com/OCamlPro/ocp-indent\">ocp-indent</a> for example, which is possible by using <a href=\"http://ocsigen.org/js_of_ocaml/\">js_of_ocaml</a>. The next step will be to glue this editor with both <a href=\"http://try.ocamlpro.com/\">TryOCaml</a> to execute code, and a cloud computing part, to store projects and files and access them from anywhere.</p> </li> </ul><p>We are also trying to improve cross-compilation tutorials and tools for developing native iOS application under a Linux system, using the OCaml language. <a href=\"http://fr.linkedin.com/pub/souhire-kenawi/6a/614/54b/\">Souhire</a>, our fourth new intern, is experimenting with that idea and will document how to set up such an environment, from the foundation until the publication on the application store (if it is possible). She is starting to look at how iOS applications (with a native graphical interface) written in C can be cross-compiled on <a href=\"http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/HowTo_en\">Linux</a>, and how the ones written in OCaml can be cross-compiled on <a href=\"http://psellos.com/ocaml/\">MacOSX</a>.</p><p>On the library front, Fabrice has completely rewritten the way his <a href=\"http://www.typerex.org/ocplib-wxOCaml.html\">wxOCaml library</a> is generated, compared to what was described in a previous <a href=\"http://www.ocamlpro.com/blog/2013/04/02/wxocaml-reloaded.html\">blog post</a>. It does not share any code anymore with other wxWidgets bindings (wxHaskell or wxEiffel), but directly generates the stubs from a DSL (close to C++) describing the wxWidgets classes. It should make binding more widgets (classes) and more methods for each widget much easier, and also help for maintenance, evolution and compatibility with wxWidgets version. There are now an interesting set of samples in the library, covering many interesting usages.</p><h2>Community</h2><p>We have also been pretty active during the last months to promote the use of OCaml in the free-software and research community: we are actively participating to the upcoming <a href=\"http://ocaml.org/meetings/ocaml/2013/\">OCaml 2013</a> and <a href=\"http://cufp.org/2013cfp\">Commercial User of Functional Programming</a> conference which will be help next September in Boston.</p><p>While I was visiting <a href=\"http://janestreet.com/\">Jane Street</a> with <a href=\"http://www.cl.cam.ac.uk/projects/ocamllabs/index.html\">OCamlLabs's team</a>, I had the pleasure to be invited to give a talk at the <a href=\"http://www.meetup.com/NYC-OCaml/\">NYC OCaml meetup</a> on OPAM (my slides can be found online <a href=\"http://www.ocamlpro.com/pub/ny-meetup.pdf\">here</a>). It was a nice meetup, with more than 20 people, hosted in the great Jane-Street New-York offices.</p><p>OCamlPro is still organizing OCaml meetups in Paris, hosted by <a href=\"http://www.irill.org/\">IRILL</a> and sponsored by <a href=\"http://www.lexifi.com/\">LexiFi</a> : our last Ocaml Users in PariS (OUPS) meetup was in <a href=\"http://www.meetup.com/ocaml-paris/events/116100692/\">May</a>, there were more than 50 persons ! It was a nice collection of talks, where Esther Baruk spoke about the usage of OCaml at Lexifi, Benoit Vaugon about all the secrets that we always wanted to know about the OCaml bytecode, Frédéric Bour presents us Merlin, the new IDe for VIM, and Gabriel Scherer told us how to better interact with the OCaml core team.</p><p>We are now preparing our next <a href=\"http://www.meetup.com/ocaml-paris/events/121412532/\">OUPS</a> meeting which will take place at IRILL on Tuesday, July 2nd. Emphasis will be on programming in OCaml in different context. Thus, there will be some js_of_ocaml experiences, GPGPU in OCaml and GADTs in practice. There is still many seats available, so do not hesitate to register to the meetup, but if you cannot, this time, videos of the talks (in French) will be available afterwards.</p><p>Not really related to OCaml, we also attend the <a href=\"http://www.teratec.eu/gb/forum/index.html\">Teratec 2013 Forum</a> which brings together a lot of <a href=\"http://www.scilab.org/\">Scilab</a> users. This is part of the <a href=\"http://www.richelieu.pro\">Richelieu</a> research project that <a href=\"http://www.linkedin.com/profile/view?id=130990583\">Michael</a> is working on: his goal is to analyze Scilab code, before just-in-time compilation. It requires a basic type-inference algorithm, but for a language that has not been designed for that ! He is currently struggling with the dynamic aspects of Scilab language. After some work on preprocessing <code>eval</code> and <code>evalstr</code> functions, he is now focusing on how Scilab programers usually write functions. He is currently using different kinds of analyses on real-world Scilab programs to understand how they are structured.</p><p>Finally, we are happy to announce that we finally found the time to release the <a href=\"https://github.com/OCamlPro/ocaml-cheat-sheets\">sources</a> of our OCaml <a href=\"http://www.typerex.org/cheatsheets.html\">cheat-sheets</a>. Feel free to contribute by sending patches if you are interested to improve them!</p>" nil nil "d85bebf5a01b8bbfaba7a49d2fd1021c") (34 (20949 15561 619006) "http://coq.inria.fr/coq-received-acm-sigplan-programming-languages-software-2013-award" "Coq: Coq received ACM SIGPLAN Programming Languages Software 2013 award" "herbelin" "Sun, 30 Jun 2013 14:26:05 +0000" "<p>The development of Coq has been initiated in 1984 at INRIA by Thierry Coquand and Gérard Huet, then joined by Christine Paulin-Mohring and more than 40 direct <a href=\"http://coq.inria.fr/who-did-what-in-coq\">contributors</a>.</p>
<p>The first public release was CoC 4.10 in 1989. Extended with native inductive types, it was renamed Coq in 1991.</p>
<p>Since then, a growing community of users has shared its enthousiasm in the originality of the concepts of Coq and of its various features, as a richly-typed programming language and as an interactive theorem prover.</p>
<p><a href=\"http://coq.inria.fr/coq-received-acm-sigplan-programming-languages-software-2013-award\">read more</a></p>" nil nil "b43e83e066b46b49142f48532a35520e") (33 (20949 15561 618685) "http://jobs.github.com/positions/78c69f44-e031-11e2-97c6-4063613e594f" "Github OCaml jobs: Full Time: Senior Functional Programmer at Bloomberg L.P. in Lexington, NY" nil "Fri, 28 Jun 2013 20:29:45 +0000" "<p><strong>The Role:</strong></p>
<p>Bloomberg is starting an exciting journey to become industry leader in derivative applications by providing the next generation of cross-asset structuring & pricing platform. This includes complete and flexible financial contract representation, integration with advanced pricing models and end to end large scale enterprise solution. </p>
<p>Using innovative functional programming techniques, the candidate will participate in the development of algebra representation for financial instruments, dynamic CUDA and C code generation as well as automatic GUI workflow. The candidate will also have the opportunity to lead the introduction of functional programming at Bloomberg while solving some of the most complex financial problems.</p>
<p><strong>Qualifications:</strong></p>
<ul>
<li>Deep understanding and 3+ years recent hands on experience in OCaml or Haskell</li>
<li>Good understanding of compiler theory and compiler construction for functional language</li>
<li>Solid C/C++ skills</li>
<li>Experience in derivative structuring and pricing preferred</li>
<li>Good problem solving skills</li>
<li>Ability to work well independently and collaboratively</li>
</ul>
<p><strong>The Company:</strong></p>
<p>Bloomberg, the global business and financial information and news leader, gives influential decision makers a critical edge by connecting them to a dynamic network of information, people and ideas. The company’s strength – delivering data, news and analytics through innovative technology, quickly and accurately – is at the core of the Bloomberg Professional service, which provides real time financial information to more than 310,000 subscribers globally. Bloomberg’s enterprise solutions build on the company’s core strength, leveraging technology to allow customers to access, integrate, distribute and manage data and information across organizations more efficiently and effectively. Through Bloomberg Law, Bloomberg Government, Bloomberg New Energy Finance and Bloomberg BNA, the company provides data, news and analytics to decision makers in industries beyond finance. And Bloomberg News, delivered through the Bloomberg Professional service, television, radio, mobile, the Internet and two magazines, Bloomberg Businessweek and Bloomberg Markets, covers the world with more than 2,300 news and multimedia professionals at 146 bureaus in 72 countries. Headquartered in New York, Bloomberg employs more than 15,000 people in 192 locations around the world.</p>
<p>Bloomberg is an equal opportunities employer and we welcome applications from all backgrounds regardless of race, colour, religion, sex, ancestry, age, marital status, sexual orientation, gender identity, disability or any other classification protected by law.</p>" nil nil "fb944fe5e1d4361b647d320cf4fc20e6") (32 (20949 15561 616361) "http://gallium.inria.fr/blog/typestate-in-mezzo-mutable-list-iterators" "GaGallium: Typestate in Mezzo? Starting with list iterators." "=?utf-8?Q?Arma=C3=ABl_Gu=C3=A9neau?=" "Wed, 26 Jun 2013 08:00:00 +0000" "<p>I (Armaël Guéneau) am currently doing an internship with François Pottier, working on <a href=\"http://gallium.inria.fr/~protzenk/mezzo-lang/\">Mezzo</a>, which has been introduced by Jonathan in two previous blog posts (<a href=\"http://gallium.inria.fr/blog/introduction-to-mezzo/\">the first</a>, <a href=\"http://gallium.inria.fr/blog/introduction-to-mezzo-2/\">the second</a>).</p>
<p>Since the beginning of my internship, I have been playing with Mezzo, writing some code, and, more specifically, trying to see how the notion of <em>typestate</em> could be expressed with Mezzo's permissions. As an application, I tried to write in Mezzo an iterator on lists. What I call an iterator is here more like Scala's <em>Iterator</em> , or a bit like what Gabriel called generators in a <a href=\"http://gallium.inria.fr/blog/generators-iterators-control-and-continuations/\">previous blog post</a>.</p>
<p>This example turned out to be subtle enough to write in Mezzo: in this post, I'll try to show you the details of the implementation, leading to a fully working implementation of list iterators. I think it's a good opportunity to see an implementation of a (very simple) typestate, and also some funny tricks with Mezzo's permissions.</p>
<p>A word of warning, though: while the theory and implementation of Mezzo are starting to fit in nicely, the library-land is very much unknown territory so far. We are trying new things, and expect them to be easier in the future. As always, practice and teaching will surely yield substantial improvements, leading us to see in retrospect how we could have simplified things. Expect the code examples in this post to look <em>complicated</em>, and probably not representative of the Mezzo code we expect to write in the future.</p>
<h3 id=\"briefing\">Briefing</h3>
<p>What I want as an iterator is an object that let us iterate on a collection, giving one new element each time we call a function <code>next</code>, that makes the iterator go a step forward. Note that such an iterator is mutable, its internal state being modified by <code>next</code>. It would be possible to consider functional iterators, returning a value corresponding to the next position in the list; but to study the relation with typestate systems we decide to study <em>mutable</em> iterators here.</p>
<p>We have to handle the case where the iterator has no more elements. In Java or Scala, you have to check if there are more elements available with <code>hasNext</code>, and if you call <code>next</code> on an empty iterator, an exception is raised. In Mezzo we don't have exceptions. Moreover, we want to statically express the protocol that the operations on an iterator must follow, in the types themselves. It's the idea of typestate. By achieving that, the user is prevented <em>at compilation time</em> of using <code>next</code> on an empty iterator.</p>
<p>The application to (simply linked) lists seems straightforward: you just have to follow the <code>tail</code> link of each <code>Cons</code> cell, starting with the head of the list. What is not so trivial is how to express that with Mezzo's permissions.</p>
<h3 id=\"the-silent-iterator\">The silent iterator</h3>
<p>Let's start with a very stupid iterator: it traverses the list, but without giving its elements to the user.</p>
<h4 id=\"from-the-outside-signatures\">From the outside: signatures</h4>
<h5 id=\"an-iterator-has-exclusive-access-on-the-list\">An iterator has exclusive access on the list</h5>
<p>First, to be able to iterate on a list, the iterator will need the permission to access the list and its contents. A solution is to <strong>consume</strong> the permission <code>l @ list a</code> when you create an iterator on the list <code>l</code> (of elements of type <code>a</code>), and <strong>give it back</strong> when the iteration is finished (or when you stop the iterator manually).</p>
<p>This gives us the following signatures for the <code>new</code> and <code>stop</code> functions:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> <span class=\"kw\">new</span>: [a] (consumes l: <span class=\"dt\">list</span> a) -> iterator a (l @ <span class=\"dt\">list</span> a)
<span class=\"kw\">val</span> stop: [a, post: perm] (consumes iterator a post) -> (| post)</code></pre>
<p>In case you're not familiar with Mezzo syntax yet, you can find more details in <a href=\"http://gallium.inria.fr/blog/introduction-to-mezzo/\">the first post</a> cited above, but let me just do a quick reminder here. The bracket notation <code>[post:perm]</code> is parametric polymorphism on a type of kind <code>perm</code> (a permission), and that <code>(consumes foo)</code> indicates that type <code>foo</code> is not given back to the type environment after the functional call. Finally, <code>(foo | bar)</code> is a conjunction of the type <code>foo</code> and the permission <code>bar</code>, which may be a purely static information, not associated to any runtime value; in particular, <code>(| post)</code> is an empty tuple that is only useful as the carrier of the permission <code>post</code>.</p>
<h5 id=\"expressing-iterator-typestate\">Expressing iterator typestate</h5>
<p>We also need a <code>next</code> function, that takes an iterator in input. To handle the fact that <code>next</code> may lead to an empty iterator, we say that <code>next</code> consumes the fact that the input argument is an iterator, and returns a variant of <code>option a</code>:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">data offer (post: perm) a =
| <span class=\"dt\">None</span> {| post }
| <span class=\"dt\">Some</span> { x: a }</code></pre>
<p>In the first case, the iteration is finished: the <code>post</code> permission (in practice equal to <code>l @ list a</code> for a given <code>a</code> and <code>l</code>) is returned. In the second case, an element is returned. Note that we could have used the sum type of the standard library, <code>choice a b</code>, but this specific datatype allows us to give more explicit constructor names (than <code>Left</code> and <code>Right</code>).</p>
<p>We now have the <code>next</code> signature:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> next: [a, post: perm] (consumes it: iterator a post) ->
offer post (| it @ iterator a post)</code></pre>
<p>For now, because our iterator is silent, in the <code>Some</code> case, we return no value of type <code>a</code>, only the fact that <code>it</code> is still an iterator, so we can continue the iteration. On the contrary, after a <code>None</code> answer, it is statically not possible to call <code>next</code> again: the permission <code>it @ iterator a post</code> has been consumed and was not returned through the offer.</p>
<div class=\"figure\">
<img src=\"http://gallium.inria.fr/blog/ts1.png\" alt=\"Typestate of the iterator\" /><p class=\"caption\">Typestate of the iterator</p>
</div>
<p>A small code example using this iterator:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"co\">(* Loop calls [next] on the iterator until it is empty *)</span>
<span class=\"kw\">val</span> <span class=\"kw\">rec</span> loop [a, post: perm] (consumes it: iterator a post): (| post) =
<span class=\"kw\">match</span> next it <span class=\"kw\">with</span>
| <span class=\"dt\">None</span> -> ()
| <span class=\"dt\">Some</span> { x } -> loop it
end</code></pre>
<h4 id=\"diving-into-the-internals-implementation\">Diving into the internals: implementation</h4>
<h5 id=\"a-first-attempt\">A first attempt</h5>
<p>To be able to go forward, the iterator must store the elements that will be explored in the future. With a list, it's easy: initially, it consists in the list itself, and each call to <code>next</code> just takes the tail of the current internal list.</p>
<p>This gives us:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">data <span class=\"kw\">mutable</span> iterator a (post: perm) = <span class=\"dt\">Iterator</span> {
xs: <span class=\"dt\">list</span> a
}
data offer (post: perm) a =
| <span class=\"dt\">None</span> { | post }
| <span class=\"dt\">Some</span> { x: a }
<span class=\"kw\">val</span> <span class=\"kw\">new</span> [a] (consumes l: <span class=\"dt\">list</span> a): iterator a (l @ <span class=\"dt\">list</span> a) =
<span class=\"dt\">Iterator</span> { xs = l }
<span class=\"kw\">val</span> next [a, post: perm] (consumes it: iterator a post):
offer post (| it @ iterator a post) =
<span class=\"kw\">match</span> it.xs <span class=\"kw\">with</span>
| <span class=\"dt\">Nil</span> ->
<span class=\"dt\">None</span>
| <span class=\"dt\">Cons</span> { head; tail } ->
it.xs <- tail;
<span class=\"dt\">Some</span> { x = () }
end</code></pre>
<p>Sadly, this example doesn't typecheck: in the match case where <code>it.xs</code> is <code>Nil</code>, we return <code>None</code>, and the permission <code>post</code>. However, we don't have <code>post</code>!</p>
<p>Formally, at the beginning of <code>next</code>, the only available permissions are <code>it @ iterator a post</code>, and in the first match case, <code>it.xs @ Nil</code>. Nothing here gives us <code>post</code>.<br />Intuitively, even if we had <code>post</code> at the beginning, <code>next</code> here doesn't preserves the knowledge of the cons cells we have already explored: we have to store in the iterator the permissions of the previous cons cells, to be able to finally merge them back into <code>post</code>.</p>
<h5 id=\"storing-the-old-permissions\">Storing the old permissions</h5>
<p>We introduce a new permission, <code>p</code>, that describes the permission for the consumed cons cells. The iterator contains <code>p</code>, and a function, <code>rewind</code>, that consumes <code>p</code>, and the permission on the tail, and merge them into <code>post</code>.</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">data <span class=\"kw\">mutable</span> iterator a (p: perm) (post: perm) = <span class=\"dt\">Iterator</span> {
content: (
xs: <span class=\"dt\">list</span> a,
rewind: (| consumes (p * xs @ <span class=\"dt\">list</span> a)) -> (| post)
| p
)
}</code></pre>
<p>With this definition of <code>iterator</code>, the signature of <code>next</code> would be:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> next: [a, p: perm, post: perm] (
consumes it: <span class=\"dt\">Iterator</span> {
content: (
xs: <span class=\"dt\">list</span> a,
rewind: (| consumes (p * xs @ <span class=\"dt\">list</span> a)) -> (| post)
| p
)
} ->
offer post (| it @ iterator a (p * xs @ <span class=\"dt\">Cons</span> { head: a; tail: unknown }) post)</code></pre>
<p>The idea is that before the call to <code>next</code>, the iterator stores in <code>xs</code> the permission on the non-traversed part of the list, <code>xs</code>, and <code>rewind</code> requests the permission on the already-traversed part of the list, represented by <code>p</code>, upto <code>xs</code> excluded. If <code>xs</code> is itself a cons cell (and only in this case), we can call <code>next</code>; the iterator will then store only the tail of <code>xs</code>, and its rewind function request the permission for <code>p</code>, plus the first cell of <code>xs</code> -- which at this point as been traversed.</p>
<p>Concretely, imagine we have the following list construction, for some list <code>lb @ list int</code>.</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> la = <span class=\"dt\">Cons</span> { head=1; tail=lb }</code></pre>
<p>and are now iterating on this list. Assuming we have already called <code>next</code> once, have traversed the first cell of <code>la</code>, the <code>rewind</code> function of the iterator would have a type equivalent to the following:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">rewind: (| consumes (
la @ <span class=\"dt\">Cons</span> { head:int; tail=lb }
* lb @ <span class=\"dt\">list</span> <span class=\"dt\">int</span>)
)
-> (| post )</code></pre>
<p>If we pattern-match on <code>lb</code>, in the <code>Cons</code> case, the typing environment will learn that <code>lb</code> has type <code>Cons { head : int; tail = lc }</code> for some tail <code>lc @ list int</code>. So rewind has the refined type</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">rewind: (| consumes (
la @ <span class=\"dt\">Cons</span> { head:int; tail=lb }
* lb @ <span class=\"dt\">Cons</span> { head:int; tail=lc })
)
-> (| post )</code></pre>
<p>The already-traversed part of the list, <code>la</code>, has the same type, but the not-yet-traversed part has been refined to a cons type. Note that with the additional hypothesis <code>lc @ int</code> of our context, this is equivalent to the following type:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">rewind: (| consumes (
(la @ <span class=\"dt\">Cons</span> { head:int; tail=lb } * lb @ <span class=\"dt\">Cons</span> { head:int; tail=lc })
* lc @ <span class=\"dt\">list</span> <span class=\"dt\">int</span>
)
-> (| post )</code></pre>
<p>which is precisely the type of the <code>rewind</code> function of the iterator <em>returned</em> by <code>next</code>. So after pattern-matching, the type of the <code>rewind</code> function passed to <code>next</code> becomes exactly the same as the type of the <code>rewind</code> function expected as a return value. We can return this function, unchanged: it has just been <em>transtyped</em>.</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> next it <span class=\"co\">(* lengthy type annotation that we won't repeat here *)</span> =
<span class=\"kw\">let</span> (xs, rewind) = it.content <span class=\"kw\">in</span>
<span class=\"kw\">match</span> xs <span class=\"kw\">with</span>
| <span class=\"dt\">Nil</span> ->
<span class=\"co\">(* p * xs @ list a *)</span>
rewind ();
<span class=\"co\">(* post *)</span>
<span class=\"dt\">None</span>
| <span class=\"dt\">Cons</span> { head; tail } ->
it.content <- (tail, rewind);
<span class=\"dt\">Some</span>
end</code></pre>
<p>As we described, in the <code>Cons</code> case, the value of the <code>xs</code> field of <code>it</code> is changed to <code>tail</code>, but the <code>rewind</code> field is unchanged.</p>
<p>Remark: we can still shorten this definition by quantifying <code>p</code> existentially in the definition of <code>iterator</code>, and the typechecker will be able to pack and unpack the quantification to do implicitly what we've done explicitly previously (the conversion <code>p</code> → <code>p * xs @ Cons { head: a; tail: unknown }</code>).</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">data <span class=\"kw\">mutable</span> iterator a (post: perm) = <span class=\"dt\">Iterator</span> {
content: { p: perm } (
xs: <span class=\"dt\">list</span> a,
rewind: (| consumes (p * xs @ <span class=\"dt\">list</span> a)) -> (| post)
| p
)
}</code></pre>
<p>The type for <code>next</code> becomes much more readable. In fact, it is exactly the one we hoped to get <a href=\"http://gallium.inria.fr/blog/index.rss#expressing-iterator-typestate\">at the very beginning</a> of the post.</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> next [a, post: perm] (consumes it: iterator a post):
offer post (| it @ iterator a post)</code></pre>
<p>For the function <code>new</code>, the permission <code>p</code> is the neutral permission <code>empty</code>, and <code>rewind</code> needs to do nothing at all:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> <span class=\"kw\">new</span> [a] (consumes l: <span class=\"dt\">list</span> a): iterator a (l @ <span class=\"dt\">list</span> a) =
<span class=\"dt\">Iterator</span> { content = (
l,
<span class=\"kw\">fun</span> (| consumes l @ <span class=\"dt\">list</span>): (| l @ <span class=\"dt\">list</span> a) = ()
)}</code></pre>
<p>We can also write a <code>stop</code> function that stops the iteration:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> stop [a, post: perm] (consumes (it: iterator a post)): (| post) =
<span class=\"kw\">let</span> _, rewind = it.content <span class=\"kw\">in</span>
rewind ()</code></pre>
<p>Note that the <code>rewind</code> function never does anything; it is just used for its effect on the typing environment.</p>
<h3 id=\"the-chatty-and-useful-iterator\">The chatty (and useful) iterator</h3>
<p>This is great, we can traverse a list using our iterator. But it would be even more great if we could actually get the contents of the list!</p>
<p>This is a bit more complicated: while giving an element to the user, we have to give him also the permission on it. This breaks the invariant \"the iterator always can have <code>post</code> by applying <code>rewind</code>\". Now, our iterator can have a <em>hole</em> in it: when giving an element to the user, a hole appears. To continue the iteration, the user <em>must</em> give the permission on the element back to the iterator.</p>
<p>Consequently, the definition of <code>iterator</code> changes a bit: an <code>iterator</code> is now also parametrized by a permission <code>hole</code>, which in fact means \"what does the iterator need to fill its hole and be able to generate <code>post</code>\".</p>
<p>Here is the new definition of <code>iterator</code>. Note that it doesn't contains <code>hole</code>, but we need it to generate <code>post</code>:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">data <span class=\"kw\">mutable</span> iterator a (hole: perm) (post: perm) = <span class=\"dt\">Iterator</span> {
content: { p: perm } (
xs: <span class=\"dt\">list</span> a,
rewind: (| p * hole * l @ <span class=\"dt\">list</span> a) -> (| post)
| p
)
}</code></pre>
<p>Thus, an iterator without a hole is an <code>iterator a empty post</code>, while an iterator that has given away <code>x @ a</code> to the user is a <code>iterator a (x @ a) post</code>.</p>
<p>We can now write <code>next</code>. It takes an iterator parametrized by any permission <code>hole</code>, the permission <code>hole</code> itself, and implicitly fills the hole by merging <code>hole</code> into <code>p</code>. It finally returns the next element (if any).</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> next [a, hole: perm, post: perm] (consumes (it: iterator a hole post | hole)):
offer post (x: a | it @ iterator a (x @ a) post) =
<span class=\"kw\">let</span> xs, rewind = it.content <span class=\"kw\">in</span>
<span class=\"kw\">match</span> xs <span class=\"kw\">with</span>
| <span class=\"dt\">Nil</span> ->
rewind ();
<span class=\"dt\">None</span>
| <span class=\"dt\">Cons</span> { head; tail } ->
s.content <- tail, rewind
<span class=\"dt\">Some</span> { x = head }
end</code></pre>
<p>And we can now use this iterator:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"co\">(* [nth] takes an iterator [it] and an integer [n], makes him go forward of [n]</span>
<span class=\"co\">   steps, and then returns it (if it hasn't been consumed) *)</span>
<span class=\"kw\">val</span> <span class=\"kw\">rec</span> nth [a, hole: perm, post: perm]
(consumes (it: iterator a hole post | hole), n: <span class=\"dt\">int</span>):
offer (x: a | it @ iterator a (x @ a) post) post =
<span class=\"kw\">match</span> next [hole = hole] it <span class=\"kw\">with</span>
| <span class=\"dt\">None</span> ->
<span class=\"dt\">None</span>
| <span class=\"dt\">Some</span> { x } ->
<span class=\"kw\">if</span> n <= 0 <span class=\"kw\">then</span> (
<span class=\"dt\">Some</span> { x = x }
) <span class=\"kw\">else</span> (
nth [a = a, hole = (x @ a)] (it, n<span class=\"dv\">-1</span>)
)
end </code></pre>
<p>You can note that we have sometimes to instantiate by hand the polymorphic parameters when calling a function. For example, here, when calling recursively <code>nth</code>, we have to say that a previous call to <code>next</code> has created a hole of \"shape\" <code>x @ a</code> we want to merge back to continue the iteration.</p>
<h3 id=\"the-cherry-on-top\">The cherry on top</h3>
<p>So, here it is, an iterator on lists!<br />However, this needs a little cleaning: we store in our iterator a rewind function, which is the same for every iterator, that doesn't change over time, and is just present to <em>convert</em> permissions.</p>
<p>A way to clean up a bit is to declare a toplevel identity function, named <code>convert</code>:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> convert (): () = ()
alias convertible (p: perm) (q: perm): perm = convert @ (| consumes p) -> (| q)
data <span class=\"kw\">mutable</span> iterator a (hole: perm) (post: perm) = <span class=\"dt\">Iterator</span> {
content: {p: perm} (
l: <span class=\"dt\">list</span> a
| p * convertible (p * hole * l @ <span class=\"dt\">list</span> a) post
)
}</code></pre>
<p>I find that piece of code cute, and I think it enlightens the way the transtyping of <code>rewind</code> works: if rewind can have type <code>(| consumes p) -> (| q)</code> it's because this is a subtype of <code>() -> ()</code>, which means we have convinced the typechecker that <code>p</code> is convertible into <code>q</code>.</p>
<h3 id=\"i-want-the-code\">I want the code!</h3>
<p>I doubt so, but just in case, the complete code, with some dummy examples of applications, <a href=\"http://gallium.inria.fr/blog/listiterator.mz.src.html\">can be found there</a>.</p>" nil nil "5f5559858fecc9511e3707edd5ec3636") (31 (20949 15561 613348) "http://scattered-thoughts.net/blog/2013/06/25/flowing-faster-lein-gnome/" "Jamie Brandon: Flowing faster: lein-gnome" nil "Tue, 25 Jun 2013 19:27:00 +0000" "<p>After several weeks of banging my head against the empty space where the gnome-shell documentation should be, I’ve finally revived technomancy’s <a href=\"https://github.com/jamii/lein-gnome\">lein-gnome</a>. It can build, package, deploy and reload gnome-shell extensions and includes a hello-world template. I’ve also added a unified log watcher that hunts down all the various places gnome-shell might choose to put your stack-traces and a cljs repl server that runs inside your extension so you can trial-and-error your way to victory.</p>
<p>Future plans for a rainy day include:</p>
<ul>
<li><p>Writing a proper nrepl server for cljs so you can <code>C-x e</code> directly from emacs (this is non-trivial for projects with crossover code).</p></li>
<li><p>Figure out how dynamic loading of bindings works in gjs so I can support tab-completion</p></li>
<li><p>Clone the Looking Glass picker tool</p></li>
</ul>
<p>In the meantime I’m going to start work on <a href=\"https://github.com/jamii/golem\">golem</a>. Until cljs has true nrepl support my hack for live interaction in emacs is the following:</p>
<ul>
<li><p>Save all extension state to disk on <code>disable</code></p></li>
<li><p>Load all extension state from disk on <code>enable</code></p></li>
<li><p>Hook <code>lein gnome install</code> into <code>lein cljsbuild auto</code></p></li>
</ul>" nil nil "4c8c34b7f9da8e083b7547398d4ed4c2") (30 (20949 15561 613016) "http://alan.petitepomme.net/cwn/2013.06.25.html" "Caml Weekly News: Caml Weekly News, 25 Jun 2013" nil "Tue, 25 Jun 2013 12:00:00 +0000" "0.3 release of dolog / The HoTT book / Anonymous sum types in functors / Ocaml on windows / Other Caml News" nil nil "a7435adc131da83c8fc5168f7565881b") (29 (20949 15561 612751) "https://forge.ocamlcore.org/forum/forum.php?forum_id=879" "OCamlCore Forge News: Forge downtime on 22/06 19:16 to 23/06 14:00 (UTC+0200)" "Sylvain Le Gall" "Sun, 23 Jun 2013 12:11:33 +0000" "Hi all,
We had an unexpected failure on the forge for 19h. This has happen in the middle of a week-end and it is only after some of you send me a mail that I was able to see the failure.
The problem seems to be that we run out of memory (at least OOM killer was involved in the take down). This is unfortunately normal when running this kind of website with only 1GB of RAM.
I don't think we lost any data, but if you were working on the forge yesterday around 19:00 UTC, double check the consistency of your VCS.
Regards
Sylvain" nil nil "03bb4ad75ff39dabe010100a1d65a3da") (28 (20949 12154 12574) "http://camlspotter.blogspot.com/2013/07/ocamlscope-is-now-ocaml-heroku-app.html" "Caml Spotting: =?utf-8?Q?OCaml=E2=97=8EScope?= is now an OCaml heroku app!" "Jun Furuse" "Wed, 03 Jul 2013 15:36:00 +0000" "OCaml◎Scope, a new OCaml API search, is now a service running at <a href=\"http://ocamloscope.herokuapp.com/\">http://ocamloscope.herokuapp.com</a>!<br /><br /><div style=\"clear: both; text-align: center;\" class=\"separator\"><a style=\"margin-left: 1em; margin-right: 1em; text-align: center;\" href=\"http://ocamloscope.herokuapp.com/images/logo.svg\"><img src=\"http://ocamloscope.herokuapp.com/images/logo.svg\" height=\"131\" border=\"0\" width=\"320\" /></a></div><br />Change list:<br /><br /><ul><li>Now it no longer uses <a href=\"http://sourceforge.net/projects/ocaml-cgi/\">CamlGI</a> but <a href=\"http://ocsigen.org/eliom/\">Eliom</a> as the web engine. Eliom is much safer and easier to write!</li><li>DB carries 245302 entries from 76 OCamlFind packages.</li><li>Search algorithm tweak to get better results in shorter time</li><li>More query forms (see Examples)<div style=\"clear: both; text-align: center;\" class=\"separator\"><br /></div></li></ul>" nil nil "c36bfb784c338467de7d8ac22529421a") (27 (20948 23050 115722) "http://camlspotter.blogspot.com/2013/07/ocamlscope-is-now-ocaml-heroku-app.html" "Caml Spotting: =?utf-8?Q?OCaml=E2=97=8EScope?= is now an OCaml heroku app!" "Jun Furuse" "Wed, 03 Jul 2013 15:36:00 +0000" "OCaml◎Scope, a new OCaml API search, is now a service running at <a href=\"http://ocamloscope.herokuapp.com/\">http://ocamloscope.herokuapp.com</a>!<br /><br />Change list:<br /><br /><ul><li>Now it no longer uses <a href=\"http://sourceforge.net/projects/ocaml-cgi/\">CamlGI</a> but <a href=\"http://ocsigen.org/eliom/\">Eliom</a> as the web engine. Eliom is much safer and easier to write!</li><li>DB carries 245302 entries from 76 OCamlFind packages.</li><li>Search algorithm tweak to get better results in shorter time</li><li>More query forms (see Examples)</li></ul>" nil nil "a6b8d0fc1987385969d94f3188288b62") (26 (20946 62741 115499) "http://gallium.inria.fr/blog/portable-conditionals-in-makefiles" "GaGallium: Portable conditionals in makefiles" "Damien Doligez" "Tue, 02 Jul 2013 08:00:00 +0000" "<p>If you are <a href=\"http://caml.inria.fr/mantis/view.php?id=5737#c9658\">writing software</a> that works on many variants of Unix, you are confronted to the problem of Makefiles: some systems use GNU make and others use BSD make and these two are compatible, but only on a very restricted subset. The most problematic restriction is that they don't have a common syntax for writing conditionals.</p>
<p>So how do you write conditionals that work on both variants? GNU make and BSD make share so few of their \"new\" features (features that were not in UNIX make) that it looks like an impossible task.</p>
<p>Let's say you have a variable <code>FOO</code> that contains either <code>true</code> or <code>false</code>, and you want your target <code>A</code> to depend on <code>B C D</code> in the first case, and on <code>E F G</code> in the second. I know two ways of doing that.</p>
<h3 id=\"first-solution-substitution\">First solution: substitution</h3>
<p>The first solution is simple but not fully general. It uses substitution in variable references:</p>
<pre><code>DEPS1 = ${FOO:true=B C D}
DEPS2 = ${DEPS1:false=E F G}
A : ${DEPS2}
echo ${DEPS2}</code></pre>
<p>This is quite ugly, it doesn't work if <code>false</code> appears in the value of the <code>true</code> case (here, <code>B C D</code>). Also, I don't think there is any way to extend it to handle a default case. But it's simple and relatively easy to understand.</p>
<h3 id=\"second-solution-indirection\">Second solution: indirection</h3>
<p>The second solution works by applying David Wheeler's aphorism:</p>
<blockquote>
<p>All problems in computer science can be solved by another level of indirection.</p>
</blockquote>
<p>We'll use indirect variable references. This is a feature that, surprisingly, works the same in both flavours of make:</p>
<pre><code>FOO = BAR
BAR = toto
all:
echo ${${FOO}}</code></pre>
<p>This will echo <code>toto</code>.</p>
<p>Now, we have <code>FOO</code> that is either <code>true</code> or <code>false</code>, so we'll do this:</p>
<pre><code>true = B C D
false = E F G
DEPS := ${${FOO}}
A : ${DEPS}
echo ${DEPS}</code></pre>
<p>Note how the definition of <code>DEPS</code> uses <code>:=</code> rather than <code>=</code>. This is because we want to be able to reuse the variables <code>true</code> and <code>false</code> for another conditional. If we don't use <code>:=</code>, the assignment is lazy and <code>DEPS</code> gets a value based on the last values assigned to <code>true</code> and <code>false</code> (which may be further down in the makefile).</p>
<h3 id=\"advanced-solution-more-indirection\">Advanced solution: more indirection</h3>
<p>The above obviously generalizes to more than two cases, but what about having a default case? Suppose that we want to do as above, but make <code>A</code> depend on <code>H I J</code> when <code>FOO</code> is set to anything else that <code>true</code> or <code>false</code> (or unset, which is the same as set to <code>\"\"</code>). How do we do that?</p>
<p>It's easy, just apply Wheeler's aphorism one more time:</p>
<pre><code>unlikely_true = aaaa
unlikely_false = bbbb
xxx_aaaa = B C D
xxx_bbbb = E F G
xxx_ = H I J
DEPS := ${xxx_${unlikely_${FOO}}}
A : ${DEPS}
echo ${DEPS}</code></pre>
<p>This is getting ugly but it works. As long as you don't have any clash with some random variable whose name starts with <code>unlikely_</code>. And if you have several conditionals in your makefile, you probably should reset all these variables after using them:</p>
<pre><code>unlikely_true = aaaa
unlikely_false = bbbb
xxx_aaaa = B C D
xxx_bbbb = E F G
xxx_ = H I J
DEPS := ${xxx_${unlikely_${FOO}}}
unlikely_true =
unlikely_false =
xxx_aaaa =
xxx_bbbb =
xxx_ =
A : ${DEPS}
echo ${DEPS}</code></pre>
<p>This makefile has a nice property: you can use environment variables not only to override some cases, but also to add some cases without touching the makefile. For example:</p>
<pre><code>make A unlikely_filenotfound=cccc xxx_cccc='X Y Z' FOO=filenotfound</code></pre>
<p>This will use <code>X Y Z</code> for the dependencies of A.</p>
<h3 id=\"obvious-solution-use-gmake\">Obvious solution: use gmake</h3>
<p>Of course, the obvious solution is to use GNUmake on BSD as well as Linux and MacOS, and write your makefiles for GNUmake only. That looks more reasonable than the above. Unless you have to deal with some BSD fanatics who don't want to install GNU make on their machine.</p>
<p>Anyway, I started with the explicit (but maybe unreasonable) constraint of making portable makefiles. Over the years I've heard a number of very smart people claim that it was impossible, and I set out to prove them wrong. Mission accomplished.</p>" nil nil "e06a7b8a641f65c0693e254da2dd3ad3") (25 (20946 55669 33736) "http://alan.petitepomme.net/cwn/2013.07.02.html" "Caml Weekly News: Caml Weekly News, 02 Jul 2013" nil "Tue, 02 Jul 2013 12:00:00 +0000" "Spoc: GPGPU programming with OCaml / Ocaml on windows / meetup Paris-OCaml (OUPS) mardi 2 juillet / Mixing two GADTs / Request for feedback: A problem with injectivity and GADTs / Other Caml News" nil nil "2d8994b8d1972a7df85b6334c4b9c22e") (24 (20946 37588 390162) "http://www.ocamlpro.com/blog/2013/07/01/monthly-06.html" "OCamlPro: News from May and June" "Thomas Gazagnaire" "Mon, 01 Jul 2013 00:00:00 +0000" "<p>It is time to give a brief summary of our recent activities. As usual, our contributions were focused on three main objectives: (i) make the OCaml compiler faster and easier to use; (ii) make the OCaml developers more efficient by releasing new development tools and improving editor supports; and (iii) organize and participate to community events around the language. We are also welcoming four interns who will work with us on these objectives during the summer.</p><h2>Compiler updates</h2><p>Following the ideas he announced in his recent <a href=\"http://www.ocamlpro.com/blog/2013/05/24/optimisations-you-shouldn-t-do.html\">blog post</a>, <a href=\"https://github.com/chambart\">Pierre Chambart</a> has made some progress on his <a href=\"https://github.com/chambart/ocaml/tree/flambda_experiments\">inlining branch</a>. He is currently working on stabilizing and cleaning-up the code for optimization which does not take into account inter-module information.</p><p>We also continue to work on our profiling tool and start to separate the different parts of the project. We have <a href=\"https://github.com/cago/ocaml\">patched</a> the compiler and runtime, for both bytecode and native code, to generate (i) <code>.prof</code> files which contain the id-loc information and allow us to recover the location from the identifiers in the header of the block; and (ii) to dump a program heap in a file on demand or to monitor a running program without memory and performance overhead. <a href=\"http://cagdas.bozman.fr/\">Çagdas Bozman</a> has presented the work he has done so far regarding his PhD to members of the <a href=\"http://bware.lri.fr/index.php/Presentation\">Bware</a> project and we started to test our prototype on industrial use-cases using the <a href=\"http://why3.lri.fr/\">why3</a> platform.</p><p>On the multi-core front, <a href=\"http://ageinghacker.net/\">Luca Saiu</a> is continuing his post-doc with <a href=\"http://fabrice.lefessant.net/\">Fabrice le Fessant</a> and is modifying the OCaml runtime to support parallel programming on multi-core computers. Their version of the \"multi-runtime\" OCaml provides a message-passing abstraction in which a running OCaml program is \"split\" into independent OCaml programs, one per thread (if possible running on its separate core) with a separate instance of the runtime library in order to reduce resource contention both at the software and at the hardware level. Luca is now debugging the support for OCaml multi-threading running on top of a multi-context parallel program.  A recent presentation covering this work and its challenges is available <a href=\"http://www.ocamlpro.com/pub/multi-runtime.pdf.tar.gz\">online</a>.</p><p>A new intern from <a href=\"http://www.ens-cachan.fr/\">ENS Cachan</a>, <a href=\"https://github.com/thomasblanc\">Thomas Blanc</a> is working on a whole program analysis system. His internship's final goal is to provide a good hint of exceptions that may be left uncaught by the program, resulting a failure. It is quite interesting as exceptions are pretty much the part of the program \"hard to foresee\". The main difficulty comes from higher-order functions (like <code>List.iter</code>). Because of them, a simple local analysis becomes impossible. So the first task is to take the whole program in the form of separated <code>.cmt</code> files, <a href=\"https://github.com/thomasblanc/ocaml-typedtree-mapper\">merge</a> it, and remove every higher-order functions (either by direct inlining if possible or by a very big pattern matching). The merging as already been done through a deep browsing of the compiler's typedtrees. Thomas is now focusing in reordering the code so that higher-order functions can be safely removed.</p><p>Finally, we are helping to prepare the release 4.01.0 of the OCaml compiler: Fabrice has integrated his <a href=\"http://www.ocamlpro.com/blog/2012/08/08/profile-native-code.html\">frame-pointer</a> patch, that can be used to profile the performance of OCaml applications using Linux <code>perf</code> tool; he has added in <code>Pervasives</code> <a href=\"https://github.com/ocaml/ocaml/commit/ace0205b6499ffdae4588cfdd640c45855217a8f\">two application operators</a> that had been optimized before, but were only available for people who knew about that; he has also added a new environment variable, <code>OCAMLCOMPPARAM</code>, that can be used to change how a program is compiled by <code>ocamlc</code>/<code>ocamlopt</code>, without changing the build system (for example, <code>OCAMLCOMPPARAM='g=1' make</code> can be used to compile a project in debug mode without modifying the makefiles).</p><h2>Development Tools</h2><p>Since the initial release of <a href=\"http://opam.ocamlpro.com\">OPAM</a> in March, we have been kept busy preparing the upcoming <code>1.1.0</code> version, which should interface nicely with the forthcoming set of automatic tools which will constitute the first version of the <a href=\"http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html\">OCaml Platform</a> that we are helping <a href=\"http://www.cl.cam.ac.uk/projects/ocamllabs/\">OCamlLabs</a> to deliver. We have constantly been focused on fixing bugs and implementing feature requests (more than <a href=\"https://github.com/OCamlPro/opam/issues?direction=desc&milestone=17&page=1&sort=created&state=closed\">70 issues</a> have been closed on Github) and we have recently improved the speed and reliability of <code>opam update</code>. More good news related to OPAM: The number of packages submitted to <a href=\"http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html\">official</a> repository is steadily increasing with around 20 new packages integrated every-months (and much more already existing package upgrades), and the official Debian package should land in <a href=\"http://ftp-master.debian.org/new/opam_1.0.0-1.html\">testing</a> very soon.</p><p>This month, <a href=\"http://louis.gesbert.fr/cv.en.html\">Louis</a> was still busy improving different tools for ocaml code edition. <code>ocp-index</code> and <code>ocp-indent</code>, made for the community to improve the general ocaml experience and kindly funded by <a href=\"http://janestreet.com\">Jane Street</a>, have seen some updates:</p><ul> <li> <p><a href=\"https://github.com/OCamlPro/ocp-index\">ocp-index</a>: the library data access tool which was first presented in <a href=\"http://www.ocamlpro.com/blog/2013/04/22/monthly-04.html\">April</a> has seen some progress, with the ability to locate definitions and resolve type names. It is still not yet considered stable though, expect more from it soon. An early release (0.2.0) is in OPAM.</p> </li><li> <p><a href=\"https://github.com/OCamlPro/ocp-indent\">ocp-indent</a> the generic ocaml source code indenter, has seen its usual bunch of fixes, along with some new customisation options. Also, its <a href=\"https://github.com/OCamlPro/ocp-indent/blob/master/src/indentPrinter.mli\">library interface</a> has been rewritten, offering much better flexibility and opening the gate to uses like restarting from checkpoints to avoid full reparsing, detecting top-expression boundaries, syntax coloration, etc. We will be releasing 1.3.0 in OPAM very soon.</p> </li> </ul><p>We are also developing in-house projects aiming at providing a better first experience of OCaml to beginners and students:</p><ul> <li> <p>the new <a href=\"https://github.com/OCamlPro/ocaml-top\">ocaml-top</a> (previous project name <code>ocp-edit-simple</code>) aims to offer a simple, but clean and easy-to-use interface to interact with the ocaml top-level. It is intended mainly for exercises, tutorials and practicals. A release should be coming soon, the Linux version being quite stable while some bugs remain on Windows.</p> </li><li> <p>two new interns, <a href=\"http://www.linkedin.com/profile/view?id=3D238971426&locale=3Dfr_FR&tr=k3Dtyah\">David</a> and <a href=\"http://www.linkedin.com/profile/view?id=3D65173689\">Pierrick</a>, have started working on a <a href=\"https://github.com/pcouderc/ocp-webedit\">web-IDE</a> for OCaml. As students, they have seen sometimes how difficult it could be to install OCaml on some OSes, or simply configure editors like emacs or vim. To solve these issues, the idea is to use only a web browser-based editor and provide a way to compile a project without having to install anything on your computer.  For the editing part, the idea is to use <a href=\"http://ace.ajax.org/\">Ace</a> and improve it for OCaml, using <a href=\"https://github.com/OCamlPro/ocp-indent\">ocp-indent</a> for example, which is possible by using <a href=\"http://ocsigen.org/js_of_ocaml/\">js_of_ocaml</a>. The next step will be to glue this editor with both <a href=\"http://try.ocamlpro.com/\">TryOCaml</a> to execute code, and a cloud computing part, to store projects and files and access them from anywhere.</p> </li> </ul><p>We are also trying to improve cross-compilation tutorials and tools for developing native iOS application under a Linux system, using the OCaml language. <a href=\"http://fr.linkedin.com/pub/souhire-kenawi/6a/614/54b/\">Souhire</a>, our fourth new intern, is experimenting with that idea and will document how to set up such an environment, from the foundation until the publication on the application store (if it is possible). She is starting to look at how iOS applications (with a native graphical interface) written in C can be cross-compiled on <a href=\"http://code.google.com/p/ios-toolchain-based-on-clang-for-linux/wiki/HowTo_en\">Linux</a>, and how the ones written in OCaml can be cross-compiled on <a href=\"http://psellos.com/ocaml/\">MacOSX</a>.</p><p>On the library front, Fabrice has completely rewritten the way his <a href=\"http://www.typerex.org/ocplib-wxOCaml.html\">wxOCaml library</a> is generated, compared to what was described in a previous <a href=\"http://www.ocamlpro.com/blog/2013/04/02/wxocaml-reloaded.html\">blog post</a>. It does not share any code anymore with other wxWidgets bindings (wxHaskell or wxEiffel), but directly generates the stubs from a DSL (close to C++) describing the wxWidgets classes. It should make binding more widgets (classes) and more methods for each widget much easier, and also help for maintenance, evolution and compatibility with wxWidgets version. There are now an interesting set of samples in the library, covering many interesting usages.</p><h2>Community</h2><p>We have also been pretty active during the last months to promote the use of OCaml in the free-software and research community: we are actively participating to the upcoming <a href=\"http://ocaml.org/meetings/ocaml/2013/\">OCaml 2013</a> and <a href=\"http://cufp.org/2013cfp\">Commercial User of Functional Programming</a> conference which will be help next September in Boston.</p><p>While I was visiting <a href=\"http://janestreet.com/\">Jane Street</a> with <a href=\"http://www.cl.cam.ac.uk/projects/ocamllabs/index.html\">OCamlLabs's team</a>, I had the pleasure to be invited to give a talk at the <a href=\"http://www.meetup.com/NYC-OCaml/\">NYC OCaml meetup</a> on OPAM (my slides can be found online <a href=\"http://www.ocamlpro.com/pub/ny-meetup.pdf\">here</a>). It was a nice meetup, with more than 20 people, hosted in the great Jane-Street New-York offices.</p><p>OCamlPro is still organizing OCaml meetups in Paris, hosted by <a href=\"http://www.irill.org/\">IRILL</a> and sponsored by <a href=\"http://www.lexifi.com/\">LexiFi</a> : our last Ocaml Users in PariS (OUPS) meetup was in <a href=\"http://www.meetup.com/ocaml-paris/events/116100692/\">May</a>, there were more than 50 persons ! It was a nice collection of talks, where Esther Baruk spoke about the usage of OCaml at Lexifi, Benoit Vaugon about all the secrets that we always wanted to know about the OCaml bytecode, Frédéric Bour presents us Merlin, the new IDe for VIM, and Gabriel Scherer told us how to better interact with the OCaml core team.</p><p>We are now preparing our next <a href=\"http://www.meetup.com/ocaml-paris/events/121412532/\">OUPS</a> meeting which will take place at IRILL on Tuesday, July 2nd. Emphasis will be on programming in OCaml in different context. Thus, there will be some js_of_ocaml experiences, GPGPU in OCaml and GADTs in practice. There is still many seats available, so do not hesitate to register to the meetup, but if you cannot, this time, videos of the talks (in French) will be available afterwards.</p><p>Not really related to OCaml, we also attend the <a href=\"http://www.teratec.eu/gb/forum/index.html\">Teratec 2013 Forum</a> which brings together a lot of <a href=\"http://www.scilab.org/\">Scilab</a> users. This is part of the <a href=\"http://www.richelieu.pro\">Richelieu</a> research project that <a href=\"http://www.linkedin.com/profile/view?id=130990583\">Michael</a> is working on: his goal is to analyze Scilab code, before just-in-time compilation. It requires a basic type-inference algorithm, but for a language that has not been designed for that ! He is currently struggling with the dynamic aspects of Scilab language. After some work on preprocessing <code>eval</code> and <code>evalstr</code> functions, he is now focusing on how Scilab programers usually write functions. He is currently using different kinds of analyses on real-world Scilab programs to understand how they are structured.</p><p>Finally, we are happy to announce that we finally found the time to release the <a href=\"https://github.com/OCamlPro/ocaml-cheat-sheets\">sources</a> of our OCaml <a href=\"http://www.typerex.org/cheatsheets.html\">cheat-sheets</a>. Feel free to contribute by sending patches if you are interested to improve them!</p>" nil nil "01c7eab694aca78598d81aec214ea068") (23 (20945 21911 374131) "http://coq.inria.fr/coq-received-acm-sigplan-programming-languages-software-2013-award" "Coq: Coq received ACM SIGPLAN Programming Languages Software 2013 award" "herbelin" "Sun, 30 Jun 2013 14:26:05 +0000" "<p>The development of Coq has been initiated in 1984 at INRIA by Thierry Coquand and Gérard Huet, then joined by Christine Paulin-Mohring and more than 40 direct <a href=\"http://coq.inria.fr/who-did-what-in-coq\">contributors</a>.</p>
<p>The first public release was CoC 4.10 in 1989. Extended with native inductive types, it was renamed Coq in 1991.</p>
<p>Since then, a growing community of users has shared its enthousiasm in the originality of the concepts of Coq and of its various features, as a richly-typed programming language and as an interactive theorem prover.</p>
<p><a href=\"http://coq.inria.fr/coq-received-acm-sigplan-programming-languages-software-2013-award\">read more</a></p>" nil nil "79c86e37d4bd65c633eb942a4c9d81fe") (22 (20945 14379 524848) "http://coq.inria.fr/coq-received-acm-sigplan-programming-languages-software-2013-award" "Coq: Coq received ACM SIGPLAN Programming Languages Software 2013 award" "herbelin" "Sun, 30 Jun 2013 14:26:05 +0000" "<p>The development of Coq has been initiated in 1984 at INRIA by Thierry Coquand and Gérard Huet, then joined by Christine Paulin-Mohring and more than 40 direct contributors.</p>
<p>The first public release was CoC 4.10 in 1989. Extended with native inductive types, it was renamed Coq in 1991.</p>
<p>Since then, a growing community of users has shared its enthousiasm in the originality of the concepts of Coq and of its various features, as a richly-typed programming language and as an interactive theorem prover.</p>
<p><a href=\"http://coq.inria.fr/coq-received-acm-sigplan-programming-languages-software-2013-award\">read more</a></p>" nil nil "d0be1f33b834363309ecb76f367899ef") (21 (20945 14379 524483) "http://jobs.github.com/positions/78c69f44-e031-11e2-97c6-4063613e594f" "Github OCaml jobs: Full Time: Senior Functional Programmer at Bloomberg L.P. in Lexington, NY" nil "Fri, 28 Jun 2013 20:29:45 +0000" "<p><strong>The Role:</strong></p>
<p>Bloomberg is starting an exciting journey to become industry leader in derivative applications by providing the next generation of cross-asset structuring & pricing platform. This includes complete and flexible financial contract representation, integration with advanced pricing models and end to end large scale enterprise solution. </p>
<p>Using innovative functional programming techniques, the candidate will participate in the development of algebra representation for financial instruments, dynamic CUDA and C code generation as well as automatic GUI workflow. The candidate will also have the opportunity to lead the introduction of functional programming at Bloomberg while solving some of the most complex financial problems.</p>
<p><strong>Qualifications:</strong></p>
<ul>
<li>Deep understanding and 3+ years recent hands on experience in OCaml or Haskell</li>
<li>Good understanding of compiler theory and compiler construction for functional language</li>
<li>Solid C/C++ skills</li>
<li>Experience in derivative structuring and pricing preferred</li>
<li>Good problem solving skills</li>
<li>Ability to work well independently and collaboratively</li>
</ul>
<p><strong>The Company:</strong></p>
<p>Bloomberg, the global business and financial information and news leader, gives influential decision makers a critical edge by connecting them to a dynamic network of information, people and ideas. The company’s strength – delivering data, news and analytics through innovative technology, quickly and accurately – is at the core of the Bloomberg Professional service, which provides real time financial information to more than 310,000 subscribers globally. Bloomberg’s enterprise solutions build on the company’s core strength, leveraging technology to allow customers to access, integrate, distribute and manage data and information across organizations more efficiently and effectively. Through Bloomberg Law, Bloomberg Government, Bloomberg New Energy Finance and Bloomberg BNA, the company provides data, news and analytics to decision makers in industries beyond finance. And Bloomberg News, delivered through the Bloomberg Professional service, television, radio, mobile, the Internet and two magazines, Bloomberg Businessweek and Bloomberg Markets, covers the world with more than 2,300 news and multimedia professionals at 146 bureaus in 72 countries. Headquartered in New York, Bloomberg employs more than 15,000 people in 192 locations around the world.</p>
<p>Bloomberg is an equal opportunities employer and we welcome applications from all backgrounds regardless of race, colour, religion, sex, ancestry, age, marital status, sexual orientation, gender identity, disability or any other classification protected by law.</p>" nil nil "eb87dcb9e79868f59bb7b9cab7184d44") (20 (20939 63889 523822) "http://gallium.inria.fr/blog/typestate-in-mezzo-mutable-list-iterators" "GaGallium: Typestate in Mezzo? Starting with list iterators." "=?utf-8?Q?Arma=C3=ABl_Gu=C3=A9neau?=" "Wed, 26 Jun 2013 08:00:00 +0000" "<p>I (Armaël Guéneau) am currently doing an internship with François Pottier, working on <a href=\"http://gallium.inria.fr/~protzenk/mezzo-lang/\">Mezzo</a>, which has been introduced by Jonathan in two previous blog posts (<a href=\"http://gallium.inria.fr/blog/introduction-to-mezzo/\">the first</a>, <a href=\"http://gallium.inria.fr/blog/introduction-to-mezzo-2/\">the second</a>).</p>
<p>Since the beginning of my internship, I have been playing with Mezzo, writing some code, and, more specifically, trying to see how the notion of <em>typestate</em> could be expressed with Mezzo's permissions. As an application, I tried to write in Mezzo an iterator on lists. What I call an iterator is here more like Scala's <em>Iterator</em> , or a bit like what Gabriel called generators in a <a href=\"http://gallium.inria.fr/blog/generators-iterators-control-and-continuations/\">previous blog post</a>.</p>
<p>This example turned out to be subtle enough to write in Mezzo: in this post, I'll try to show you the details of the implementation, leading to a fully working implementation of list iterators. I think it's a good opportunity to see an implementation of a (very simple) typestate, and also some funny tricks with Mezzo's permissions.</p>
<p>A word of warning, though: while the theory and implementation of Mezzo are starting to fit in nicely, the library-land is very much unknown territory so far. We are trying new things, and expect them to be easier in the future. As always, practice and teaching will surely yield substantial improvements, leading us to see in retrospect how we could have simplified things. Expect the code examples in this post to look <em>complicated</em>, and probably not representative of the Mezzo code we expect to write in the future.</p>
<h3 id=\"briefing\">Briefing</h3>
<p>What I want as an iterator is an object that let us iterate on a collection, giving one new element each time we call a function <code>next</code>, that makes the iterator go a step forward. Note that such an iterator is mutable, its internal state being modified by <code>next</code>. It would be possible to consider functional iterators, returning a value corresponding to the next position in the list; but to study the relation with typestate systems we decide to study <em>mutable</em> iterators here.</p>
<p>We have to handle the case where the iterator has no more elements. In Java or Scala, you have to check if there are more elements available with <code>hasNext</code>, and if you call <code>next</code> on an empty iterator, an exception is raised. In Mezzo we don't have exceptions. Moreover, we want to statically express the protocol that the operations on an iterator must follow, in the types themselves. It's the idea of typestate. By achieving that, the user is prevented <em>at compilation time</em> of using <code>next</code> on an empty iterator.</p>
<p>The application to (simply linked) lists seems straightforward: you just have to follow the <code>tail</code> link of each <code>Cons</code> cell, starting with the head of the list. What is not so trivial is how to express that with Mezzo's permissions.</p>
<h3 id=\"the-silent-iterator\">The silent iterator</h3>
<p>Let's start with a very stupid iterator: it traverses the list, but without giving its elements to the user.</p>
<h4 id=\"from-the-outside-signatures\">From the outside: signatures</h4>
<h5 id=\"an-iterator-has-exclusive-access-on-the-list\">An iterator has exclusive access on the list</h5>
<p>First, to be able to iterate on a list, the iterator will need the permission to access the list and its contents. A solution is to <strong>consume</strong> the permission <code>l @ list a</code> when you create an iterator on the list <code>l</code> (of elements of type <code>a</code>), and <strong>give it back</strong> when the iteration is finished (or when you stop the iterator manually).</p>
<p>This gives us the following signatures for the <code>new</code> and <code>stop</code> functions:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> <span class=\"kw\">new</span>: [a] (consumes l: <span class=\"dt\">list</span> a) -> iterator a (l @ <span class=\"dt\">list</span> a)
<span class=\"kw\">val</span> stop: [a, post: perm] (consumes iterator a post) -> (| post)</code></pre>
<p>In case you're not familiar with Mezzo syntax yet, you can find more details in <a href=\"http://gallium.inria.fr/blog/introduction-to-mezzo/\">the first post</a> cited above, but let me just do a quick reminder here. The bracket notation <code>[post:perm]</code> is parametric polymorphism on a type of kind <code>perm</code> (a permission), and that <code>(consumes foo)</code> indicates that type <code>foo</code> is not given back to the type environment after the functional call. Finally, <code>(foo | bar)</code> is a conjunction of the type <code>foo</code> and the permission <code>bar</code>, which may be a purely static information, not associated to any runtime value; in particular, <code>(| post)</code> is an empty tuple that is only useful as the carrier of the permission <code>post</code>.</p>
<h5 id=\"expressing-iterator-typestate\">Expressing iterator typestate</h5>
<p>We also need a <code>next</code> function, that takes an iterator in input. To handle the fact that <code>next</code> may lead to an empty iterator, we say that <code>next</code> consumes the fact that the input argument is an iterator, and returns a variant of <code>option a</code>:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">data offer (post: perm) a =
| <span class=\"dt\">None</span> {| post }
| <span class=\"dt\">Some</span> { x: a }</code></pre>
<p>In the first case, the iteration is finished: the <code>post</code> permission (in practice equal to <code>l @ list a</code> for a given <code>a</code> and <code>l</code>) is returned. In the second case, an element is returned. Note that we could have used the sum type of the standard library, <code>choice a b</code>, but this specific datatype allows us to give more explicit constructor names (than <code>Left</code> and <code>Right</code>).</p>
<p>We now have the <code>next</code> signature:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> next: [a, post: perm] (consumes it: iterator a post) ->
offer post (| it @ iterator a post)</code></pre>
<p>For now, because our iterator is silent, in the <code>Some</code> case, we return no value of type <code>a</code>, only the fact that <code>it</code> is still an iterator, so we can continue the iteration. On the contrary, after a <code>None</code> answer, it is statically not possible to call <code>next</code> again: the permission <code>it @ iterator a post</code> has been consumed and was not returned through the offer.</p>
<div class=\"figure\">
<img src=\"http://gallium.inria.fr/blog/ts1.png\" alt=\"Typestate of the iterator\" /><p class=\"caption\">Typestate of the iterator</p>
</div>
<p>A small code example using this iterator:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"co\">(* Loop calls [next] on the iterator until it is empty *)</span>
<span class=\"kw\">val</span> <span class=\"kw\">rec</span> loop [a, post: perm] (consumes it: iterator a post): (| post) =
<span class=\"kw\">match</span> next it <span class=\"kw\">with</span>
| <span class=\"dt\">None</span> -> ()
| <span class=\"dt\">Some</span> { x } -> loop it
end</code></pre>
<h4 id=\"diving-into-the-internals-implementation\">Diving into the internals: implementation</h4>
<h5 id=\"a-first-attempt\">A first attempt</h5>
<p>To be able to go forward, the iterator must store the elements that will be explored in the future. With a list, it's easy: initially, it consists in the list itself, and each call to <code>next</code> just takes the tail of the current internal list.</p>
<p>This gives us:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">data <span class=\"kw\">mutable</span> iterator a (post: perm) = <span class=\"dt\">Iterator</span> {
xs: <span class=\"dt\">list</span> a
}
data offer (post: perm) a =
| <span class=\"dt\">None</span> { | post }
| <span class=\"dt\">Some</span> { x: a }
<span class=\"kw\">val</span> <span class=\"kw\">new</span> [a] (consumes l: <span class=\"dt\">list</span> a): iterator a (l @ <span class=\"dt\">list</span> a) =
<span class=\"dt\">Iterator</span> { xs = l }
<span class=\"kw\">val</span> next [a, post: perm] (consumes it: iterator a post):
offer post (| it @ iterator a post) =
<span class=\"kw\">match</span> it.xs <span class=\"kw\">with</span>
| <span class=\"dt\">Nil</span> ->
<span class=\"dt\">None</span>
| <span class=\"dt\">Cons</span> { head; tail } ->
it.xs <- tail;
<span class=\"dt\">Some</span> { x = () }
end</code></pre>
<p>Sadly, this example doesn't typecheck: in the match case where <code>it.xs</code> is <code>Nil</code>, we return <code>None</code>, and the permission <code>post</code>. However, we don't have <code>post</code>!</p>
<p>Formally, at the beginning of <code>next</code>, the only available permissions are <code>it @ iterator a post</code>, and in the first match case, <code>it.xs @ Nil</code>. Nothing here gives us <code>post</code>.<br />Intuitively, even if we had <code>post</code> at the beginning, <code>next</code> here doesn't preserves the knowledge of the cons cells we have already explored: we have to store in the iterator the permissions of the previous cons cells, to be able to finally merge them back into <code>post</code>.</p>
<h5 id=\"storing-the-old-permissions\">Storing the old permissions</h5>
<p>We introduce a new permission, <code>p</code>, that describes the permission for the consumed cons cells. The iterator contains <code>p</code>, and a function, <code>rewind</code>, that consumes <code>p</code>, and the permission on the tail, and merge them into <code>post</code>.</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">data <span class=\"kw\">mutable</span> iterator a (p: perm) (post: perm) = <span class=\"dt\">Iterator</span> {
content: (
xs: <span class=\"dt\">list</span> a,
rewind: (| consumes (p * xs @ <span class=\"dt\">list</span> a)) -> (| post)
| p
)
}</code></pre>
<p>With this definition of <code>iterator</code>, the signature of <code>next</code> would be:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> next: [a, p: perm, post: perm] (
consumes it: <span class=\"dt\">Iterator</span> {
content: (
xs: <span class=\"dt\">list</span> a,
rewind: (| consumes (p * xs @ <span class=\"dt\">list</span> a)) -> (| post)
| p
)
} ->
offer post (| it @ iterator a (p * xs @ <span class=\"dt\">Cons</span> { head: a; tail: unknown }) post)</code></pre>
<p>The idea is that before the call to <code>next</code>, the iterator stores in <code>xs</code> the permission on the non-traversed part of the list, <code>xs</code>, and <code>rewind</code> requests the permission on the already-traversed part of the list, represented by <code>p</code>, upto <code>xs</code> excluded. If <code>xs</code> is itself a cons cell (and only in this case), we can call <code>next</code>; the iterator will then store only the tail of <code>xs</code>, and its rewind function request the permission for <code>p</code>, plus the first cell of <code>xs</code> -- which at this point as been traversed.</p>
<p>Concretely, imagine we have the following list construction, for some list <code>lb @ list int</code>.</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> la = <span class=\"dt\">Cons</span> { head=1; tail=lb }</code></pre>
<p>and are now iterating on this list. Assuming we have already called <code>next</code> once, have traversed the first cell of <code>la</code>, the <code>rewind</code> function of the iterator would have a type equivalent to the following:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">rewind: (| consumes (
la @ <span class=\"dt\">Cons</span> { head:int; tail=lb }
* lb @ <span class=\"dt\">list</span> <span class=\"dt\">int</span>)
)
-> (| post )</code></pre>
<p>If we pattern-match on <code>lb</code>, in the <code>Cons</code> case, the typing environment will learn that <code>lb</code> has type <code>Cons { head : int; tail = lc }</code> for some tail <code>lc @ list int</code>. So rewind has the refined type</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">rewind: (| consumes (
la @ <span class=\"dt\">Cons</span> { head:int; tail=lb }
* lb @ <span class=\"dt\">Cons</span> { head:int; tail=lc })
)
-> (| post )</code></pre>
<p>The already-traversed part of the list, <code>la</code>, has the same type, but the not-yet-traversed part has been refined to a cons type. Note that with the additional hypothesis <code>lc @ int</code> of our context, this is equivalent to the following type:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">rewind: (| consumes (
(la @ <span class=\"dt\">Cons</span> { head:int; tail=lb } * lb @ <span class=\"dt\">Cons</span> { head:int; tail=lc })
* lc @ <span class=\"dt\">list</span> <span class=\"dt\">int</span>
)
-> (| post )</code></pre>
<p>which is precisely the type of the <code>rewind</code> function of the iterator <em>returned</em> by <code>next</code>. So after pattern-matching, the type of the <code>rewind</code> function passed to <code>next</code> becomes exactly the same as the type of the <code>rewind</code> function expected as a return value. We can return this function, unchanged: it has just been <em>transtyped</em>.</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> next it <span class=\"co\">(* lengthy type annotation that we won't repeat here *)</span> =
<span class=\"kw\">let</span> (xs, rewind) = it.content <span class=\"kw\">in</span>
<span class=\"kw\">match</span> xs <span class=\"kw\">with</span>
| <span class=\"dt\">Nil</span> ->
<span class=\"co\">(* p * xs @ list a *)</span>
rewind ();
<span class=\"co\">(* post *)</span>
<span class=\"dt\">None</span>
| <span class=\"dt\">Cons</span> { head; tail } ->
it.content <- (tail, rewind);
<span class=\"dt\">Some</span>
end</code></pre>
<p>As we described, in the <code>Cons</code> case, the value of the <code>xs</code> field of <code>it</code> is changed to <code>tail</code>, but the <code>rewind</code> field is unchanged.</p>
<p>Remark: we can still shorten this definition by quantifying <code>p</code> existentially in the definition of <code>iterator</code>, and the typechecker will be able to pack and unpack the quantification to do implicitly what we've done explicitly previously (the conversion <code>p</code> → <code>p * xs @ Cons { head: a; tail: unknown }</code>).</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">data <span class=\"kw\">mutable</span> iterator a (post: perm) = <span class=\"dt\">Iterator</span> {
content: { p: perm } (
xs: <span class=\"dt\">list</span> a,
rewind: (| consumes (p * xs @ <span class=\"dt\">list</span> a)) -> (| post)
| p
)
}</code></pre>
<p>The type for <code>next</code> becomes much more readable. In fact, it is exactly the one we hoped to get <a href=\"http://gallium.inria.fr/blog/index.rss#expressing-iterator-typestate\">at the very beginning</a> of the post.</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> next [a, post: perm] (consumes it: iterator a post):
offer post (| it @ iterator a post)</code></pre>
<p>For the function <code>new</code>, the permission <code>p</code> is the neutral permission <code>empty</code>, and <code>rewind</code> needs to do nothing at all:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> <span class=\"kw\">new</span> [a] (consumes l: <span class=\"dt\">list</span> a): iterator a (l @ <span class=\"dt\">list</span> a) =
<span class=\"dt\">Iterator</span> { content = (
l,
<span class=\"kw\">fun</span> (| consumes l @ <span class=\"dt\">list</span>): (| l @ <span class=\"dt\">list</span> a) = ()
)}</code></pre>
<p>We can also write a <code>stop</code> function that stops the iteration:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> stop [a, post: perm] (consumes (it: iterator a post)): (| post) =
<span class=\"kw\">let</span> _, rewind = it.content <span class=\"kw\">in</span>
rewind ()</code></pre>
<p>Note that the <code>rewind</code> function never does anything; it is just used for its effect on the typing environment.</p>
<h3 id=\"the-chatty-and-useful-iterator\">The chatty (and useful) iterator</h3>
<p>This is great, we can traverse a list using our iterator. But it would be even more great if we could actually get the contents of the list!</p>
<p>This is a bit more complicated: while giving an element to the user, we have to give him also the permission on it. This breaks the invariant \"the iterator always can have <code>post</code> by applying <code>rewind</code>\". Now, our iterator can have a <em>hole</em> in it: when giving an element to the user, a hole appears. To continue the iteration, the user <em>must</em> give the permission on the element back to the iterator.</p>
<p>Consequently, the definition of <code>iterator</code> changes a bit: an <code>iterator</code> is now also parametrized by a permission <code>hole</code>, which in fact means \"what does the iterator need to fill its hole and be able to generate <code>post</code>\".</p>
<p>Here is the new definition of <code>iterator</code>. Note that it doesn't contains <code>hole</code>, but we need it to generate <code>post</code>:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\">data <span class=\"kw\">mutable</span> iterator a (hole: perm) (post: perm) = <span class=\"dt\">Iterator</span> {
content: { p: perm } (
xs: <span class=\"dt\">list</span> a,
rewind: (| p * hole * l @ <span class=\"dt\">list</span> a) -> (| post)
| p
)
}</code></pre>
<p>Thus, an iterator without a hole is an <code>iterator a empty post</code>, while an iterator that has given away <code>x @ a</code> to the user is a <code>iterator a (x @ a) post</code>.</p>
<p>We can now write <code>next</code>. It takes an iterator parametrized by any permission <code>hole</code>, the permission <code>hole</code> itself, and implicitly fills the hole by merging <code>hole</code> into <code>p</code>. It finally returns the next element (if any).</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> next [a, hole: perm, post: perm] (consumes (it: iterator a hole post | hole)):
offer post (x: a | it @ iterator a (x @ a) post) =
<span class=\"kw\">let</span> xs, rewind = it.content <span class=\"kw\">in</span>
<span class=\"kw\">match</span> xs <span class=\"kw\">with</span>
| <span class=\"dt\">Nil</span> ->
rewind ();
<span class=\"dt\">None</span>
| <span class=\"dt\">Cons</span> { head; tail } ->
s.content <- tail, rewind
<span class=\"dt\">Some</span> { x = head }
end</code></pre>
<p>And we can now use this iterator:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"co\">(* [nth] takes an iterator [it] and an integer [n], makes him go forward of [n]</span>
<span class=\"co\">   steps, and then returns it (if it hasn't been consumed) *)</span>
<span class=\"kw\">val</span> <span class=\"kw\">rec</span> nth [a, hole: perm, post: perm]
(consumes (it: iterator a hole post | hole), n: <span class=\"dt\">int</span>):
offer (x: a | it @ iterator a (x @ a) post) post =
<span class=\"kw\">match</span> next [hole = hole] it <span class=\"kw\">with</span>
| <span class=\"dt\">None</span> ->
<span class=\"dt\">None</span>
| <span class=\"dt\">Some</span> { x } ->
<span class=\"kw\">if</span> n <= 0 <span class=\"kw\">then</span> (
<span class=\"dt\">Some</span> { x = x }
) <span class=\"kw\">else</span> (
nth [a = a, hole = (x @ a)] (it, n<span class=\"dv\">-1</span>)
)
end </code></pre>
<p>You can note that we have sometimes to instantiate by hand the polymorphic parameters when calling a function. For example, here, when calling recursively <code>nth</code>, we have to say that a previous call to <code>next</code> has created a hole of \"shape\" <code>x @ a</code> we want to merge back to continue the iteration.</p>
<h3 id=\"the-cherry-on-top\">The cherry on top</h3>
<p>So, here it is, an iterator on lists!<br />However, this needs a little cleaning: we store in our iterator a rewind function, which is the same for every iterator, that doesn't change over time, and is just present to <em>convert</em> permissions.</p>
<p>A way to clean up a bit is to declare a toplevel identity function, named <code>convert</code>:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">val</span> convert (): () = ()
alias convertible (p: perm) (q: perm): perm = convert @ (| consumes p) -> (| q)
data <span class=\"kw\">mutable</span> iterator a (hole: perm) (post: perm) = <span class=\"dt\">Iterator</span> {
content: {p: perm} (
l: <span class=\"dt\">list</span> a
| p * convertible (p * hole * l @ <span class=\"dt\">list</span> a) post
)
}</code></pre>
<p>I find that piece of code cute, and I think it enlightens the way the transtyping of <code>rewind</code> works: if rewind can have type <code>(| consumes p) -> (| q)</code> it's because this is a subtype of <code>() -> ()</code>, which means we have convinced the typechecker that <code>p</code> is convertible into <code>q</code>.</p>
<h3 id=\"i-want-the-code\">I want the code!</h3>
<p>I doubt so, but just in case, the complete code, with some dummy examples of applications, <a href=\"http://gallium.inria.fr/blog/listiterator.mz.src.html\">can be found there</a>.</p>" nil nil "596d941c47d8f3b3daa9a9fb69646752") (19 (20939 63889 511446) "http://gallium.inria.fr/blog/making-it-easier-for-beginners-to-learn-ocaml" "GaGallium: Making it easier for beginners to learn OCaml" "Arthur =?utf-8?Q?Chargu=C3=A9raud?=" "Fri, 21 Jun 2013 08:00:00 +0000" "<p>This blog post is from Arthur Charguéraud, whom we recently had the pleasure to see again in Rocquencourt. It comes from a recent submission to the <a href=\"http://ocaml.org/meetings/ocaml/2013/\">OCaml 2013 Workshop</a>, and is a discussion of some things that could be improved to make OCaml a better teaching language.</p>
<p>Of course, while everyone agrees in principle that tooling is good and that making the language simple to learn (and teach) is a noble cause, the details of the proposal are controversial. We hope that our dear readers will understand this as a first position statement to stimulate discussion and contribution, rather than a cause for outrage – although some here would agree that suggesting <code>!r</code> as a lvalue is somewhat heretic.</p>
<hr />
<h3 id=\"making-it-easier-for-beginners-to-learn-ocaml\">Making it easier for beginners to learn OCaml</h3>
<p>Unless having a private tutor, learning OCaml as a first programming language can be extremely frustrating at first, if not completely discouraging. Based on a long experience of teaching OCaml, based on the analysis of a large database of failing-to-compile OCaml source code, and based on the recent arguments put forward for justifying the use of Python instead of OCaml for teaching programming, we argue that it would be possible, with relatively little effort, to make OCaml significantly more accessible to beginners. More precisely, we describe parsing tools, minor syntax extensions, type-checking tools and libraries that, altogether, should make OCaml much easier to learn.</p>
<h3 id=\"problems\">Problems</h3>
<p>We have observed that OCaml is really hard for beginners to learn without help. The main cause is the terribly poor reporting of static and dynamic errors. We describe a few striking examples below.</p>
<ul>
<li><p>Syntax errors are often reported near the end of a top-level definition although the error is actually located in the middle of the definition. This situation occurs in particular when replacing a <code>in</code> keyword with a semicolon, a very frequent mistake.</p></li>
<li><p>The instruction contained in the <code>then</code> branch of a conditional cannot be followed by a semicolon, contrary to the instruction in the <code>else</code> branch (and to instructions in regular sequences). The logic of semicolon being a separator and not a terminator is totally incomprehensible for beginners.</p></li>
<li><p>Very early in their OCaml programming experience, beginners face type errors of the form \"foo has type <code>int -> int -> int</code> whereas it is expected to be of type <code>int</code>\", as a consequence of typos or missing parentheses. The problem is that they encounter this kind of error messages at a point where they do not know anything about arrow types or even about functions.</p></li>
<li><p>Exceptions such as \"array index out of bounds\" are reported without a mention of the index involved, nor of the size of the array, nor of the line at which the incorrect array access has been performed. This lack of details slows down debugging. (Using a full-featured debugger is often not an option at this stage.)</p></li>
</ul>
<p>Besides our in-situ teaching experience, we have been teaching OCaml through a (French-speaking) website that features online evaluation of exercises (<a href=\"http://gallium.inria.fr/blog/www.france-ioi.org\">www.france-ioi.org</a>).</p>
<p>Our analysis of submitted programs confirms that the kind of issues reported above are extremely frequent and very time-consuming for beginners to solve on their own. We observed that a significant number of beginners ended up giving up the OCaml tutorial, especially when they were not in a position to obtain help from a nearby OCaml guru.</p>
<p>In addition to the issues described above, which are well-known to everyone who has taught programming using OCaml, we can also learn about the limitations of OCaml from teachers who have introduced their students to programming using other languages. In particular, we have observed a recent and significant trend to use Python as a first programming language. When told about the Python trend, OCaml experts usually express their disappointment through a sentence of the kind: \"What!? Python?! But it does not even have static types! Not to mention that variable scoping is broken!\". Despite the wiseness captured by this comment, a number of qualified teachers and researchers have put forwards a collection of arguments to justify the choice of Python over OCaml.</p>
<ul>
<li><p>Python provides a simple way to execute a program (<code>python   source.py</code>), avoiding the need to first compile the program and then execute it. OCaml supports a somewhat similar feature (<code>ocaml   source.ml</code>), however this feature is not advertised and, even worse, it executes top-level definitions one by one before type-checking the entire source file.</p></li>
<li><p>Python, unlike OCaml, features a generic printing function, which is very handy for debugging. Similarly, Python features a very-simple-to-use function that one can call to print a backtrace.</p></li>
<li><p>Python avoids the awkward floating point operators such as <code>(+.)</code> instead of <code>(+)</code>, which is the conventional mathematical notation and is used by nearly all other programming languages.</p></li>
<li><p>Python has a traditional treatment of variables that are mutable by default, avoiding beginners to be confused as to when to use an <code>int</code> or an <code>int ref</code>, and to face unclear type error messages when forgetting the <code>(!)</code> operator.</p></li>
<li><p>Python features unbounded integers, which saves the need to introduce beginners very early (too early) in the programming course to the notion of fixed-size representation and overflows.</p></li>
<li><p>Python offers simple-to-use implementations of maps, whereas in OCaml, obtaining a structure more efficient than lists requires a \"black-magic\" instantiation of the Map functor.</p></li>
<li><p>Python has excellent and numerous bindings to plotting and mathematical libraries. These libraries are particularly useful for teaching \"programming for scientists\" courses. However, there is no equivalent in OCaml, and it currently involves a lot of hard work to develop bindings for Python libraries.</p></li>
</ul>
<h3 id=\"proposals\">Proposals</h3>
<p>There are a number of things that we can do to make life significantly easier for OCaml beginners — and for OCaml teachers.</p>
<h4 id=\"syntax-of-semicolons\">Syntax of semicolons</h4>
<p>In OCaml, instructions (expressions of type <code>unit</code>) can usually be terminated by an optional semicolon. For example, a semicolon is accepted in front of the <code>end</code> keyword, in front of the <code>done</code> keyword, in front of the vertical bar separator (<code>|</code>) in pattern matching... but is rejected in front of the <code>else</code> keyword! This lack of consistence in the language is particularly problematic because it forces one to explain very early in an OCaml course that the semicolon is not a <em>terminator</em> but a <em>separator</em> for expressions. Moreover, it makes is hard for beginners to rearrange the lines of a program. We suggest that the semicolon should be accepted in front of the <code>else</code> keyword. This change should not introduce any backward compatibility issue, since we are only relaxing the syntax.</p>
<h4 id=\"syntax-of-reference-updates\">Syntax of reference updates</h4>
<p>To increment the content of a reference <code>r</code>, one can write <code>r.contents <- r.contents + 1</code>. This formulation makes perfect sense: <code>r</code> denotes the name of a box (the reference), <code>r.contents</code> denotes the contents of this box, and <code>r.contents <- v</code> is the syntax to update the contents. Because writing <code>.contents</code> all the time is very cumbersome, we introduce the OCaml notation <code>!r</code> as a shorthand for <code>r.contents</code>. However, beginners then expect to be able to write <code>!r <- !r + 1</code>.</p>
<p>Unfortunately, the operator <code>(!)</code> is defined as a function and not as a primitive construction for <code>.contents</code>. So, we have to teach the form <code>r := !r + 1</code>, which appears to be very confusing for students, who tend to write either <code>!r := !r + 1</code> or <code>r := r + 1</code>, but never the right form. The reason is that they —rightfully— expect to refer to the content of the reference on both sides of the affectation operator.</p>
<p>There is a simple way to address this problem: extend the syntax in order to parse <code>!r <- v</code> as a primitive construction. This would be no more ad-hoc than the current parsing of <code>t.(i) <- v</code>, and would allow teachers to simply say that <code><-</code> is the affectation operator both for references and for arrays, and that <code>!r</code> is the way to refer to the contents of a box. Beginners would be able to write the symmetric form <code>!r <- !r + 1</code>, until they become ready to appreciate the more elaborated forms <code>r := !r + 1</code> and <code>incr r</code>.</p>
<p>Remark: the ambiguous form <code>!t.(i) <- v</code> should be resolved as <code>(!t).(i) <- v</code>, to be consistent with the parsing of <code>!t.(i)</code>.</p>
<h4 id=\"the-pre-parser\">The pre-parser</h4>
<p>The purpose of the pre-parser is to reject any program that is not reasonably indented, thereby anticipating on potentially complicated syntax and type errors that the OCaml compiler would report. Moreover, it would impose good coding style to students, a \"feature\" valued by many teachers using Python. Note that the pre-parser is not enforcing very strict rules about the indentation (unlike an automatic-indentation tool would do). Instead, it is designed to accept all reasonable OCaml styles.</p>
<p>For example, the pre-parser would impose the body of loops, of function bodies, and of cases of pattern matching to be consistently indented. For let bindings, it would impose</p>
<ol style=\"\">
<li>that a <code>let</code> be at the beginning of a line where it appears,</li>
<li>that a <code>in</code> be the last word of the line where it appears,</li>
<li>that, if the body of a <code>let</code> spans over more than one line, then there is a line return immediately after the <code>=</code> sign.</li>
</ol>
<p>Moreover, to detect missing parentheses in arithmetic expressions, the pre-parser would impose infix arithmetic operators to be surrounded by the same number of spaces on each side (e.g. <code>x-1</code> and <code>x - 1</code> are accepted, but not <code>x -1</code>).</p>
<h4 id=\"the-pre-typechecker\">The pre-typechecker</h4>
<p>The pre-typechecker is able to typecheck code written in the core fragment of OCaml (the fragment used for teaching to beginners). Its purpose is to report easier-to-understand error messages. One key ingredient is the error message associated with function applications. If a call of the form <code>f x y</code> fails to typecheck, the tool would report a message of the form \"the application does not type-check because <code>f</code> has type <code>'a -> 'a -> int</code> and <code>x</code> has type <code>int</code> and <code>y has type float</code>\". Note that the pre-typechecker does not need to be as efficient as the real OCaml type-checker, so we can easily keep track of additional information (e.g. all unifications pairs) that may be useful to reporting conflicts.</p>
<h4 id=\"the-easy-library\">The Easy library</h4>
<p>We propose a module called <code>Easy</code> to be added to the standard library in order to provide beginners with several useful functions.</p>
<ol style=\"\">
<li><p>A function <code>print</code> of type <code>'a -> unit</code>, that recurses in data structures except functions and cyclic structures, limiting the depth in order to avoid overflow of the standard output.</p></li>
<li><p>A function <code>backtrace</code> of type <code>unit -> unit</code>, that prints an easy-to-read backtrace.</p></li>
<li><p>Polymorphic arithmetic operators <code>(+)</code>, <code>(-)</code>, <code>(*)</code> and <code>(/)</code> of type <code>'a -> 'a -> 'a</code>, and unary negation of type <code>'a -> 'a</code>. For types others than <code>int</code> and <code>float</code>, an error could either be produced at runtime (requires representation of types at runtime), or an error could be produced by the (pre-)type-checker if it sees that the polymorphic type was not instantiated with a numeric type (this would preclude polymorphic definitions such as <code>let sq x = x * x</code>);</p></li>
<li><p>Pre-instantiated versions of the <code>Set</code> and <code>Map</code> functors using the built-in comparison operator. For example <code>Set.add</code> would be exported as a function of type <code>'a -> 'a Set.t -> 'a Set.t</code>.</p></li>
</ol>
<h4 id=\"the--bigint-flag\">The -bigint flag</h4>
<p>We propose to extend <code>ocamlc</code> and <code>ocamlopt</code> with a flag called <code>-bigint</code>, whose purpose is to replace fixed-size integers with arbitrary-precision integers in the compilation chain. This feature would avoid the need for premature discussions about overflows. (Besides, it would be very useful in the context of producing mechanically-verified software.) Implementing the <code>-bigint</code> flag requires only minor modifications to the compiler for 64-bit architectures. For string and array accesses, we need to check a single bit to make sure that the index provided indeed is an acceptable index. For indices of for-loops, we need to generate slightly different code for the manipulation of the loop index.</p>
<h4 id=\"the--easy-flag\">The -easy flag</h4>
<p>We propose the introduction of an option <code>-easy</code> to the tools <code>ocamlc</code> and <code>ocamlopt</code>. The purpose of this flag is to:</p>
<ol style=\"\">
<li>run the pre-parser,</li>
<li>run the pre-typechecker,</li>
<li>automatically open the <code>Easy</code> library,</li>
<li>activate the <code>-bigint</code> compilation flag,</li>
<li>ensure that the compiled program reports locations, index and size parameters on out-of-bounds errors.</li>
</ol>
<h4 id=\"the-ocamleasy-tool\">The ocamleasy tool</h4>
<p>We propose the introduction of a tool called <code>ocamleasy</code> whose purpose is to</p>
<ol style=\"\">
<li><p>run of <code>ocamldep</code> and the automatic inclusion of all the dependencies and libraries that are required by the source file provided,</p></li>
<li><p>compile the program using either <code>ocamlc -easy</code>, or <code>ocamlopt -easy</code>, depending on whether the option <code>-opt</code> is provided to {ocamleasy},</p></li>
<li><p>execute the program.</p></li>
</ol>
<h3 id=\"conclusion\">Conclusion</h3>
<p>Many of the proposals can be implemented in just a few hours of work. Others require a several days of work, but this investment will certainly be negligible compared with the amount of time saved by people learning OCaml. We encourage people teaching using OCaml to give feedback on the proposals and complete the list with their own suggestions. We encourage the OCaml experts to report any incompatibility they can think of between the \"easy\" mode proposed and the advanced features of the language. Finally, we encourage the OCaml developers to help us implement and release the proposals, so that they become available to the world before people give up completely on the idea of using OCaml for teaching programming languages.</p>" nil nil "5e4ef7b3f0c9f08c25887ee3007699e3") (18 (20938 41128 146498) "http://scattered-thoughts.net/blog/2013/06/25/flowing-faster-lein-gnome/" "Jamie Brandon: Flowing faster: lein-gnome" nil "Tue, 25 Jun 2013 19:27:00 +0000" "<p>After several weeks of banging my head against the empty space where the gnome-shell documentation should be, I’ve finally revived technomancy’s <a href=\"https://github.com/jamii/lein-gnome\">lein-gnome</a>. It can build, package, deploy and reload gnome-shell extensions and includes a hello-world template. I’ve also added a unified log watcher that hunts down all the various places gnome-shell might choose to put your stack-traces and a cljs repl server that runs inside your extension so you can trial-and-error your way to victory.</p>
<p>Future plans for a rainy day include:</p>
<ul>
<li><p>Writing a proper nrepl server for cljs so you can <code>C-x e</code> directly from emacs (this is non-trivial for projects with crossover code).</p></li>
<li><p>Figure out how dynamic loading of bindings works in gjs so I can support tab-completion</p></li>
<li><p>Clone the Looking Glass picker tool</p></li>
</ul>
<p>In the meantime I’m going to start work on <a href=\"https://github.com/jamii/golem\">golem</a>. Until cljs has true nrepl support my hack for live interaction in emacs is the following:</p>
<ul>
<li><p>Save all extension state to disk on <code>disable</code></p></li>
<li><p>Load all extension state from disk on <code>enable</code></p></li>
<li><p>Hook <code>lein gnome install</code> into <code>lein cljsbuild auto</code></p></li>
</ul>" nil nil "a0a9bb970c2cf4a589820662579cab43") (17 (20937 40174 292978) "http://alan.petitepomme.net/cwn/2013.06.25.html" "Caml Weekly News: Caml Weekly News, 25 Jun 2013" nil "Tue, 25 Jun 2013 12:00:00 +0000" "0.3 release of dolog / The HoTT book / Anonymous sum types in functors / Ocaml on windows / Other Caml News" nil nil "2f64fb739e031d3a7763eef260969912") (16 (20936 8537 258497) "http://gallium.inria.fr/blog/making-it-easier-for-beginners-to-learn-ocaml" "GaGallium: Making it easier for beginners to learn OCaml" "Arthur =?utf-8?Q?Chargu=C3=A9raud?=" "Fri, 21 Jun 2013 08:00:00 +0000" "<p>This blog post is from Arthur Charguéraud, whom we recently had the pleasure to see again in Rocquencourt. It comes from a recent submission to the <a href=\"http://ocaml.org/meetings/ocaml/2013/\">OCaml 2013 Workshop</a>, and is a discussion of some things that could be improved to make OCaml a better teaching language.</p>
<p>Of course, while everyone agrees in principle that tooling is good and that making the language simple to learn (and teach) is a noble cause, the details of the proposal are controversial. We hope that our dear readers will understand this as a first position statement to stimulate discussion and contribution, rather than a cause for outrage – although some here would agree that suggesting <code>!r</code> as a lvalue is somewhat heretic.</p>
<hr />
<h2 id=\"making-it-easier-for-beginners-to-learn-ocaml\">Making it easier for beginners to learn OCaml</h2>
<p>Unless having a private tutor, learning OCaml as a first programming language can be extremely frustrating at first, if not completely discouraging. Based on a long experience of teaching OCaml, based on the analysis of a large database of failing-to-compile OCaml source code, and based on the recent arguments put forward for justifying the use of Python instead of OCaml for teaching programming, we argue that it would be possible, with relatively little effort, to make OCaml significantly more accessible to beginners. More precisely, we describe parsing tools, minor syntax extensions, type-checking tools and libraries that, altogether, should make OCaml much easier to learn.</p>
<h2 id=\"problems\">Problems</h2>
<p>We have observed that OCaml is really hard for beginners to learn without help. The main cause is the terribly poor reporting of static and dynamic errors. We describe a few striking examples below.</p>
<ul>
<li><p>Syntax errors are often reported near the end of a top-level definition although the error is actually located in the middle of the definition. This situation occurs in particular when replacing a <code>in</code> keyword with a semicolon, a very frequent mistake.</p></li>
<li><p>The instruction contained in the <code>then</code> branch of a conditional cannot be followed by a semicolon, contrary to the instruction in the <code>else</code> branch (and to instructions in regular sequences). The logic of semicolon being a separator and not a terminator is totally incomprehensible for beginners.</p></li>
<li><p>Very early in their OCaml programming experience, beginners face type errors of the form \"foo has type <code>int -> int -> int</code> whereas it is expected to be of type <code>int</code>\", as a consequence of typos or missing parentheses. The problem is that they encounter this kind of error messages at a point where they do not know anything about arrow types or even about functions.</p></li>
<li><p>Exceptions such as \"array index out of bounds\" are reported without a mention of the index involved, nor of the size of the array, nor of the line at which the incorrect array access has been performed. This lack of details slows down debugging. (Using a full-featured debugger is often not an option at this stage.)</p></li>
</ul>
<p>Besides our in-situ teaching experience, we have been teaching OCaml through a (French-speaking) website that features online evaluation of exercises (<a href=\"http://gallium.inria.fr/blog/www.france-ioi.org\">www.france-ioi.org</a>).</p>
<p>Our analysis of submitted programs confirms that the kind of issues reported above are extremely frequent and very time-consuming for beginners to solve on their own. We observed that a significant number of beginners ended up giving up the OCaml tutorial, especially when they were not in a position to obtain help from a nearby OCaml guru.</p>
<p>In addition to the issues described above, which are well-known to everyone who has taught programming using OCaml, we can also learn about the limitations of OCaml from teachers who have introduced their students to programming using other languages. In particular, we have observed a recent and significant trend to use Python as a first programming language. When told about the Python trend, OCaml experts usually express their disappointment through a sentence of the kind: \"What!? Python?! But it does not even have static types! Not to mention that variable scoping is broken!\". Despite the wiseness captured by this comment, a number of qualified teachers and researchers have put forwards a collection of arguments to justify the choice of Python over OCaml.</p>
<ul>
<li><p>Python provides a simple way to execute a program (<code>python   source.py</code>), avoiding the need to first compile the program and then execute it. OCaml supports a somewhat similar feature (<code>ocaml   source.ml</code>), however this feature is not advertised and, even worse, it executes top-level definitions one by one before type-checking the entire source file.</p></li>
<li><p>Python, unlike OCaml, features a generic printing function, which is very handy for debugging. Similarly, Python features a very-simple-to-use function that one can call to print a backtrace.</p></li>
<li><p>Python avoids the awkward floating point operators such as <code>(+.)</code> instead of <code>(+)</code>, which is the conventional mathematical notation and is used by nearly all other programming languages.</p></li>
<li><p>Python has a traditional treatment of variables that are mutable by default, avoiding beginners to be confused as to when to use an <code>int</code> or an <code>int ref</code>, and to face unclear type error messages when forgetting the <code>(!)</code> operator.</p></li>
<li><p>Python features unbounded integers, which saves the need to introduce beginners very early (too early) in the programming course to the notion of fixed-size representation and overflows.</p></li>
<li><p>Python offers simple-to-use implementations of maps, whereas in OCaml, obtaining a structure more efficient than lists requires a \"black-magic\" instantiation of the Map functor.</p></li>
<li><p>Python has excellent and numerous bindings to plotting and mathematical libraries. These libraries are particularly useful for teaching \"programming for scientists\" courses. However, there is no equivalent in OCaml, and it currently involves a lot of hard work to develop bindings for Python libraries.</p></li>
</ul>
<h2 id=\"proposals\">Proposals</h2>
<p>There are a number of things that we can do to make life significantly easier for OCaml beginners — and for OCaml teachers.</p>
<h3 id=\"syntax-of-semicolons\">Syntax of semicolons</h3>
<p>In OCaml, instructions (expressions of type <code>unit</code>) can usually be terminated by an optional semicolon. For example, a semicolon is accepted in front of the <code>end</code> keyword, in front of the <code>done</code> keyword, in front of the vertical bar separator (<code>|</code>) in pattern matching... but is rejected in front of the <code>else</code> keyword! This lack of consistence in the language is particularly problematic because it forces one to explain very early in an OCaml course that the semicolon is not a <em>terminator</em> but a <em>separator</em> for expressions. Moreover, it makes is hard for beginners to rearrange the lines of a program. We suggest that the semicolon should be accepted in front of the <code>else</code> keyword. This change should not introduce any backward compatibility issue, since we are only relaxing the syntax.</p>
<h3 id=\"syntax-of-reference-updates\">Syntax of reference updates</h3>
<p>To increment the content of a reference <code>r</code>, one can write <code>r.contents <- r.contents + 1</code>. This formulation makes perfect sense: <code>r</code> denotes the name of a box (the reference), <code>r.contents</code> denotes the contents of this box, and <code>r.contents <- v</code> is the syntax to update the contents. Because writing <code>.contents</code> all the time is very cumbersome, we introduce the OCaml notation <code>!r</code> as a shorthand for <code>r.contents</code>. However, beginners then expect to be able to write <code>!r <- !r + 1</code>.</p>
<p>Unfortunately, the operator <code>(!)</code> is defined as a function and not as a primitive construction for <code>.contents</code>. So, we have to teach the form <code>r := !r + 1</code>, which appears to be very confusing for students, who tend to write either <code>!r := !r + 1</code> or <code>r := r + 1</code>, but never the right form. The reason is that they —rightfully— expect to refer to the content of the reference on both sides of the affectation operator.</p>
<p>There is a simple way to address this problem: extend the syntax in order to parse <code>!r <- v</code> as a primitive construction. This would be no more ad-hoc than the current parsing of <code>t.(i) <- v</code>, and would allow teachers to simply say that <code><-</code> is the affectation operator both for references and for arrays, and that <code>!r</code> is the way to refer to the contents of a box. Beginners would be able to write the symmetric form <code>!r <- !r + 1</code>, until they become ready to appreciate the more elaborated forms <code>r := !r + 1</code> and <code>incr r</code>.</p>
<p>Remark: the ambiguous form <code>!t.(i) <- v</code> should be resolved as <code>(!t).(i) <- v</code>, to be consistent with the parsing of <code>!t.(i)</code>.</p>
<h3 id=\"the-pre-parser\">The pre-parser</h3>
<p>The purpose of the pre-parser is to reject any program that is not reasonably indented, thereby anticipating on potentially complicated syntax and type errors that the OCaml compiler would report. Moreover, it would impose good coding style to students, a \"feature\" valued by many teachers using Python. Note that the pre-parser is not enforcing very strict rules about the indentation (unlike an automatic-indentation tool would do). Instead, it is designed to accept all reasonable OCaml styles.</p>
<p>For example, the pre-parser would impose the body of loops, of function bodies, and of cases of pattern matching to be consistently indented. For let bindings, it would impose</p>
<ol style=\"\">
<li>that a <code>let</code> be at the beginning of a line where it appears,</li>
<li>that a <code>in</code> be the last word of the line where it appears,</li>
<li>that, if the body of a <code>let</code> spans over more than one line, then there is a line return immediately after the <code>=</code> sign.</li>
</ol>
<p>Moreover, to detect missing parentheses in arithmetic expressions, the pre-parser would impose infix arithmetic operators to be surrounded by the same number of spaces on each side (e.g. <code>x-1</code> and <code>x - 1</code> are accepted, but not <code>x -1</code>).</p>
<h3 id=\"the-pre-typechecker\">The pre-typechecker</h3>
<p>The pre-typechecker is able to typecheck code written in the core fragment of OCaml (the fragment used for teaching to beginners). Its purpose is to report easier-to-understand error messages. One key ingredient is the error message associated with function applications. If a call of the form <code>f x y</code> fails to typecheck, the tool would report a message of the form \"the application does not type-check because <code>f</code> has type <code>'a -> 'a -> int</code> and <code>x</code> has type <code>int</code> and <code>y has type float</code>\". Note that the pre-typechecker does not need to be as efficient as the real OCaml type-checker, so we can easily keep track of additional information (e.g. all unifications pairs) that may be useful to reporting conflicts.</p>
<h3 id=\"the-easy-library\">The Easy library</h3>
<p>We propose a module called <code>Easy</code> to be added to the standard library in order to provide beginners with several useful functions.</p>
<ol style=\"\">
<li><p>A function <code>print</code> of type <code>'a -> unit</code>, that recurses in data structures except functions and cyclic structures, limiting the depth in order to avoid overflow of the standard output.</p></li>
<li><p>A function <code>backtrace</code> of type <code>unit -> unit</code>, that prints an easy-to-read backtrace.</p></li>
<li><p>Polymorphic arithmetic operators <code>(+)</code>, <code>(-)</code>, <code>(*)</code> and <code>(/)</code> of type <code>'a -> 'a -> 'a</code>, and unary negation of type <code>'a -> 'a</code>. For types others than <code>int</code> and <code>float</code>, an error could either be produced at runtime (requires representation of types at runtime), or an error could be produced by the (pre-)type-checker if it sees that the polymorphic type was not instantiated with a numeric type (this would preclude polymorphic definitions such as <code>let sq x = x * x</code>);</p></li>
<li><p>Pre-instantiated versions of the <code>Set</code> and <code>Map</code> functors using the built-in comparison operator. For example <code>Set.add</code> would be exported as a function of type <code>'a -> 'a Set.t -> 'a Set.t</code>.</p></li>
</ol>
<h3 id=\"the--bigint-flag\">The -bigint flag</h3>
<p>We propose to extend <code>ocamlc</code> and <code>ocamlopt</code> with a flag called <code>-bigint</code>, whose purpose is to replace fixed-size integers with arbitrary-precision integers in the compilation chain. This feature would avoid the need for premature discussions about overflows. (Besides, it would be very useful in the context of producing mechanically-verified software.) Implementing the <code>-bigint</code> flag requires only minor modifications to the compiler for 64-bit architectures. For string and array accesses, we need to check a single bit to make sure that the index provided indeed is an acceptable index. For indices of for-loops, we need to generate slightly different code for the manipulation of the loop index.</p>
<h3 id=\"the--easy-flag\">The -easy flag</h3>
<p>We propose the introduction of an option <code>-easy</code> to the tools <code>ocamlc</code> and <code>ocamlopt</code>. The purpose of this flag is to:</p>
<ol style=\"\">
<li>run the pre-parser,</li>
<li>run the pre-typechecker,</li>
<li>automatically open the <code>Easy</code> library,</li>
<li>activate the <code>-bigint</code> compilation flag,</li>
<li>ensure that the compiled program reports locations, index and size parameters on out-of-bounds errors.</li>
</ol>
<h3 id=\"the-ocamleasy-tool\">The ocamleasy tool</h3>
<p>We propose the introduction of a tool called <code>ocamleasy</code> whose purpose is to</p>
<ol style=\"\">
<li><p>run of <code>ocamldep</code> and the automatic inclusion of all the dependencies and libraries that are required by the source file provided,</p></li>
<li><p>compile the program using either <code>ocamlc -easy</code>, or <code>ocamlopt -easy</code>, depending on whether the option <code>-opt</code> is provided to {ocamleasy},</p></li>
<li><p>execute the program.</p></li>
</ol>
<h2 id=\"conclusion\">Conclusion</h2>
<p>Many of the proposals can be implemented in just a few hours of work. Others require a several days of work, but this investment will certainly be negligible compared with the amount of time saved by people learning OCaml. We encourage people teaching using OCaml to give feedback on the proposals and complete the list with their own suggestions. We encourage the OCaml experts to report any incompatibility they can think of between the \"easy\" mode proposed and the advanced features of the language. Finally, we encourage the OCaml developers to help us implement and release the proposals, so that they become available to the world before people give up completely on the idea of using OCaml for teaching programming languages.</p>" nil nil "f2540b4ce5d4e7be1df0d48603767801") (15 (20935 64822 894519) "https://forge.ocamlcore.org/forum/forum.php?forum_id=879" "OCamlCore Forge News: Forge downtime on 22/06 19:16 to 23/06 14:00 (UTC+0200)" "Sylvain Le Gall" "Sun, 23 Jun 2013 12:11:33 +0000" "Hi all,
We had an unexpected failure on the forge for 19h. This has happen in the middle of a week-end and it is only after some of you send me a mail that I was able to see the failure.
The problem seems to be that we run out of memory (at least OOM killer was involved in the take down). This is unfortunately normal when running this kind of website with only 1GB of RAM.
I don't think we lost any data, but if you were working on the forge yesterday around 19:00 UTC, double check the consistency of your VCS.
Regards
Sylvain" nil nil "1e742f8b4619a2be0f5f9d0816da77d8") (14 (20935 64822 892027) "http://gallium.inria.fr/blog/making-it-easier-for-beginners-to-learn-ocaml" "GaGallium: Making it easier for beginners to learn OCaml" "Arthur =?utf-8?Q?Chargu=C3=A9raud?=" "Fri, 21 Jun 2013 08:00:00 +0000" "<p>This blog post is from Arthur Charguéraud, which we recently had the pleasure to see again in Rocquencourt. It comes from a recent submission to the <a href=\"http://ocaml.org/meetings/ocaml/2013/\">OCaml 2013 Workshop</a>, and is a discussion of some things that could be improved to make OCaml a better teaching language.</p>
<p>Of course, while everyone agrees in principle that tooling is good and that making the language simple to learn (and teach) is a noble cause, the details of the proposal are controversial. We hope that our dear readers will understand this as a first position statement to stimulate discussion and contribution, rather than a cause for outrage – although some here would agree that suggesting <code>!r</code> as a lvalue is somewhat heretic.</p>
<hr />
<h2 id=\"making-it-easier-for-beginners-to-learn-ocaml\">Making it easier for beginners to learn OCaml</h2>
<p>Unless having a private tutor, learning OCaml as a first programming language can be extremely frustrating at first, if not completely discouraging. Based on a long experience of teaching OCaml, based on the analysis of a large database of failing-to-compile OCaml source code, and based on the recent arguments put forward for justifying the use of Python instead of OCaml for teaching programming, we argue that it would be possible, with relatively little effort, to make OCaml significantly more accessible to beginners. More precisely, we describe parsing tools, minor syntax extensions, type-checking tools and libraries that, altogether, should make OCaml much easier to learn.</p>
<h2 id=\"problems\">Problems</h2>
<p>We have observed that OCaml is really hard for beginners to learn without help. The main cause is the terribly poor reporting of static and dynamic errors. We describe a few striking examples below.</p>
<ul>
<li><p>Syntax errors are often reported near the end of a top-level definition although the error is actually located in the middle of the definition. This situation occurs in particular when replacing a <code>in</code> keyword with a semi-column, a very frequent mistake.</p></li>
<li><p>The instruction contained in the <code>then</code> branch of a conditional cannot be followed by a semi-column, contrary to the instruction in the <code>else</code> branch (and to instructions in regular sequences). The logic of semi-column being a separator and not a terminator is totally incomprehensible for beginners.</p></li>
<li><p>Very early in their OCaml programming experience, beginners face type errors of the form \"foo has type <code>int -> int -> int</code> whereas it is expected to be of type <code>int</code>\", as a consequence of typos or missing parentheses. The problem is that they encounter this kind of error messages at a point where they do not know anything about arrow types or even about functions.</p></li>
<li><p>Exceptions such as \"array index out of bounds\" are reported without a mention of the index involved, nor of the size of the array, nor of the line at which the incorrect array access has been performed. This lack of details slows down debugging. (Using a full-featured debugger is often not an option at this stage.)</p></li>
</ul>
<p>Besides our in-situ teaching experience, we have been teaching OCaml through a (french-speaking) website that features online evaluation of exercises (<a href=\"http://gallium.inria.fr/blog/www.france-ioi.org\">www.france-ioi.org</a>).</p>
<p>Our analysis of submitted programs confirms that the kind of issues reported above are extremely frequent and very time-consuming for beginners to solve on their own. We observed that a significant number of beginners ended up giving up the OCaml tutorial, especially when they were not in a position to obtain help from a nearby OCaml guru.</p>
<p>In addition to the issues described above, which are well-known to everyone who has taught programming using OCaml, we can also learn about the limitations of OCaml from teachers who have introduced their students to programming using other languages. In particular, we have observed a recent and significant trend to use Python as a first programming language. When told about the Python trend, OCaml experts usually express their disappointment through a sentence of the kind: \"What!? Python?! But it does not even have static types! Not to mention that variable scoping is broken!\". Despite the wiseness captured by this comment, a number of qualified teachers and researchers have put forwards a collection of arguments to justify the choice of Python over OCaml.</p>
<ul>
<li><p>Python provides a simple way to execute a program (<code>python   source.py</code>), avoiding the need to first compile the program and then execute it. OCaml supports a somewhat similar feature (<code>ocaml   source.ml</code>), however this feature is not advertised and, even worse, it executes top-level definitions one by one before type-checking the entire source file.</p></li>
<li><p>Python, unlike OCaml, features a generic printing function, which is very handy for debugging. Similarly, Python features a very-simple-to-use function that one can call to print a backtrace.</p></li>
<li><p>Python avoids the awkward floating point operators such as <code>(+.)</code> instead of <code>(+)</code>, which is the conventional mathematical notation and is used by nearly all other programming languages.</p></li>
<li><p>Python has a traditional treatment of variables that are mutable by default, avoiding beginners to be confused as to when to use an <code>int</code> or an <code>int ref</code>, and to face unclear type error messages when forgetting the <code>(!)</code> operator.</p></li>
<li><p>Python features unbounded integers, which saves the need to introduce beginners very early (too early) in the programming course to the notion of fixed-size representation and overflows.</p></li>
<li><p>Python offers simple-to-use implementations of maps, whereas in OCaml, obtaining a structure more efficient than lists requires a \"black-magic\" instantiation of the Map functor.</p></li>
<li><p>Python has excellent and numerous bindings to plotting and mathematical libraries. These libraries are particularly useful for teaching \"programming for scientists\" courses. However, there is no equivalent in OCaml, and it currently involves a lot of hard work to develop bindings for Python libraries.</p></li>
</ul>
<h2 id=\"proposals\">Proposals</h2>
<p>There are a number of things that we can do to make life significantly easier for OCaml beginners — and for OCaml teachers.</p>
<h3 id=\"syntax-of-semi-columns\">Syntax of semi-columns</h3>
<p>In OCaml, instructions (expressions of type <code>unit</code>) can usually be terminated by an optional semi-column. For example, a semi-column is accepted in front of the <code>end</code> keyword, in front of the <code>done</code> keyword, in front of the vertical bar separator (<code>|</code>) in pattern matching... but is rejected in front of the <code>else</code> keyword! This lack of consistence in the language is particularly problematic because it forces one to explain very early in an OCaml course that the semi-column is not a <em>terminator</em> but a <em>separator</em> for expressions. Moreover, it makes is hard for beginners to rearrange the lines of a program. We suggest that the semi-column should be accepted in front of the <code>else</code> keyword. This change should not introduce any backward compatibility issue, since we are only relaxing the syntax.</p>
<h3 id=\"syntax-of-reference-updates\">Syntax of reference updates</h3>
<p>To increment the content of a reference <code>r</code>, one can write <code>r.contents <- r.contents + 1</code>. This formulation makes perfect sense: <code>r</code> denotes the name of a box (the reference), <code>r.contents</code> denotes the contents of this box, and <code>r.contents <- v</code> is the syntax to update the contents. Because writing <code>.contents</code> all the time is very cumbersome, we introduce the OCaml notation <code>!r</code> as a shorthand for <code>r.contents</code>. However, beginners then expect to be able to write <code>!r <- !r + 1</code>.</p>
<p>Unfortunately, the operator <code>(!)</code> is defined as a function and not as a primitive construction for <code>.contents</code>. So, we have to teach the form <code>r := !r + 1</code>, which appears to be very confusing for students, who tend to write either <code>!r := !r + 1</code> or <code>r := r + 1</code>, but never the right form. The reason is that they —rightfully— expect to refer to the content of the reference on both sides of the affectation operator.</p>
<p>There is a simple way to address this problem: extend the syntax in order to parse <code>!r <- v</code> as a primitive construction. This would be no more ad-hoc than the current parsing of <code>t.(i) <- v</code>, and would allow teachers to simply say that <code><-</code> is the affectation operator both for references and for arrays, and that <code>!r</code> is the way to refer to the contents of a box. Beginners would be able to write the symmetric form <code>!r <- !r + 1</code>, until they become ready to appreciate the more elaborated forms <code>r := !r + 1</code> and <code>incr r</code>.</p>
<p>Remark: the ambiguous form <code>!t.(i) <- v</code> should be resolved as <code>(!t).(i) <- v</code>, to be consistent with the parsing of <code>!t.(i)</code>.</p>
<h3 id=\"the-pre-parser\">The pre-parser</h3>
<p>The purpose of the pre-parser is to reject any program that is not reasonably indented, thereby anticipating on potentially complicated syntax and type errors that the OCaml compiler would report. Moreover, it would impose good coding style to students, a \"feature\" valued by many teachers using Python. Note that the pre-parser is not enforcing very strict rules about the indentation (unlike an automatic-indentation tool would do). Instead, it is designed to accept all reasonable OCaml styles.</p>
<p>For example, the pre-parser would impose the body of loops, of function bodies, and of cases of pattern matching to be consistently indented. For let bindings, it would impose</p>
<ol style=\"\">
<li>that a <code>let</code> be at the beginning of a line where it appears,</li>
<li>that a <code>in</code> be the last word of the line where it appears,</li>
<li>that, if the body of a <code>let</code> spans over more than one line, then there is a line return immediately after the <code>=</code> sign.</li>
</ol>
<p>Moreover, to detect missing parentheses in arithmetic expressions, the pre-parser would impose infix arithmetic operators to be surrounded by the same number of spaces on each side (e.g. <code>x-1</code> and <code>x - 1</code> are accepted, but not <code>x -1</code>).</p>
<h3 id=\"the-pre-typechecker\">The pre-typechecker</h3>
<p>The pre-typechecker is able to typecheck code written in the core fragment of OCaml (the fragment used for teaching to beginners). Its purpose is to report easier-to-understand error messages. One key ingredient is the error message associated with function applications. If a call of the form <code>f x y</code> fails to typecheck, the tool would report a message of the form \"the application does not type-check because <code>f</code> has type <code>'a -> 'a -> int</code> and <code>x</code> has type <code>int</code> and <code>y has type float</code>\". Note that the pre-typechecker does not need to be as efficient as the real OCaml type-checker, so we can easily keep track of additional information (e.g. all unifications pairs) that may be useful to reporting conflicts.</p>
<h3 id=\"the-easy-library\">The Easy library</h3>
<p>We propose a module called <code>Easy</code> to be added to the standard library in order to provide beginners with several useful functions.</p>
<ol style=\"\">
<li><p>A function <code>print</code> of type <code>'a -> unit</code>, that recurses in data structures except functions and cyclic structures, limiting the depth in order to avoid overflow of the standard output.</p></li>
<li><p>A function <code>backtrace</code> of type <code>unit -> unit</code>, that prints an easy-to-read backtrace.</p></li>
<li><p>Polymorphic arithmetic operators <code>(+)</code>, <code>(-)</code>, <code>(*)</code> and <code>(/)</code> of type <code>'a -> 'a -> 'a</code>, and unary negation of type <code>'a -> 'a</code>. For types others than <code>int</code> and <code>float</code>, an error could either be produced at runtime (requires representation of types at runtime), or an error could be produced by the (pre-)type-checker if it sees that the polymorphic type was not instantiated with a numeric type (this would preclude polymorphic definitions such as <code>let sq x = x * x</code>);</p></li>
<li><p>Pre-instantiated versions of the <code>Set</code> and <code>Map</code> functors using the built-in comparison operator. For example <code>Set.add</code> would be exported as a function of type <code>'a -> 'a Set.t -> 'a Set.t</code>.</p></li>
</ol>
<h3 id=\"the--bigint-flag\">The -bigint flag</h3>
<p>We propose to extend <code>ocamlc</code> and <code>ocamlopt</code> with a flag called <code>-bigint</code>, whose purpose is to replace fixed-size integers with arbitrary-precision integers in the compilation chain. This feature would avoid the need for premature discussions about overflows. (Besides, it would be very useful in the context of producing mechanically-verified software.) Implementing the <code>-bigint</code> flag requires only minor modifications to the compiler for 64-bit architectures. For string and array accesses, we need to check a single bit to make sure that the index provided indeed is an acceptable index. For indices of for-loops, we need to generate slightly different code for the manipulation of the loop index.</p>
<h3 id=\"the--easy-flag\">The -easy flag</h3>
<p>We propose the introduction of an option <code>-easy</code> to the tools <code>ocamlc</code> and <code>ocamlopt</code>. The purpose of this flag is to:</p>
<ol style=\"\">
<li>run the pre-parser,</li>
<li>run the pre-typechecker,</li>
<li>automatically open the <code>Easy</code> library,</li>
<li>activate the <code>-bigint</code> compilation flag,</li>
<li>ensure that the compiled program reports locations, index and size parameters on out-of-bounds errors.</li>
</ol>
<h3 id=\"the-ocamleasy-tool\">The ocamleasy tool</h3>
<p>We propose the introduction of a tool called <code>ocamleasy</code> whose purpose is to</p>
<ol style=\"\">
<li><p>run of <code>ocamldep</code> and the automatic inclusion of all the dependencies and libraries that are required by the source file provided,</p></li>
<li><p>compile the program using either <code>ocamlc -easy</code>, or <code>ocamlopt -easy</code>, depending on whether the option <code>-opt</code> is provided to {ocamleasy},</p></li>
<li><p>execute the program.</p></li>
</ol>
<h2 id=\"conclusion\">Conclusion</h2>
<p>Many of the proposals can be implemented in just a few hours of work. Others require a several days of work, but this investment will certainly be negligible compared with the amount of time saved by people learning OCaml. We encourage people teaching using OCaml to give feedback on the proposals and complete the list with their own suggestions. We encourage the OCaml experts to report any incompatibility they can think of between the \"easy\" mode proposed and the advanced features of the language. Finally, we encourage the OCaml developers to help us implementing and releasing the proposals, so that they become available to the world before people give up completely on the idea of using OCaml for teaching programming languages.</p>" nil nil "56c2ed8d5e023095da4bbd94587334f6") (13 (20935 64822 889717) "http://math.andrej.com/2013/06/20/the-hott-book/" "Andrej Bauer: The HoTT book" "Andrej Bauer" "Thu, 20 Jun 2013 18:59:03 +0000" "<p>The HoTT book is finished!</p>
<p>Since spring, and even before that, I have participated in a great collaborative effort on writing a book on Homotopy Type Theory. It is finally finished and ready for public consumption. You can get the book freely at <a href=\"http://homotopytypetheory.org/book/\">http://homotopytypetheory.org/book/</a>. Mike Shulman has written <a href=\"http://golem.ph.utexas.edu/category/2013/06/the_hott_book.html\">about the contents of the book</a>, so I am not going to repeat that here. Instead, I would like to comment on the socio-technological aspects of making the book, and in particular about what we learned from open-source community about collaborative research.</p>
<p><span id=\"more-1419\"></span></p>
<p>We are a group of two dozen mathematicians who wrote a 600 page book in less than half a year. This is quite amazing, since mathematicians do not normally work together in large groups. In a small group they can get away with using obsolete technology, such as sending each other source LaTeX files by email, but with two dozen people even Dropbox or any other file synchronization system would have failed miserably. Luckily, many of us are computer scientists disguised as mathematicians, so we knew how to tackle the logistics. We used <a href=\"http://git-scm.com/\">git</a> and <a href=\"https://github.com/\">github.com</a>. In the beginning it took some convincing and getting used to, although it was not too bad. In the end the repository served not only as an archive for our files, but also as a central hub for planning and discussions. For several months I checked github more often than email and Facbook. Github <em>was</em> my Facebook (without the cute kittens). If you do not know about tools like git but you write scientific papers (or you create any kind of digital content) you really, really should learn about <a href=\"https://en.wikipedia.org/wiki/Revision_control\">revision control</a> systems. Even as a sole author of a paper you will profit from learning how to use one, not to mention that you can make <a href=\"https://vimeo.com/68761218\">pretty videos</a> of how you wrote your paper.</p>
<p>But more importantly, the spirit of collaboration that pervaded our group at the <a href=\"http://www.ias.edu/\">Institute for Advanced Study</a> was truly amazing. We did not fragment. We talked, shared ideas, <a href=\"http://video.ias.edu/taxonomy/term/78\">explained things</a> to each other, and completely forgot who did what (so much in fact that we had to put some effort into reconstruction of history lest it be forgotten forever). The result was a substantial increase in productivity. There is a lesson to be learned here (other than the fact that the Institute for Advanced Study is the world’s premier research institution), namely that mathematicians benefit from being a little less possessive about their ideas and results. I know, I know, academic careers depend on proper credit being given and so on, but really those are just the idiosyncrasies of our time. If we can get mathematicians to share half-baked ideas, not to worry who contributed what to a paper, or even who the authors are, then we will reach a new and unimagined level of productivity. Progress is made by those who dear the break rules.</p>
<p>Truly open research habitats cannot be obstructed by copyright, profit-grabbing publishers, patents, commercial secrets, and funding schemes that are based on faulty achievement metrics. Unfortunately we are all caught up in a system which suffers from all of these evils. But we made a small step in the right direction by making the <a href=\"https://github.com/HoTT/book\">book source code freely available</a> under a permissive Creative Commons license. Anyone can take the book and modify it, send us improvements and corrections, translate it, or even sell it without giving us any money. (If you twitched a little bit when you read that sentence then the system has gotten to you.)</p>
<p>We decided not to publish the book with an academic publisher at present because we wanted to make it available to everyone fast and at no cost. The book can be freely downloaded, as well as bought cheaply in <a href=\"http://www.lulu.com/shop/univalent-foundations-project/homotopy-type-theory-hardcover/hardcover/product-21076997.html\">hardcover</a> and <a href=\"http://www.lulu.com/shop/univalent-foundations-project/homotopy-type-theory-paperback/paperback/product-21077021.html\">paperback</a> versions from <a href=\"http://lulu.com/\">lulu.com</a>. (When was the last time you paid under $30 for a 600 page hardcover academic monograph?) Again, I can feel some people thinking “oh but a real academic publisher bestows quality”. This sort of thinking is reminiscent of Wikipedia vs. Britannica arguments, and we all know how that story ended. Yes, good quality of research must be ensured. But once we accept the fact that anyone can publish anything on the Internet for the whole world to see, and make a cheap professionally looking book out of it, we quickly realize that censure is not effective anymore. Instead we need a decentralized system of endorsments which cannot be manipulated by special interest groups. Things are moving in this direction with the recently established <a href=\"https://selectedpapers.net/\">Selected Papers Network</a> and similar efforts. I hope these will catch on.</p>
<p>However, there is something else we can do. It is more radical, but also more useful. Rather than letting people only evaluate papers, why not give them a chance to participate and improve them as well? Put all your papers on github and let others discuss them, open issues, fork them, improve them, and send you corrections. Does it sound crazy? Of course it does, open source also sounded crazy when <a href=\"https://groups.google.com/group/net.unix-wizards/msg/4dadd63a976019d7?dmode=source&hl=en\">Richard Stallman announced</a> his manifesto. Let us be honest, who is going to steal your LaTeX source code? There are much more valuable things to be stolen. If you are tenured professor you can afford to lead the way. Have your grad student teach you git and put your stuff somewhere publicly. Do not be afraid, they tenured you to do such things.</p>
<p>So we are inviting everyone to help us improve the book by participating on github. You can leave comments, point out errors, or even better, make corrections yourself! We are not going to worry who you are, how much you are contributing, and who shall take credit. The only thing that matters is whether your contributions are any good.</p>
<p>My last observation is about formalization of mathematics. Mathematicians like to imagine that their papers could in principle be formalized in set theory. This gives them a feeling of security, not unlike the one experienced by a devout man entering a venerable cathedral. It is a form of faith professed by logicians. Homotopy Type Theory is an alternative foundation to set theory. We too claim that ordinary mathematics can in principle be formalized in homotopy type theory. But guess what, you do not have to take our word for it! We have formalized the hardest parts of the HoTT book and verified the proofs with computer proof assistants. Not <a href=\"https://github.com/HoTT/HoTT\">once</a> but <a href=\"https://github.com/HoTT/HoTT-Agda\">twice</a>. And we formalized <em>first</em>, then we wrote the book because it was easier to formalize. We win on all counts (if there is a race).</p>
<p>I hope you like the book, it contains an amazing amount of new mathematics.</p>" nil nil "4eb87d3e3ecacaeb4720420ec53e9a99") (12 (20928 25581 23987) "http://functionaljobs.com/jobs/154-senior-software-developer-functional-programmer-at-vector-fabrics" "Functional Jobs: Senior software developer/Functional programmer at Vector Fabrics (Full-time)" nil "Tue, 18 Jun 2013 12:44:48 +0000" "<p>Vector Fabrics is hiring: we are looking for a top-notch programmer to extend our program-analysis and parallelization products. You design and implement algorithms to assist the programmer to create a parallel design from a sequential C or C++ program. You work with our international team of world-class computer scientists and experts in the Haskell / OCaml functional programming languages.</p>
<p>Your work is at the forefront of technology, giving you the opportunity to publish your work in major conferences and directly cooperate with processor design companies and domain-specific application vendors.</p>
<p>As we are a startup company, you will quickly have a major impact on our products and get to know all aspects of product creation. You will be part of a strongly committed development team and contribute to our agile development process and automated test suites. Interested? Send your CV, GitHub account or other proof of what you can do to <span class=\"spam-protect\"><span class=\"user\">jobs</span> [at] <span class=\"host\">vectorfabrics [dot] com</span></span>.</p>
<h3>Responsibilities</h3>
<ul>
<li>Design and implement software
optimization (e.g. parallelization)
algorithms for CPUs and GPUs;</li>
<li>Thoroughly test your code, create
automated test suites;</li>
<li>Contribute to our agile development
planning and process;</li>
<li>Analyze complex customer applications
for optimization opportunities and
translate this to new analysis
algorithms.</li>
</ul>
<h3>Profile</h3>
<ul>
<li>Your friends and colleagues describe
you as a superb programmer; your
programming ability is way above
average;</li>
<li>Demonstrable experience in design and
implementation of complex software
applications; prior experience in
functional programming languages is
preferred;</li>
<li>You continuously surprise us with
your creative yet pragmatic solutions
for complex software problems;</li>
<li>You are strongly committed to deliver
working software as early as
possible;</li>
<li>You work against very high quality
standards. Refactoring is your bread
and butter, pair-programming is how
you prefer to review your code;</li>
<li>Whatever technologies, languages, or
development environments you've been
using, we expect you have mastered
them in depth, and we expect that you
will be able to master any
technology, language, or development
environment that we need in the
future;</li>
<li>Excellent command of written and
spoken English.</li>
</ul>
<h3>Education</h3>
<p>MSc, MEng or PhD in Computer Science or significant relevant experience.</p>
<h3>About Vector Fabrics</h3>
<p>Vector Fabrics is a high-tech software company, developing tools for embedded multicore programming. Its technology and expertise is getting widespread recognition in the industry as being innovative and unique in their ability to address heterogeneous multicore application-specific silicon platforms. Due to the advanced nature of its tools, Vector Fabrics operates at the forefront of the next generation of embedded platforms for diverse markets ranging from supercomputers to automotive to cell phones.</p>
<p>Vector Fabrics puts absolute priority on hiring top class individuals in key positions. Vector Fabrics’ team profile is exceptional and its ambition is to hire only individuals that match or surpass that profile. The company pays top salary and offers a challenging, engaging and stimulating work environment with a high degree of responsibility.</p>
<p>Get information on <a href=\"http://functionaljobs.com/jobs/154-senior-software-developer-functional-programmer-at-vector-fabrics\">how to apply</a> for this position.</p>" nil nil "e15771e21675cf27ea4595d36a28a51a") (11 (20928 25581 23220) "http://alan.petitepomme.net/cwn/2013.06.18.html" "Caml Weekly News: Caml Weekly News, 18 Jun 2013" nil "Tue, 18 Jun 2013 12:00:00 +0000" "pareto -- OCaml statistics library / Ocamlnet-3.6.5 / Real World OCaml beta1 available / Other Caml News" nil nil "820527076c4f3b795e6ef52ca1dea173") (10 (20928 8796 214660) "http://syntaxexclamation.wordpress.com/2013/06/17/new-draft-proofs-upside-down/" "Matthias Puech: New draft: Proofs, upside down" "Matthias Puech" "Mon, 17 Jun 2013 13:17:44 +0000" "<p>There is a new draft on my <a href=\"http://www.pps.univ-paris-diderot.fr/~puech/\">web page</a>, that should be of interest to those who enjoyed my posts about <a href=\"http://syntaxexclamation.wordpress.com/2011/08/31/reversing-data-structures/\" title=\"Reversing data structures\">reversing data structures</a> and the <a href=\"http://syntaxexclamation.wordpress.com/2011/09/01/reverse-natural-deduction-and-get-sequent-calculus/\" title=\"Reverse natural deduction and get sequent calculus\">relation between natural deduction and sequent calculus</a>. It is an article submitted to <a href=\"http://aplas2013.soic.indiana.edu/\">APLAS 2013</a>, and it is called <em><a href=\"http://www.pps.univ-paris-diderot.fr/~puech/upside.pdf\" title=\"Proofs, upside down\">Proofs, upside down.</a></em> In a nutshell, I am arguing for the use of functional PL tools, in particular classic functional program transformations, to understand and explain proof theory phenomena. Here, I show that there is the same relationship between natural deduction and (a restriction of) the sequent calculus than between this recursive function:</p>
<pre class=\"brush: fsharp; title: ; notranslate\">let rec tower_rec = function
| [] -> 1
| x :: xs -> x ∗∗ tower_rec xs
let tower xs = tower_rec xs
</pre>
<p>written in “direct style”, and that equivalent, iterative version:</p>
<pre class=\"brush: fsharp; title: ; notranslate\">let rec tower_acc acc = function
| [] -> acc
| x :: xs -> tower_acc (x ∗∗ acc) xs
let tower xs = tower_acc 1 (List.rev xs)
</pre>
<p>written in “accumulator-passing style”. And that relationship is the composition of CPS-transformation, defunctionalization and reforestation, the well-known transformations we all came to know and love!</p>
<p>I hope you enjoy it. Of course, any comment will be <i>much</i> appreciated, so don’t hesitate to drop a line below!</p>
<blockquote><p>
<strong>Proofs, upside down</strong><br />
<strong>A functional correspondence between natural deduction and the sequent calculus</strong><br />
It is well-known in proof theory that sequent calculus proofs differ from natural deduction proofs by “reversing” elimination rules upside down into left introduction rules. It is also well-known that to each recursive, functional program corresponds an equivalent iterative, accumulator-passing program, where the accumulator stores the continuation of the iteration, in “reversed” order. Here, we compose these remarks and show that a restriction of the intuitionistic sequent calculus, LJT, is exactly an accumulator-passing version of intuitionistic natural deduction NJ. More precisely, we obtain this correspondence by applying a series of off-the-shelf program transformations à la Danvy et al. on a type checker for the bidirectional λ-calculus, and get a type checker for the λ-calculus, the proof term assignment of LJT. This functional correspondence revisits the relationship between natural deduction and the sequent calculus by systematically deriving the rules of the latter from the former, and allows to derive new sequent calculus rules from the introduction and elimination rules of new logical connectives.
</p></blockquote>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/syntaxexclamation.wordpress.com/443/\" rel=\"nofollow\"><img src=\"http://feeds.wordpress.com/1.0/comments/syntaxexclamation.wordpress.com/443/\" alt=\"\" border=\"0\" /></a> <img src=\"http://stats.wordpress.com/b.gif?host=syntaxexclamation.wordpress.com&blog=14690639&post=443&subd=syntaxexclamation&ref=&feed=1\" alt=\"\" height=\"1\" border=\"0\" width=\"1\" />" nil nil "c02019e58974fd8d8a02a128e6bd13bb") (9 (20928 8796 213887) "http://anil.recoil.org/2013/06/17/real-world-ocaml-beta-available.html" "Anil Madhavapeddy: Phew, Real World OCaml beta now available." nil "Sun, 16 Jun 2013 23:00:00 +0000" "<p>When I finished writing my PhD, I swore (as most recent graduates do) to never write a thesis again. Instead, life would be a series of pleasantly short papers, interspersed with the occasional journal article, and lots of not-writing-huge-book-activity in general.</p>
<a href=\"http://realworldocaml.org\"><img src=\"http://anil.recoil.org/images/oreilly-cover.gif\" align=\"right\" style=\"padding-left: 15px;\" /></a>
<p>Then <a href=\"http://cufp.org/conference/2011\">CUFP 2011</a> happened, and I find myself in a bar in Tokyo with <a href=\"https://twitter.com/yminsky\">Yaron Minsky</a> and <a href=\"http://monkey.org/~marius\">Marius Eriksen</a>, and a dangerous bet ensued. A few short weeks after that, and Yaron and I are chatting with <a href=\"https://plus.google.com/111219778721183890368\">Jason Hickey</a> in California about writing a book about the language we love. I’m still telling myself that this will never actually happen, but then everyone’s favourite Californirishman <a href=\"http://www.serpentine.com/blog/\">Bryan O’Sullivan</a> puts us in touch with O’Reilly, who published his excellent <a href=\"http://realworldhaskell.org\">Haskell</a> tome.</p>
<p>O’Reilly arranged everything incredibly fast, with our editor <a href=\"http://radar.oreilly.com/andyo\">Andy Oram</a> driving us through the process. We decided early on that we wanted to write a book that had opinions based our personal experience: about how OCaml code should be written, about the standard library involved, and generally making functional programming more accessible. Along the way, we’ve been working incredibly hard on the underlying software platform too, with <a href=\"http://ocaml.janestreet.com\">Jane Street</a>, <a href=\"http://ocamlpro.com\">OCamlPro</a> and my own group <a href=\"http://ocaml.io\">OCaml Labs</a> working together on all the pieces. There’s still a lot of work left to do, of course, but we’re right on track to get all this released very soon now.</p>
<p>So, without further ado, I was very pleased to send this e-mail this morning. (and once again reaffirm my committment to never writing another book ever again. Until next time!)</p>
<blockquote>
<p>Yaron Minsky, Jason Hickey and I are pleased to announce the beta release of our forthcoming O’Reilly book, called “Real World OCaml”, available online at <a href=\"http://realworldocaml.org\">http://realworldocaml.org</a></p>
<p>The book is split into three parts: language concepts, tools and techniques, and understanding the runtime. As promised last year, we are making a public beta available for community review and to help us hunt down inaccuracies and find areas that need more clarification.</p>
<p>We’ve had the book in closed alpha for six months or so and have developed a feedback system that uses Github to record your comments. This lets us follow up to each review with clarifications and keep track of our progress in fixing issues. During alpha, we’ve received over 1400 comments in this fashion (and addressed the vast majority of them!). However, since we anticipate more comments coming in from a public beta, we would request that you read the FAQ to avoid drowning us in repeat comments: <a href=\"http://www.realworldocaml.org/#faq\">http://www.realworldocaml.org/#faq</a>.</p>
<p>(TL;DR followup another comment on Github directly if you can instead of creating a new issue via the web interface)</p>
<p>This release is available in HTML format online at: <a href=\"http://realworldocaml.org\">http://www.realworldocaml.org</a></p>
<p>O’Reilly is currently preparing a Rough Cuts release that will make the beta available as PDF and in popular eBook formats. We anticipate that this will be available later this week, and I’ll send a followup when that happens.</p>
<p>Finally, we would especially like to thank our alpha reviewers. Their <a href=\"https://github.com/ocamllabs/rwo-comments/issues\">feedback</a> has been invaluable to the beta release. The book also includes substantial contributions to individual chapters from Jeremy Yallop (FFI), Stephen Weeks (GC) and Leo White (objects).</p>
<p>If you have any comments that you’d like to send directly by e-mail, please contact us at <a href=\"mailto:rwo-authors@recoil.org\">rwo-authors@recoil.org</a>.</p>
<p>Release notes for beta1:</p>
<ul>
<li>The first-class modules chapter is incomplete, pending some portability improvements to the ocaml-plugins Core library.</li>
<li>The binary serialization chapter is also incomplete, but has just enough to teach you about the Async RPC library.</li>
<li>The installation chapter will be revised in anticipation of the OCaml 4.1 release, and is currently quite source-based.</li>
<li>The packaging and build systems chapter hasn’t been started yet. We’re still deciding whether or not to make this an online pointer rather than a print chapter, since it’s likely to change quite fast.</li>
<li>We are preparing exercises per chapter that are not included in this particular beta release, but will be available online as soon as possible.</li>
<li>The code examples will all be clonable as a separate repository in beta2.</li>
</ul>
<p>best, Yaron, Jason and Anil</p>
</blockquote>" nil nil "2485cf6d99305054a260ce93cd82628a") (8 (20928 8796 211253) "http://gallium.inria.fr/blog/subject-observer-and-self-types-in-java" "GaGallium: Thoughts about subject/observer, publisher/subscriber, and self types in Java" "=?utf-8?Q?Fran=C3=A7ois?= Pottier" "Fri, 14 Jun 2013 08:00:00 +0000" "<p>I am neither a Java aficionado nor a Java guru, but I use it as a vehicle for teaching programming at an undergraduate level.</p>
<p>In this post, I describe a simple situation where the need for a self type arises in Java. I present a way of simulating a self type in Java, and also suggest that in this case, by changing the code slightly, one can avoid the need for a self type in the first place. None of these ideas is new, but perhaps they deserve to be more widely known.</p>
<p>The Java library offers a simple implementation of the subject/observer design pattern. It takes the form of an <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Observable.html\">Observable</a> class, which maintains a list of observers, and an <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Observer.html\">Observer</a> interface, which states (in short) that an observer must be able to receive a message.</p>
<h2 id=\"a-subject-is-essentially-a-publisher\">A subject is essentially a publisher</h2>
<p>In the subject/observer design pattern, an observer is supposed to be notified only when the state of the subject changes. Java's <code>Observable</code> class provides a Boolean field called <code>changed</code>, together with getter and setter methods. The method <code>notifyObservers</code> does nothing unless <code>changed</code> is set, and clears it. This relatively simple logic is independent of the point that interests me, so I will omit it from this discussion.</p>
<p>As a result of this omission, the subject/observer pattern degenerates and becomes essentially a publisher/subscriber pattern, where a subject can decide at any time to send a message to all of its observers.</p>
<p>A key point of interest, though, is that the subject sends itself as the message (or as part of the message).</p>
<h2 id=\"javas-observer-and-observable-are-not-generic\">Java's Observer and Observable are not generic</h2>
<p>Have a look at Java's <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Observer.html\">Observer</a> interface. The <code>update</code> method expects two arguments: the subject that sends the message, and the message itself.</p>
<pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">public</span> <span class=\"kw\">interface</span> Observer {
<span class=\"dt\">void</span> <span class=\"fu\">update</span> (Observable subject, Object message)
}</code></pre>
<p>This is coarse, and slightly unsatisfactory. When someone implements the <code>Observer</code> interface, they will have in mind a specific type of subjects (a subclass of <code>Observable</code>) and a specific type of messages. Thus, they will be forced to use an inelegant and potentially unsafe downcast instruction.</p>
<h2 id=\"a-generic-observer\">A generic Observer</h2>
<p>In order to avoid this, it seems obvious that one should create a parameterized version of the <code>Observer</code> interface.</p>
<pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">public</span> <span class=\"kw\">interface</span> Observer<M> {
<span class=\"dt\">void</span> <span class=\"fu\">notify</span> (M message);
}</code></pre>
<p>I have slightly over-simplified the interface by deciding that <code>notify</code> takes a single parameter: a message. In principle, this is sufficient. If one wishes to convey the identity of the subject to the observer, then one can send the subject itself as the message. If one wishes to convey both the identity of the subject and some piece of data, then the message can be a pair of these two values.</p>
<p>Of course, parameterizing the <code>Observer</code> interface does not solve the problem. It only moves the problem to the implementation of the <code>Subject</code> class.</p>
<h2 id=\"a-basic-subject\">A basic Subject</h2>
<p>We can now implement a basic version of the <code>Subject</code> class. In the definition of <code>notifyObservers</code>, we decide that the message sent to the observers will be <code>this</code>, that is, the subject itself. Thus, it seems that every observer must have type <code>Observer<BasicSubject></code>.</p>
<pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">public</span> <span class=\"kw\">abstract</span> <span class=\"kw\">class</span> BasicSubject {
<span class=\"kw\">private</span> <span class=\"dt\">final</span> List<Observer<BasicSubject>> observers
= <span class=\"kw\">new</span> LinkedList<Observer<BasicSubject>> ();
<span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">addObserver</span> (Observer<BasicSubject> o)
{
observers.<span class=\"fu\">add</span>(o);
}
<span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">notifyObservers</span> ()
{
<span class=\"kw\">for</span> (Observer<BasicSubject> o : observers)
o.<span class=\"fu\">notify</span>(<span class=\"kw\">this</span>);
}
}</code></pre>
<p>This works, but is again not satisfactory. Someone who implements the interface <code>Observer<BasicSubject></code> will again be forced to cast from the type <code>BasicSubject</code> down to some specific subclass.</p>
<h2 id=\"what-am-i-or-the-need-for-a-self-type\">What am I? or, the need for a self type</h2>
<p>A Scala programmer would know how to solve this problem. We need a self type. That is, we would like the observers to have type <code>Observer<Self></code>, where <code>Self</code> is the type of <code>this</code>. In other words, <code>Self</code> is an as-yet-undetermined subtype of <code>Subject</code>.</p>
<p>In Scala, one can introduce <code>Self</code> as a type parameter and constrain it to stand for the type of <code>this</code>, via a constraint of the form <code>this : Self => ...</code>.</p>
<p>In OCaml, the same thing is possible. (Thanks to Gabriel Scherer for pointing this out.) The subject/observer pattern can be implemented as follows:</p>
<pre class=\"sourceCode ocaml\"><code class=\"sourceCode ocaml\"><span class=\"kw\">class</span> <span class=\"kw\">type</span> ['m] observer = <span class=\"kw\">object</span>
<span class=\"kw\">method</span> notify : 'm -> <span class=\"dt\">unit</span>
<span class=\"kw\">end</span>
<span class=\"kw\">class</span> subject = <span class=\"kw\">object</span> (self : 'self)
<span class=\"kw\">val</span> <span class=\"kw\">mutable</span> observers : 'self observer <span class=\"dt\">list</span> = []
<span class=\"kw\">method</span> add_observer o =
observers <- o :: observers
<span class=\"kw\">method</span> notify_observers () =
List<span class=\"kw\">.</span>iter (<span class=\"kw\">fun</span> o -> o#notify self) observers
<span class=\"kw\">end</span></code></pre>
<p>Scala and OCaml are cool, but I teach Java, so let's go back to it.</p>
<h2 id=\"simulating-a-self-type\">Simulating a Self type</h2>
<p>As of version 7, Java does not have this feature, but we can simulate it by declaring an abstract method, named <code>self</code>, whose return type is <code>Self</code>, and which we intend to implement (in a concrete subclass) by <code>return this</code>.</p>
<p>The code is now:</p>
<pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">public</span> <span class=\"kw\">abstract</span> <span class=\"kw\">class</span> Subject<Self> {
<span class=\"kw\">private</span> <span class=\"dt\">final</span> List<Observer<Self>> observers
= <span class=\"kw\">new</span> LinkedList<Observer<Self>> ();
<span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">addObserver</span> (Observer<Self> o)
{
observers.<span class=\"fu\">add</span>(o);
}
<span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">notifyObservers</span> ()
{
<span class=\"kw\">for</span> (Observer<Self> o : observers)
o.<span class=\"fu\">notify</span>(<span class=\"fu\">self</span>());
}
<span class=\"kw\">public</span> <span class=\"kw\">abstract</span> Self <span class=\"fu\">self</span> ();
}</code></pre>
<p>We could add the constraint that <code>Self extends Subject<Self></code>, but it is not required here.</p>
<p>When we later implement a concrete subclass of <code>Subject</code>, say <code>Temperature</code>, we implement the method <code>self</code>, as follows.</p>
<pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">public</span> <span class=\"kw\">class</span> Temperature <span class=\"kw\">extends</span> Subject<Temperature> {
@Override <span class=\"kw\">public</span> Temperature <span class=\"fu\">self</span> ()
{
<span class=\"kw\">return</span> <span class=\"kw\">this</span>;
}
}</code></pre>
<p>This may seem a bit heavy, and it is indeed so, but at least we have been able to simulate a self type. One can now implement the interface <code>Observer<Temperature></code> without a downcast.</p>
<h2 id=\"publishers-are-simpler-than-subjects\">Publishers are simpler than subjects</h2>
<p>The need for self types arises because a subject sends itself as a message to an observer. If we did not make this decision at the level of the super-class, the code would be simpler, and we would still be able to make this decision at the level of the subclass.</p>
<p>Let's see.</p>
<p>A subject becomes just a publisher, and the type parameter <code>Self</code> becomes <code>M</code>, the type of the message that is sent. The type <code>M</code> is entirely undetermined at this point.</p>
<pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">public</span> <span class=\"kw\">abstract</span> <span class=\"kw\">class</span> Publisher<M> {
<span class=\"kw\">private</span> <span class=\"dt\">final</span> List<Observer<M>> observers
= <span class=\"kw\">new</span> LinkedList<Observer<M>> ();
<span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">addObserver</span> (Observer<M> o)
{
observers.<span class=\"fu\">add</span>(o);
}
<span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">notifyObservers</span> (M message)
{
<span class=\"kw\">for</span> (Observer<M> o : observers)
o.<span class=\"fu\">notify</span>(message);
}
}</code></pre>
<p>When we later implement a concrete subclass of <code>Publisher</code>, say <code>Pressure</code>, we instantiate <code>M</code> with <code>Pressure</code> itself. Then, we implement a new version of <code>notifyObservers</code>, which does not take a parameter, by invoking the inherited <code>notifyObservers</code> with <code>this</code> as a parameter.</p>
<pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">public</span> <span class=\"kw\">class</span> Pressure <span class=\"kw\">extends</span> Publisher<Pressure> {
<span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">notifyObservers</span> ()
{
<span class=\"fu\">notifyObservers</span>(<span class=\"kw\">this</span>);
}
}</code></pre>
<p>The end result is the same as in the <code>Subject/Temperature</code> example. However, because we no longer need a <code>self</code> method, this version of the code is perhaps easier to explain to a non-expert programmer.</p>" nil nil "f96e614e300644f9e235406adecb6c54") (7 (20928 8796 209491) "http://jobs.github.com/positions/0a9333c4-71da-11e0-9ac7-692793c00b45" "Github OCaml jobs: Full Time: Software Developer (Functional Programming) at Jane Street in New York, NY; London, UK; Hong Kong" nil "Thu, 13 Jun 2013 12:41:20 +0000" "<p>Software Developer (Functional Programming)</p>
<p>Jane Street is looking to hire great software developers with an interest in functional programming. OCaml, a statically typed functional programming with similarities to Haskell, Scheme, Erlang, F# and SML, is our language of choice. We’ve got the largest team of OCaml developers in any industrial setting, and probably the world’s largest OCaml codebase. We use OCaml for running our entire business, supporting everything from research to systems administration to trading systems. If you’re interested in seeing how functional programming plays out in the real world, there’s no better place.</p>
<p>The atmosphere is informal and intellectual. There is a focus on education, and people learn about software and trading, both through formal classes and on the job. The work is challenging, and you get to see the practical impact of your efforts in quick and dramatic terms. Jane Street is also small enough that people have the freedom to get involved in many different areas of the business. Compensation is highly competitive, and there’s a lot of room for growth.</p>
<p>You can learn more about Jane Street and our technology from our main site, janestreet.com. You can also look at a a talk given at CMU about why Jane Street uses functional programming (<a href=\"http://ocaml.janestreet.com/?q=node/61\">http://ocaml.janestreet.com/?q=node/61</a>), our programming blog (<a href=\"http://ocaml.janestreet.com\">http://ocaml.janestreet.com</a>), and some papers we’ve written about our experience using functional programming in the real world (<a href=\"http://janestreet.com/technology/articles.php\">http://janestreet.com/technology/articles.php</a>).</p>
<p>We also have extensive benefits, including:</p>
<ul>
<li>90% book reimbursement for work-related books</li>
<li>90% tuition reimbursement for continuing education</li>
<li>Excellent, zero-premium medical and dental insurance</li>
<li>Free lunch delivered daily from a selection of restaurants</li>
<li>Catered breakfasts and fresh brewed Peet’s coffee</li>
<li>An on-site, private gym in New York with towel service</li>
<li>Kitchens fully stocked with a variety of snack choices</li>
<li>Full company 401(k) match up to 6% of salary, vests immediately</li>
<li>Three weeks of paid vacation for new hires in the US</li>
<li>16 weeks fully paid maternity/paternity leave for primary caregivers, plus additional unpaid leave</li>
</ul>
<p>More information at <a href=\"http://janestreet.com/workplace/benefits.php\">http://janestreet.com/workplace/benefits.php</a></p>" nil nil "9b77b2376a625ae2fe0a4bbb399eef40") (6 (20928 8796 209005) "https://forge.ocamlcore.org/projects/mlorg/" "OCamlCore Forge Projects: mlorg" nil "Thu, 13 Jun 2013 09:18:56 +0000" "mlorg is a parser written in OCaml for org-mode files (emacs mode). The goal of mlorg is to provide the user with the tools to export freely his documents without relying on emacs and to access to the information contained in them." nil nil "00d099e6adc83814a0597c5715765b7c") (5 (20928 8796 208781) "https://forge.ocamlcore.org/projects/hdfs/" "OCamlCore Forge Projects: ocaml-hdfs" nil "Wed, 12 Jun 2013 06:19:15 +0000" "Bindings to HDFS" nil nil "2bed7620dd57ad6760cce1dc80a4956e") (4 (20928 8796 208545) "http://alan.petitepomme.net/cwn/2013.06.11.html" "Caml Weekly News: Caml Weekly News, 11 Jun 2013" nil "Tue, 11 Jun 2013 12:00:00 +0000" "Ocamlnet-3.6.5 / post-doc position at MSR-Inria / ocaml-ctypes, a library for calling C functions directly from OCaml / Core Suite 109.27.00 + core_kernel / OCaml on zLinux / Use-site variance in OCaml / New Book: OCaml from the Very Beginning / Deadline extension: OCaml 2013, new deadline on June 18 (anywhere on earth) / Findlib-1.4 / Other Caml News" nil nil "05fc370d00abf36d54ade9fc37bbaec0") (3 (20928 8796 208271) "http://coherentpdf.com/blog/?p=56" "Coherent Graphics: New book: OCaml from the Very Beginning" nil "Mon, 10 Jun 2013 10:18:28 +0000" "I've written a concise but self-contained introduction to writing  computer programs with OCaml, suitable for the talented beginner to  programming, or someone trying functional programming or OCaml for the  first time.
On your local Amazon: http://asin.info/a/0957671105
E-book: http://www.ocaml-book.com
Sample chapters also at http://www.ocaml-book.com
Thanks to all those who reviewed and proof-read ..." nil nil "0aea2ae33416453dcd698d674ab25a4c") (2 (20928 8796 207936) "http://ocaml-book.com/blog/2013/6/6/now-available-on-amazon" "OCaml Book: Now available on Amazon" "John Whitington" "Fri, 07 Jun 2013 14:21:23 +0000" "<p>OCaml from the Very Beginning (204pp, paperback) is now available <a href=\"http://www.amazon.com/OCaml-Very-Beginning-John-Whitington/dp/0957671105%3FSubscriptionId%3D0ENGV10E9K9QDNSJ5C82%26tag%3Dcoherentpdfco-21%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0957671105\">on Amazon</a> for $34.99 / €29.99 / £24.99, as well as an e-book from <a href=\"http://www.ocaml-book.com/\">ocaml-book.com</a> for $14.99. Here are <a href=\"http://www.ocaml-book.com/\">preview chapters</a> and <a href=\"http://ocaml-book.com/s/ocaml-from-the-very-beginning-examples-and-exercises.zip\">a .zip of the examples and exercises</a>. </p><p>Here's the blurb: <br /></p><blockquote></blockquote><blockquote>In <em>OCaml from the Very Beginning</em> John Whitington takes a no-prerequisites approach
to teaching a modern general-purpose programming language. Each small, self-contained chapter introduces a new topic, building until the reader can write quite
substantial programs. There are plenty of questions and, crucially, worked answers
and hints.</blockquote><blockquote><em>OCaml from the Very Beginning</em> will appeal both to new programmers, and
experienced programmers eager to explore functional languages such as OCaml. It
is suitable both for formal use within an undergraduate or graduate curriculum,
and for the interested amateur.</blockquote><p></p><p>Please do review the book on Amazon if you have the chance.</p><p> </p>" nil nil "bff78843ebd0e25c29b788ac97780522") (1 (20928 8796 206281) "http://camlspotter.blogspot.com/2013/06/ocamlscope-new-ocaml-api-search-by.html" "Caml Spotting: =?utf-8?Q?OCaml=E2=97=8EScope?= : a new OCaml API search by names and types" "Jun Furuse" "Thu, 06 Jun 2013 17:59:00 +0000" "The first public preview version of OCaml◎Scope is now available at <a href=\"http://oco.furuse.info/\">http://oco.furuse.info/</a>.<br /><br />It supports:<br /><br /><ul><li>Fast: on memory DB.</li><li>Friendly with OCamlFind packages: names are prefixed with the OCamlFind package name it belongs to. </li><li>Friendly with OPAM: each OCamlFind package knows which OPAM package installed it.</li><li>Auto extraction of OCamlDoc comments.</li><li>Edit distance based path and type search.</li></ul>Currently, the state of OCaml◎Scope is still at the proof-of-concept level. Many things to be done, search result tweak, UI, tools, etc... but so far, I am happy with its search speed and rather small memory consumption. Currently it has<span style=\"font-size: 14px;\"> nearly 150k entries (100 OCamlFind packages including lablgtk, core, batteries, ocamlnet and eliom) takes 2secs maximum per search.</span><br /><div><span style=\"font-size: 14px;\"><br /></span><span style=\"font-size: 14px;\">P.S.  I moved the site to http://oco.furuse.info/ . This will be again moved to heroku soon.</span></div>" nil nil "ab5aa512eee970230868639151abe567")))