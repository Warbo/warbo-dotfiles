;;-*-coding: utf-8;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '())

(define-abbrev-table 'Custom-mode-abbrev-table '())

(define-abbrev-table 'agda2-mode-abbrev-table '())

(define-abbrev-table 'awk-mode-abbrev-table '())

(define-abbrev-table 'c++-mode-abbrev-table '())

(define-abbrev-table 'c-mode-abbrev-table '())

(define-abbrev-table 'change-log-mode-abbrev-table '())

(define-abbrev-table 'comint-mode-abbrev-table '())

(define-abbrev-table 'completion-list-mode-abbrev-table '())

(define-abbrev-table 'coq-goals-mode-abbrev-table '())

(define-abbrev-table 'coq-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'coq-response-mode-abbrev-table '())

(define-abbrev-table 'coq-shell-mode-abbrev-table '())

(define-abbrev-table 'display-time-world-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'eshell-mode-abbrev-table '())

(define-abbrev-table 'fundamental-mode-abbrev-table '())

(define-abbrev-table 'global-abbrev-table '())

(define-abbrev-table 'grep-mode-abbrev-table '())

(define-abbrev-table 'haskell-ghci-mode-abbrev-table '())

(define-abbrev-table 'haskell-mode-abbrev-table '())

(define-abbrev-table 'helm-grep-mode-abbrev-table '())

(define-abbrev-table 'help-mode-abbrev-table '())

(define-abbrev-table 'html-mode-abbrev-table '())

(define-abbrev-table 'idl-mode-abbrev-table '())

(define-abbrev-table 'image-dired-display-image-mode-abbrev-table '())

(define-abbrev-table 'image-dired-thumbnail-mode-abbrev-table '())

(define-abbrev-table 'inferior-python-mode-abbrev-table '())

(define-abbrev-table 'internal-ange-ftp-mode-abbrev-table '())

(define-abbrev-table 'java-mode-abbrev-table '())

(define-abbrev-table 'js-mode-abbrev-table '())

(define-abbrev-table 'jython-mode-abbrev-table '())

(define-abbrev-table 'lisp-mode-abbrev-table '())

(define-abbrev-table 'literate-haskell-mode-abbrev-table '())

(define-abbrev-table 'maude-mode-abbrev-table
  '(
    ("assoc" "[assoc]" maude-mode-join-attributes 0)
    ("associative" "[assoc]" maude-mode-join-attributes 0)
    ("comm" "[comm]" maude-mode-join-attributes 0)
    ("commutative" "[comm]" maude-mode-join-attributes 0)
    ("ctor" "[ctor]" maude-mode-join-attributes 0)
    ("ditto" "[ditto]" maude-mode-join-attributes 0)
    ("endfm" "endfm" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("endfth" "endfth" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("endm" "endm" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("endom" "endom" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("endoth" "endoth" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("endth" "endth" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("endv" "endv" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("fmod" "fmod" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("format" "[format ()]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "format (")) 0)
    ("frozen" "[frozen]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "frozen")) 0)
    ("fth" "fth" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("gather" "[gather ()]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "gather (")) 0)
    ("id" "[id:]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "id:")) 0)
    ("idem" "[idem]" maude-mode-join-attributes 0)
    ("iter" "[iter]" maude-mode-join-attributes 0)
    ("label" "[label]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "label")) 0)
    ("left" "[left id:]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "id:")) 0)
    ("list" "[assoc right id:]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "id:")) 0)
    ("memo" "[memo]" maude-mode-join-attributes 0)
    ("metadata" "[metadata]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "metadata")) 0)
    ("mod" "mod" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("mset" "[comm assoc id:]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "id:")) 0)
    ("nonexec" "[nonexec]" maude-mode-join-attributes 0)
    ("omod" "omod" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("oth" "oth" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("otherwise" "[owise]" maude-mode-join-attributes 0)
    ("owise" "[owise]" maude-mode-join-attributes 0)
    ("poly" "[poly]" maude-mode-join-attributes 0)
    ("prec" "[prec]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "prec")) 0)
    ("right" "[right id:]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "id:")) 0)
    ("set" "[comm assoc idem]" maude-mode-join-attributes 0)
    ("special" "[special ()]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "special (")) 0)
    ("strat" "[strat ()]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "strat (")) 0)
    ("th" "th" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("view" "view" (lambda nil (save-excursion (indent-line-to 0))) 0)
   ))

(define-abbrev-table 'maude-running-mode-abbrev-table '())

(define-abbrev-table 'objc-mode-abbrev-table '())

(define-abbrev-table 'occur-edit-mode-abbrev-table '())

(define-abbrev-table 'occur-mode-abbrev-table '())

(define-abbrev-table 'package-menu-mode-abbrev-table '())

(define-abbrev-table 'pike-mode-abbrev-table '())

(define-abbrev-table 'process-menu-mode-abbrev-table '())

(define-abbrev-table 'prog-mode-abbrev-table '())

(define-abbrev-table 'proof-goals-mode-abbrev-table '())

(define-abbrev-table 'proof-mode-abbrev-table '())

(define-abbrev-table 'proof-response-mode-abbrev-table '())

(define-abbrev-table 'proof-shell-mode-abbrev-table '())

(define-abbrev-table 'proof-splash-mode-abbrev-table '())

(define-abbrev-table 'proof-universal-keys-only-mode-abbrev-table '())

(define-abbrev-table 'ps-mode-abbrev-table '())

(define-abbrev-table 'ps-run-mode-abbrev-table '())

(define-abbrev-table 'python-mode-abbrev-table '())

(define-abbrev-table 'reb-lisp-mode-abbrev-table '())

(define-abbrev-table 'reb-mode-abbrev-table '())

(define-abbrev-table 'scomint-mode-abbrev-table '())

(define-abbrev-table 'select-tags-table-mode-abbrev-table '())

(define-abbrev-table 'sgml-mode-abbrev-table '())

(define-abbrev-table 'shell-mode-abbrev-table '())

(define-abbrev-table 'snippet-mode-abbrev-table '())

(define-abbrev-table 'special-mode-abbrev-table '())

(define-abbrev-table 'tabulated-list-mode-abbrev-table '())

(define-abbrev-table 'tar-mode-abbrev-table '())

(define-abbrev-table 'tetris-mode-abbrev-table '())

(define-abbrev-table 'text-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-view-mode-abbrev-table '())

