;; xbindkeys uses Guile, so this configuration file is written in Scheme

;; We tell xbindkeys to handle particular X events (eg. key presses) using
;; Scheme functions. We generally use two kinds of handlers, which I'll call
;; "actions" and "listeners".
;; When an action is triggered, something happens (usually executing a command).
;; When a listener is triggered, a new set of bindings become active. When the
;; listener is stopped (eg. when the corresponding key is released) the old
;; bindings are put back.
;; Listeners are useful for "chords", ie. pressing multiple keys at once.
;; Modifier keys (Alt, Ctrl, Super, etc.) appear in event IDs, so they don't
;; need their own listeners.

(define (primary-bindings)
        "This is our top-level listener. It sets our default handlers."
        (ungrab-all-keys)
        (remove-all-keys)
        (grab-all-keys)

        ;; Put global actions here. They have the form:
        ;; (xbindkey-function '(event-id) my-function)
        ;; You can find event IDs using "xbindkeys -k"

        ;; Put listeners here
        (xbindkey-function '("b:9") second-binding)  
        (xbindkey-function '("b:10") primary-10) 
        (xbindkey-function '("b:11") tertiary-binding) 
        (xbindkey-function '("b:12") primary-12) 
        (xbindkey-function '("b:13") primary-13)
        (xbindkey-function '("b:14") primary-14)
        (xbindkey-function '("b:16") primary-16)
        (xbindkey-function '("b:17") primary-17))

;; To simulate key presses we use the xte command.
;; WARNING: xbindkeys will handle events triggered by xte, so handlers which
;; handle their own actions will cause infinite loops!
;;
;; If you want to re-trigger your event, so it "passes through" to another
;; application, do this:
;;
;; (ungrab-all-keys)
;; (perform-your-action)
;; (grab-all-keys)

(define (xte . keys)
""
        (let (s-quote (lambda (s)
                         (string-join '("'" s "'"))))
             (run-command (string-join ("xte" . (map s-quote keys))))))

(define (display-n str) 
  "Display a string then newline" 
  (display str) 
  (newline)) 

;; Helpers for Drupal's SimpleTest module

(define (next-test)
  "Switches to the next SimpleTest page. Assumes we're in Chromium, on a SimpleTest page"
  (run-command (string-join ("xte"

                             ;; Select the address bar
                             "'keydown Ctrl_L' 'key l' 'keyup Ctrl_L'"

                             ;; Tab to "Previous"
                             "'key Tab'"

                             ;; Tab to "Next"
                             "'key Tab'")
                            " "))

(define (secondary-12) ;;UNASSIGNED 
  (display-n "Code Me")) 

(define (secondary-16) 
  "Previous klipper history item by Ctrl + Alt + Up keyboard shortcut" 
  (run-command "xte 'keydown Control_L' 'keydown Alt_L' 'key Up' 'keyup Alt_L' 'keyup Control_L'")) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

(define (reset-to-primary-binding) 
  "reset primary binding" 
  (primary-binding) 
  (grab-all-keys)) 

(define (second-binding)
  "Bind all secondary binding" 
  (let ((modkey-used #f))
    (ungrab-all-keys) 
    (remove-all-keys) 
    (xbindkey-function '("b:1") 
                       (lambda () (secondary-1) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:2") 
                       (lambda () (secondary-2) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:3") 
                       (lambda () (secondary-3) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:4") 
                       (lambda () (secondary-4) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:5") 
                       (lambda () (secondary-5) 
                               (set! modkey-used #t))) 
    ;; 8,10,11 with 9 as modify key requires rubber fingers 
    (xbindkey-function '("b:12") 
                       (lambda () (secondary-12) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:13") 
                       (lambda () (secondary-13) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:14") 
                       (lambda () (secondary-14) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:16") 
                       (lambda () (secondary-16) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:17") 
                       (lambda () (secondary-17) 
                               (set! modkey-used #t))) 
    (xbindkey-function '(release "b:9") 
                       (lambda () 
                         (if (not modkey-used) 
                             (primary-9)) 
                         (set! modkey-used #f) 
                         (reset-to-primary-binding)))
    (grab-all-keys))) 

(define (tertiary-binding) ;;bindings for the 11th button 
  "Bind all tertiary binding" 
  (let ((modkey-used #f)) 
    (ungrab-all-keys) 
    (remove-all-keys) 
    (xbindkey-function '("b:1") 
                       (lambda () (tertiary-1) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:2") 
                       (lambda () (tertiary-2) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:3") 
                       (lambda () (tertiary-3) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:4") 
                       (lambda () (tertiary-4) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:5") 
                       (lambda () (tertiary-5) 
                               (set! modkey-used #t))) 
    ;; 8,9,10 with 11 as modify key requires rubber fingers 
    (xbindkey-function '("b:12") 
                       (lambda () (tertiary-12) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:13") 
                       (lambda () (tertiary-13) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:14") 
                       (lambda () (tertiary-14) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:16") 
                       (lambda () (tertiary-16) 
                               (set! modkey-used #t))) 
    (xbindkey-function '("b:17") 
                       (lambda () (tertiary-17) 
                               (set! modkey-used #t))) 
    (xbindkey-function '(release "b:11") 
                       (lambda () 
                         (if (not modkey-used) 
                             (primary-11)) 
                         (set! modkey-used #f) 
                         (reset-to-primary-binding))) 
    (grab-all-keys))) 

(debug)
(primary-binding)
