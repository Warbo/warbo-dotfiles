#!/usr/bin/env bash

cd /home/chris/Writing/TransferReport
ERR=0

ALL="" # Build up the whole TeX document
for FILE in *.tex
do
    ALL=$(echo "$ALL"; cat "$FILE")
    if grep "TODO[^{]" < "$FILE" > /dev/null
    then
        NUM=$(grep -c TODO < "$FILE")
        echo "Found $NUM undated TODOs in $FILE" >> /dev/stderr
        ERR=1
    fi

    NOW=$(date +%s)
    while read -r TODO
    do
        D=$(echo "$TODO" | sed -e 's/.*{\(.*\)\}/\1/g')
        S=$(date --date="$D" +%s)
        [[ "$S" -gt "$NOW" ]] || {
            ERR=1
            echo "Found TODO dated '$D' in '$FILE'" >> /dev/stderr
        }
    done < <(grep -o "TODO{[^}]*}" < "$FILE")

    if grep CITE < $FILE > /dev/null
    then
        NUM=$(grep -c CITE < "$FILE")
        echo "Found $NUM missing citations in $FILE" >> /dev/stderr
        ERR=1
    fi

    for MACRO in qcheck qspec hspec
    do
        if grep -v "newcommand" < "$FILE" | grep "\\${MACRO}[^{]" > /dev/null
        then
            echo "Put {} after \\$MACRO in $FILE"
            ERR=1
        fi
    done
done

echo "Rendering report.tex" >> /dev/stderr
RENDER=$(./render.sh 2>&1) || {
    echo "Couldn't render report.tex"
    ERR=1
}

echo "Checking output of renderer" >> /dev/stderr
BIBSTART=$(echo "$RENDER" | grep -n "RUNNING bibtex" | head -n1 | cut -d ':' -f 1)
if [[ -z "$BIBSTART" ]]
then
    echo "$RENDER"
    ERR=1
    echo "Bibtex didn't run?" >> /dev/stderr
else
    WARNINGS=$(echo "$RENDER" | tail -n$BIBSTART | grep -ai "warning")

    # Citations take two passes, so double-check
    CITES=$(echo "$WARNINGS" | grep 'Citation `'  | sed -e 's/.*`\(.*\)'"'.*/\1/g")
    while read -r CITE
    do
        grep "^@[^{]*{$CITE,$" < ~/Writing/Bibtex.bib > /dev/null ||
        {
            ERR=1
            echo "Citation '$CITE' missing" >> /dev/stderr
        }
    done < <(echo "$CITES")

    # Check for non-citation warnings
    NONCIT=$(echo "$WARNINGS" | grep -v 'Citation `'                      |
                                grep -v "There were undefined citations." |
                                grep -v "Citation(s) may have changed.")
    [[ -z "$NONCIT" ]] || {
        ERR=1
        echo "$NONCIT" >> /dev/stderr
        echo "There were warnings from the renderer" >> /dev/stderr
    }
fi

if [[ -e report.pdf ]]
then
    PAGES=$(pdfinfo report.pdf | grep Pages | grep -o "[0-9]*$")
    TOTAL=60
    REMAINING=$(( TOTAL - PAGES ))
    NOW=$(date +%s)
    DEADLINE=$(date -d "2015-12-01" +%s)
    DAYS=$(( (DEADLINE - NOW) / (60 * 60 * 24) ))
    SHOULD=$(( TOTAL - DAYS ))
    if [[ "$REMAINING" -gt "$DAYS" ]]
    then
        echo "report.pdf should have $SHOULD pages by now, only has $PAGES" >> /dev/stderr
    else
        echo "Page target is $SHOULD, you have $PAGES!"
    fi
fi

exit "$ERR"
