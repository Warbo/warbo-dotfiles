#!/usr/bin/env bash

function data {
    while read -r CBL
    do
        if grep "test-suite" < "$CBL" > /dev/null
        then
            echo "$CBL"
        fi
    done < <(locate "/home/chris/Programming/*.cabal" |
             grep -v "/git-html/"                     |
             grep -v "/ghc/"                          |
             grep -v "/quickspec")
}

function cached {
    ./helpers/cache.sh "cabal-test" < <(data)
}

cached > /dev/null

if CBL=$(./helpers/nthLine.sh "$0" "cabal-test" < <(cached))
then
    echo "Testing '$CBL'"
    DIR=$(dirname "$CBL")
    FILE=$(basename "$CBL")

    TMP=$(mktemp -d "cabal-test-temp-XXXXX")
    pushd "$TMP"
    SUB=$(git clone "$DIR" 2>&1 1> /dev/null |
          grep "Cloning into"                |
          sed -e "s/^.*'\([^']*\)'.*$/\1/g")

    pushd "$SUB"

    git remote rm origin

    if ! hsConfig
    then
        echo "hsConfig in '$DIR'" >> /dev/stderr
        exit 1
    fi

    ERR=0
    while read -r TEST
    do
        cabal test "$TEST" || {
            echo "Test suite '$TEST' in '$DIR' failed" >> /dev/stderr
            ERR=1
        }
    done < <(grep "test-suite" < "$FILE" | sed -e 's/^test-suite *\(.*\)$/\1/g')

    popd
    popd

    rm -rf "$TMP"

    exit "$ERR"
else
    # No index give, check indices match up
    CACHECOUNT=$(cached | wc -l)
    FILECOUNT=$(ls scripts/*.cabal-test | wc -l)
    if [[ "$CACHECOUNT" -eq "$FILECOUNT" ]]
    then
        echo "Got enough tests to cover cabal-test counts"
    else
        echo "Have $FILECOUNT test(s) for $CACHECOUNT files" >> /dev/stderr
        exit 1
    fi
fi
