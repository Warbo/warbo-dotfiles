#!/usr/bin/env bash

function data {
    while read -r PROJECT
    do
        find "$PROJECT" -maxdepth 1 -name "*.cabal"
    done < <(my_haskell)
}

function cached {
    ./helpers/cache.sh "cabal-nixable" < <(data)
}

# Check how we were called
NAME=$(basename "$0" | cut -c 15-)

ERR=0
if [[ -z "$NAME" ]]
then
    echo "No name given, check names match up"
    while read -r LINE
    do
        GOT=$(./helpers/mkName.sh "$LINE")
        echo "Looking for test for '$LINE'"
        FILE="cabal-nixable.$GOT"
        [[ -e "scripts/$FILE" ]] || {
            echo "No such file '$FILE', making it"
            pushd scripts                &&
                ln -s cabal-nixable "$FILE"  &&
                popd                         &&
                touch "results/stdout/$FILE" &&
                touch "results/stderr/$FILE"
        } || ERR=1
    done < <(cached)
else
    echo "Checking '$NAME'" >> /dev/stderr
    EXIST=0
    while read -r LINE
    do
        FOUND=$(./helpers/mkName.sh "$LINE")
        [[ "x$FOUND" = "x$NAME" ]] || continue
        echo "Trying $LINE"
        DIR=$(dirname "$LINE")
        pushd "$DIR"
        cabal clean
        hsConfig || exit 1
        popd
    done < <(cached)
fi

exit "$ERR"
